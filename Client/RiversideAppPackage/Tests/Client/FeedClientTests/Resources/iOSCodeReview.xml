<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0">
<channel>
<title>Ô£ø iOS Code Review | Curated code improvement tips</title>
<description type="html"><![CDATA[Bi-weekly newsletter amplifying code improvement tips from the Apple developer community in a bite-sized format. Swift, Objective-C, iOS, macOS, SwiftUI, UIKit and more.  Curated by Marina Gornostaeva and published every other Thursday. ]]></description>
<link>https://ioscodereview.com</link>
<image>
    <url>https://ioscodereview.com/favicon.png</url>
    <title>Ô£ø iOS Code Review Newsletter</title>
    <link>https://ioscodereview.com</link>
</image>
<lastBuildDate>Mon, 25 Dec 2023 12:02:01 +0100</lastBuildDate>
<atom:link href="https://ioscodereview.com" rel="self" type="application/rss+xml"/>
<ttl>60</ttl>

    <item>
        <title><![CDATA[ Issue #61 ]]></title>
        <description><![CDATA[ Hi there, welcome to the 61st issue of iOS Code Review! Here's to another round of curated learnings ‚ò∫Ô∏è This is the last issue of 2023 - I wish you happy holidays, and see you in January ‚òÉÔ∏è

What if you could instantly resolve a critical issue in prod, with a single ]]></description>
        <link>https://ioscodereview.com/issues/issue-61/</link>
        <guid isPermaLink="false">6571b6ebe2fb0d000167d8b1</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 07 Dec 2023 14:38:43 +0100</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there, welcome to the 61st issue of iOS Code Review! Here's to another round of curated learnings ‚ò∫Ô∏è This is the last issue of 2023 - I wish you happy holidays, and see you in January ‚òÉÔ∏è</p><div class="kg-card kg-callout-card kg-callout-card-yellow"><div class="kg-callout-text">What if you could instantly resolve a critical issue in prod, with a single click? Rollbacks by Runway allows you to do just that. <br><br><b><strong style="white-space: pre-wrap;">Runway</strong></b> automatically re-signs your previous live production build and preps it for a possible rollback release ‚Äî including preemptive submission for review ‚Äî to remove all sources of stress and delay. Runway is the first platform to enable rollbacks for native mobile apps.<br><br><a href="https://www.runway.team/rollbacks?ref=ioscodereview.com" rel="noreferrer">Try Runway for free</a></div></div><h2 id="uiviewcontroller-viewisappearing">UIViewController viewIsAppearing</h2><p>Unlike <code>viewWillAppear</code>,&nbsp;by the time&nbsp;<code>viewIsAppearing</code>&nbsp;is called, the view has been added to the view hierarchy, has accurate geometry, including size and safe area insets.&nbsp;Available from iOS 13! <br>Using this method, it's a breeze to add animations to the content of the view controller that have to execute when the view first gets shown.</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://ohmyswift.com/blog/2023/12/01/from-viewwillappear-to-viewisappearing-perfecting-your-ios-view-transitions/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">From viewWillAppear to viewIsAppearing - Perfecting Your iOS View Transitions</div><div class="kg-bookmark-description">In WWDC23, Apple introduced a nuanced addition to the UIViewController lifecycle: viewIsAppearing. This instance method is a game-changer for developers looking to fine-tune the presentation and layout of their views. Let‚Äôs explore how this method enhances the way we build responsive and dynamic interfaces.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://ohmyswift.com/blog/assets/images/favicons/apple-touch-icon.png" alt><span class="kg-bookmark-author">OhMySwift</span><span class="kg-bookmark-publisher">Rizwan Ahmed A</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://ohmyswift.com/blog/assets/images/viewIsAppearing/facebook.png" alt></div></a></figure><h2 id="catching-memory-leaks-on-ci">Catching memory leaks on CI</h2><p>It's annoying how easy it is to accidentally introduce memory leaks into our code. Just a little <code>self</code> sneaking into a closure past a code review, or an omitted <code>self</code> causing troubles when passing a method in place of a closure. We can add checks to unit tests verifying certain objects get deallocated, but it's not nearly possible to catch everything. We can use the <em>leaks</em> instrument (included with Xcode) to see if the app has any memory leaks at any given moment. </p><p>Here's a brilliant approach to automating catching leaks on CI:<br><em>1. Use a UI testing framework to simulate the flow in the application<br>2. Use the&nbsp;<code>leaks</code>&nbsp;tool provided by Apple to generate a&nbsp;<code>memgraph</code>.<br>3. Write a script to process the&nbsp;<code>generated memgraph</code>&nbsp;to check for leaks. If there any leaks are found, use&nbsp;<code>Danger</code>&nbsp;to mark the PR as failed or post a message to Slack.</em></p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://levelup.gitconnected.com/automating-memory-leak-detection-with-ci-integration-for-ios-380f08a55f0b?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Automating Memory Leak Detection with CI Integration for iOS</div><div class="kg-bookmark-description">A solution to automate memory leak detection in iOS Development</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://cdn-static-1.medium.com/_/fp/icons/Medium-Avatar-500x500.svg" alt><span class="kg-bookmark-author">Level Up Coding</span><span class="kg-bookmark-publisher">Tuan Hoang (Eric)</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://miro.medium.com/v2/resize:fit:1200/1*aJxlDCpKAkwSY4SV1zCYLQ.jpeg" alt></div></a></figure><h2 id="opening-sfsafariviewcontroller-cleanly">Opening SFSafariViewController, cleanly</h2><p>In SwiftUI, we can utilize  <code>.openURL</code> environment variable to catch any element trying to open a link, and, for example, open it in an embedded browser instead. Moving that logic into a view modifier, the usage site becomes so clean ü§© Check out Antoine's article for the full code. </p><pre><code>struct SwiftUILinksView: View {
    var body: some View {
        VStack(spacing: 20) {
            /// Creating a link using the `Link` View:
            Link("SwiftUI Link Example", destination: URL(string: "https://www.rocketsim.app")!)

            /// Creating a link using markdown:
            Text("Markdown link example: [RocketSim](https://www.rocketsim.app)")
        }
            /// This catches any outgoing URLs.
            .handleOpenURLInApp()
    }
}</code></pre><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://www.avanderlee.com/swiftui/sfsafariviewcontroller-open-webpages-in-app/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">SFSafariViewController in SwiftUI: Open webpages in-app</div><div class="kg-bookmark-description">Use SFSafariViewController in SwiftUI and catch any outgoing URLs to ensure they open in-app instead of in the external Safari browser.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://www.avanderlee.com/wp-content/uploads/fbrfg/apple-touch-icon.png?v=2" alt><span class="kg-bookmark-author">SwiftLee</span><span class="kg-bookmark-publisher">Antoine van der Lee</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://swiftlee-banners.herokuapp.com/imagegenerator.php?title=SFSafariViewController+in+SwiftUI%3A+Open+webpages+in-app" alt></div></a></figure><h2 id="ultimate-swiftdata-guide">Ultimate SwiftData guide</h2><p>For anyone looking for a clear roadmap for the journey of learning SwiftData, this is it. One of the longest articles I've ever seen, but you don't need to jump around a ton of different articles and WWDC videos. Although, I always recommend reading official documentation and watching official videos. </p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://azamsharp.com/2023/07/04/the-ultimate-swift-data-guide.html?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">The Ultimate Swift Data Guide</div><div class="kg-bookmark-description">The Ultimate Guide to Building SwiftData Applications</div><div class="kg-bookmark-metadata"><span class="kg-bookmark-author">AzamSharp</span><span class="kg-bookmark-publisher">Mohammad Azam</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://azamsharp.com/images/ITeachOnTeachable.png" alt></div></a></figure><p>‚úåÔ∏è<br>Alright, that's it for today! Let's spread the good code vibes ‚ú®üßòüåà‚òÄÔ∏è<br>Thank you to <a href="https://www.runway.team/rollbacks?ref=ioscodereview.com" rel="noreferrer">Runway</a> for sponsoring this issue ‚ù§Ô∏è<br>I'm curious if you found any of the tips particularly interesting - let me know by replying to this email!</p><p></p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #60 ]]></title>
        <description><![CDATA[ Welcome to the 60th edition of iOS Code Review, just in time for the winter season! It's been an incredible journey through 60 issues, and I'm grateful for your continued support. Thank you for being part of the iOS Code Review community! Here's to another 60 issues of learning, sharing, ]]></description>
        <link>https://ioscodereview.com/issues/60/</link>
        <guid isPermaLink="false">655f30b7ea1fb500017ed9c5</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 23 Nov 2023 13:38:53 +0100</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Welcome to the 60th edition of iOS Code Review, just in time for the winter season! It's been an incredible journey through 60 issues, and I'm grateful for your continued support. Thank you for being part of the iOS Code Review community! Here's to another 60 issues of learning, sharing, and exploring the ever-evolving landscape of iOS development‚òïÔ∏è</p><p>I'm excited to bring you another curated selection of learnings. Grab a warm beverage and dive in!</p><p>For this special issue, I'm happy to feature a set of tools built by my good twitter-friend Daniel Saidi. We've had parallel careers, in the same 4 years working as lead iOS developers in competing book subscription services in Scandinavia, and then going indie at the same time. I'm always happy to bring more recognition to indie tools, and I am grateful for Daniel's support of the newsletter ‚ù§Ô∏è</p><div class="kg-card kg-callout-card kg-callout-card-yellow"><div class="kg-callout-text"><b><strong style="white-space: pre-wrap;">üíé Sponsor of the week - KeyboardKit Pro</strong></b><br><br>The<b><strong style="white-space: pre-wrap;"> KeyboardKit Pro</strong></b> SDK helps you build highly customizable keyboards for iOS. With support for 60+ languages and many powerful features, KeyboardKit Pro makes it easy to bring your functionality to brand new places.<br><br>Sign up for KeyboardKit Pro with discount code <b><strong style="white-space: pre-wrap;">BF23-KKPRO</strong></b> during Black Week to get <b><strong style="white-space: pre-wrap;">50%</strong></b> off your first purchase! <br><a href="https://keyboardkit.com/pro?ref=ioscodereview.com" rel="noreferrer"><b><strong style="white-space: pre-wrap;">Get started for free üöÄ</strong></b></a><br><br><i><em class="italic" style="white-space: pre-wrap;">Also check out </em></i><a href="https://kankoda.com/emojikit?ref=ioscodereview.com" rel="noreferrer"><i><em class="italic" style="white-space: pre-wrap;">EmojiKit</em></i></a><i><em class="italic" style="white-space: pre-wrap;"> to add powerful emoji features to your app, and </em></i><a href="https://kankoda.com/licensekit?ref=ioscodereview.com" rel="noreferrer"><i><em class="italic" style="white-space: pre-wrap;">LicenseKit</em></i></a><i><em class="italic" style="white-space: pre-wrap;"> to protect your closed-source software with commercial licenses.</em></i> Made by <a href="https://twitter.com/danielsaidi?ref=ioscodereview.com" rel="noreferrer">Daniel Saidi</a>.</div></div><h2 id="alternative-to-spacer">Alternative to Spacer</h2><p>Using a&nbsp;<code>.frame</code>&nbsp;modifier can save you a lot in performance over a&nbsp;<code>Spacer</code>, especially in lists or long horizontal/vertical stacks. David shares a number of scenarios where we can replace a <code>Spacer</code> with <code>.frame</code> and get the same behaviour:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://david.y4ng.fr/the-alternative-to-swiftui-spacer/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">The alternative to SwiftUI‚Äôs Spacer</div><div class="kg-bookmark-description">Early on, SwiftUI introduced Spacer. But did you know that you can replace it with something else in most use cases?</div><div class="kg-bookmark-metadata"><span class="kg-bookmark-author">David Yang</span><span class="kg-bookmark-publisher">David Yang</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://david.y4ng.fr/assets/images/2018/12/dya-circle.png" alt></div></a></figure><h2 id="pin-swiftui-view-to-an-edge">Pin SwiftUI view to an edge </h2><p>From iOS 15, there‚Äôs a handy&nbsp;<a href="https://developer.apple.com/documentation/swiftui/view/safeareainset(edge:alignment:spacing:content:)-6gwby?ref=ioscodereview.com">safeAreaInset</a>&nbsp;that allows us to place additional content extending the safe area. Without&nbsp;<code>safeAreaInset</code>, we'd have to manually calculate&nbsp;height of the additional content and adjust scroll view content insets manually. <code>safeAreaInset</code> is available from iOS 15 üôå</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://onmyway133.com/posts/how-to-show-anchor-bottom-view-in-swiftui/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">How to show anchor bottom view in SwiftUI</div><div class="kg-bookmark-description">Issue #954
From iOS 15, there‚Äôs a handy safeAreaInset that allows us to place additional content extending the safe area. Shows the specified content beside the modified view. safeAreaInset allows us to customize which edge and alignment we can place our views. This works for both ScrollView, List‚Ä¶</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://onmyway133.com/safari-pinned-tab.svg" alt><span class="kg-bookmark-author">Swift Discovery</span><span class="kg-bookmark-publisher">Khoa Pham</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://onmyway133.com/papermod-cover.png" alt></div></a></figure><h2 id="living-with-flaky-tests-temporarily">Living with flaky tests (temporarily)</h2><p>Sometimes tests are failing, and we can't fix them right away. That might be the case during a lengthy refactoring process, or we might have a flaky test that fails sometimes. <br>While it's a viable workaround to re-run the flaky test, or comment out failing ones, <code>XCTest</code> has an <code>XCTExpectedFailure</code> API that allows a test to fail temporarily:</p><pre><code class="language-swift">let options = XCTExpectedFailure.Options()
options.isStrict = false
XCTExpectFailure("Working on a fix for this intermittent problem.", options: options)
XCTAssertTrue(true, "This always works.")
XCTAssertTrue(testResultOfSomeActivity, "This only seems to work half the time.")</code></pre><p>Read Leonardo's article that goes in depth on various scenarios when this API could be useful:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://holyswift.app/unit-test-expected-failures-in-swift/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Unit Test Expected Failures in Swift - Holy Swift</div><div class="kg-bookmark-description">Explore managing expected failures in Swift‚Äôs XCTest with expert insights on balancing hard and soft skills in iOS development.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://holyswift.app/wp-content/uploads/2022/02/cropped-Logo-v2-1-270x270.png" alt><span class="kg-bookmark-author">Holy Swift</span><span class="kg-bookmark-publisher">Leonardo Maia Pugliese</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://holyswift.app/wp-content/uploads/2023/11/Screenshot-2023-11-10-at-08.26.32-2.png" alt></div></a></figure><h2 id="reusable-components-without-extra-effort">Reusable components without extra effort</h2><p>Okay, almost :) The idea is to employ more generalised naming of types as a guide to whether the component is reusable in your code, and use variable names for context. Here's an example:</p><pre><code class="language-swift">// Before
let moneyBuddyCard = MoneyBuddyCard(...)
let adviceView = AdviceView(...)

// After
let moneyBuddyCard = DecoratedCardView(...)
let adviceView = DecoratedCardView(...)</code></pre><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://www.swiftindepth.com/articles/reusable-components/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Deliver reusable components without making them reusable</div><div class="kg-bookmark-description">Reusability and duplication are tough to balance. What if I told you that, sometimes, you don‚Äôt have to?</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://www.swiftindepth.com/favicon.ico" alt></div></div><div class="kg-bookmark-thumbnail"><img src="https://www.swiftindepth.com/assets/articles/reusable-components/opengraph.png" alt></div></a></figure><h2 id="writing-better-documentation">Writing better documentation</h2><p>Editing is an important step in the process of writing documentation. Google has crafted a short, yet comprehensive guide to elevate your technical writing skills. I was amazed by how applying these simple rules transforms my writing. <br>At the end there's an exercise to improve this bit of text: </p><blockquote>Determine whether or not you can simplify your document through the use of terminology that is equivalent but relatively shorter in length and therefore more easily comprehensible by your audience. It's important to make sure your document is edited before it is seen by your audience, which might include people that are less or more familiar with the matter covered by your document. The first thing you need is a rough draft. Some things that can help make your document easier to read are making sure you have links to background information, and also checking for active voice instead of passive voice. If you have long sentences you can consider shortening them or implementing the use of a list to make the information easier to scan.</blockquote><p>I encourage you to try the exercise, and share your results! </p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://developers.google.com/tech-writing/two/editing?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Self-editing | Technical Writing | Google for Developers</div><div class="kg-bookmark-description"></div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://www.gstatic.com/devrel-devsite/prod/va65162e8ce9aacc75e4d3c0cd6d166fc6ceaaf184fea0ff0eac1d9b62c0480be/developers/images/favicon-new.png" alt><span class="kg-bookmark-author">Google for Developers</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://www.gstatic.com/devrel-devsite/prod/va65162e8ce9aacc75e4d3c0cd6d166fc6ceaaf184fea0ff0eac1d9b62c0480be/developers/images/opengraph/white.png" alt></div></a></figure><p>‚úåÔ∏è<br>Alright, that's it for today! Let's spread the good code vibes ‚ú®üßòüåà‚òÄÔ∏è<br>Thank you to <a href="https://keyboardkit.com/pro?ref=ioscodereview.com" rel="noreferrer">Daniel with KeyboardKit</a> for sponsoring this issue ‚ù§Ô∏è<br>I'm curious if you found any of the tips particularly interesting - let me know by replying to this email!</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #59 ]]></title>
        <description><![CDATA[ Hi there, welcome to the 59th issue of iOS Code Review. I hope you find something interesting for you today ‚ò∫Ô∏è

üíé Mobile DevOps Health Check - the first industry benchmarking tool

How well does your Mobile DevOps team perform? Take the quick Mobile DevOps Health Check to find out how mature ]]></description>
        <link>https://ioscodereview.com/issues/59/</link>
        <guid isPermaLink="false">654ccd057f541a00017707b6</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 09 Nov 2023 14:26:49 +0100</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there, welcome to the 59th issue of iOS Code Review. I hope you find something interesting for you today ‚ò∫Ô∏è </p><div class="kg-card kg-callout-card kg-callout-card-yellow"><div class="kg-callout-text">üíé Mobile DevOps Health Check - the first industry benchmarking tool<br><br>How well does your Mobile DevOps team perform? Take the quick Mobile DevOps Health Check to find out how mature your team is and how you compare against the industry‚Äôs top-performing apps.<br><br><a href="https://bitrise.io/learn/modas-health-check?utm_source=sponsorship&utm_medium=cpc&utm_campaign=modas-campaign-2023&utm_content=modas-health-check-ioscodereview" rel="noreferrer">Take the 6-question Health Check</a></div></div><h2 id="swift-algorithmssplit-an-array-into-chunks-and-more">Swift Algorithms - split an array into chunks, and more</h2><p>If you google "how to split an array into chunks in Swift", you'll get a bunch of results showing how to implement a function that can split an array, called <code>chunked()</code>. <br>Another example we commonly need is removing duplicate elements from an array. </p><p>However implementing these function by yourself is not ideal  (and having to write all the unit tests!). Gladly many such functions are already provided by Apple, in a lesser known package called <code>swift-algorithms</code>. </p><p><code>swift-algorithms</code> package has various functions that are not (yet) included in the standard library. As for the reason why these functions are not in the standard library, the announcement post on swift.org sheds some light: </p><p><em>It‚Äôs our ambition for the standard library to include a rich, pragmatic set of generic algorithms. We think the&nbsp;<code>Algorithms</code>&nbsp;package can help realize this goal by serving as a low-friction venue to build out new families of related algorithms‚Äîgiving us an opportunity to iteratively explore the problem space and learn how different algorithms connect and interact‚Äîbefore graduating them into the standard library.</em></p><p>Aside from <code>.chunked()</code> and <code>.unique()</code>, the package contains many other useful algorithms such as:</p><ul><li>creating permutations from elements in a collection</li><li>rotation of elements in an array</li><li>selecting a random part of a collection</li><li>getting a certain number of min/max elements</li><li>&nbsp;iteration over tuples of adjacent elements</li><li>and many more</li></ul><p>There are a number of benefits to using this package - each algorithm is thoroughly tested, peer reviewed, and improved for best possible performance, which is also documented for each algorithm. </p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://www.swift.org/blog/swift-algorithms/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Announcing Swift Algorithms</div><div class="kg-bookmark-description">I‚Äôm excited to announce Swift Algorithms, a new open-source package of sequence and collection algorithms, along with their related types.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://www.swift.org/apple-touch-icon-180x180.png" alt><span class="kg-bookmark-author">Swift.org</span><span class="kg-bookmark-publisher">Apple Inc.</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://swift.org/apple-touch-icon-180x180.png" alt></div></a></figure><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://github.com/apple/swift-algorithms?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">GitHub - apple/swift-algorithms: Commonly used sequence and collection algorithms for Swift</div><div class="kg-bookmark-description">Commonly used sequence and collection algorithms for Swift - GitHub - apple/swift-algorithms: Commonly used sequence and collection algorithms for Swift</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://github.githubassets.com/assets/pinned-octocat-093da3e6fa40.svg" alt><span class="kg-bookmark-author">GitHub</span><span class="kg-bookmark-publisher">apple</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://opengraph.githubassets.com/10a39b5cfd0ef818b82960cbb89b59c06ec42306a2a3392d275e6344c370dffc/apple/swift-algorithms" alt></div></a></figure><h2 id="split-a-list-by-month">Split a list by month</h2><p>The <code>chunked()</code> function from <code>swift-algorithms</code> is not only allowing to split an array into fixed-size chunks. It also has a variant that allows to provide a custom decision-making closure for when a chunk should end. <br>Danijela is show casing an example of splitting a list of travel destinations grouped by month. Just be wary that for large amounts of data, it's better to utilise database-backed queries. </p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://www.danijelavrzan.com/posts/2023/10/swift-algorithms-chunked/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Split your data easily and efficiently with .chunked() | Danijela‚Äôs blog</div><div class="kg-bookmark-description">Swift Algorithms is an open source package of sequence and collection algorithms. It contains many generic algorithms found in other popular programming languages. In this post, we‚Äôll take a look at how to implement the .chunked() algorithm to chunk an array of data and display it in your UI.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://www.danijelavrzan.com/images/favicon.png" alt><span class="kg-bookmark-author">Danijela's blog</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://www.danijelavrzan.com/images/posts/2023/10/swift-algorithms-chunked.png" alt></div></a></figure><h2 id="geometryreaderblessing-or-curse">GeometryReader - Blessing or Curse?</h2><p>Some swear by GeometryReader, and some hate it to the bone. Or maybe you haven't had to use it at all. Whichever it is, this comprehensive article will be useful. <br>The author dives as deep as one can - with benefits and drawbacks, why it works the way it works, and how to hold it right. </p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://betterprogramming.pub/geometryreader-blessing-or-curse-1ebd2d5005ec?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">GeometryReader: Blessing or Curse?</div><div class="kg-bookmark-description">A good tool is only as good as the person who wields it</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://cdn-static-1.medium.com/_/fp/icons/Medium-Avatar-500x500.svg" alt><span class="kg-bookmark-author">Better Programming</span><span class="kg-bookmark-publisher">fatbobman ( ‰∏úÂù°ËÇòÂ≠ê)</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://miro.medium.com/v2/resize:fit:1200/1*tLh1QGOif1hoR3CIx0C9xw.jpeg" alt></div></a></figure><h2 id="setneedslayout-vs-layoutifneeded">setNeedsLayout() vs layoutIfNeeded() </h2><p>On the topic of layouts, here's one for UIKit. You'd use <code>layoutIfNeeded()</code> for an immediate update, and <code>setNeedsLayout</code> if you don't mind your changes to be animated. </p><p><em>setNeedsLayout():&nbsp;<br>This method does not force an immediate update, instead it marks the view for the update. It triggers the update during the next update cycle. This is efficient when you have multiple changes to make.<br><br>layoutIfNeeded():&nbsp;<br>This method forces the view to update its layout immediately. It ensures that all pending changes, if any, are applied immediately.</em></p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://www.linkedin.com/posts/naman-sabarwal_demystifying-the-power-of-setneedslayout-ugcPost-7116986455033311232-oUtl/?utm_source=share&utm_medium=member_ios"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Learn the magic of setNeedsLayout() vs layoutIfNeeded() with Nitin Aggarwal. | Naman Sabarwal posted on the topic | LinkedIn</div><div class="kg-bookmark-description">Demystifying the power of setNeedsLayout() vs layoutIfNeeded() setNeedsLayout(): This method does not force an immediate update, instead it marks the view‚Ä¶</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://static.licdn.com/aero-v1/sc/h/al2o9zrvru7aqj8e1x2rzsrca" alt><span class="kg-bookmark-author">LinkedIn</span><span class="kg-bookmark-publisher">Naman Sabarwal</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://media.licdn.com/dms/image/D4D05AQEAy3FWotSvlQ/feedshare-thumbnail_720_1280/0/1696821799016?e=2147483647&amp;v=beta&amp;t=OG1TyNuhkZsmzMMfN16yqYIE938nYNxFcyBFJSU7b0A" alt></div></a></figure><p></p><p>‚úåÔ∏è<br>Alright, that's it for today! Let's spread the good code vibes ‚ú®üßòüåà‚òÄÔ∏è<br>I'm curious if you found any of the tips particularly interesting - let me know by replying to this email!<br><br>Thank you to <a href="https://bitrise.io/learn/modas-health-check?utm_source=sponsorship&utm_medium=cpc&utm_campaign=modas-campaign-2023&utm_content=modas-health-check-ioscodereview" rel="noreferrer">Bitrise</a> for sponsoring yet another issue ‚ù§Ô∏è  </p><p></p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #58 ]]></title>
        <description><![CDATA[ Hi there, welcome to the 58th issue of iOS Code Review. I hope you find something interesting for you today ‚ò∫Ô∏è

üíé Mobile DevOps Health Check - the first industry benchmarking tool

How well does your Mobile DevOps team perform? Take the quick Mobile DevOps Health Check to find out how mature ]]></description>
        <link>https://ioscodereview.com/issues/58/</link>
        <guid isPermaLink="false">653a41f87950e100011ab1a8</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 26 Oct 2023 13:38:39 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there, welcome to the 58th issue of iOS Code Review. I hope you find something interesting for you today ‚ò∫Ô∏è </p><div class="kg-card kg-callout-card kg-callout-card-yellow"><div class="kg-callout-text">üíé Mobile DevOps Health Check - the first industry benchmarking tool<br><br>How well does your Mobile DevOps team perform? Take the quick Mobile DevOps Health Check to find out how mature your team is and how you compare against the industry‚Äôs top-performing apps.<br><br><a href="https://bitrise.io/learn/modas-health-check?utm_source=sponsorship&utm_medium=cpc&utm_campaign=modas-campaign-2023&utm_content=modas-health-check-ioscodereview" rel="noreferrer">Take the 6-question Health Check</a></div></div><p>Sponsors help me grow my content creation and keep the lights up, so if you have time please make sure to have a look at the survey they're offering ‚ò∫Ô∏è  </p><h2 id="how-not-to-monitor-swiftui-state">How (not) to monitor SwiftUI @State</h2><p>It might be tempting to use <code>didSet</code> to observe variables declared with <code>@State</code>, especially that it seems to work in the basic cases. But it doesn't work when the binding is passed to another view. We need to use the <code>.onChange</code> modifier to observe the variable. I met Dean at NSSpain this year, and I'm happy to share his blog with you all ‚ò∫Ô∏è</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://blog.thomasdurand.fr/story/2023-10-21-how-not-to-monitor-swiftui-state/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">How (not) to monitor SwiftUI @State</div><div class="kg-bookmark-description">While I was working on the first version of my latest app SharePal ‚ö°Ô∏è, I figured that I&amp;rsquo;d like to add haptic feedback for distinct action within the app.
Something that did not worked well‚Ä¶ Since I&amp;rsquo;m targeting iOS&nbsp;16 as a base, I‚Ä¶</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://blog.thomasdurand.fr/icon.svg" alt><span class="kg-bookmark-author">Dean‚Äôs blog</span><span class="kg-bookmark-publisher">Thomas Durand</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://blog.thomasdurand.fr/img/cover_huea95f719576bcab793980bcdacdf5346_33147_903ab47c6c87faeba9516b273145f7bb.png" alt></div></a></figure><h2 id="random-enum-case">Random enum case</h2><p>Such elegant solution for accessing a random case of an enum. Here's a gist of it, by a adding a simple extension on <code>CaseIterable</code>, any enum gets such functionality. You can read more about it in Jordan's blog post below.</p><pre><code class="language-swift">enum Foo: String, CaseIterable {
    case a, b, c
}

print(Foo.randomCaseIterableElement())</code></pre><pre><code class="language-swift">extension CaseIterable {
  public static func randomCaseIterableElement(using generator: inout some RandomNumberGenerator) -&gt; Self? {
    allCases.randomElement(using: &amp;generator)
  }

  public static func randomCaseIterableElement() -&gt; Self? {
    var generator = SystemRandomNumberGenerator()
    return randomCaseIterableElement(using: &amp;generator)
  }
}</code></pre><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://www.swiftjectivec.com/swift-randomnumbergenerator/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Generating Random Numbers Elegantly in Swift</div><div class="kg-bookmark-description">Swift has a useful mechanism to generate random values. Today, let‚Äôs see how we can plug in SystemRandomNumberGenerator for our own types.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://www.swiftjectivec.com/swift-randomnumbergenerator/mstile-310x310.png" alt><span class="kg-bookmark-author">Jordan Morgan</span><span class="kg-bookmark-publisher">Jordan Morgan</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://swiftjectivec.com/assets/images/logo.png" alt></div></a></figure><h2 id="launching-a-swiftui-view-from-the-terminal">Launching a SwiftUI view from the terminal</h2><p><em>"While there is a lot you can display in the terminal, there is certain information that is better conveyed in a graphical user interface. Contrary to what you might think, you&nbsp;don't need to create a full-blown macOS app&nbsp;to display a simple UI."</em></p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://www.polpiella.dev/launching-a-swiftui-view-from-the-terminal/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Launching a SwiftUI view from the terminal</div><div class="kg-bookmark-description">Learn how to launch a SwiftUI view directly from your Swift command-line tool without making a full-blown macOS application.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://www.polpiella.dev/assets/profile.png" alt></div></div><div class="kg-bookmark-thumbnail"><img src="https://www.polpiella.dev/api/thumbnail?title=Launching%20a%20SwiftUI%20view%20from%20the%20terminal" alt></div></a></figure><h2 id="writing-better-unit-tests">Writing better unit tests</h2><p>A collection of before-and-after examples that demonstrate how to enhance test cases by verifying prerequisites and conditions.</p><pre><code class="language-swift">verify(StorageThing)
    .hasNoEntry("something")
sut = UnitBeingTested()
verify(StorageThing)
    .hasEntry("something")</code></pre><p>In this example, the first line brings a benefit of verifying that the mocked storage didn't have the value before. Otherwise, the test would succeed even if initialising <code>sut</code> didn't save the value. <br>You can find many more examples like that in the article:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://blog.devgenius.io/writing-good-unit-tests-2158be9ee82d?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Writing good unit tests</div><div class="kg-bookmark-description">We write tests to prove that our code is correct now and in the future. If we want to do some refactoring some day then we can rely on‚Ä¶</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://cdn-static-1.medium.com/_/fp/icons/Medium-Avatar-500x500.svg" alt><span class="kg-bookmark-author">Dev Genius</span><span class="kg-bookmark-publisher">Chris Mash</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://miro.medium.com/v2/resize:fit:1024/1*XtizSuT5TMvXTuMpLTf0Gg.jpeg" alt></div></a></figure><p></p><p>‚úåÔ∏è<br>Alright, that's it for today! Let's spread the good code vibes ‚ú®üßòüåà‚òÄÔ∏è<br>I'm curious if you found any of the tips particularly interesting - let me know by replying to this email!<br><br>Thank you to <a href="https://bitrise.io/learn/modas-health-check?utm_source=sponsorship&utm_medium=cpc&utm_campaign=modas-campaign-2023&utm_content=modas-health-check-ioscodereview" rel="noreferrer">Bitrise</a> for sponsoring yet another issue ‚ù§Ô∏è  </p><p></p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #57 ]]></title>
        <description><![CDATA[ Hi friends, welcome to the 57th issue of iOS Code Review!
Today I'm sharing three tips and three videos with you - as finally some conference recordings are available.
Enjoy the reading and watching! ‚òïÔ∏è‚òïÔ∏è

üíé Mobile DevOps Health Check - the first industry benchmarking tool

How well does your Mobile DevOps ]]></description>
        <link>https://ioscodereview.com/issues/57/</link>
        <guid isPermaLink="false">6527c81bb801b800017058e9</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 12 Oct 2023 13:48:38 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi friends, welcome to the 57th issue of iOS Code Review! <br>Today I'm sharing three tips and three videos with you - as finally some conference recordings are available. <br>Enjoy the reading and watching! ‚òïÔ∏è‚òïÔ∏è</p><div class="kg-card kg-callout-card kg-callout-card-yellow"><div class="kg-callout-text">üíé Mobile DevOps Health Check - the first industry benchmarking tool<br><br>How well does your Mobile DevOps team perform? Take the quick Mobile DevOps Health Check to find out how mature your team is and how you compare against the industry‚Äôs top-performing apps.<br><br><a href="https://bitrise.io/learn/modas-health-check?utm_source=sponsorship&utm_medium=cpc&utm_campaign=modas-campaign-2023&utm_content=modas-health-check-ioscodereview" rel="noreferrer">Take the 6-question Health Check</a></div></div><h2 id="onappear-vs-task">onAppear vs task</h2><p>If you'd like to execute code when a SwiftUI view becomes visible, you have the option of using either <code>onAppear</code> or <code>task</code>. They're not the same though: </p><ul><li><code>onAppear</code> is executed before the view is rendered the first time. At this point,  changes to the view state can be applied without causing any visible flickers, as the view will render with the new state.</li><li><code>task</code> is executed right after the view appears, so if any state changes are made, they are applied after the initial rendering. </li></ul><p>Chris Eidhof has created a sample code that demonstrates the difference, you can find it in his article: <a href="https://chris.eidhof.nl/post/swiftui-on-appear-vs-task/?ref=ioscodereview.com" rel="noreferrer">Running Code When Your View Appears</a>. <br>I learned about this from another newsletter <a href="https://not-only-swift.peterfriese.dev/issues/43?ref=ioscodereview.com" rel="noreferrer">Not Only Swift</a> made by Peter Friese üëã</p><h2 id="viewisappearingnew-in-ios-17">viewIsAppearing - new in iOS 17</h2><p>On the topic of views appearing, we there's an improvement in UIKit this year. We got a new view controller lifecycle method - <a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/4195485-viewisappearing?ref=ioscodereview.com" rel="noreferrer"><code>viewIsAppearing</code> (documentation)</a>. </p><p>The primary distinction between <code>viewWillAppear</code> and <code>viewIsAppearing</code> lies in the timing of the callback. The new method is called after the view is added to the hierarchy and got accurate geometry. This means that we can make calculations that depends on the view's geometry before the view appears. <br>Previously the only option was to use <code>viewWillLayoutSubviews</code> and <code>viewDidLayoutSubviews</code>, and it's not a straightforward solution, because these methods are called more than once. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://ioscodereview.com/content/images/2023/10/renderedDark2x-1684331865.png" class="kg-image" alt loading="lazy" width="544" height="1058"><figcaption><span style="white-space: pre-wrap;">from documentation</span></figcaption></figure><h2 id="theres-still-a-place-for-uikit">There's still a place for UIKit</h2><p>With the advent of SwiftUI, we're asking ourselves - in what scenarios is UIKit still relevant? <br>Apps heavily based on images are one example. There's nothing yet in SwiftUI that can beat a <code>UICollectionView</code> with a custom layout. <br>Map clustering is another example. If you need to cluster annotations on the map when the user zooms out, it's not currently possible with pure SwiftUI.</p><p>We can still make many screens in SwiftUI, while keeping image-heavy screens or overall navigation in UIKit. There's no key learning here, I just feel it's worth reiterating that not everything can be done in SwiftUI yet. </p><figure class="kg-card kg-embed-card"><div><blockquote class="twitter-tweet"><p lang="en" dir="ltr">We have decided at my company to rewrite core parts of our app into UIKit.  For a photo heavy collection view app like us, it just makes more sense.<br><br>Also lifecycle control, navigation and debugability is significantly easier with UIKit.<br><br>SwiftUI costs an innovation token.</p>‚Äî Mahyar McDonald (@mahyarm8) <a href="https://twitter.com/mahyarm8/status/1710401031027519689?ref_src=twsrc%5Etfw&ref=ioscodereview.com">October 6, 2023</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div></figure><h2 id="crafting-swift-code-thats-bug-free-by-design">Crafting Swift Code that's bug-free by design</h2><p>My talk, titled "Crafting Swift Code that's bug-free by design", was recorded at NSSpain and is finally available - and I'm happy to share it with you. <br>In case you've been following the newsletter for a while, some of the insights might be familiar. Nonetheless there's something for everyone. I'd love to hear what you found most useful üòä</p><figure class="kg-card kg-embed-card kg-card-hascaption"><iframe width="200" height="113" src="https://www.youtube.com/embed/J3Sd7St7y7E?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen title="Bug-Free by Design - Crafting Swift Code That Doesn‚Äôt Sting [NSSpain 2023]"></iframe><figcaption><p><span style="white-space: pre-wrap;">Bug-Free by Design - Crafting Swift Code That Doesn‚Äôt Sting by Marina Vatmakhter</span></p></figcaption></figure><h2 id="how-ios-apps-can-be-hacked-and-what-to-do-about-it">How iOS apps can be hacked, and what to do about it</h2><p>My favourite talk from NSSpain,<em> Hacking iOS Mobile Apps</em> by Kamil Borzym shows how a harmful third-party library can steal any data provided by the user, including passwords they type in the app. </p><p>Coincidentally, I presented a talk on this topic a year ago, showing how to<em> protect your app from malicious code in a third party library</em> - explaining why and how to vet third-party dependencies.<em> </em>So these two talks make a perfect combo :) </p><figure class="kg-card kg-embed-card kg-card-hascaption"><iframe src="https://player.vimeo.com/video/865559955?app_id=122963" width="426" height="240" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" title="4 - Hacking iOS Mobile Apps - Kamil Borzym"></iframe><figcaption><p><i><em class="italic" style="white-space: pre-wrap;">Hacking iOS Mobile Apps</em></i><span style="white-space: pre-wrap;"> by Kamal Borzym </span></p></figcaption></figure><figure class="kg-card kg-embed-card kg-card-hascaption"><iframe width="200" height="113" src="https://www.youtube.com/embed/8jnizu04w-s?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen title="Protecting your app from malicious code in a third party library"></iframe><figcaption><p><span style="white-space: pre-wrap;">Protecting your app from malicious code in a third party library by Marina Vatmakhter</span></p></figcaption></figure><p>You can also find <a href="https://vimeo.com/showcase/10672108?ref=ioscodereview.com" rel="noreferrer">all other talk recordings from NSSpain 2023 on Vimeo</a>. </p><p>‚úåÔ∏è<br>Alright, that's it for today! Let's spread the good code vibes ‚ú®üßòüåà‚òÄÔ∏è<br>Thank you to <a href="https://bitrise.io/learn/modas-health-check?utm_source=sponsorship&utm_medium=cpc&utm_campaign=modas-campaign-2023&utm_content=modas-health-check-ioscodereview" rel="noreferrer">Bitrise</a> for sponsoring yet another issue ‚ù§Ô∏è<br>I'm curious if you found any of the tips particularly interesting - let me know by replying to this email!</p><p></p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #56 ]]></title>
        <description><![CDATA[ Hi there, welcome to the 56th issue of iOS Code Review!
Grab your favorite beverage (pumpkin spice or not), find a comfy spot, and dive into this week's newsletter. Let's learn together. Happy reading!

Join the Mobile DevOps Summit 2023 on Oct 4-5
A two-day, free event with 40+ workshops ]]></description>
        <link>https://ioscodereview.com/issues/56/</link>
        <guid isPermaLink="false">65154fa4933b900001ae042d</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 28 Sep 2023 13:24:10 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there, welcome to the 56th issue of iOS Code Review! <br>Grab your favorite beverage (pumpkin spice or not), find a comfy spot, and dive into this week's newsletter. Let's learn together. Happy reading!</p><div class="kg-card kg-callout-card kg-callout-card-yellow"><div class="kg-callout-text"><b><strong style="white-space: pre-wrap;">Join the Mobile DevOps Summit 2023 on Oct 4-5</strong></b><br>A two-day, free event with 40+ workshops and sessions brought to you by 50+ industry-leading speakers from eBay, Reddit, AWS and more. Learn from real-world examples of successful Mobile DevOps implementations.<br><br><a href="https://summit.bitrise.io/page/2783516/speakers?utm_source=sponsorship&utm_medium=cpc&utm_campaign=mobile-devops-summit-2023&utm_content=ioscodereviewQ3" target="_blank" rel="noreferrer">Check out our speaker list</a></div></div><h2 id="are-you-using-swiftdata">Are you using SwiftData?</h2><p>New and fancy alternative to CoreData is much easier to use, but it still has a learning curve. It's declarative, so <em>how</em> we declare the data makes a difference.<br>With enums in particular, adding raw values makes a huge difference on how the data is stored, so we can reduce database size and make requests faster. On small scales that might not have much difference, but with large amounts of data it's certainly an improvement.</p><figure class="kg-card kg-image-card kg-card-hascaption"><a href="https://twitter.com/azamsharp/status/1705918717790491016?ref=ioscodereview.com"><img src="https://ioscodereview.com/content/images/2023/09/F60Am0jWcAANqVF.jpeg" class="kg-image" alt loading="lazy" width="2000" height="1126" srcset="https://ioscodereview.com/content/images/size/w600/2023/09/F60Am0jWcAANqVF.jpeg 600w, https://ioscodereview.com/content/images/size/w1000/2023/09/F60Am0jWcAANqVF.jpeg 1000w, https://ioscodereview.com/content/images/size/w1600/2023/09/F60Am0jWcAANqVF.jpeg 1600w, https://ioscodereview.com/content/images/size/w2400/2023/09/F60Am0jWcAANqVF.jpeg 2400w" sizes="(min-width: 720px) 720px"></a><figcaption><a href="https://twitter.com/azamsharp/status/1705918717790491016?ref=ioscodereview.com" rel="noreferrer"><span style="white-space: pre-wrap;">Mohammad Azam on Twitter</span></a></figcaption></figure><h2 id="new-behaviour-of-urlstring-in-ios-17">New behaviour of URL(string:) in iOS 17</h2><p>If you're building your app using Xcode 15, <a href="https://developer.apple.com/documentation/foundation/url/3126806-init?ref=ioscodereview.com" rel="noreferrer"><code>URL(string:)</code></a> gets a new behaviour. Now invalid urls don't return <code>nil</code> anymore, and get percent-encoded. To get the old behaviour, we need to use <a href="https://developer.apple.com/documentation/foundation/url/4191020-init?ref=ioscodereview.com" rel="noreferrer"><code>URL(string: str, encodingInvalidCharacters: false)</code></a></p><figure class="kg-card kg-image-card kg-card-hascaption"><a href="https://twitter.com/developermaris/status/1701487361069031542?ref=ioscodereview.com"><img src="https://ioscodereview.com/content/images/2023/09/F5zkp1jWsAAMy2r.jpeg" class="kg-image" alt loading="lazy" width="1200" height="954" srcset="https://ioscodereview.com/content/images/size/w600/2023/09/F5zkp1jWsAAMy2r.jpeg 600w, https://ioscodereview.com/content/images/size/w1000/2023/09/F5zkp1jWsAAMy2r.jpeg 1000w, https://ioscodereview.com/content/images/2023/09/F5zkp1jWsAAMy2r.jpeg 1200w" sizes="(min-width: 720px) 720px"></a><figcaption><a href="https://twitter.com/developermaris/status/1701487361069031542?ref=ioscodereview.com" rel="noreferrer"><span style="white-space: pre-wrap;">Maris Lagzdins on Twitter</span></a></figcaption></figure><h2 id="how-to-make-a-strong-case-for-accessibility">How to make a strong case for accessibility</h2><p>As one example of accessibility not serving only disabled users, subtitles are not only for deaf users - they also serve those who can't listen at the moment, or are located in a loud environment. <br>A brilliant infographic, and a <a href="https://smart-interface-design-patterns.com/articles/accessibility-strong-case/?ref=ioscodereview.com" rel="noreferrer">brilliant article</a> with a set of practical takes on building a compelling case for supporting accessibility in our apps.</p><figure class="kg-card kg-image-card"><img src="https://ioscodereview.com/content/images/2023/09/01-accessibility-strong-case-2.jpg" class="kg-image" alt loading="lazy" width="2000" height="3317" srcset="https://ioscodereview.com/content/images/size/w600/2023/09/01-accessibility-strong-case-2.jpg 600w, https://ioscodereview.com/content/images/size/w1000/2023/09/01-accessibility-strong-case-2.jpg 1000w, https://ioscodereview.com/content/images/size/w1600/2023/09/01-accessibility-strong-case-2.jpg 1600w, https://ioscodereview.com/content/images/2023/09/01-accessibility-strong-case-2.jpg 2000w" sizes="(min-width: 720px) 720px"></figure><h2 id="string-catalogs-in-xcode-15">String catalogs in Xcode 15</h2><p>Xcode 15 finally introduces a better way to handle localizations in a structured way. No more .strings files üòé Here's a four-minute demo of the new functionality:</p><figure class="kg-card kg-embed-card"><iframe width="200" height="113" src="https://www.youtube.com/embed/0NRSfz6eTAI?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen title="Localization made easy with Xcode 15"></iframe></figure><p>‚úåÔ∏è<br>Alright, that's it for today! Let's spread the good code vibes ‚ú®üßòüåà‚òÄÔ∏è<br>Thank you to <a href="https://summit.bitrise.io/page/2783516/speakers?utm_source=sponsorship&utm_medium=cpc&utm_campaign=mobile-devops-summit-2023&utm_content=ioscodereviewQ3" rel="noreferrer">Bitrise</a> for sponsoring this issue ‚ù§Ô∏è</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #55 ]]></title>
        <description><![CDATA[ Hi there, welcome to the 55th issue of iOS Code Review!

Over the past two weeks, I had the privilege of attending iOSDevUK and speaking at NSSpain. It was an incredible experience! My talk, titled "Crafting Swift Code that's bug-free by design", was recorded and will be available in the ]]></description>
        <link>https://ioscodereview.com/issues/55/</link>
        <guid isPermaLink="false">649423d8811e4e0001cac3c9</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Tue, 19 Sep 2023 15:32:36 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there, welcome to the 55th issue of iOS Code Review! </p><p>Over the past two weeks, I had the privilege of attending iOSDevUK and speaking at NSSpain. It was an incredible experience! My talk, titled "Crafting Swift Code that's bug-free by design", was recorded and will be available in the coming weeks - I will share it with you then.</p><p>I would like to take a moment to express my warmest welcome to those of you who I had the pleasure of meeting at iOSDevUK and NSSpain, and to everyone who have joined the iOS Code Review community recently. Your presence and engagement mean the world to me ‚ù§Ô∏è</p><p>Today I'm excited to share a few learnings that caught my attention at the conferences.</p><div class="kg-card kg-callout-card kg-callout-card-yellow"><div class="kg-callout-emoji">üíé</div><div class="kg-callout-text"><strong>Sponsor of the week: Paste</strong><br><br><strong>Paste</strong> is a productivity app for Mac and iOS devices that amplifies the system‚Äôs clipboard capabilities. It‚Äôs a go-to tool for thousands of developers who aim to speed up their daily workflow.<br><br>Today we're launching Paste 4.0, ready for iOS 17! It has been rebuilt from the ground up, offering enhanced performance and a unified user experience across all platforms.<br><br><strong><a href="https://pasteapp.io/?ref=ioscodereview.com">Try for free</a> üòé</strong></div></div><p></p><hr><h2 id="cache-vs-persistent-store">Cache vs Persistent store</h2><p><strong>Avi Tsadok</strong> talked about building offline-first apps. When we build offline support in our app, it's important to note the difference between <em>caching</em> and <em>persistence. Caching</em> is temporary and it's main purpose is to boost performance and perceived speed of the app. Persistence, on the other hand, allows to operate on the data in offline, providing full offline capability to the app. So before we reach to pick a storage solution, we should understand - are we adding caching or persistence?</p><figure class="kg-card kg-image-card"><img src="https://ioscodereview.com/content/images/2023/09/IMG_7282--1-.jpeg" class="kg-image" alt loading="lazy" width="1280" height="618" srcset="https://ioscodereview.com/content/images/size/w600/2023/09/IMG_7282--1-.jpeg 600w, https://ioscodereview.com/content/images/size/w1000/2023/09/IMG_7282--1-.jpeg 1000w, https://ioscodereview.com/content/images/2023/09/IMG_7282--1-.jpeg 1280w" sizes="(min-width: 720px) 720px"></figure><h2 id="simple-app-architecture">Simple app architecture</h2><p><strong>David Kababyan</strong> shared the architecture behind the iOSDevUK conference app. That was a lightnign talk, and the architecture seems nice for a small app like that!</p><figure class="kg-card kg-image-card"><img src="https://ioscodereview.com/content/images/2023/09/IMG_7309.jpeg" class="kg-image" alt loading="lazy" width="1280" height="668" srcset="https://ioscodereview.com/content/images/size/w600/2023/09/IMG_7309.jpeg 600w, https://ioscodereview.com/content/images/size/w1000/2023/09/IMG_7309.jpeg 1000w, https://ioscodereview.com/content/images/2023/09/IMG_7309.jpeg 1280w" sizes="(min-width: 720px) 720px"></figure><h2 id="working-with-time">Working with time</h2><p><strong>Dave DeLong</strong> gave an insightful talk about working with dates, drawing an analogy with coordinates on the map. There are real places (points in time), and there are their names in a certain coordinate system or in a certain address system (epoch time, date representation in different calendars or time zones). </p><p>What I found particlularly interesting is the difference between <em>setting</em> and <em>offsetting</em> time. When we want to compose a date that means 3 am on a certain day, we have two ways of doing it: <br>- get the day and <em>set</em> its hour to '3 am'<br>- get the day's start (midnight) and <em>add</em> 3 hours. <br>The first might not exist, and the second will always exist.</p><p>And it's worth remembering that sometimes we don't need to bother, and <code>24*60*60</code> might be fine, for example if we're talking cache expiration.</p><figure class="kg-card kg-image-card"><img src="https://ioscodereview.com/content/images/2023/09/IMG_7516.jpeg" class="kg-image" alt loading="lazy" width="1280" height="768" srcset="https://ioscodereview.com/content/images/size/w600/2023/09/IMG_7516.jpeg 600w, https://ioscodereview.com/content/images/size/w1000/2023/09/IMG_7516.jpeg 1000w, https://ioscodereview.com/content/images/2023/09/IMG_7516.jpeg 1280w" sizes="(min-width: 720px) 720px"></figure><figure class="kg-card kg-image-card"><img src="https://ioscodereview.com/content/images/2023/09/IMG_7517.jpeg" class="kg-image" alt loading="lazy" width="1280" height="769" srcset="https://ioscodereview.com/content/images/size/w600/2023/09/IMG_7517.jpeg 600w, https://ioscodereview.com/content/images/size/w1000/2023/09/IMG_7517.jpeg 1000w, https://ioscodereview.com/content/images/2023/09/IMG_7517.jpeg 1280w" sizes="(min-width: 720px) 720px"></figure><figure class="kg-card kg-image-card"><img src="https://ioscodereview.com/content/images/2023/09/IMG_7522.jpeg" class="kg-image" alt loading="lazy" width="1280" height="769" srcset="https://ioscodereview.com/content/images/size/w600/2023/09/IMG_7522.jpeg 600w, https://ioscodereview.com/content/images/size/w1000/2023/09/IMG_7522.jpeg 1000w, https://ioscodereview.com/content/images/2023/09/IMG_7522.jpeg 1280w" sizes="(min-width: 720px) 720px"></figure><figure class="kg-card kg-image-card"><a href="https://twitter.com/felibe444/status/1702757495452701093?ref=ioscodereview.com"><img src="https://ioscodereview.com/content/images/2023/09/image.png" class="kg-image" alt loading="lazy" width="1222" height="1322" srcset="https://ioscodereview.com/content/images/size/w600/2023/09/image.png 600w, https://ioscodereview.com/content/images/size/w1000/2023/09/image.png 1000w, https://ioscodereview.com/content/images/2023/09/image.png 1222w" sizes="(min-width: 720px) 720px"></a></figure><h2 id="james-dempsey-and-the-breakpoints">James Dempsey and the Breakpoints</h2><p>NSSpain wrapped up with a bang - a performance by James Dempseys' country band - <em>James Dempsey and the Breakpoints</em>. The only band out there that sings about Swift Development üòÑ check them out!</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://jamesdempsey.org/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">James Dempsey and the Breakpoints - Backtrace</div><div class="kg-bookmark-description"></div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://jamesdempsey.org/favicon.ico" alt><span class="kg-bookmark-author">Backtrace</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://jamesdempsey.org/img/album.jpg" alt></div></a></figure><h2 id="and-swift-59-is-here">and, Swift 5.9 is here!</h2><p>This is a major new release that introduces macros to Swift, adds bi-directional interoperability with C++, and more. <a href="https://www.swift.org/blog/swift-5.9-released/?ref=ioscodereview.com">Read the blog post to see what's new.</a> </p><p>Using if and switch as expressions is something many have waited for. Let's just try avoid writing code like this (via <a href="https://twitter.com/krzyzanowskim/status/1703839512000929909?ref=ioscodereview.com">@krzyzanowskim</a>):</p><figure class="kg-card kg-image-card"><img src="https://ioscodereview.com/content/images/2023/09/image-1.png" class="kg-image" alt loading="lazy" width="1270" height="145" srcset="https://ioscodereview.com/content/images/size/w600/2023/09/image-1.png 600w, https://ioscodereview.com/content/images/size/w1000/2023/09/image-1.png 1000w, https://ioscodereview.com/content/images/2023/09/image-1.png 1270w" sizes="(min-width: 720px) 720px"></figure><hr><p>‚úåÔ∏è<br>Alright, that's it for today! Let's spread the good code vibes ‚ú®üßòüåà‚òÄÔ∏è<br>Thank you to friends at <a href="https://pasteapp.io/?ref=ioscodereview.com">Paste</a> for sponsoring this issue ‚ù§Ô∏è</p><p>What was particularly interesting? let me know by replying!</p><p></p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #54 ]]></title>
        <description><![CDATA[ Hi there, welcome to the 54th issue of iOS Code Review! ¬†Let's learn something new ‚òÄÔ∏è
It's confirmed - I'm going to iOSDevUK and NSSpain üéâ ¬†More details at the end of the email :)


Cleaner grid initialization

Here's Daniel with handy extensions for a simpler way of defining ¬†LazyVGrid and LazyHGrid 's ]]></description>
        <link>https://ioscodereview.com/issues/54/</link>
        <guid isPermaLink="false">64f06fcd12d2c400012936fa</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 31 Aug 2023 16:20:05 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there, welcome to the 54th issue of iOS Code Review! ¬†Let's learn something new ‚òÄÔ∏è <br>It's confirmed - I'm going to <em>iOSDevUK and NSSpain üéâ ¬†</em>More details at the end of the email :)</p><h2 id="cleaner-grid-initialization">Cleaner grid initialization</h2><p>Here's Daniel with handy extensions for a simpler way of defining ¬†<code>LazyVGrid</code> and <code>LazyHGrid</code> 's columns:</p><pre><code class="language-swift">LazyVGrid(columns: .fixed(100)) { ... }
LazyVGrid(columns: [.fixed(100), .fixed(150)]) { ... }
LazyVGrid(columns: .adaptive(minimum: 100, maximum: 150)) { ... }</code></pre><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://danielsaidi.com/blog/2023/08/30/cleaner-grid-initialization-in-swiftui?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Cleaner grid initialization in SwiftUI</div><div class="kg-bookmark-description">SwiftUI‚Äôs LazyVGrid and LazyHGrid are great for creating powerful and flexible grids, but I always struggle with how to define columns when creating them. I‚Äôve therefore created some extensions to make this easier. Let‚Äôs take a look.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://danielsaidi.com/assets/icon/icon-1024.png" alt><span class="kg-bookmark-author">Daniel Saidi</span><span class="kg-bookmark-publisher">danielsaidi</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://danielsaidi.com/assets/icon/icon-facebook.png" alt></div></a></figure><h2 id="analogue-clock-on-macos-in-swiftui">Analogue clock on macOS in SwiftUI</h2><p>Apparently, <code>DatePicker</code> on macOS can be fun, where the user can move clock hands to select a time üôà</p><figure class="kg-card kg-image-card"><a href="https://twitter.com/borto_ale/status/1697223179469549726?ref=ioscodereview.com"><img src="https://ioscodereview.com/content/images/2023/08/Xnapper-2023-08-31-15.50.05.png" class="kg-image" alt loading="lazy" width="1254" height="1002" srcset="https://ioscodereview.com/content/images/size/w600/2023/08/Xnapper-2023-08-31-15.50.05.png 600w, https://ioscodereview.com/content/images/size/w1000/2023/08/Xnapper-2023-08-31-15.50.05.png 1000w, https://ioscodereview.com/content/images/2023/08/Xnapper-2023-08-31-15.50.05.png 1254w" sizes="(min-width: 720px) 720px"></a></figure><figure class="kg-card kg-image-card"><a href="https://twitter.com/Jeehut/status/1697233997997256886?ref=ioscodereview.com"><img src="https://ioscodereview.com/content/images/2023/08/Xnapper-2023-08-31-15.51.06.png" class="kg-image" alt loading="lazy" width="1250" height="786" srcset="https://ioscodereview.com/content/images/size/w600/2023/08/Xnapper-2023-08-31-15.51.06.png 600w, https://ioscodereview.com/content/images/size/w1000/2023/08/Xnapper-2023-08-31-15.51.06.png 1000w, https://ioscodereview.com/content/images/2023/08/Xnapper-2023-08-31-15.51.06.png 1250w" sizes="(min-width: 720px) 720px"></a></figure><h2 id="premature-optimization-universally-misunderstood">Premature Optimization: Universally Misunderstood</h2><p>The famous quote actually reads:</p><blockquote>We should forget about <strong>small efficiencies</strong>, say about 97% of the time: premature optimization is the root of all evil.<br>‚Äì Sir Tony Hoare</blockquote><p>Indeed, once an app is shipped to users, it can be too late to fundamentally change the app architecture, database structure, or API design. Those large aspects should be thought through early, and small optimizations can be done at a scaling stage.</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://milen.me/writings/premature-optimization-universally-misunderstood/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">milen.me ‚Äî Premature Optimization: Universally Misunderstood</div><div class="kg-bookmark-description">‚ÄúPremature Optimization‚Äù You might have come across the famous software optimisation quote popularised by Donald Knuth:Premature optimization is the root of all evil.‚Äì Sir Tony HoareIt has been commonly interpreted as ‚Äúdon‚Äôt think about performance in the beginning, you can fix any performance pr‚Ä¶</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://milen.me/images/favicons/milen.me-favicon-48.png" alt></div></div></a></figure><h2 id="co-authoring-git-commits">Co-authoring Git commits</h2><p>Git supports having multiple authors on a commit - so when you're pair-programming with a colleague, they can receive credit for it too. <br>We simply need to add the credit as extra text anywhere in the commit message - <code>Co-authored-by: &lt;name&gt; &lt;email&gt;</code> :</p><figure class="kg-card kg-image-card kg-card-hascaption"><a href="https://dev.to/cassidoo/co-authoring-git-commits-3gin?ref=ioscodereview.com"><img src="https://ioscodereview.com/content/images/2023/08/image-3.png" class="kg-image" alt loading="lazy" width="548" height="210"></a><figcaption><a href="https://dev.to/cassidoo/co-authoring-git-commits-3gin?ref=ioscodereview.com">By Cassidy Williams</a></figcaption></figure><h2 id="tool-to-find-unused-code">Tool to find unused code</h2><p>TIL that there's a tool to find unused code, I always wished there was one. It's called <a href="https://github.com/peripheryapp/periphery?ref=ioscodereview.com">Periphery</a>. I learned about it via Manu, who wrote a nice article on how to set it up for your project:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://www.manu.show/2023-08-21-use-periphery-to-find-unused-code/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Use Periphery to find unused code</div><div class="kg-bookmark-description">From time to time, it might be a good idea to spend a couple of hours checking if there is some code in the codebase that is not being used anymore. Luckily for us, there is a tool out there that can make the job easier. Periphery: A tool to identify unused code in Swift projects. Using Periphery on‚Ä¶</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://www.manu.show/favicon.ico" alt><span class="kg-bookmark-author">manu.show</span><span class="kg-bookmark-publisher">Manu Herrera</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://manu.show/resources/periphery/logo.png" alt></div></a></figure><hr><p>‚úåÔ∏è</p><p>I will be at iOSDevUK on the main conference days - ¬†5-7 September, and on NSSpain 14-16 September. If you're there - come say hi! <br>I'll have stickers to give away üòã ¬†Do you also want a t-shirt with the newsletters logo? Send me your size and I'll pre-make one for you.</p><div class="kg-card kg-callout-card kg-callout-card-yellow"><div class="kg-callout-text"><strong>Join the Mobile DevOps Summit 2023 on Oct 4-5</strong><br>A two-day, free event with 40+ workshops and sessions brought to you by 50+ industry-leading speakers from eBay, Reddit, AWS and more. Learn from real-world examples of successful Mobile DevOps implementations. <a href="https://summit.bitrise.io/page/2783516/speakers?utm_source=sponsorship&utm_medium=cpc&utm_campaign=mobile-devops-summit-2023&utm_content=ioscodereviewQ3">Check out our speaker list</a></div></div><p>Alright, that's it for today! Let's spread the good code vibes ‚ú®üßòüåà‚òÄÔ∏è</p><p></p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #53 ]]></title>
        <description><![CDATA[ Hi there, welcome to the 53rd issue of iOS Code Review! It's so nice to be back üéâ

It's almost conference season ü§ì I'm going to a couple of conferences this autumn. I will speak at NSSpain and hopefully get a visa in time attend iOSDevUK. Will I see you there? Let ]]></description>
        <link>https://ioscodereview.com/issues/53/</link>
        <guid isPermaLink="false">64dbbf30f2f91e0001a12b51</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 17 Aug 2023 13:03:56 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there, welcome to the 53rd issue of iOS Code Review! It's so nice to be back üéâ</p><p>It's almost conference season ü§ì I'm going to a couple of conferences this autumn. I will speak at <em>NSSpain</em> and hopefully get a visa in time attend <em>iOSDevUK</em>. Will I see you there? Let me know if you're also planning to go, let's meet!<br>If you're not going to any in-person conferences, perhaps check out the online Mobile DevOps Summit by Bitrise, who are so kind to be sponsoring multiple issues of the newsletter ‚ò∫Ô∏è</p><p>Also a small personal update: I've changed my last name to Vatmakhter - which is my grandparents family name. It's something I've been wanting to do for many years, and finally I could üéâ‚ò∫Ô∏è I'll slowly propagate it throughout my online presence - it's still me üòÅ</p><div class="kg-card kg-callout-card kg-callout-card-yellow"><div class="kg-callout-text"><strong>Join the Mobile DevOps Summit 2023 on Oct 4-5</strong><br>A two-day, free event with 40+ workshops and sessions brought to you by 50+ industry-leading speakers from eBay, Reddit, AWS and more. Learn from real-world examples of successful Mobile DevOps implementations. <a href="https://summit.bitrise.io/page/2783516/speakers?utm_source=sponsorship&utm_medium=cpc&utm_campaign=mobile-devops-summit-2023&utm_content=ioscodereviewQ3">Check out our speaker list</a></div></div><h2 id="enum-based-sheet-presentation">Enum-based sheet presentation</h2><p>Displaying multiple sheets from one view can quickly lead to repetitive code segments in SwiftUI. By using an enum to represent which sheet to present, we can make the code more maintainable. This, and more learnings can be found in Antoine's article below.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://ioscodereview.com/content/images/2023/08/image.png" class="kg-image" alt loading="lazy" width="1356" height="2048" srcset="https://ioscodereview.com/content/images/size/w600/2023/08/image.png 600w, https://ioscodereview.com/content/images/size/w1000/2023/08/image.png 1000w, https://ioscodereview.com/content/images/2023/08/image.png 1356w" sizes="(min-width: 720px) 720px"><figcaption>image source: <a href="https://twitter.com/twannl/status/1597940020597374976?ref=ioscodereview.com">@twannl</a></figcaption></figure><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://www.avanderlee.com/swiftui/presenting-sheets/?utm_campaign=coschedule&utm_source=twitter&utm_medium=twannl&utm_content=Sheets%20in%20SwiftUI%20explained%20with%20code%20examples#enum-based-sheet-presentation"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Sheets in SwiftUI explained with code examples</div><div class="kg-bookmark-description">Sheets in SwiftUI allow you to present a view on top of another. Learn how you can control multiple sheets using a generic solution.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://www.avanderlee.com/wp-content/uploads/fbrfg/apple-touch-icon.png?v&#x3D;2" alt><span class="kg-bookmark-author">SwiftLee</span><span class="kg-bookmark-publisher">Antoine van der Lee</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://swiftlee-banners.herokuapp.com/imagegenerator.php?title&#x3D;Sheets+in+SwiftUI+explained+with+code+examples" alt></div></a></figure><h2 id="using-error">Using #error</h2><p>Swift has a compiler directive that allows us to issue a compilation error. <br>This can be useful in a few ways, for example to prevent the app from compiling in certain conditions.<br>One of my usecases is when you're iterating over a feature and want to merge to <code>develop</code>, and want to make sure the app can't be released in an unfinished state. </p><pre><code class="language-Swift">func calculateStuff() {
    print("TBD")
#if RELEASE
    #error("calculateStuff feature is not implemented!"
#endif
}</code></pre><p>Here's <a href="https://www.swiftwithvincent.com/blog/discover-hash-sign-error?ref=ioscodereview.com">Vincent sharing</a> another scenario, where package authors can use <code>#error</code> in their example code, to bring user's attention where they need to fill out the api key.</p><h2 id="text-text">Text + Text</h2><p>A handly alternative to <code>AttributedString</code> in SwiftUI:</p><figure class="kg-card kg-image-card"><a href="https://mastodon.social/@ramzesenok/110332050551344694?ref=ioscodereview.com"><img src="https://ioscodereview.com/content/images/2023/08/image-1.png" class="kg-image" alt="SwiftUI lets us to compile Texts using the + operator. You can apply certain modifiers (that return type is Text) to Texts and it still will work.  You can use string interpolation and put one Text into another one. And since SFSymbols are also text you can embed them too" loading="lazy" width="1386" height="1142" srcset="https://ioscodereview.com/content/images/size/w600/2023/08/image-1.png 600w, https://ioscodereview.com/content/images/size/w1000/2023/08/image-1.png 1000w, https://ioscodereview.com/content/images/2023/08/image-1.png 1386w" sizes="(min-width: 720px) 720px"></a></figure><h2 id="a-refactoring-story">A refactoring story</h2><p>Every codebase has a piece of code similar to this. Here's Jon demonstrating a step-by step refactoring to make it error-proof:</p><figure class="kg-card kg-image-card"><img src="https://ioscodereview.com/content/images/2023/08/image-2.png" class="kg-image" alt loading="lazy" width="1554" height="622" srcset="https://ioscodereview.com/content/images/size/w600/2023/08/image-2.png 600w, https://ioscodereview.com/content/images/size/w1000/2023/08/image-2.png 1000w, https://ioscodereview.com/content/images/2023/08/image-2.png 1554w" sizes="(min-width: 720px) 720px"></figure><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://qualitycoding.org/refactoring-cleaning-mess/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Refactoring: How Do You Clear Up a Mess, Safely? | Quality Coding</div><div class="kg-bookmark-description">When refactoring in small steps, sometimes you have to make a mess to clear up a mess. Download the code and walk through these refactoring steps.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://qualitycoding.org/wp-content/uploads/2020/06/favicon.png" alt><span class="kg-bookmark-author">Quality Coding</span><span class="kg-bookmark-publisher">Jon Reid</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://qualitycoding.org/wp-content/uploads/2018/12/social-refactoring-mess-safely-scaled.jpg" alt></div></a></figure><p></p><p>‚úåÔ∏è<br>Alright, that's it for today! Let's spread the good code vibes ‚ú®üßòüåà‚òÄÔ∏è<br>Thank you to <a href="https://summit.bitrise.io/page/2783516/speakers?utm_source=sponsorship&utm_medium=cpc&utm_campaign=mobile-devops-summit-2023&utm_content=ioscodereviewQ3">Bitrise</a> for sponsoring this issue ‚ù§Ô∏è<br>And I always want to hear from you -just reply to this email :) </p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #52 ]]></title>
        <description><![CDATA[ Hi there, welcome to the 52nd issue of iOS Code Review! Grab a quick cup of your favorite beverage and let's learn something new :)

Setapp offers a collection of 240+ carefully curated macOS apps under one subscription. Now there's no need to purchase individual subscriptions for each app.

Try Setapp ]]></description>
        <link>https://ioscodereview.com/issues/52/</link>
        <guid isPermaLink="false">64a6dadb9bee9e000188910d</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 06 Jul 2023 20:35:01 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there, welcome to the 52nd issue of iOS Code Review! Grab a quick cup of your favorite beverage and let's learn something new :) </p><div class="kg-card kg-callout-card kg-callout-card-yellow"><div class="kg-callout-text"><strong>Setapp</strong> offers a collection of 240+ carefully curated macOS apps under one subscription. Now there's no need to purchase individual subscriptions for each app.<br><br><strong><a href="https://setapp.sjv.io/c/4300314/343321/5114?ref=ioscodereview.com">Try Setapp for free üöÄ&nbsp;</a></strong></div></div><h2 id="gifs-in-swiftui">GIFs in SwiftUI</h2><p>TIL how easy it is to play gif animations in UIKit and SwiftUI using <code><a href="https://developer.apple.com/documentation/imageio/3333271-cganimateimageaturlwithblock?ref=ioscodereview.com">CGAnimateImageAtURLWithBlock</a></code>. We just need to remember to stop the animation when the view disappears:</p><figure class="kg-card kg-image-card"><a href="https://twitter.com/JordanMorgan10/status/1676679189850619905?ref=ioscodereview.com"><img src="https://ioscodereview.com/content/images/2023/07/Xnapper-2023-07-06-20.16.07.png" class="kg-image" alt loading="lazy" width="1122" height="1598" srcset="https://ioscodereview.com/content/images/size/w600/2023/07/Xnapper-2023-07-06-20.16.07.png 600w, https://ioscodereview.com/content/images/size/w1000/2023/07/Xnapper-2023-07-06-20.16.07.png 1000w, https://ioscodereview.com/content/images/2023/07/Xnapper-2023-07-06-20.16.07.png 1122w" sizes="(min-width: 720px) 720px"></a></figure><figure class="kg-card kg-image-card"><a href="https://twitter.com/safeAreaInsets/status/1676765881240788993?ref=ioscodereview.com"><img src="https://ioscodereview.com/content/images/2023/07/Xnapper-2023-07-06-19.38.12.png" class="kg-image" alt loading="lazy" width="1128" height="872" srcset="https://ioscodereview.com/content/images/size/w600/2023/07/Xnapper-2023-07-06-19.38.12.png 600w, https://ioscodereview.com/content/images/size/w1000/2023/07/Xnapper-2023-07-06-19.38.12.png 1000w, https://ioscodereview.com/content/images/2023/07/Xnapper-2023-07-06-19.38.12.png 1128w" sizes="(min-width: 720px) 720px"></a></figure><h2 id="view-vs-view-modifier">View vs View modifier?</h2><p>Back when I just started learning SwiftUI, I started by making all of my customizations as <code>View</code>. I even had styled text as a <code>View</code> wrapping a styled <code>Text</code>, similar to <code>UILabel</code> subclasses in UIKit üôàüôà<br>Fairly quickly though I grasped the idea of view modifiers, still using custom <code>View</code>s for breaking down the view hierarchy and for reusable components.</p><p>So when I stumbled on John's article where he explores when to use what approach, I knew I have to share it with you folks. He implements the same "featured" UI using a view and a view modifier, and compares them side by side:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://www.swiftbysundell.com/articles/swiftui-views-versus-modifiers/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">SwiftUI views versus modifiers | Swift by Sundell</div><div class="kg-bookmark-description">What‚Äôs really the difference between building a piece of UI as a view versus a modifier, and how to choose between those two solutions?</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://www.swiftbysundell.com/images/favicon.png" alt><span class="kg-bookmark-author">Swift by Sundell</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://www.swiftbysundell.com/images/articles/swiftui-views-versus-modifiers.png" alt></div></a></figure><h2 id="beware-of-xcodes-automatic-version-management">Beware of Xcode's automatic version management</h2><p>Alexander shares his surprising experience with Xcode's ability to override version and build numbers during app export. Turns out, it overrides the values in all Info.plist files, including those embedded in third-party SDKs, so you can run into subtle issues if the SDK is checking those values. </p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://alexanderweiss.dev/blog/2023-07-04-appstore-connect-manage-app-version-and-build-number?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">AppStore Connect: Manage Version and build number</div><div class="kg-bookmark-description">I have released quite a few apps already, mostly at work but also personally. When releasing, I was facing issues with signing, Xcode configurations, CI/CD solutions or the AppStore Review. I assumed I have seen quite a lot of issues. Recently I was‚Ä¶</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://alexanderweiss.dev/favicon.ico" alt><span class="kg-bookmark-author">Teabyte</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://personal-site-m1o4rkp20-alexanderwe.vercel.app/blog/2023-07-04-appstore-connect-manage-app-version-and-build-number/opengraph-image?14678ee0ab859fb4" alt></div></a></figure><h2 id="looking-up-apples-error-codes">Looking up Apple's error codes </h2><p>Save it for later -&gt; <a href="https://www.osstatus.com/search/results?platform=all&framework=all&search=12&ref=ioscodereview.com">osstatus.com</a></p><figure class="kg-card kg-image-card"><a href="https://twitter.com/chrisvasselli/status/1603001083353341954?ref=ioscodereview.com"><img src="https://ioscodereview.com/content/images/2023/07/Xnapper-2023-07-06-20.05.23.png" class="kg-image" alt loading="lazy" width="1122" height="674" srcset="https://ioscodereview.com/content/images/size/w600/2023/07/Xnapper-2023-07-06-20.05.23.png 600w, https://ioscodereview.com/content/images/size/w1000/2023/07/Xnapper-2023-07-06-20.05.23.png 1000w, https://ioscodereview.com/content/images/2023/07/Xnapper-2023-07-06-20.05.23.png 1122w" sizes="(min-width: 720px) 720px"></a></figure><p>‚úåÔ∏è<br>Alright, that's it for today.<br>PS. As Twitter has messed up its API, I still have to embed tweets using screenshots. I'd love to hear your experience with images in the emails - how has that been, are you experiencing any issues with that? Let me know üôè</p><p><em>* this issue contains an affiliate link to <a href="https://setapp.sjv.io/c/4300314/343321/5114?ref=ioscodereview.com">Setapp</a></em></p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #51 ]]></title>
        <description><![CDATA[ Hi there, welcome to the 51st issue of iOS Code Review! I hope the summer is treating you well ‚òÄÔ∏è Let's learn something new!

üíéAnnouncing the Mobile DevOps Summit 2023 | Oct 4-5

Join 4500+ fellow mobile DevOps practitioners virtually for a two-day event packed with the latest trends, best practices, and ]]></description>
        <link>https://ioscodereview.com/issues/51/</link>
        <guid isPermaLink="false">6494288f811e4e0001cac401</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 22 Jun 2023 15:14:57 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there, welcome to the 51st issue of iOS Code Review! I hope the summer is treating you well ‚òÄÔ∏è Let's learn something new! </p><div class="kg-card kg-callout-card kg-callout-card-yellow"><div class="kg-callout-emoji">üíé</div><div class="kg-callout-text"><b>Announcing the Mobile DevOps Summit 2023 | Oct 4-5</b><br><br>Join 4500+ fellow mobile DevOps practitioners virtually for a two-day event packed with the latest trends, best practices, and hands-on workshops from the industry experts. Register for free today!<br><br><a href="https://summit.bitrise.io/?utm_source=sponsorship_ioscodereview&utm_medium=email&utm_campaign=mobile-devops-summit-2023&utm_content=invitation">Register for free</a></div></div><h2 id="check-your-third-party-dependencies">Check your third party dependencies</h2><p>Last year I gave a talk on Mobile DevOps Summit 2022 about protecting your app from malicious code in third party libraries. That's also why I'm extra excited that they're sponsoring the newsletter üòÑ <br>In short, code in a framework gets access to your whole view hierarchy and memory, so they could steal your user's data. In the talk I give tips on how to check that a library isn't doing what it isn't supposed to.</p><figure class="kg-card kg-embed-card"><iframe width="200" height="113" src="https://www.youtube.com/embed/8jnizu04w-s?list=PLbKJc0NMPDrB29Ir8q8ABVOyJJZzkUwEN" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe></figure><p>You can find all recordings from last year <a href="https://www.youtube.com/playlist?list=PLbKJc0NMPDrB29Ir8q8ABVOyJJZzkUwEN&ref=ioscodereview.com">on Youtube</a>.</p><h2 id="shuffling-arrays">Shuffling arrays</h2><p>Don't know who needs to hear this, but there's a set of handy methods for randomly shuffling any array. <br>There's <code>shuffle()</code> and <code>shuffled()</code>, and companion methods that take a random number generator. A custom generator can implement, for example, a reproducible ordering - while the default one (<code>SystemRandomNumberGenerator</code>) makes it as random as it can be:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://developer.apple.com/documentation/swift/array/shuffled(using:)?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">shuffled(using:) | Apple Developer Documentation</div><div class="kg-bookmark-description">Returns the elements of the sequence, shuffled using the given generator as a source for randomness.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://developer.apple.com/apple-logo.svg" alt><span class="kg-bookmark-author">Apple Developer Documentation</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://docs.developer.apple.com/tutorials/developer-og.jpg" alt></div></a></figure><h2 id="on-skipping-tests">On skipping tests</h2><p>How does Xcode know which tests to execute? It looks for classes conforming to <code>XCTestCase</code>, and inside them for any method starting with <code>test</code>. <br>So one way to temporarily disable a test is to comment out or rename the method so it doesn't start with <code>test</code>. <br>There's a better way though - we can conditionally skip tests by calling <code>XCTSkip</code>, <code>XCTSkipIf</code> and <code>XCTSkipUnless</code> :</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://www.wwdcnotes.com/notes/wwdc20/10164/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">XCTSkip your tests | WWDC NOTES</div><div class="kg-bookmark-description">Get the test results that matter ‚Äî and skip the ones that don‚Äôt. Discover how you can implement XCTSkip to conditionally avoid tests at runtime. We‚Äôll take you through how to return this new test result and better document tests beyond pass and fail within your test bundle. To get the most out of t‚Ä¶</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://www.wwdcnotes.com/images/favicon/favicon.png" alt><span class="kg-bookmark-author">WWDC NOTES</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://www.wwdcnotes.com/images/social/wwdc2020-10164.png" alt></div></a></figure><h2 id="swift-macrossomethings-coming">Swift Macros - something's coming!</h2><p>Swift Macros are so powerful, I'm yet to comprehend how much they will change the way we do things in Swift. I'm looking forward to using them in production apps starting from September. <br>Here's two down-to-earth examples where they can simplify our coding life:</p><figure class="kg-card kg-image-card"><a href="https://twitter.com/Lee_Kah_Seng/status/1671412791310266371?ref=ioscodereview.com"><img src="https://ioscodereview.com/content/images/2023/06/Xnapper-2023-06-22-15.10.37.png" class="kg-image" alt loading="lazy" width="1048" height="944" srcset="https://ioscodereview.com/content/images/size/w600/2023/06/Xnapper-2023-06-22-15.10.37.png 600w, https://ioscodereview.com/content/images/size/w1000/2023/06/Xnapper-2023-06-22-15.10.37.png 1000w, https://ioscodereview.com/content/images/2023/06/Xnapper-2023-06-22-15.10.37.png 1048w" sizes="(min-width: 720px) 720px"></a></figure><figure class="kg-card kg-image-card"><a href="https://twitter.com/azamsharp/status/1671362475722174465?ref=ioscodereview.com"><img src="https://ioscodereview.com/content/images/2023/06/Xnapper-2023-06-22-15.12.22.png" class="kg-image" alt loading="lazy" width="1148" height="1684" srcset="https://ioscodereview.com/content/images/size/w600/2023/06/Xnapper-2023-06-22-15.12.22.png 600w, https://ioscodereview.com/content/images/size/w1000/2023/06/Xnapper-2023-06-22-15.12.22.png 1000w, https://ioscodereview.com/content/images/2023/06/Xnapper-2023-06-22-15.12.22.png 1148w" sizes="(min-width: 720px) 720px"></a></figure><p>‚úåÔ∏è<br>Alright, that's it for today! <br>Thank you to <a href="https://summit.bitrise.io/?utm_source=sponsorship_ioscodereview&utm_medium=email&utm_campaign=mobile-devops-summit-2023&utm_content=invitation">Bitrise Mobile DevOps Summit</a> for sponsoring this issue ‚ù§Ô∏è<br>I'm curious if you found any of the tips particularly interesting - let me know by replying to this email!</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #50 üëë ]]></title>
        <description><![CDATA[ Hi there, welcome to the 50th issue of iOS Code Review, and happy WWDC week! I hope you're not too overwhelmed. Please enjoy today's issue which doesn't talk about what's new this year üòÅ

üíé Sponsor of the week - Bitrise

Last year Bitrise launched Mobile DevOps Assessment survey to the mobile ]]></description>
        <link>https://ioscodereview.com/issues/50/</link>
        <guid isPermaLink="false">647f2e939d2a890001992912</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Fri, 09 Jun 2023 12:49:04 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there, welcome to the 50th issue of iOS Code Review, and happy WWDC week! I hope you're not too overwhelmed. Please enjoy today's issue which <em>doesn't </em>talk about what's new this year üòÅ</p><div class="kg-card kg-callout-card kg-callout-card-yellow"><div class="kg-callout-text"><strong>üíé Sponsor of the week - Bitrise</strong><br><br>Last year Bitrise launched Mobile DevOps Assessment survey to the mobile app developer world. The results are in!<br>You can find answers to popular questions like ‚Äòwhat percentage of teams use code generation tools‚Äô. Download the report to receive the results, as well as lots of free resources on Mobile DevOps!<br><br><strong><a href="https://yo.bitrise.io/mobile-devops-assessment-report-2023-download.html?utm_source=sponsorships-newsletter&utm_campaign=MODAS_campaign_2023&utm_content=isocodereviewQ2">Download free report</a></strong></div></div><h2 id="happy-wwdc">Happy WWDC!</h2><p>I will share my favorites from WWDC 2023 at a later point - but for now, here are notable things available from iOS 15 that are a must for modern UIKit apps üòã</p><figure class="kg-card kg-image-card"><a href="https://twitter.com/jamesdempsey/status/1666068476883259397?ref=ioscodereview.com"><img src="https://ioscodereview.com/content/images/2023/06/Xnapper-2023-06-09-12.22.21.png" class="kg-image" alt loading="lazy" width="1226" height="622" srcset="https://ioscodereview.com/content/images/size/w600/2023/06/Xnapper-2023-06-09-12.22.21.png 600w, https://ioscodereview.com/content/images/size/w1000/2023/06/Xnapper-2023-06-09-12.22.21.png 1000w, https://ioscodereview.com/content/images/2023/06/Xnapper-2023-06-09-12.22.21.png 1226w" sizes="(min-width: 720px) 720px"></a></figure><h3 id="bar-appearance">Bar appearance</h3><p>Definition-based configuration for different states of the UINavigationBar: <code><a href="https://developer.apple.com/documentation/uikit/uinavigationbar/3198028-standardappearance?ref=ioscodereview.com">standardAppearance</a></code>, <code><a href="https://developer.apple.com/documentation/uikit/uinavigationbar/3198026-compactappearance?ref=ioscodereview.com">compactAppearance</a></code>, ¬†<code><a href="https://developer.apple.com/documentation/uikit/uinavigationbar/3198027-scrolledgeappearance?ref=ioscodereview.com">scrollEdgeAppearance</a></code>, <code><a href="https://developer.apple.com/documentation/uikit/uinavigationbar/3750865-compactscrolledgeappearance?ref=ioscodereview.com">compactScrollEdgeAppearance</a></code>. And there's a similar comnfiguration available for <code><a href="https://developer.apple.com/documentation/uikit/uitabbar/3198046-standardappearance?ref=ioscodereview.com">UITabbBar</a></code> üôÇ</p><h3 id="uibutton-styling">UIButton styling</h3><p>Definition-based configuring of the UIButtons, so making a capsule button is almost as easy as in SwiftUI using <a href="https://developer.apple.com/documentation/uikit/uibutton/configuration?ref=ioscodereview.com"><code>UIButton.Configuration</code></a>:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://ioscodereview.com/content/images/2023/06/image-1.png" class="kg-image" alt loading="lazy" width="780" height="600" srcset="https://ioscodereview.com/content/images/size/w600/2023/06/image-1.png 600w, https://ioscodereview.com/content/images/2023/06/image-1.png 780w" sizes="(min-width: 720px) 720px"><figcaption>https://useyourloaf.com/blog/button-configuration-in-ios-15/</figcaption></figure><h3 id="no-cell-subclassing">No cell subclassing</h3><p>It's not necessary anymore to subclass system cells - <code><a href="https://developer.apple.com/documentation/uikit/uitableviewcell/3750915-configurationupdatehandler?ref=ioscodereview.com">configurationUpdateHandler</a></code> lets us hook into state updates and update the cell's appearance. This fits well with the <code><a href="https://developer.apple.com/documentation/uikit/uitableviewcell/3601057-contentconfiguration?ref=ioscodereview.com">contentConfiguration</a></code> and <code><a href="https://developer.apple.com/documentation/uikit/uitableviewcell/3601055-backgroundconfiguration?ref=ioscodereview.com">backgroundConfiguration</a></code> of the cell - which again, make configuring cells as declarative as it can get in UIKit üòã And of course, this is available for both UITableView and UICollectionView. </p><figure class="kg-card kg-image-card"><img src="https://ioscodereview.com/content/images/2023/06/image.png" class="kg-image" alt loading="lazy" width="1198" height="350" srcset="https://ioscodereview.com/content/images/size/w600/2023/06/image.png 600w, https://ioscodereview.com/content/images/size/w1000/2023/06/image.png 1000w, https://ioscodereview.com/content/images/2023/06/image.png 1198w" sizes="(min-width: 720px) 720px"></figure><p>If we need to make a custom-designed cell, then we can dive into <em>content views</em> - a new way to provide the custom content for the cell. A content view works with a <code>contentConfiguration</code> - and again, it doesn't require subclassing of UITableViewCell/UICollectionViewCell. To learn about it, you can follow Apple's official interactive tutorial:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://developer.apple.com/tutorials/app-dev-training/using-content-views?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Using content views | Apple Developer Documentation</div><div class="kg-bookmark-description">In this tutorial, you‚Äôll add capabilities to the app‚Äôs editing mode that transform a view-only list of reminder details into editable controls.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://developer.apple.com/apple-logo.svg" alt><span class="kg-bookmark-author">Apple Developer Documentation</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://docs.developer.apple.com/tutorials/developer-og.jpg" alt></div></a></figure><h2 id="structural-identity-in-swiftui">Structural identity in SwiftUI</h2><p>Structural identity is how SwiftUI understands your view hierarchy and recognizes particular views without specific identifiers. It is crucial to understand how it works to build great and performant views with SwiftUI:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://swiftwithmajid.com/2021/12/09/structural-identity-in-swiftui/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Structural identity in SwiftUI</div><div class="kg-bookmark-description">Structural identity is the type of identity that SwiftUI uses to understand your views without an explicit identifier by using your layout description. This week we will learn how to improve performance and eliminate unwanted animations by using inert view modifiers in SwiftUI.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://swiftwithmajid.com/public/favicon.ico" alt><span class="kg-bookmark-author">Swift with Majid</span><span class="kg-bookmark-publisher">Majid Jabrayilov</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://swiftwithmajid.com/public/swiftui.png" alt></div></a></figure><h2 id="and-more">And more... </h2><p>For some less technical reading, my husband David has started a blog where he writes about the tech industry. He's been supporting me throughout my carreer journey, and I can only return the favour üôÇ If you're curious to read about the challenges of running a startup, or how we can fix the state of hiring, check out his writing:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://medium.com/@davidbbn/the-flawed-dance-of-recruitment-breaking-the-cycle-for-a-better-hiring-process-bab7c30a263c?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">The Flawed Dance of Recruitment: Breaking the Cycle for a Better Hiring Process</div><div class="kg-bookmark-description">Introduction</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://cdn-static-1.medium.com/_/fp/icons/Medium-Avatar-500x500.svg" alt><span class="kg-bookmark-author">Medium</span><span class="kg-bookmark-publisher">David Babayan</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://miro.medium.com/v2/resize:fit:1200/0*0wonEGM9ooxkxDPQ" alt></div></a></figure><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://medium.com/@davidbbn/the-silent-killer-of-startups-how-a-lack-of-inspiration-destroys-your-team-and-business-73c7f7c3e987?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">The Silent Killer of Startups: How a Lack of Inspiration Destroys Your Team and Business</div><div class="kg-bookmark-description">In this post, I summarise a decade of my experience, analyse problems that I encountered in every company I worked with and‚Ä¶</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://cdn-static-1.medium.com/_/fp/icons/Medium-Avatar-500x500.svg" alt><span class="kg-bookmark-author">Medium</span><span class="kg-bookmark-publisher">David Babayan</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://miro.medium.com/v2/resize:fit:1200/0*1g23PHOj8bOCwLaN" alt></div></a></figure><p></p><p>‚úåÔ∏è<br>Alright, that's it for today! <br>Thank you to <a href="https://yo.bitrise.io/mobile-devops-assessment-report-2023-download.html?utm_source=sponsorships-newsletter&utm_campaign=MODAS_campaign_2023&utm_content=isocodereviewQ2">Bitrise</a> for sponsoring this issue ‚ù§Ô∏è<br>I'm curious if you found any of the tips particularly interesting - let me know by replying to this email!</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #49 ]]></title>
        <description><![CDATA[ Hi there, welcome to the 49th issue of iOS Code Review! I hope you enjoy reading through today's collection üíå

Setapp offers a collection of 240+ trustworthy, advanced paid apps under one subscription. It takes away the pain of looking up, comparing, buying, and managing separate apps.

Try Setapp for free ]]></description>
        <link>https://ioscodereview.com/issues/49/</link>
        <guid isPermaLink="false">646f64281003b40001340e23</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 25 May 2023 17:05:24 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there, welcome to the 49th issue of iOS Code Review! I hope you enjoy reading through today's collection üíå</p><div class="kg-card kg-callout-card kg-callout-card-yellow"><div class="kg-callout-text"><strong>Setapp</strong> offers a collection of 240+ trustworthy, advanced paid apps under one subscription. It takes away the pain of looking up, comparing, buying, and managing separate apps.<br><br><a href="https://setapp.sjv.io/c/4300314/343321/5114?ref=ioscodereview.com"><strong>Try Setapp for free</strong></a></div></div><h2 id="the-efficiency-of">The efficiency of +=</h2><p>The <code>+=</code> operator, when performed a non-trivial number times, is much faster than addition and assignment with <code>+</code>. ¬†<em>(the Twitter integration is temporarily out of commission, click on the image to read the thread)</em></p><figure class="kg-card kg-image-card"><a href="https://twitter.com/cpatrascudev/status/1661340099190161409?ref=ioscodereview.com"><img src="https://ioscodereview.com/content/images/2023/05/Xnapper-2023-05-25-16.24.29.png" class="kg-image" alt loading="lazy" width="1206" height="1530" srcset="https://ioscodereview.com/content/images/size/w600/2023/05/Xnapper-2023-05-25-16.24.29.png 600w, https://ioscodereview.com/content/images/size/w1000/2023/05/Xnapper-2023-05-25-16.24.29.png 1000w, https://ioscodereview.com/content/images/2023/05/Xnapper-2023-05-25-16.24.29.png 1206w" sizes="(min-width: 720px) 720px"></a></figure><h2 id="ranged-line-limit-in-swiftui">Ranged line limit in SwiftUI</h2><p>We can specify a number of lines as a range, and SwiftUI will reserve space for the lower bound - even if the text itself takes less space (available from iOS 16)</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://mastodon.social/@ramzesenok/110420635568400311?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Roman (@ramzesenok@mastodon.social)</div><div class="kg-bookmark-description">Attached: 1 image - Day 21Setting line limit in #SwiftUI means setting its upper limit. Text will render as many lines as needed for content but no more that the limit. But we can also set a range as a limit. Now it will reserve space for the lower bound and render no more than upper bound lines</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://mastodon.social/packs/media/icons/apple-touch-icon-1024x1024-db6849588b44f525363c37b65ef0ac66.png" alt><span class="kg-bookmark-author">Mastodon</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://files.mastodon.social/media_attachments/files/110/420/634/425/707/478/original/d3a83bfbee012586.jpeg" alt></div></a></figure><h2 id="accessibility-for-custom-swiftui-views">Accessibility for custom SwiftUI views</h2><p>Whenever we make a fancy custom control in SwiftUI, we don't have to spend time making it accessible by itself - instead we can use the <code>.accessibilityRepresentation</code> modifier. Whenever VoiceOver navigation is used, SwiftUI will use the view created by this closure instead of our custom view. By using a system control in this representation, we save on effort while users will be happier ü§©</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://mastodon.social/@ramzesenok/110394467783618299?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Roman (@ramzesenok@mastodon.social)</div><div class="kg-bookmark-description">Attached: 1 image - Day 16Sometimes we come up with crazy fancy controls that are very inaccessible. We can try making it accessible here and there or we can also replace them with something very simple yet completely accessible. Here comes &#x60;accessibilityRepresentation&#x60; in play</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://mastodon.social/packs/media/icons/apple-touch-icon-1024x1024-db6849588b44f525363c37b65ef0ac66.png" alt><span class="kg-bookmark-author">Mastodon</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://files.mastodon.social/media_attachments/files/110/394/466/971/022/173/original/10dbb1c46a040055.jpeg" alt></div></a></figure><h2 id="custom-scopes-in-swift">Custom scopes in Swift </h2><p>I love this trick and use it quite a lot. Every set of curly braces is a scope - meaning that variables declared inside it are not available on the outside. Naturally, functions, closures, and if statements are scopes, but no one is stopping us from creating scopes whenever we want - the easiest way to do that is with a <code>do {}</code> syntax. <br>Why, you ask? This allows to isolate some intricate logic, when you don't want to move out a piece of code to a separate function, but still want some extra separation inside the funciton. Last time I used it for calculating frames inside <code>layoutSubviews</code>.</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://mastodon.social/@ramzesenok/110377223702997882?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Roman (@ramzesenok@mastodon.social)</div><div class="kg-bookmark-description">Attached: 1 image - Day 13Ever wanted to somehow scope a portion of logic from the rest? You can use &#x60;do {}&#x60; for that. Scoping can help you limit lifetime and visibility of some variables resulting in cleaner code and faster app</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://mastodon.social/packs/media/icons/apple-touch-icon-1024x1024-db6849588b44f525363c37b65ef0ac66.png" alt><span class="kg-bookmark-author">Mastodon</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://files.mastodon.social/media_attachments/files/110/377/222/515/737/038/original/da0b2cc848ea416c.jpeg" alt></div></a></figure><h2 id="the-importance-of-code-ownership">The importance of code ownership</h2><p>Most of important and successful projects, even though they started off small, go through different phases that turn a proud shiny code into a piece of cryptic code everyone fears and despises.<br>In this article you'll read about how and why it happens, and find recommendations on making sure the code is properly owned - and thus maintained.</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://betterprogramming.pub/the-underestimated-importance-of-clear-code-ownership-baed758e47b8?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">The Importance of Code Ownership</div><div class="kg-bookmark-description">Well-owned code is well-maintained code</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://cdn-static-1.medium.com/_/fp/icons/Medium-Avatar-500x500.svg" alt><span class="kg-bookmark-author">Better Programming</span><span class="kg-bookmark-publisher">Elye</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://miro.medium.com/v2/resize:fit:1200/0*H3S_YK6nECBOfe-3" alt></div></a></figure><p></p><p>‚úåÔ∏è<br>Alright, that's it for today! <br>I'm curious if you found any of the tips particularly interesting - let me know by replying to this email!<br><br><em>* this issue contains an affiliate link to <a href="https://setapp.sjv.io/c/4300314/343321/5114?ref=ioscodereview.com">Setapp</a></em></p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #48 ]]></title>
        <description><![CDATA[ Hi there, welcome to the 48th issue! Today you'll learn about initializing views, sorting arrays of strings, modern UISegmentedControl, and setting up git-ignore for your project. Enjoy! üåû

üíé Sponsor of the week - Bitrise

What happens when you survey 1600+ Mobile DevOps teams? You get 5 key Mobile DevOps benchmarks that ]]></description>
        <link>https://ioscodereview.com/issues/48/</link>
        <guid isPermaLink="false">645cd5d06b2acc000131225f</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 11 May 2023 14:53:06 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there, welcome to the 48th issue! Today you'll learn about initializing views, sorting arrays of strings, modern <code>UISegmentedControl</code>, and setting up git-ignore for your project. Enjoy! üåû</p><div class="kg-card kg-callout-card kg-callout-card-yellow"><div class="kg-callout-text"><strong>üíé Sponsor of the week - Bitrise</strong><br><br>What happens when you survey 1600+ Mobile DevOps teams? You get 5 key Mobile DevOps benchmarks that can guide mobile teams to high performance. Download our free report and start setting goals for your team based on industry-recognized benchmarks.<br><br><strong><a href="https://yo.bitrise.io/mobile-devops-assessment-report-2023-download.html?utm_source=sponsorships-newsletter&utm_campaign=MODAS_campaign_2023&utm_content=isocodereviewQ2">Download free report</a></strong></div></div><h2 id="lightweight-view-initialization">Lightweight view initialization</h2><p>Initializer of a SwiftUI view should be as lightweight as possible, as it is executed many times. In fact, it's a good rule of thumb for <code>UIView</code> and <code>UIViewController</code> initializers too - keep the heavier work for the moment when the view loads or appears. </p><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Don&#39;t perform performance intensive operations in the initializer of the view. The initializer is called again when the count is incremented. If you pass count to the GreetView init then GreetView body is called and evaluated.<a href="https://twitter.com/hashtag/SwiftUI?src=hash&ref_src=twsrc%5Etfw&ref=ioscodereview.com">#SwiftUI</a> <a href="https://t.co/WQ0NwpXAY5?ref=ioscodereview.com">pic.twitter.com/WQ0NwpXAY5</a></p>&mdash; Mohammad Azam (@azamsharp) <a href="https://twitter.com/azamsharp/status/1656492297251434496?ref_src=twsrc%5Etfw&ref=ioscodereview.com">May 11, 2023</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="sorting-user-entered-strings">Sorting user-entered strings</h2><p>Don't just use <code>.sorted()</code> on arrays of strings. A quote from <code><a href="https://developer.apple.com/documentation/foundation/nsstring/1409742-localizedstandardcompare?ref=ioscodereview.com">localizedStandardCompare(_:)</a></code> documentation:</p><blockquote>This method should be used whenever file names or other strings are presented in lists and tables where Finder-like sorting is appropriate. The exact sorting behavior of this method is different under different locales and may be changed in future releases. This method uses the current locale.</blockquote><p>By the way, Swift's String implementation is so great, that it already treats special characters correctly during equality checks with <code>==</code>. Using the right comparing method brings the same greatness to sorting of strings üôå <br><br>An example from <a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters/?ref=ioscodereview.com">the Swift docs</a> about equality with diatrics:</p><blockquote>The letter <code>√©</code> can be represented as the single Unicode scalar <code>√©</code> (<code>LATIN SMALL LETTER E WITH ACUTE</code>, or <code>U+00E9</code>). However, the same letter can also be represented as a <em><em>pair</em></em> of scalars ‚Äî a standard letter <code>e</code> (<code>LATIN SMALL LETTER E</code>, or <code>U+0065</code>), followed by the <code>COMBINING ACUTE ACCENT</code>scalar (<code>U+0301</code>). The <code>COMBINING ACUTE ACCENT</code> scalar is graphically applied to the scalar that precedes it, turning an <code>e</code> into an <code>√©</code> when it‚Äôs rendered by a Unicode-aware text-rendering system.<br><br>... Two <code>String</code> values (or two <code>Character</code> values) are considered equal if their extended grapheme clusters are <em><em>canonically equivalent</em></em>.<br><br>... <code>LATIN SMALL LETTER E WITH ACUTE</code> (<code>U+00E9</code>) is canonically equivalent to <code>LATIN SMALL LETTER E</code> (<code>U+0065</code>) followed by <code>COMBINING ACUTE ACCENT</code> (<code>U+0301</code>). Both of these extended grapheme clusters are valid ways to represent the character <code>√©</code>, and so they‚Äôre considered to be canonically equivalent</blockquote><p>Read the article from the tweet to learn about more ways of sorting arrays of strings.</p><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">You should use localizedStandardCompare when working with text that&#39;s presented to the user.<a href="https://t.co/DPlRXmO41e?ref=ioscodereview.com">https://t.co/DPlRXmO41e</a> <a href="https://t.co/eF5UKGeEQ5?ref=ioscodereview.com">pic.twitter.com/eF5UKGeEQ5</a></p>&mdash; Sarun W. (@sarunw) <a href="https://twitter.com/sarunw/status/1620874281059028997?ref_src=twsrc%5Etfw&ref=ioscodereview.com">February 1, 2023</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="modern-uisegmentedcontrol">Modern UISegmentedControl </h2><p>Lovely modern API for reacting to <code>UISegmentedControl</code> selection, that doesn't require <code>@objc</code> methods anymore:</p><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">It appears that Apple has made UISegmentedControl configurable using UIAction, similar to how they did it for UIButton. üëçüèª<a href="https://twitter.com/hashtag/iosdev?src=hash&ref_src=twsrc%5Etfw&ref=ioscodereview.com">#iosdev</a> <a href="https://t.co/nzOiH2nB40?ref=ioscodereview.com">pic.twitter.com/nzOiH2nB40</a></p>&mdash; Lee Kah Seng (@Lee_Kah_Seng) <a href="https://twitter.com/Lee_Kah_Seng/status/1646116887175266304?ref_src=twsrc%5Etfw&ref=ioscodereview.com">April 12, 2023</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="avoiding-junk-in-the-git-diff">Avoiding junk in the git diff </h2><p>Inside each <code>.xcodeproj</code> and <code>.xcworkspace</code> file there is a folder called <code>xcuserdata</code>, containing files that are individual to each user who opens the project - that users breakpoints, saved search scopes, and other configurations. <code>xcshareddata</code> folder contains files belonging to the whole project such as schemes and the <code>Package.resolved</code> file.<br>üí° <code> xcuserdata</code> folder should be git-ignored, to avoid polluting the git tree and commit history, especially on projects with many contributors.</p><figure class="kg-card kg-image-card"><img src="https://ioscodereview.com/content/images/2023/05/xcuserdata.png" class="kg-image" alt loading="lazy" width="656" height="669" srcset="https://ioscodereview.com/content/images/size/w600/2023/05/xcuserdata.png 600w, https://ioscodereview.com/content/images/2023/05/xcuserdata.png 656w"></figure><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">I hereby vow to start every new Xcode project with<br><br>&quot;touch .gitignore &amp;&amp; echo &quot;*.xcuserstate&quot; &gt;&gt; .gitignore&quot;<br><br>Maybe there&#39;s a way to automate that when initialising a git repo?</p>&mdash; Johan Forsell (@joforselldev) <a href="https://twitter.com/joforselldev/status/1600598788753788945?ref_src=twsrc%5Etfw&ref=ioscodereview.com">December 7, 2022</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Yes, if you create your repo on GitHub, you can actually select this .gitignore file in a dropdown (or just copy it manually):<a href="https://t.co/lLz3dXdGgj?ref=ioscodereview.com">https://t.co/lLz3dXdGgj</a></p>&mdash; Cihat G√ºnd√ºz (@Jeehut) <a href="https://twitter.com/Jeehut/status/1600730139725541379?ref_src=twsrc%5Etfw&ref=ioscodereview.com">December 8, 2022</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p></p><p>‚úåÔ∏è<br>Alright, that's it for today! <br>Thank you to <a href="https://yo.bitrise.io/mobile-devops-assessment-report-2023-download.html?utm_source=sponsorships-newsletter&utm_campaign=MODAS_campaign_2023&utm_content=isocodereviewQ2">Bitrise</a> for sponsoring this issue ‚ù§Ô∏è<br>I'm curious if you found any of the tips particularly interesting - let me know by replying to this email!</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #47 ]]></title>
        <description><![CDATA[ Hi there, welcome to the 47th issue of iOS Code Review! I hope you enjoy today's collection üåû

üíé Sponsor of the week - Bitrise

What happens when you survey 1600+ Mobile DevOps teams? You get 5 key Mobile DevOps benchmarks that can guide mobile teams to high performance. Download our free ]]></description>
        <link>https://ioscodereview.com/issues/47/</link>
        <guid isPermaLink="false">644aa19ea581e7003d5c18f7</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Fri, 28 Apr 2023 12:30:39 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there, welcome to the 47th issue of iOS Code Review! I hope you enjoy today's collection üåû</p><div class="kg-card kg-callout-card kg-callout-card-yellow"><div class="kg-callout-text"><strong>üíé Sponsor of the week - Bitrise</strong><br><br>What happens when you survey 1600+ Mobile DevOps teams? You get 5 key Mobile DevOps benchmarks that can guide mobile teams to high performance. Download our free report and start setting goals for your team based on industry-recognized benchmarks.<br><br><strong><a href="https://yo.bitrise.io/mobile-devops-assessment-report-2023-download.html?utm_source=sponsorships-newsletter&utm_campaign=MODAS_campaign_2023&utm_content=isocodereviewQ2">Download free report</a></strong></div></div><h2 id="use-the-right-assertions">Use the right assertions</h2><p>Swift offers a number of ways to assert, i.e. stop the program, when something unexpected happens. Here's the gist of what to use when:</p><ul><li>Use <code>assert()</code> as often as you want, because it lets you check things are how you expect without having a performance impact in release mode, where the check is ignored</li><li>Use the unconditional <code>assertionFailure()</code> if there‚Äôs somewhere your code shouldn‚Äôt reach, but it‚Äôs not a disaster if it happens.</li><li>Use <code>precondition()</code> only when a check is critical to keep your user safe (app will crash). Same goes for <code>fatalError()</code>.</li></ul><p>Related, Combine's <code><a href="https://developer.apple.com/documentation/combine/fail/breakpointonerror()?ref=ioscodereview.com">breakpointOnError()</a></code> acts as a precondition and will stop (crash) the app in release builds too:</p><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">TIL not to use Combine&#39;s breakpointOnError() in production builds.<br>It crashes the app when not attached to a debugger üò¨</p>&mdash; Marina Gornostaeva ‚ú® (@hybridcattt) <a href="https://twitter.com/hybridcattt/status/1437767688672133128?ref_src=twsrc%5Etfw&ref=ioscodereview.com">September 14, 2021</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>Read more on Hacking with Swift:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://www.hackingwithswift.com/plus/intermediate-swift/understanding-assertions?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Understanding assertions ‚Äì Hacking with Swift+</div><div class="kg-bookmark-description">Assertions allow us to have Swift silently check the state of our program at runtime, but if you want to get them right you need to understand some intricacies. In this article I‚Äôll walk you through the five ways we can make assertions in Swift, and provide clear advice on which to use and when.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://www.hackingwithswift.com/android-icon-192x192.png" alt><span class="kg-bookmark-author">Hacking with Swift</span><span class="kg-bookmark-publisher">Paul Hudson twostraws</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://www.hackingwithswift.com/img/thumbnails/vimeo-442522819.jpg" alt></div></a></figure><h2 id="private-set">Private Set</h2><p>Don't know who needs to hear this but here's a reminder that <code>private(set)</code> exists üôÇ</p><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">TIL you can write `public private(set) var` or even `public internal(set) var` in <a href="https://twitter.com/hashtag/swiftlang?src=hash&ref_src=twsrc%5Etfw&ref=ioscodereview.com">#swiftlang</a> for public get and private/internal set. I used to write a regular _property and a public computed property for that üòÖ</p>&mdash; Pavel (@rl_pavel) <a href="https://twitter.com/rl_pavel/status/1538334281440837637?ref_src=twsrc%5Etfw&ref=ioscodereview.com">June 19, 2022</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="implementing-reachability">Implementing reachability</h2><p>The users won‚Äôt always have a good internet connection, so optimizing your app for bad networking conditions is essential. <br>Apple directly advises against checking for connection state, and recommends attempting to make a network call either way, and respond to a failure. <br>When you really need to know the state of the connection, use <a href="https://developer.apple.com/documentation/network/nwpathmonitor?ref=ioscodereview.com"><code>NWPathMonitor</code></a> to observe conenctivity. It's available since iOS 12, so there's no need for a third party reachability library anymore.<br>Antoine covers more details in his new article:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://www.avanderlee.com/swift/optimizing-network-reachability/?ref=ioscodereview.com#responding-to-networking-errors"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Optimizing your app for Network Reachability</div><div class="kg-bookmark-description">Optimize your app for Networking Connectivity and prevent common mistakes like pre-checking for reachability.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://www.avanderlee.com/wp-content/uploads/fbrfg/apple-touch-icon.png?v&#x3D;2" alt><span class="kg-bookmark-author">SwiftLee</span><span class="kg-bookmark-publisher">Antoine van der Lee</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://swiftlee-banners.herokuapp.com/imagegenerator.php?title&#x3D;Optimizing+your+app+for+Network+Reachability" alt></div></a></figure><h2 id="available-attribute">@available attribute</h2><p>My favorite use for the <code>@available</code> attribute is marking <code>initWithCoder:</code> methods, so they don't come up in autocomplete for the class:</p><pre><code class="language-swift">final class MyView: UIView {

  @available(*, unavailable)
  required init?(coder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
  }
  
  init(customStuff: [Int]) {...}
}</code></pre><p>There are other handy uses, such as marking your methods as deprecated - we don't have to provide the iOS version, and can just mark the method as "undesireable" for use:</p><pre><code class="language-swift">@available(*, deprecated, message: "Use TheNewImplementation instead. OldImplementation will be deleted soon.")
class OldImplementation { ... }</code></pre><p>Here's a short handy list of possible parameters to the <code>@available</code> attribite:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://tanaschita.com/20230206-the-available-attribute-in-ios/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">How to use the @available attribute in Swift</div><div class="kg-bookmark-description">Swift provides the @available attribute which we can use to make our code only available for certain Swift language versions or platforms. Learn about the arguments unavailable, introduced, deprecated, obsoleted and more.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://tanaschita.com/favicon.ico" alt></div></div><div class="kg-bookmark-thumbnail"><img src="https://tanaschita.com/og/20230206-the-available-attribute-in-ios.png" alt></div></a></figure><p></p><p>‚úåÔ∏è<br>Alright, that's it for today! <br>Thank you to <a href="https://yo.bitrise.io/mobile-devops-assessment-report-2023-download.html?utm_source=sponsorships-newsletter&utm_campaign=MODAS_campaign_2023&utm_content=isocodereviewQ2">Bitrise</a> for sponsoring this issue ‚ù§Ô∏è<br>I'm curious if you found one of the tips particularly interesting - let me know by replying to this email!</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #46 ]]></title>
        <description><![CDATA[ Hi there,
welcome to the 46th issue of the newsletter! Today among other things I'm summarizing the updates in Xcode and Swift that affect code and project quality. Hope you enjoy the reading üòä


Iterating over some elements

Here's how to iterate over only some elements in the array. Both options, ]]></description>
        <link>https://ioscodereview.com/issues/46/</link>
        <guid isPermaLink="false">6437d17e4998d5003d511aa1</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 13 Apr 2023 13:37:25 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there, <br>welcome to the 46th issue of the newsletter! Today among other things I'm summarizing the updates in Xcode and Swift that affect code and project quality. Hope you enjoy the reading üòä</p><h2 id="iterating-over-some-elements">Iterating over some elements</h2><p>Here's how to iterate over only some elements in the array. Both options, for-case-let and for-in-if, are more efficient than filtering the array and iterating on the filtered results üôå</p><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Swift has a `for-case-let` syntax, which is equivalent to the `for-in...if-let` syntax. The former makes code cleaner but less expressive.<br>Personally, I would prefer to use the latter syntax to keep my code expressive. I wonder how commonly the `for-case-let` syntax is used. ü§î <a href="https://t.co/Fngk9h4e40?ref=ioscodereview.com">pic.twitter.com/Fngk9h4e40</a></p>&mdash; Lee Kah Seng (@Lee_Kah_Seng) <a href="https://twitter.com/Lee_Kah_Seng/status/1640950212482019328?ref_src=twsrc%5Etfw&ref=ioscodereview.com">March 29, 2023</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="xcode-143-swift-58">Xcode 14.3 &amp; Swift 5.8</h2><p>There's a bunch of improvements available in the new Swift and Xcode. Here are a few things that caught my attention: </p><h3 id="implicit-self">Implicit self</h3><ul><li>Implicit <code>self</code> is now permitted for <code>weak self</code> captures, after <code>self</code> is unwrapped:</li></ul><pre><code class="language-swift">class ViewController {
  let button: Button

  func setup() {
      button.tapHandler = { [weak self] in
          guard let self else { return }
          dismiss() // refers to `self.dismiss()`
      }
  }

  func dismiss() { ... }
}</code></pre><h3 id="debugging-previews-with-print">Debugging previews with print</h3><ul><li><code>print</code> output now appears in the console for SwiftUI Previews by selecting ‚ÄúPreview‚Äù tab in the console.</li></ul><h3 id="previews-in-modular-dependencies">Previews in modular dependencies</h3><ul><li>Fixed: Previews can fail when previewing a file inside of a Swift package target that is the dependency of an executable target. </li></ul><h3 id="waiting-for-expectations">Waiting for expectations</h3><ul><li>The <code>timeout</code> argument of <code>XCTestCase.wait(for:timeout:enforceOrder:)</code> and related methods is now optional‚Äîif you don‚Äôt specify it, the function waits indefinitely (until the overall test times out.) To ensure reasonable execution time, set an appropriate value for the <code>executionTimeAllowance</code> property of the running <code>XCTestCase</code> instance (<code>self</code>).</li><li><code>XCTestCase.wait(for:timeout:enforceOrder:)</code> and related methods are now marked unavailable in concurrent Swift functions because they can cause a test to deadlock. Instead, you can use the new concurrency-safe <code>XCTestCase.fulfillment(of:timeout:enforceOrder:)</code> method.</li></ul><h3 id="test-plans">Test plans</h3><ul><li>Xcode now defaults to using a test plan for new projects. Learn more about test plans in the documentation: <a href="https://developer.apple.com/documentation/xcode/organizing-tests-to-improve-feedback?changes=_8&ref=ioscodereview.com">Improving code assessment by organizing tests into test plans</a> </li></ul><p><br>Read about everything new here (this links directly to the section about Swift but you can scroll up and down to read about all the changes in Xcode): </p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://developer.apple.com/documentation/xcode-release-notes/xcode-14_3-release-notes?ref=ioscodereview.com#Swift"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Xcode 14.3 Release Notes | Apple Developer Documentation</div><div class="kg-bookmark-description">Update your apps to use new features, and test your apps against API changes.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://developer.apple.com/apple-logo.svg" alt><span class="kg-bookmark-author">Apple Developer Documentation</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://docs.developer.apple.com/tutorials/developer-og.jpg" alt></div></a></figure><p></p><p>‚úåÔ∏è<br>Alright, that's it for today.<br>I'm curious if you found one of the tips particularly interesting - let me know by replying to this email!</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #45 ]]></title>
        <description><![CDATA[ Hi there, welcome to the 45th issue of iOS Code Review!
I hope you enjoy the reading below üåû

üíé Supporter of the week - RevenueCat üíé

In-app subscriptions are a pain to implement, hard to test, and full of edge cases. RevenueCat makes it simple by providing a backend and a wrapper ]]></description>
        <link>https://ioscodereview.com/issues/45/</link>
        <guid isPermaLink="false">6413135c0ed503003db67ea5</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 16 Mar 2023 14:58:41 +0100</pubDate>
        <media:content url="https://ioscodereview.com/content/images/2023/03/ios-code-review-newsletter-header-4.png" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there, welcome to the 45th issue of iOS Code Review! <br>I hope you enjoy the reading below üåû</p><div class="kg-card kg-callout-card kg-callout-card-yellow"><div class="kg-callout-text"><strong>üíé Supporter of the week - RevenueCat üíé</strong><br><br>In-app subscriptions are a pain to implement, hard to test, and full of edge cases. <strong>RevenueCat</strong> makes it simple by providing a backend and a wrapper around Apple's StoreKit and Google Play Billing. Get started for free.<br><br><a href="https://www.revenuecat.com/?utm_source=ios_code_review&utm_medium=paid&utm_campaign=newsletter"><strong>Learn more</strong></a></div></div><h2 id="modern-uibutton-actions">Modern UIButton actions</h2><p>With iOS 17 on the doorstep (yes, it's 3 months until WWDC), most projects have upgraded to newer minimum deployment targets. So it's a perfect time to remind about this lovely <code>UIAction</code> API for adding handlers to <code>UIButton</code>s - where we don't need to involve @objc #selectors anymore üéâ</p><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">In case you are not aware, there is a more Swifty way to add an action to buttons in Swift since iOS 14.<a href="https://twitter.com/hashtag/iosdev?src=hash&ref_src=twsrc%5Etfw&ref=ioscodereview.com">#iosdev</a> <a href="https://t.co/WS5RpAkwlh?ref=ioscodereview.com">pic.twitter.com/WS5RpAkwlh</a></p>&mdash; Lee Kah Seng (@Lee_Kah_Seng) <a href="https://twitter.com/Lee_Kah_Seng/status/1632998136158498816?ref_src=twsrc%5Etfw&ref=ioscodereview.com">March 7, 2023</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="inline-images-in-text-in-swiftui">Inline images in Text in SwiftUI</h2><p>There's a lightweight way to insert images inside <code>Text</code> in SwiftUI - in string interpolation. If it's a custom image, it will be displayed in the original size. But if the image is an SF symbol, it will take on view modifiers applied to the <code>Text</code> - font, symbol variants, color, etc.</p><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">SwiftUI supports inline image with string interpolation in iOS 14.<a href="https://t.co/4aAqOS4ULI?ref=ioscodereview.com">https://t.co/4aAqOS4ULI</a><a href="https://twitter.com/hashtag/iosdev?src=hash&ref_src=twsrc%5Etfw&ref=ioscodereview.com">#iosdev</a> <a href="https://twitter.com/hashtag/swiftui?src=hash&ref_src=twsrc%5Etfw&ref=ioscodereview.com">#swiftui</a> <a href="https://t.co/0Gel0DE095?ref=ioscodereview.com">pic.twitter.com/0Gel0DE095</a></p>&mdash; Sarun W. (@sarunw) <a href="https://twitter.com/sarunw/status/1633916637752750080?ref_src=twsrc%5Etfw&ref=ioscodereview.com">March 9, 2023</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="deciphering-core-data-error-codes">Deciphering Core Data error codes </h2><p>CoreData produces nondescriptive errors such as ¬†<code>Domain=NSCocoaErrorDomain Code=1610 "The operation couldn't be completed. (Cocoa error 1610.)</code> . There's a way to quickly check the meaning of the error code - by opening <code>CoreDataErrors.h</code> with Quick Open (just make sure to open the original and not the Swift interface). Alternatively, it's available online: <a href="https://gist.github.com/hishma/7cb505f94230ac7d7ed53d52a1e6dab6?ref=ioscodereview.com">CoreDataErrors.h as a gist on GitHub</a></p><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">TIL that you can navigate to a file called `CoreDataErrors.h` in any iOS project where you can find all the obscure CoreData error codes in an enum along with their definitions. Just Shift+Cmd+O inside Xcode and type `CoreDataErrors.h` then press Enter. <a href="https://twitter.com/hashtag/CoreData?src=hash&ref_src=twsrc%5Etfw&ref=ioscodereview.com">#CoreData</a> <a href="https://twitter.com/hashtag/iOS?src=hash&ref_src=twsrc%5Etfw&ref=ioscodereview.com">#iOS</a> <a href="https://twitter.com/hashtag/Swift?src=hash&ref_src=twsrc%5Etfw&ref=ioscodereview.com">#Swift</a></p>&mdash; aly (@aliiyakan) <a href="https://twitter.com/aliiyakan/status/1131587587053957121?ref_src=twsrc%5Etfw&ref=ioscodereview.com">May 23, 2019</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="storyboards-vs-programmatic-layout">Storyboards vs programmatic layout</h2><p>When we talk about UIKit, programmatic layout has lots of benefits - easier code review, traceable changes via git, and code is a single-source-of-truth. But some teams prefer storyboards for their own reasons. In that case, here's an article with advice on how to improve quality of life when working with interface builder:</p><ul><li>understanding the XML structure</li><li>what issues to look for during code review</li><li>avoiding merge conflicts by locking against changes</li></ul><p><em>Note:</em> In the article the author mentions faster compilation time with storyboards vs programmatic layout. That can be true with lots and lots of layout code, but also the code structure itself affects compilation time, not only the amount of it. For example, if you use a global spacing constant, changing that one value can cause almost a full re-compile, while changing one storyboard file only recompiles that one file. </p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://medium.com/99dotco/why-did-we-change-our-ios-rule-to-allow-using-storyboard-45cb48d024?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Why did we change our iOS rule to allow using Storyboard?</div><div class="kg-bookmark-description">Our UI creation rule was creating a UI programmatically. But recently, we changed it.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://cdn-static-1.medium.com/_/fp/icons/Medium-Avatar-500x500.svg" alt><span class="kg-bookmark-author">99.co</span><span class="kg-bookmark-publisher">Sungwook (Shawn) Baek</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://miro.medium.com/v2/resize:fit:1200/1*ePqFvQNf3TEP7fEMA-S-jA.png" alt></div></a></figure><p></p><p>‚úåÔ∏è<br>Alright, that's it for today! Thank you to <a href="https://www.revenuecat.com/?utm_source=ios_code_review&utm_medium=paid&utm_campaign=newsletter">RevenueCat</a> for sponsoring this issue ‚ù§Ô∏è<br>I'm curious if you found one of the tips particularly interesting - let me know by replying to this email!</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #44 ]]></title>
        <description><![CDATA[ Hi there,
Welcome to the 44th issue of iOS Code Review! Today I'm sharing five topics that caught my attention during the past couple of weeks. Enjoy the reading!

üíé Supporter of the week - RevenueCat üíé

In-app subscriptions are a pain to implement, hard to test, and full of edge cases. ]]></description>
        <link>https://ioscodereview.com/issues/44/</link>
        <guid isPermaLink="false">64008003f9eebe003df594ca</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 02 Mar 2023 13:48:03 +0100</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there, <br>Welcome to the 44th issue of iOS Code Review! Today I'm sharing five topics that caught my attention during the past couple of weeks. Enjoy the reading!</p><div class="kg-card kg-callout-card kg-callout-card-yellow"><div class="kg-callout-text"><strong>üíé Supporter of the week - RevenueCat üíé</strong><br><br>In-app subscriptions are a pain to implement, hard to test, and full of edge cases. <strong>RevenueCat</strong> makes it simple by providing a backend and a wrapper around Apple's StoreKit and Google Play Billing. Get started for free.<br><br><a href="https://www.revenuecat.com/?utm_source=ios_code_review&utm_medium=paid&utm_campaign=newsletter">Learn more</a></div></div><h2 id="structuring-unit-tests">Structuring unit tests</h2><p>To prevent our complex unit tests from turning into a mush of hard-to-read code, we can annotate the tests using the Given-When-Then technique:</p><!--kg-card-begin: markdown--><pre><code>// Given
let mockStorage = Storage(value: &quot;123&quot;)
let sut = Cache(storage: mockStorage)
// When
sut.clear()
// Then
XCTAssertEqual(mockStorage.value, nil)
</code></pre>
<!--kg-card-end: markdown--><p>This is a tiny example, but a real saver for more complex test scenarios. <br>Read more by Martin Fowler:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://martinfowler.com/bliki/GivenWhenThen.html?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">bliki: GivenWhenThen</div><div class="kg-bookmark-description">a bliki entry for GivenWhenThen</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://martinfowler.com/favicon.ico" alt><span class="kg-bookmark-author">martinfowler.com</span><span class="kg-bookmark-publisher">Martin Fowler</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://martinfowler.com/logo-sq.png" alt></div></a></figure><h2 id="dont-change-default-params-when-subclassing">Don't change default params when subclassing</h2><p>This unexpected behavior came as a total surprise for me - when we override a method with default parameters, sometimes the default parameters of the superclass's method will be used. So we should keep the default values the same in the override's method signature to avoid surprises and bugs.</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://betterprogramming.pub/an-unexpected-behavior-of-subclasses-e684b3267e30?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">An Unexpected Behavior of Subclasses in Swift</div><div class="kg-bookmark-description">Don‚Äôt change default param‚Äôs values when subclassing</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://cdn-static-1.medium.com/_/fp/icons/Medium-Avatar-500x500.svg" alt><span class="kg-bookmark-author">Better Programming</span><span class="kg-bookmark-publisher">Riccardo Cipolleschi</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://miro.medium.com/max/1200/0*Oz6xtDUU5FQDlXvl" alt></div></a></figure><h2 id="delegate-naming-conventions">Delegate naming conventions</h2><p>The delegate pattern is familiar to iOS developers, but naming of the delegate methods can differ. A good practice is to include the sender parameter, and make it clear in the function name that it's a delegate method, so it stands out at the implementer side.<br>Read about good naming conventions for delegate methods by John Sundell:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://swiftbysundell.com/articles/delegation-in-swift/?ref=ioscodereview.com#protocols"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Delegation in Swift | Swift by Sundell</div><div class="kg-bookmark-description">The delegate pattern has long been very prominent on Apple‚Äôs platforms, and used for everything from handling table view events using UITableViewDelegate, to modifying cache behavior using NSCacheDelegate. This week, let‚Äôs take a look at a few ways to implement the delegate pattern, along with their‚Ä¶</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://swiftbysundell.com/images/favicon.png" alt><span class="kg-bookmark-author">Swift by Sundell</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://www.swiftbysundell.com/images/social.png" alt></div></a></figure><h2 id="fixing-file-header-template-for-packages">Fixing file header template for packages</h2><p>Xcode still doesn't add proper filename, project name and copyright into new files created in SPM packages. Here's a short article explaining how to finally fix that:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://samwize.com/2023/02/28/xcode-header-template-for-swift-packages/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Xcode Header Template for Swift Packages</div><div class="kg-bookmark-description">If you use Swift Package, there are 2 pesky problems whenever you create a new file.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://samwize.com/images/favicon-180.png" alt><span class="kg-bookmark-author">@samwize</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://samwize.com/images/empty-swift-file-template.jpg" alt></div></a></figure><h2 id="learn-about-swiftui-view-lifecycle">Learn about SwiftUI view lifecycle</h2><p>The demo project you didn't know you needed :) </p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://github.com/ole/swiftui-view-lifecycle?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">GitHub - ole/swiftui-view-lifecycle: Observe how different SwiftUI container views affect state and lifecycle events (onAppear, onDisappear).</div><div class="kg-bookmark-description">Observe how different SwiftUI container views affect state and lifecycle events (onAppear, onDisappear). - GitHub - ole/swiftui-view-lifecycle: Observe how different SwiftUI container views affect‚Ä¶</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://github.com/fluidicon.png" alt><span class="kg-bookmark-author">GitHub</span><span class="kg-bookmark-publisher">ole</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://opengraph.githubassets.com/e7002a6f8ca283b5dcbe282b41c2131df0d6abc170bd7500a537dced105c09c0/ole/swiftui-view-lifecycle" alt></div></a></figure><p></p><p>‚úåÔ∏è<br>Alright, that's it for today! Thank you to <a href="https://www.revenuecat.com/?utm_source=ios_code_review&utm_medium=paid&utm_campaign=newsletter">RevenueCat</a> for sponsoring this issue ‚ù§Ô∏è<br>I'm curious if you found one of the tips particularly interesting - let me know by replying to this email!</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #43 ]]></title>
        <description><![CDATA[ Hi there, welcome to the 43rd issue and happy valentines day üíå
Enjoy the reading!

üíé Sponsor of the week - RevenueCat üíé

In-app subscriptions are a pain to implement, hard to test, and full of edge cases. RevenueCat makes it simple by providing a backend and a wrapper around Apple's StoreKit and ]]></description>
        <link>https://ioscodereview.com/issues/43/</link>
        <guid isPermaLink="false">63eb54ceb29b78003d8b5129</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Tue, 14 Feb 2023 13:18:23 +0100</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there, welcome to the 43rd issue and happy valentines day üíå<br>Enjoy the reading!</p><div class="kg-card kg-callout-card kg-callout-card-yellow"><div class="kg-callout-text"><strong>üíé Sponsor of the week - RevenueCat üíé</strong><br><br>In-app subscriptions are a pain to implement, hard to test, and full of edge cases. <strong>RevenueCat</strong> makes it simple by providing a backend and a wrapper around Apple's StoreKit and Google Play Billing. Get started for free.<br><br><a href="https://www.revenuecat.com/?utm_source=ios_code_review&utm_medium=paid&utm_campaign=newsletter">Learn more</a></div></div><h2 id="documenting-hacks">Documenting hacks</h2><p>How often do you add dispatch.async as a way to fix a bug? Hopefully not often! The core of solving a bug without causing more bugs, is understanding the root cause and fixing <em>that</em>. <br>But sometimes, even though we find the root cause, there's no way to address it, so a hacky workaround is necessary. In that case, make sure to add a detailed comment next to the hack. For your colleagues and your future self!</p><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">The only right way to add DispatchQueue.main.async to fix a bug - with a big fat comment on top üëá <a href="https://t.co/EcXMNoi9pu?ref=ioscodereview.com">pic.twitter.com/EcXMNoi9pu</a></p>&mdash; Marina Gornostaeva ‚ú® (@hybridcattt) <a href="https://twitter.com/hybridcattt/status/1625072288755245058?ref_src=twsrc%5Etfw&ref=ioscodereview.com">February 13, 2023</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="two-ways-to-mock-in-tests">Two ways to mock in tests</h2><p>Here's Manuel describing two ways to implement a loading view model and its tests. One employs protocols for dependency injecion, and another uses closures. The same example code is used in both approaches, so you can easily compare and pick your favorite. Beautiful and concise articles, with links to GitHub included.</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://mdb1.github.io/2023-02-13-enhancing-testability-with-protocols/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Enhancing Testability with protocols</div><div class="kg-bookmark-description">In the last post we‚Äôve discussed hot to enhance testability without using protocols. In this one, we will build something similar but using protocols instead. We will be using dependency injection to be able to inject the real objects in the app, and inject mock objects in the tests / previews. We w‚Ä¶</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://mdb1.github.io/favicon.ico" alt><span class="kg-bookmark-author">The Product Engineer</span><span class="kg-bookmark-publisher">Manuel Herrera</span></div></div></a></figure><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://mdb1.github.io/2023-02-03-enhancing-testability-without-protocols/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Enhancing Testability without protocols</div><div class="kg-bookmark-description">We have all used protocols to enhance testability in our apps, but that can become too verbose, and add extra layers of abstractions to the code. Here is a different approach, without using protocols, that can achieve the same results with way less code. Let‚Äôs say we have a screen with a button that‚Ä¶</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://mdb1.github.io/favicon.ico" alt><span class="kg-bookmark-author">The Product Engineer</span><span class="kg-bookmark-publisher">Manuel Herrera</span></div></div></a></figure><h2 id="dont-subclass-urlcache">Don't subclass URLCache</h2><p>Few days ago I saw a post by Nikita on Mastodon asking if anyone could help him solve a bug with his <code>URLCache</code> subclass not actually caching anything. Some days later, he wrote a post with his findings. <br>Turns out, nowadays <code>URLCache</code> is not subclassable anymore, even though the documentation states that it is. Instead, we should build our custom caching logic above the url loading layer. </p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://zhuk.fi/subclassing-urlcache/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">A path of pain with URLCache eviction and subclassing</div><div class="kg-bookmark-description">URLCache class implements the caching of responses to URL load requests, by mapping NSURLRequest objects to CachedURLResponse objects. It provides a composite in-memory and on-disk cache, and lets you manipulate the sizes of both the in-memory and on-disk portions. You can also control the path wher‚Ä¶</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://zhuk.fi/content/images/size/w256h256/2022/05/icon.png" alt><span class="kg-bookmark-author">Zhuk Notes</span><span class="kg-bookmark-publisher">Nikita Zhuk</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://zhuk.fi/content/images/2022/05/mountains-bg-1.jpeg" alt></div></a></figure><h2 id="whats-new-in-swifta-refresher">What's new in Swift - a refresher</h2><p>Sometimes when new stuff is released in Swift or the SDK, it gets forgotten because you can't use it right away. Swift versions is one of those things - they are released even before Xcode is.<br>So here's a refresher on the lovely Swift features we can now introduce in our projects on Xcode 14+ - the shorthand <code>if let</code>, new regex syntax, and more. Available in video and article format:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://www.swiftwithvincent.com/blog/discover-some-new-features-of-swift-5-7?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Discover some New Features of Swift 5.7 ‚Äî Swift with Vincent</div><div class="kg-bookmark-description">You‚Äôre more of a video kind of person? I‚Äôve got you covered! Here‚Äôs a video with the same content than this article üçø</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/bd40c4d4-dc8b-48b7-a0cc-2209de7d1ab6/favicon.ico" alt><span class="kg-bookmark-author">Swift with Vincent</span><span class="kg-bookmark-publisher">Vincent Pradeilles</span></div></div><div class="kg-bookmark-thumbnail"><img src="http://static1.squarespace.com/static/63139bb1e1a1a078e071f30c/63139c36429a5c059fca0020/6365055972188b0435e4e726/1667674177137/Swift-5.7.png?format&#x3D;1500w" alt></div></a></figure><h2 id="merge-when-ready-on-github">Merge when ready on GitHub</h2><p>Are you working in a repo where you have to wait for CI to finish before merging a pull request? Then GitHub's new merge queues feature is going to improve your day-to-day :)</p><blockquote>Before merge queues, developers were often required to update their pull request branches prior to merging to ensure their changes wouldn't break the main branch when merged. Each update resulted in a fresh round of continuous integration (CI) checks that would have to finish before the developer could attempt to merge. If another pull request got merged, every developer would have to go through the process again.</blockquote><p>Even if you're not needing the queue part, the "Merge when ready" button is the feature I've been missing all along.</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://github.blog/changelog/2023-02-08-pull-request-merge-queue-public-beta/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Pull request merge queue (public beta) | GitHub Changelog</div><div class="kg-bookmark-description">Pull request merge queue (public beta)</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit&#x3D;192%2C192" alt><span class="kg-bookmark-author">The GitHub Blog</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://user-images.githubusercontent.com/2503052/217027654-f570fb25-092d-476e-b6f5-0b31b8514662.png" alt></div></a></figure><p></p><p>‚úåÔ∏è<br>Alright, that's it for today! Thank you to <a href="https://www.revenuecat.com/?utm_source=ios_code_review&utm_medium=paid&utm_campaign=newsletter">RevenueCat</a> for sponsoring this issue ‚ù§Ô∏è<br>I'm curious if you found one of the tips particularly interesting - let me know by replying to this email!</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #42 ]]></title>
        <description><![CDATA[ Hi there,
Welcome to the 42nd issue, the answer to life and everything! This time, among other topics, there's a couple of tips about code and project setup improvements that facilitate speed - faster app launch, execution speed, and build times. Enjoy!

By the way, next issue will arrive on ]]></description>
        <link>https://ioscodereview.com/issues/42/</link>
        <guid isPermaLink="false">63dbb520181fc4003dc994da</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 02 Feb 2023 15:07:19 +0100</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there, <br>Welcome to the 42nd issue, the answer to life and everything! This time, among other topics, there's a couple of tips about code and project setup improvements that facilitate speed - faster app launch, execution speed, and build times. Enjoy!</p><p>By the way, next issue will arrive on Tuesday, February 14th üíå</p><div class="kg-card kg-callout-card kg-callout-card-yellow"><div class="kg-callout-text"><strong>üíé Supporter of the week - Paste üíé</strong><br><br><strong>Paste</strong> is like a time machine for your clipboard. It brings all your copied items together in one place and makes it super easy to find your snippets with visual previews and powerful search. <br><br>It‚Äôs a go-to tool for thousands of developers who aim to speed up their daily workflow on the Mac. <br><br>Try <strong>Paste</strong> for free at üëâ <strong><a href="https://pasteapp.io/?ref=ioscodereview">pasteapp.io</a> </strong><br>they‚Äôre also <a href="https://pasteapp.notion.site/Join-Paste-Team-0499145c46fa46258d873bdb4ba05213?ref=ioscodereview.com">hiring macOS/iOS developers</a> ‚ò∫Ô∏è</div></div><h2 id="speeding-app-launch-by-improving-code">Speeding app launch by improving code</h2><p>A story about DoorDash improving their app launch time by auditing and improving code that's run during startup. Among other things, I was surprised how small changes make a big difference. For example, shifting from using <code>String(describing:)</code> to <code>ObjectIdentifier</code> boosted their launch time by 11%! </p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://doordash.engineering/2023/01/31/how-we-reduced-our-ios-app-launch-time-by-60/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">How We Reduced Our iOS App Launch Time by 60%</div><div class="kg-bookmark-description">Learn how DoorDash went about optimizing our customers‚Äô experience and making continuous improvements in app launch times</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://i0.wp.com/doordash.engineering/wp-content/uploads/2019/01/cropped-doordash_icon.jpg?fit&#x3D;192%2C192&amp;ssl&#x3D;1" alt><span class="kg-bookmark-author">DoorDash Engineering Blog</span><span class="kg-bookmark-publisher">Filip Busic</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://doordash.engineering/wp-content/uploads/2023/01/jake-grella-JV-EwgPrpwI-unsplash-e1674862556595.jpg" alt></div></a></figure><h2 id="optimizing-code-performance">Optimizing code performance</h2><p>In this article you'll learn about even more small tweaks you can make to Swift code that would optimize for performance. I love how Avi includes the "price table" - the tradeoffs for each of the suggestions üëç</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://betterprogramming.pub/9-ways-to-boost-your-swift-code-performance-56e0986dd9ec?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">9 Ways to Boost Your Swift Code Performance</div><div class="kg-bookmark-description">Some tips on squeezing Swift for speed</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://cdn-static-1.medium.com/_/fp/icons/Medium-Avatar-500x500.svg" alt><span class="kg-bookmark-author">Better Programming</span><span class="kg-bookmark-publisher">Avi Tsadok</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://miro.medium.com/max/1200/1*xa2BS9HB9cgeqNnlzumBvA.jpeg" alt></div></a></figure><h2 id="improving-linting-speed">Improving linting speed</h2><p>Many of us use SwiftLint, and if you don't - it's a good idea to add it to the project. <br>Xcode 14 introduced a new warning, notifying us of a previously non-obvious fact - with the default setup, SwiftLint is ran on all source files in the project, even for incremental builds, when only one file was changed, for example.<br>So the incremental builds are slower than they could be - and on large projects this could be a noticeable difference. </p><figure class="kg-card kg-image-card"><img src="https://ioscodereview.com/content/images/2023/02/image.png" class="kg-image" alt loading="lazy" width="1232" height="196" srcset="https://ioscodereview.com/content/images/size/w600/2023/02/image.png 600w, https://ioscodereview.com/content/images/size/w1000/2023/02/image.png 1000w, https://ioscodereview.com/content/images/2023/02/image.png 1232w" sizes="(min-width: 720px) 720px"></figure><p>So what can we do? If we just accept Xcode's suggestion, it will just silence the warning. Gladly the warning is useful here - it hints that we can configure it to work together with incremental builds, so it would only run on files that changed. ¬†</p><p>Steven here made a detailed write-up on how to configure this in Xcode, so you get faster incremental builds:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://github.com/steven851007/SwiftLint_build_phase_example?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">GitHub - steven851007/SwiftLint_build_phase_example</div><div class="kg-bookmark-description">Contribute to steven851007/SwiftLint_build_phase_example development by creating an account on GitHub.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://github.com/fluidicon.png" alt><span class="kg-bookmark-author">GitHub</span><span class="kg-bookmark-publisher">steven851007</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://opengraph.githubassets.com/f6a4ee03afe8609df9555638c915e63da2679be2e6b07dda3ddd36c4e23fa9d4/steven851007/SwiftLint_build_phase_example" alt></div></a></figure><h2 id="formatting-json-strings">Formatting JSON strings</h2><p>A small reminder that we can write JSON strings rich with quotation marks without escaping them - keeping the readability of the JSON.</p><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">The best ways to streamline working with JSON strings in Swift that I&#39;ve been using:<br><br>‚Ä¢ Use triple quotes<br>‚Ä¢ Use the pound character <br><br>What others would you add?<a href="https://twitter.com/hashtag/iosdev?src=hash&ref_src=twsrc%5Etfw&ref=ioscodereview.com">#iosdev</a> <a href="https://twitter.com/hashtag/swiftlang?src=hash&ref_src=twsrc%5Etfw&ref=ioscodereview.com">#swiftlang</a> <a href="https://t.co/veUZnxTk85?ref=ioscodereview.com">pic.twitter.com/veUZnxTk85</a></p>&mdash; Catalin Patrascu (@cpatrascudev) <a href="https://twitter.com/cpatrascudev/status/1620794707784654849?ref_src=twsrc%5Etfw&ref=ioscodereview.com">February 1, 2023</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="on-testing">On testing</h2><p>It's not the first time I share one of Jason's thoughts. I find most of what he writes extremely insightful. If you're still on Twitter, make sure to give him a follow!</p><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">When writing a test for a class, don&#39;t make it your focus to test all the class&#39;s methods.<br><br>Instead, make it your focus to test all the class&#39;s behaviors.<br><br>This way the tests will be more likely to possess an important quality: meaning.</p>&mdash; Jason Swett (@JasonSwett) <a href="https://twitter.com/JasonSwett/status/1620801148486848512?ref_src=twsrc%5Etfw&ref=ioscodereview.com">February 1, 2023</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p></p><p>‚úåÔ∏è<br>Alright, that's it for today! Thank you to <a href="https://pasteapp.io/?ref=ioscodereview">Paste</a> for sponsoring this issue (and here's their <a href="https://pasteapp.notion.site/Join-Paste-Team-0499145c46fa46258d873bdb4ba05213?ref=ioscodereview.com">iOS/macOS developer job posting</a>).<br>I'm curious if you found one of the tips particularly interesting - let me know by replying to this email!</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #41 ]]></title>
        <description><![CDATA[ Hi there,
Welcome to the 41st issue of Ô£ø iOS Code Review üëã I hope you enjoy the reading!

üíé Supporter of the week - Coduo üíé

Coduo lets you share and collaborate in Xcode by streaming your Xcode project live into any browser, with full 2-way control.

Simply invite a friend with a ]]></description>
        <link>https://ioscodereview.com/issues/41/</link>
        <guid isPermaLink="false">63c92229d7f57f003d8d9e33</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 19 Jan 2023 14:15:00 +0100</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there, <br>Welcome to the 41st issue of Ô£ø iOS Code Review üëã I hope you enjoy the reading!</p><div class="kg-card kg-callout-card kg-callout-card-yellow"><div class="kg-callout-text"><strong>üíé Supporter of the week - Coduo üíé</strong><br><br><strong>Coduo</strong> lets you share and collaborate in Xcode by streaming your Xcode project live into any browser, with full 2-way control.<br><br>Simply invite a friend with a <strong>Coduo</strong> link, they open it in their browser, and just like magic - you are both working on the same Xcode project, with voice chat and full mouse &amp; keyboard control for both users. <br><br><strong><a href="https://apps.apple.com/us/app/coduo-pair-coding-for-xcode/id6443565833?ref=ioscodereview.com">Try Now</a></strong></div></div><h2 id="my-favorite-architecture">My favorite architecture</h2><p>Here's my favorite architecture stack for UIKit apps. I'm planning to write more about the different aspects of it - got a few questions in the comments there. What would you like to hear about first? (let me know by replying to this email)</p><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">The architecture used (my goto):<br>- coordinators<br>- MVVM<br>- repository pattern w/ simple networking &amp; Codable<br>- UIKit with SwiftUI previews<br>- Modern collection views w/ compositional layout &amp; diffable datasources<br>- Container view controllers<br>- Design system w/ UIButton.Configuration</p>&mdash; Marina Gornostaeva ‚ú® (@hybridcattt) <a href="https://twitter.com/hybridcattt/status/1612559829889085446?ref_src=twsrc%5Etfw&ref=ioscodereview.com">January 9, 2023</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="vstack-lazyvstack-vs-list">VStack, LazyVStack vs List</h2><p>Here Pitt compares the performance of the three options, on a real app. Excellent explanation of the differences, and tl;dr - never use <code>VStack</code> for lists with many elements.</p><figure class="kg-card kg-embed-card"><iframe width="200" height="113" src="https://www.youtube.com/embed/yrly21IFQdY?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen title="Performance between LazyVStack, VStack and List #SwiftUI"></iframe></figure><p>In case you need to implement a long list with infinite scrolling, here's Donny summarizing how to achieve it with <code>LazyVStack</code> and <code>List</code>:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://www.donnywals.com/implementing-an-infinite-scrolling-list-with-swiftui-and-combine/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Implementing an infinite scrolling list with SwiftUI and Combine</div><div class="kg-bookmark-description">Learn how to use SwiftUI‚Äôs onAppear and Combine to build a List that scrolls forever. As a bonus, you‚Äôll also see how you can achieve the same with a LazyVStack.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://www.donnywals.com/wp-content/uploads/cropped-site-icon-270x270.png" alt><span class="kg-bookmark-author">Donny Wals</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://www.donnywals.com/wp-content/uploads/dw_header.jpg" alt></div></a></figure><h2 id="on-technical-debt">On technical debt</h2><p>Loving the analogies with the financial world. Technical debt is like actual debt, we borrow to be able to afford something we otherwise can't. Improving or cleaning up code is like an investment - we spend time to get something in return later.</p><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">How do you decide whether to clean up a piece of code or to leave it alone?<br><br>And how do you decide how much to clean it up?<br><br>Think of it like this: every cleanup job is a bet that your time spent will be paid back by easier future maintenance. Aim for sound bets.</p>&mdash; Jason Swett (@JasonSwett) <a href="https://twitter.com/JasonSwett/status/1611104443105267719?ref_src=twsrc%5Etfw&ref=ioscodereview.com">January 5, 2023</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="unwrapping-optionals">Unwrapping optionals</h2><p>Three ways to unwrap an optional, shaped as a meme:</p><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">(from <a href="https://twitter.com/DonnyWals?ref_src=twsrc%5Etfw&ref=ioscodereview.com">@DonnyWals</a>) <a href="https://t.co/mqzCDszyLG?ref=ioscodereview.com">pic.twitter.com/mqzCDszyLG</a></p>&mdash; a meme page to check while Xcode is indexing files (@ios_memes) <a href="https://twitter.com/ios_memes/status/1613514390577479680?ref_src=twsrc%5Etfw&ref=ioscodereview.com">January 12, 2023</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="is-this-good-code">Is this good code?</h2><p>My galaxy-brain answer to this would be: as long as this function is covered by extensive unit tests, it doesn't matter that much how it's implemented.</p><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Junior eng: this is good code<br>Medior eng: hold my beer üç∫<br>Senior eng: this is good code <a href="https://t.co/YpHvucX3O6?ref=ioscodereview.com">https://t.co/YpHvucX3O6</a></p>&mdash; Willem Spruijt (@wspruijt) <a href="https://twitter.com/wspruijt/status/1615346728940732416?ref_src=twsrc%5Etfw&ref=ioscodereview.com">January 17, 2023</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>‚úåÔ∏è<br>Alright, that's it for today! Thank you to <a href="https://apps.apple.com/us/app/coduo-pair-coding-for-xcode/id6443565833?ref=ioscodereview.com">Coduo</a> for sponsoring this issue.<br>I'm curious if you found one of the tips particulary interesting - let me know by replying to this email!</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #40 ]]></title>
        <description><![CDATA[ Hi there,
Welcome to the 40th edition of Ô£ø iOS Code Review! I hope you had a wonderful holiday season and a happy new year. I'm wishing that 2023 will be a better year than the last.
In this issue, I have a variety of tips to share with you. I ]]></description>
        <link>https://ioscodereview.com/issues/40/</link>
        <guid isPermaLink="false">63b6b20d09641c003df0d26e</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 05 Jan 2023 14:13:42 +0100</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,<br>Welcome to the 40th edition of Ô£ø iOS Code Review! I hope you had a wonderful holiday season and a happy new year. I'm wishing that 2023 will be a better year than the last.<br>In this issue, I have a variety of tips to share with you. I hope you enjoy the reading! </p><div class="kg-card kg-callout-card kg-callout-card-yellow"><div class="kg-callout-text"><strong>üíé Sponsor of the week - dataTile for Simulator üíé</strong><br><br>Forget about console debugging! Reduce development time by using <strong>dataTile for Simulator</strong>, an Xcode companion app. It works with your Xcode Simulator, automatically detects any debug data you log, and prominently displays it in a beautiful UI üòç <br><br>It requires no configuration, project changes or 3rd party code, if you're using Apple's unified logging. It just works!<br><br><a href="https://www.producthunt.com/posts/datatile-for-simulator?ref=ioscodereview.com"><strong>Try for free üòé</strong></a></div></div><h2 id="ordered-dictionary-anyone">Ordered dictionary anyone?</h2><p>Did you know that Swift has an official package with ordered versions of our well-known data structures: <code>OrderedDictionary</code> and <code>OrderedSet</code>? They live in a separate SPM package because the Swift core team decided that such components should live in separate packages until they are deemed worthy of inclusion in the standard library. </p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://github.com/apple/swift-collections?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">GitHub - apple/swift-collections: Commonly used data structures for Swift</div><div class="kg-bookmark-description">Commonly used data structures for Swift. Contribute to apple/swift-collections development by creating an account on GitHub.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://github.com/fluidicon.png" alt><span class="kg-bookmark-author">GitHub</span><span class="kg-bookmark-publisher">apple</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://opengraph.githubassets.com/a403bc6d3a033e3947d7fafbd8acfbf65cd9aab39316d2c4f535408d07a3dca9/apple/swift-collections" alt></div></a></figure><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://www.advancedswift.com/ordereddictionary/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">OrderedDictionary In Swift</div><div class="kg-bookmark-description">Learn how and when to use OrderedDictionary, provided by the swift-collections package, in Swift.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://www.advancedswift.com/favicon.ico" alt><span class="kg-bookmark-author">Advanced Swift</span><span class="kg-bookmark-publisher">Robert Pieta</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://images.unsplash.com/photo-1607296393394-6e25d0fc15cc?crop&#x3D;entropy&amp;cs&#x3D;tinysrgb&amp;fit&#x3D;max&amp;fm&#x3D;jpg&amp;ixid&#x3D;MnwxMTc3M3wwfDF8c2VhcmNofDIzfHxvcmRlcnxlbnwwfHx8fDE2MTgxNzU5NTI&amp;ixlib&#x3D;rb-1.2.1&amp;q&#x3D;80&amp;w&#x3D;2000" alt></div></a></figure><h2 id="using-label-in-swiftui">Using Label in SwiftUI</h2><p>Whenever we want to show an icon and text together, <code>Label</code> comes to the rescue. It supports accessibility out of the box, and offers the ability to easily hide the icon or text using the modifier <code>.labelStyle(.iconOnly)</code> , while preserving the accessibility information. </p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://sarunw.com/posts/swiftui-label-a-standard-way-to-label-user-interface-items/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">SwiftUI Label: A standard way to label user interface items | Sarunw</div><div class="kg-bookmark-description">A label might seem trivial, but it plays an important role in SwiftUI. Let‚Äôs learn about this simple view.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://sarunw.com/favicon-96x96.png" alt><span class="kg-bookmark-author">Sarunw</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://sarunw.com/images/og/swiftui-label-a-standard-way-to-label-user-interface-items.png" alt></div></a></figure><h2 id="accessibility-of-images-in-swiftui">Accessibility of images in SwiftUI</h2><p>On a related note, we can enrich images with accessibility text in another way - by simply providing a localizable string with the image name as a key. It works out of the box, with no additional modifiers needed on the image üòç</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://nilcoalescing.com/blog/ImageAccessibilityLabelsFromLocalizableStringsFiles/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Image accessibility labels from Localizable.strings files</div><div class="kg-bookmark-description">When we add an image name to a Localizable.strings file, SwiftUI automatically uses it for the image accessibility label.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://nilcoalescing.com/static/favicon-196.3144yfFxGDjHn3y7r_G6fW5u_yFMZXRohR8vAApshf8.png" alt><span class="kg-bookmark-author">Nil Coalescing</span><span class="kg-bookmark-publisher">Natalia Panferova</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://nilcoalescing.com/static/blog/ImageAccessibilityLabelsFromLocalizableStringsFiles/banner.x0KAQ3yGnjXj2tsVFyMa0PNamLsqr5WJryOF8usnOhA.png" alt></div></a></figure><h2 id="better-xctest-failure-messages">Better XCTest failure messages</h2><p>When we use <code>XCTAssertNil(sut.optionalProperty)</code>, the failure message in case of assert failing will be not so helpful - "XCTAssertNil failed". By using <code>XCTAssertEqual(sut.optionalProperty, nil)</code> instead, we will get the actual value of the property in the failure message.<br>A few more suggestions on asserting optionals better, shared by Jon Reid:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://qualitycoding.org/unit-test-optionals-swift/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">How to Unit Test Optionals in Swift | Quality Coding</div><div class="kg-bookmark-description">You have a Swift optional value. How can you write an XCTest assertion to verify it, while getting the most from assertion failure messages?</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://qualitycoding.org/wp-content/uploads/2020/06/favicon.png" alt><span class="kg-bookmark-author">Quality Coding</span><span class="kg-bookmark-publisher">Jon Reid</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://qualitycoding.org/wp-content/uploads/2020/09/ghost.png" alt></div></a></figure><h2 id="accessing-view-controllers-view">Accessing view controller's view</h2><p><code>UIViewController</code>'s <code>view</code> is lazy, created the first time <code>.view</code> is accessed. When we want to access it without triggering the lazy creation, only getting the view if it already exists - there's <code>viewIfLoaded</code> property. Available since 2015, shared by Peter in 2019, and I saw this yesterday, in 2023 üòÖ</p><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">TIL UIViewController has viewIfLoaded since iOS 9. <a href="https://t.co/XSlKH7lJL1?ref=ioscodereview.com">pic.twitter.com/XSlKH7lJL1</a></p>&mdash; Peter Steinberger (@steipete) <a href="https://twitter.com/steipete/status/1189242402659356675?ref_src=twsrc%5Etfw&ref=ioscodereview.com">October 29, 2019</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>‚úåÔ∏è<br>Alright, that's it for today! Thank you to <a href="https://www.producthunt.com/posts/datatile-for-simulator?ref=ioscodereview.com">dataTile for Simulator</a> for sponsoring this issue.<br>I'm curious if you found one of the tips particulary interesting - let me know by replying to this email!</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #39 ]]></title>
        <description><![CDATA[ Hi there,
Welcome to issue #39, the last one in 2022. I wish you wonderful holidays, and see you on January 5 üëã


Supporting webp images with PHPicker

Are ¬†you using PHPickerViewController for photo library imports, and access images using loadObject(ofClass:)? It turns out, this method doesn't support some image ]]></description>
        <link>https://ioscodereview.com/issues/39/</link>
        <guid isPermaLink="false">638f7f6738ff30003d9be40c</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 15 Dec 2022 13:06:43 +0100</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,<br>Welcome to issue #39, the last one in 2022. I wish you wonderful holidays, and see you on January 5 üëã</p><h2 id="supporting-webp-images-with-phpicker">Supporting webp images with PHPicker</h2><p>Are ¬†you using <code>PHPickerViewController</code> for photo library imports, and access images using <a href="https://developer.apple.com/documentation/foundation/nsitemprovider/2888336-loadobject?ref=ioscodereview.com"><code>loadObject(ofClass:)</code></a>? It turns out, this method doesn't support some image formats, such as <code>webp</code> images. You can use <a href="https://developer.apple.com/documentation/foundation/nsitemprovider/2888331-loaddatarepresentation?ref=ioscodereview.com"><code>loadDataRepresentation(forTypeIdentifier: "public.image", completionHandler:)</code></a> instead. </p><h2 id="equality-vs-identity">Equality vs Identity</h2><p>How is <code>===</code> different from <code>==</code> ?<code>===</code> checks if it's the same instance, and is available only for classes. But why do we almost never have to use it? </p><p>All <code>NSObject</code>s ( <code>UIView</code> , <code>UIViewControllers</code>, etc) get a default <code>Equatable</code> conformance that uses Objective-C's <code>isEqual:</code> , which in turn compares instances, like <code>===</code> would. So when writing checks like <code>if sender == myButton</code>, we <em>actually mean </em><code>===</code>, but can save one character thanks to Swift's interoperability with Objective-C.</p><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Swift gives us two equality operators, == and ===<br><br>== tests that two things are equal like 5 == 5<br><br>=== is the identity operator, which checks whether two instances of a class point to the same memory<a href="https://twitter.com/hashtag/ios?src=hash&ref_src=twsrc%5Etfw&ref=ioscodereview.com">#ios</a> <a href="https://twitter.com/hashtag/swift?src=hash&ref_src=twsrc%5Etfw&ref=ioscodereview.com">#swift</a> <a href="https://twitter.com/hashtag/iosdevbasics?src=hash&ref_src=twsrc%5Etfw&ref=ioscodereview.com">#iosdevbasics</a> <a href="https://twitter.com/hashtag/iosdevelopment?src=hash&ref_src=twsrc%5Etfw&ref=ioscodereview.com">#iosdevelopment</a> <a href="https://twitter.com/hashtag/iosdev?src=hash&ref_src=twsrc%5Etfw&ref=ioscodereview.com">#iosdev</a> <a href="https://twitter.com/hashtag/iosdevs?src=hash&ref_src=twsrc%5Etfw&ref=ioscodereview.com">#iosdevs</a> <a href="https://twitter.com/hashtag/iosdevelopers?src=hash&ref_src=twsrc%5Etfw&ref=ioscodereview.com">#iosdevelopers</a></p>&mdash; Viktoria Likhotkina (@viktoriia_li) <a href="https://twitter.com/viktoriia_li/status/1603126772656230403?ref_src=twsrc%5Etfw&ref=ioscodereview.com">December 14, 2022</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><div class="kg-card kg-callout-card kg-callout-card-white"><div class="kg-callout-text"><strong>üíé Supporter of the week - Codelime üíé</strong><br><br><strong>Codelime</strong> is a powerful code snippet manager with many dev tools for iOS development. Save and manage your code snippets across iPhone, iPad and Mac with Codelime.<br><br>Take advantages of many dev tools available in Codelime (Hash, Text Case, Color Picker, Generate Asset Catalog, Make Pretty Code Snippet, ...) to boost your every day iOS development workflow.<br><br>Made by indie developers. <a href="https://onmyway133.com/codelime/?ref=ioscodereview.com">Try it for free ‚ÜóÔ∏è</a></div></div><h2 id="more-formatter-coolness">More formatter coolness</h2><p>I can't stop being amazed by all the different features available in formatters out of the box:</p><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">I didn&#39;t know, there is a possibility to set a custom positive prefix to a number formatter...ü§Ø Very handy!<a href="https://twitter.com/hashtag/stillLearning?src=hash&ref_src=twsrc%5Etfw&ref=ioscodereview.com">#stillLearning</a> <a href="https://twitter.com/hashtag/swift?src=hash&ref_src=twsrc%5Etfw&ref=ioscodereview.com">#swift</a> <a href="https://twitter.com/hashtag/iosDev?src=hash&ref_src=twsrc%5Etfw&ref=ioscodereview.com">#iosDev</a> <a href="https://t.co/Her1zsL1ca?ref=ioscodereview.com">pic.twitter.com/Her1zsL1ca</a></p>&mdash; Pavel Zak (@myridiphis) <a href="https://twitter.com/myridiphis/status/1597869794921164800?ref_src=twsrc%5Etfw&ref=ioscodereview.com">November 30, 2022</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="readable-large-numbers">Readable large numbers</h2><p>We can arbitrarily add <code>_</code>'s inside any type of number literal - integers, floats or even hex numbers:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://www.swiftwithvincent.com/tips/large-number-separators?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">large number separators ‚Äî Swift with Vincent</div><div class="kg-bookmark-description">Here‚Äôs the code if you want to experiment with it!</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/bd40c4d4-dc8b-48b7-a0cc-2209de7d1ab6/favicon.ico" alt><span class="kg-bookmark-author">Swift with Vincent</span><span class="kg-bookmark-publisher">Vincent Pradeilles</span></div></div><div class="kg-bookmark-thumbnail"><img src="http://static1.squarespace.com/static/63139bb1e1a1a078e071f30c/63662f7ff6d8dc0afb976b61/6366413c2ff5e829c324b725/1667647548462/NumberSeparator.gif?format&#x3D;1500w" alt></div></a></figure><h2 id="my-top-5-tips">My top 5 tips</h2><p>I teamed up with Vincent to record a 20 min. video where I share my top tips to improve your Swift code. Some of them have been featured in the newsletter earlier, but some have not:</p><ul><li>Avoiding Retain Cycles with Combine or RxSwift </li><li>Typesafe Identifiers </li><li>Managing Complex UI States </li><li>Never Forget to Call a Completion Handler </li><li>Simplifying UI Code with Layout Margins</li><li>Typesafe Strings and Images</li></ul><p>If you haven't seen the video yet, do check it out ‚ò∫Ô∏è</p><figure class="kg-card kg-embed-card"><iframe width="200" height="113" src="https://www.youtube.com/embed/Frpnb_aqkX4?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen title="5 Expert Tips to Improve Your Swift Code üí™ (w/ guest @Marina Gornostaeva)"></iframe></figure><p>‚úåÔ∏è<br>Alright, that's it for today! Thank you to <a href="https://onmyway133.com/codelime/?ref=ioscodereview.com">Codelime</a> for sponsoring this issue.<br>I'm curious if you found one of the tips particulary interesting - let me know by replying to this email!</p><p>Happy holidays üïéüéÑ</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #38 ]]></title>
        <description><![CDATA[ Hi there,
welcome to issue #38!


Modern collection views

A lot has changed in UITableView and UICollectionView APIs in the recent years. While before we would subclass UICollectionViewCell and implement UICollectionViewDataSource and UICollectionViewDelegate protocols, the modern ways look nothing like that.

Now we provide cell content using cell configurations, dequeue ]]></description>
        <link>https://ioscodereview.com/issues/38/</link>
        <guid isPermaLink="false">63886d1847671a003d1cde81</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 01 Dec 2022 14:37:36 +0100</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,<br>welcome to issue #38!</p><h2 id="modern-collection-views">Modern collection views</h2><p>A lot has changed in <code>UITableView</code> and <code>UICollectionView</code> APIs in the recent years. While before we would subclass <code>UICollectionViewCell</code> and implement <code>UICollectionViewDataSource</code> and <code>UICollectionViewDelegate</code> protocols, the modern ways look nothing like that. </p><p>Now we provide cell content using <em><a href="https://developer.apple.com/documentation/uikit/uicollectionviewcell/3600949-contentconfiguration?ref=ioscodereview.com">cell configurations</a>, </em>dequeue reusable cells using <em><a href="https://developer.apple.com/documentation/uikit/uicollectionview/cellregistration?ref=ioscodereview.com">cell</a> and <a href="https://developer.apple.com/documentation/uikit/uicollectionview/supplementaryregistration?ref=ioscodereview.com">supplementary registrations</a></em>, use <em><a href="https://developer.apple.com/documentation/uikit/uicollectionviewdiffabledatasource?ref=ioscodereview.com">diffable data sources</a></em> for safe data with animatable updates, and use <em><a href="https://developer.apple.com/documentation/uikit/uicollectionviewcompositionallayout?ref=ioscodereview.com">compositional layouts</a></em> for grids, lists and carousels. All of this is available iOS 14+.</p><p>Apple has comprehensive articles with explanations and sample code, going over these concepts and showing how they play together: </p><p><a href="https://developer.apple.com/documentation/uikit/views_and_controls/collection_views/implementing_modern_collection_views?ref=ioscodereview.com"><strong>Implementing Modern Collection Views</strong></a><br><a href="https://developer.apple.com/tutorials/app-dev-training/using-content-views?ref=ioscodereview.com"><strong>Implementing Custom Cells Using Content Views</strong></a><br></p><div class="kg-card kg-callout-card kg-callout-card-grey"><div class="kg-callout-text"><em><strong>üíé Sponsor of this issue - TelemetryDeck</strong></em><br><br>Your app's users are mostly satisfied, but let's make them fall in LOVE with your app! Let's make them loyal ambassadors for your idea, tell their friends all about it! <br><br>We believe that by continuously improving your app's performance, design and experience through respectful, privacy-first, real-time analytics, it can really shine. <br><br>Start for free at <a href="https://telemetrydeck.com/?source=ioscodereview" rel="noreferrer"><strong>telemetrydeck.com</strong></a></div></div><h2 id="xcconfig-files">xcconfig files</h2><p>Xcconfig files are considered an advanced feature, only reserved for larger projects. That's my impression, at least. But the idea is quite simple - we can override build settings of a target via plain text files. </p><p>When we have multiple targets with mostly same build settings, it's better to use xcconfig files for specifying the parameters that are different - the contents of .xcodeproj files are not easily trackable in source control, and using xcconfig files solves that. </p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://www.danijelavrzan.com/posts/2022/11/xcode-configuration/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">How to manage build settings using Xcode configuration files | Danijela‚Äôs blog</div><div class="kg-bookmark-description">You use Xcode build configuration files to define all sorts of useful build settings. You can open them with different text editors outside of Xcode and all properties are in plain text. It‚Äôs common to use them for managing constants across different environments.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://www.danijelavrzan.com/images/favicon.png" alt><span class="kg-bookmark-author">Danijela&#x27;s blog</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://danijelavrzan.com/images/posts/2022/11/xcode-configuration.png" alt></div></a></figure><h2 id="custom-screenshot-support">Custom screenshot support</h2><p>TIL about <code><a href="https://developer.apple.com/documentation/uikit/uiscreenshotservicedelegate?ref=ioscodereview.com">UIScreenshotServiceDelegate</a></code> - allowing you to support custom PDF export via the native screenshot functionality. To see it an action, try taking a screenshot in Safari - there will be a segment control at the top, choosing between just the screenshot or a PDF of the whole page. </p><blockquote>When the user captures a screenshot of your app‚Äôs windows, UIKit calls the methods of this protocol to retrieve PDF data for those windows, and then it provides that data to the user.</blockquote><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">One API I wish more apps would support is integration into the iOS screenshot system via `UIScreenshotServiceDelegate`.<br><br>This allows for very quick Full Page PDF Exports of your app üëå <a href="https://t.co/n45EazidKd?ref=ioscodereview.com">pic.twitter.com/n45EazidKd</a></p>&mdash; Matthias Tretter (@myell0w) <a href="https://twitter.com/myell0w/status/1597245043407958016?ref_src=twsrc%5Etfw&ref=ioscodereview.com">November 28, 2022</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="dummy-data-for-previews">Dummy data for previews</h2><p>To reduce app size and memory footprint of your app, make sure that the test data for SwiftUI previews is not included in release builds. You can wrap the code to exclude in <code>#if DEBUG</code>. <br>Another option is to use "development assets" - a relatively new build setting in Xcode. You can specify which files (code or assets) will be stripped during release builds. Read more: <a href="https://www.avanderlee.com/xcode/development-assets-preview-catalog/?ref=ioscodereview.com" rel="bookmark">Development Assets in Xcode to enrich SwiftUI Previews</a></p><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">In his talk <a href="https://twitter.com/dimsumthinking?ref_src=twsrc%5Etfw&ref=ioscodereview.com">@dimsumthinking</a> mentioned to create static vars of model objects for previews.<br><br>I wanted to add two ideas:<br><br>1. Create multiple ones to see how it might stretch your layout.<br><br>2. Put the extensions in the Preview Content folder of your apps (won‚Äôt be shipped).<br><br>‚úåüèª <a href="https://t.co/kkClFbtDHC?ref=ioscodereview.com">https://t.co/kkClFbtDHC</a> <a href="https://t.co/NxZG9R83m7?ref=ioscodereview.com">pic.twitter.com/NxZG9R83m7</a></p>&mdash; Stefan (@stefanjblos) <a href="https://twitter.com/stefanjblos/status/1590249340349870081?ref_src=twsrc%5Etfw&ref=ioscodereview.com">November 9, 2022</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="coding-is-like-gardening">Coding is like gardening</h2><p>A wonderful analogy, indeed the code is not built once and done, but grows and evolves over time. I'm a big proponent of building code in a way that welcomes future changes.</p><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">One of the best mindsets you can adopt around coding is to think of it like gardening instead of construction or architecture. You plant seeds based on an initial plan and conditions. Then you constantly monitor the health of the garden and make adjustments as needed.</p>&mdash; Juan Carlos Fontecha (@jufontech) <a href="https://twitter.com/jufontech/status/1597660669054255106?ref_src=twsrc%5Etfw&ref=ioscodereview.com">November 29, 2022</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>‚úåÔ∏è<br>Alright, that's it for today. <br>Thank you to <a href="https://telemetrydeck.com/?source=ioscodereview">TelemetryDeck</a> for sponsoring this issue!</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #37 ]]></title>
        <description><![CDATA[ Hi there,
Welcome to the 37th issue üëã

Apologies for sending this issue a day late - I've had a small self-inflicted injury and had to go to the hospital just in case. All is well in the end though üòä

You might have noticed a different sender and layout this time ]]></description>
        <link>https://ioscodereview.com/issues/37/</link>
        <guid isPermaLink="false">63761997398507003d6555a1</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Fri, 18 Nov 2022 12:51:59 +0100</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,<br>Welcome to the 37th issue üëã</p><p>Apologies for sending this issue a day late - I've had a small self-inflicted injury and had to go to the hospital just in case. All is well in the end though üòä</p><p>You might have noticed a different sender and layout this time - that's because I've switched from Revue to a content platform called Ghost. It's a really powerful platform, and I will be expanding the site, such as adding the ability to search among all past issues. Stay tuned :) </p><hr><h2 id="structuring-swiftui-views">Structuring SwiftUI views</h2><p>SwiftUI is relatively new, but there are other declarative UI languages with history. React is a popular web frontend framework, and there's a lot we can learn from there. <br>One example is a pattern where we break down views that load data into two:<br>The outer view is a loading component that's aware of the networking, and the inner view is a more "stupid" view with just UI elements. <br>The inner view then can then be reused - across features, for previews in app settings, and for SwiftUI previews.</p><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">ReactJS has a pattern called container and presentation components. This pattern suggest you fetch data + more in container component and pass it down to presentation components. Your presentation components are reusable components. <a href="https://twitter.com/hashtag/SwiftUI?src=hash&ref_src=twsrc%5Etfw&ref=ioscodereview.com">#SwiftUI</a> <a href="https://t.co/5EMjfc2WUR?ref=ioscodereview.com">pic.twitter.com/5EMjfc2WUR</a></p>&mdash; Mohammad Azam (@azamsharp) <a href="https://twitter.com/azamsharp/status/1588692969170739200?ref_src=twsrc%5Etfw&ref=ioscodereview.com">November 5, 2022</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="organizing-test-image-assets">Organizing test image assets</h2><p>Good tip here to avoid cluttering your app with images you only use for testing - saving on both app size and compile time:</p><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Speed up your Xcode builds by leaving images for testing OUTSIDE of (Preview) Asset catalogs; just drop them in a folder among tests and fetch them via Bundle.<br>No more expensive asset catalog compiling!<a href="https://t.co/3yRr3uk9R2?ref=ioscodereview.com">https://t.co/3yRr3uk9R2</a> <a href="https://t.co/OK1Y6SZXpj?ref=ioscodereview.com">pic.twitter.com/OK1Y6SZXpj</a></p>&mdash; Daniel Ka≈°aj (@DanielKasaj) <a href="https://twitter.com/DanielKasaj/status/1588449011446464514?ref_src=twsrc%5Etfw&ref=ioscodereview.com">November 4, 2022</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="project-quality-of-life">Project quality-of-life</h2><p>Completely agree with the list here. When there's no warnings in the project, the console log isn't cluttered, etc - it's so much easier to spot new issues right when they are introduced:</p><figure class="kg-card kg-embed-card"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Things that should be vigilantly defended in your iOS project, at all times:<br>- A working build<br>- Clear build output (e.g. warnings)<br>- Clear console behavior<br>- NO Auto Layout warnings<br>- Any CI/&#39;CD&#39; systems<br> <br>All are easy to let deteriorate, yet, critical day-to-day. Fix it early.</p>&mdash; josh avant üì± (@joshavant) <a href="https://twitter.com/joshavant/status/1588219036197785600?ref_src=twsrc%5Etfw&ref=ioscodereview.com">November 3, 2022</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="urlrequest-cache-policies">URLRequest cache policies</h2><p>Excellent article to understand the various cache policies and how they affect your iOS application when sending HTTP requests with URLRequest:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://tanaschita.com/20221031-managing-cache-when-working-with-urlsession-in-ios/?ref=ioscodereview.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Understanding different cache policies when working with URLRequest in Swift</div><div class="kg-bookmark-description">Learn how to manage cache when sending HTTP requests in your iOS applications. Learn about the differences between the policies useProtocolCachePolicy, reloadIgnoringLocalCacheData, reloadIgnoringLocalAndRemoteCacheData and more.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://tanaschita.com/favicon.ico" alt></div></div><div class="kg-bookmark-thumbnail"><img src="https://tanaschita.com/og/20221031-managing-cache-when-working-with-urlsession-in-ios.png" alt></div></a></figure><h2 id="xcode-power-tips">Xcode power tips</h2><p>If you want to become more efficient with Xcode, watch this 17-minute video. I've been using Xcode for over a decade, and I learned so much. The more efficient we are, the more time we have to actually focus on problemsolving and code ‚ò∫Ô∏è</p><figure class="kg-card kg-embed-card"><iframe width="200" height="113" src="https://www.youtube.com/embed/40imnmzsmxk?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen title="31 Xcode Tips &amp; Tricks - 2022 | Xcode 14"></iframe></figure><p>ü§ò</p><div class="kg-card kg-callout-card kg-callout-card-grey"><div class="kg-callout-text"><strong>üíé Sponsor of the week - Codelime</strong><br><br><a href="https://onmyway133.com/codelime/?ref=ioscodereview.com">Codelime</a> is a powerful code snippet manager with many dev tools for iOS development. Save and manage your code snippet across iPhone, iPad and Mac with Codelime.<br><br>Take advantages of many dev tools available in Codelime (Hash, Text Case, Color Picker, Generate Asset Catalog, Make Pretty Code Snippet, ...) to boost your every day iOS development workflow.<br><br>The app is made by indie developers <a href="https://twitter.com/onmyway133?ref=ioscodereview.com">Khoa üî•</a> and <a href="https://twitter.com/khuong291?ref=ioscodereview.com">Kenny üå¥</a></div></div><p>Alright, that‚Äôs it for today.</p><p>If you enjoyed this issue, you can help grow the newsletter by spreading the word!</p><p>Got feedback? Want to see more, or less of certain kinds of tips? I‚Äôd love to hear from you. Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ [bonus issue] Issue #36 ]]></title>
        <description><![CDATA[ Hi there,

Yesterday I've sent out the issue #35, and it was flagged as spam by Gmail. It was due to technical problems on Revue side, not sure what exactly. They got fixed after I reached out to support, and now the emails are delivered ok.

I know that a ]]></description>
        <link>https://ioscodereview.com/issues/36/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a58d</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Fri, 04 Nov 2022 14:07:52 +0100</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>Yesterday I've sent out the issue #35, and it was flagged as spam by Gmail. It was due to technical problems on Revue side, not sure what exactly. They got fixed after I reached out to support, and now the emails are delivered ok.</p><p>I know that a lot of you are looking forward to receiving the newsletter, but I didn't want to just redeliver the same email again. Hence this bonus issue with two great articles üòä</p><p>If you're on gmail, check your spam folder for the previous email, and please mark it as "not spam" üôè If you're not on Gmail, I hope you don't mind the bonus issue üíö</p><p>I am investigating changing to a more reliable email platform, so the email layout might be slightly different next time.</p><hr><h2 id="managing-secrets">Managing secrets</h2><p>How do we store secrets securely on the client? This NSHipster article goes over the pros and cons of hardcoding values in code, using xcconfig files, or providing API keys over the network.</p><h3 id="secret-management-on-ios-nshipster"><a href="https://nshipster.com/secrets/?ref=ioscodereview.com">Secret Management on iOS - NSHipster</a></h3><p><br></p><h2 id="writing-a-perfect-pull-request">Writing a perfect pull request</h2><p>When you make a good pull request, you receive a quick review, clear feedback, and don't get too many questions such as "why did you do it like this?". This usually has almost nothing to do with the actual code changes! In this article you'll find tips on how to make your pull requests great.</p><h3 id="how-to-write-the-perfect-pull-request-level-up-coding"><a href="https://levelup.gitconnected.com/how-to-write-the-perfect-pull-request-d044625ace98?gi=6a8f584c2877&ref=ioscodereview.com">How To Write The PERFECT Pull Request ¬†| Level Up Coding</a></h3><p><br></p><p>ü§ò</p><p>Thank you for bearing with me, and see you in two weeks!</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #35 ]]></title>
        <description><![CDATA[ Hi there,

Welcome to the issue #35 üëã Enjoy!


Better test assertions

We all want the tests to immediately tell us that something is wrong, and here's some advice on how to achieve that by using XCTAssertEqual instead of just XCTAssert:












Multiple accessibility labels

With accessibilityUserInputLabels, we can provide multiple strings ]]></description>
        <link>https://ioscodereview.com/issues/35/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a58e</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 03 Nov 2022 13:33:05 +0100</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>Welcome to the issue #35 üëã Enjoy!</p><hr><h2 id="better-test-assertions">Better test assertions</h2><p>We all want the tests to immediately tell us that something is wrong, and here's some advice on how to achieve that by using <code><a href="https://developer.apple.com/documentation/xctest/xctassertequal?ref=ioscodereview.com">XCTAssertEqual</a></code> instead of just <code><a href="https://developer.apple.com/documentation/xctest/xctassert?ref=ioscodereview.com">XCTAssert</a></code>:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/twannl/status/1587816571556466689?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/nicklockwood/status/1587917123967668224?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="multiple-accessibility-labels">Multiple accessibility labels</h2><p>With <code><a href="https://developer.apple.com/documentation/objectivec/nsobject/3197989-accessibilityuserinputlabels?ref=ioscodereview.com">accessibilityUserInputLabels</a></code>, we can provide multiple strings by which the user can address an element.</p><p>And a reminder not to use <code><a href="https://developer.apple.com/documentation/uikit/uiaccessibilityelement/1619577-accessibilitylabel?ref=ioscodereview.com">accessibilityLabel</a></code> for internal strings for UI tests, there's <code><a href="https://developer.apple.com/documentation/uikit/uiaccessibilityidentification/1623132-accessibilityidentifier?ref=ioscodereview.com">accessibilityIdentifier</a></code> for that.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/dadederk/status/1580652449463144448?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="system-background">System background</h2><p>Reminder that <code><a href="https://developer.apple.com/documentation/uikit/uicolor/3173145-systemgroupedbackground?ref=ioscodereview.com">UIColor.systemGroupedBackground</a></code> exists, reflecting system background you see on grouped table views, for example in Settings. We can use it in both UIKit and SwiftUI:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/KSlazinski/status/1578619241065893888?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="more-formatters">More formatters</h2><p>Remember <code><a href="https://developer.apple.com/documentation/foundation/listformatter?ref=ioscodereview.com">ListFormatter</a></code> I mentioned last time? Here's an infographic with even more examples of different native formatter APIs.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/DKanunnikoff/status/1578451043507109888?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="the-traps-of-swift-concurrency">The traps of Swift Concurrency</h2><p>There's many things the compiler doesn't check, and often the behaviour of async/await is not what you'd expect. Lots of traps to fall into... For example, actors are not as protective as they seem at first glance. Many examples of problems and solutions in this article by <a href="https://twitter.com/kulik_wojciech?ref=ioscodereview.com">@kulik_wojciech</a>.</p><p>It's a longer article going deep into how concurrency works, make sure to save it if you don't have time to read it yet :)</p><h3 id="swift-concurrency-things-they-don-t-tell-you"><a href="https://wojciechkulik.pl/ios/swift-concurrency-things-they-dont-tell-you?ref=ioscodereview.com">Swift Concurrency ‚Äì Things They Don‚Äôt Tell You</a></h3><p><br></p><h2 id="sponsor-of-the-week-codelime">Sponsor of the week - Codelime</h2><p><a href="https://onmyway133.com/codelime/?ref=ioscodereview.com">Codelime</a> is a powerful code snippet manager with many dev tools for iOS development. Save and manage your code snippet across iPhone, iPad and Mac with Codelime.</p><p>Take advantages of many dev tools available in Codelime (Hash, Text Case, Color Picker, Generate Asset Catalog, Make Pretty Code Snippet, ...) to boost your every day iOS development workflow.</p><p>The app is made by 2 indie developers <a href="https://twitter.com/onmyway133?ref=ioscodereview.com">Khoa üî•</a> and <a href="https://twitter.com/khuong291?ref=ioscodereview.com">Kenny üå¥</a></p><h3 id="codelime-powerful-code-snippet-manager"><a href="https://onmyway133.com/codelime/?ref=ioscodereview.com">Codelime - Powerful code snippet manager</a></h3><p>Powerful code snippet manager</p><p>ü§ò</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below. If you enjoyed it, you can help grow the newsletter by spreading the word ‚ò∫Ô∏è</p><p>Got feedback? Want to see more, or less of certain kinds of tips? I‚Äôd love to hear from you. Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #34 ]]></title>
        <description><![CDATA[ Hi there,

Welcome to issue #34 üëã Hope you learn something new today!

I also got the first sponsor this time - I'm really excited to be able to get some funds to continue growing the newsletter! I'm already investing them into improving my curation workflow and building a custom landing ]]></description>
        <link>https://ioscodereview.com/issues/34/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a58f</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 20 Oct 2022 13:05:16 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>Welcome to issue #34 üëã Hope you learn something new today!</p><p>I also got the first sponsor this time - I'm really excited to be able to get some funds to continue growing the newsletter! I'm already investing them into improving my curation workflow and building a custom landing page. If you're looking for a job, check out the sponsored section at the end ‚ò∫Ô∏è</p><hr><h2 id="organising-package-manifests">Organising package manifests</h2><p><code>Package.swift</code> is a Swift file, and that means we can write Swift code in it, for example declare variables and functions, and even call them.</p><p>Are you already using any Swift language features in your package manifest? I'm curious about what other use-cases we can find for this.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/_sa_s/status/1582329921371721729?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="localised-lists">Localised lists</h2><p><code><a href="https://developer.apple.com/documentation/foundation/listformatter?ref=ioscodereview.com">ListFormatter</a></code> composes a localised string from an array of elements, using a grammatically correct way to join the strings for the current locale. You can also customise how each element in the list is formatted by providing an <code><a href="https://developer.apple.com/documentation/foundation/listformatter/3130988-itemformatter?ref=ioscodereview.com">itemFormatter</a></code> property.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/onmyway133/status/1582099132470071296?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="year-formatting">Year formatting</h2><p>Every year it comes up on Twitter around December 30, that using <code>YYYY</code> in date formats is incorrect for displaying dates, as it stands for "week year" which will be wrong around the New Years week.</p><p>This year it's not yet too late to make a fix, so here's a reminder to check your code :)</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/twostraws/status/1485239037426339843?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/davedelong/status/1344388020661673985?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/pgor/status/1344352338404929538?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="accessibility-customisations-in-swifui-vs-uikit">Accessibility customisations in SwifUI vs UIKit</h2><p>It's not always clear how to achieve the same accessibility customizations in SwiftUI vs UIKit. Here's a great summary - make sure to save it to your bookmarks for later:</p><h3 id="accessibility-in-swiftui-explained-for-uikit-developers-swiftlee"><a href="https://www.avanderlee.com/swiftui/accessibility-uikit-developers/?ref=ioscodereview.com">Accessibility in SwiftUI explained for UIKit developers - SwiftLee</a></h3><p>Accessibility in SwiftUI works a little different than in UIKit, but with a few tips you'll be able to get up to speed quickly.</p><h2 id="swiftui-performance-tips">SwiftUI performance tips</h2><p>In this article Martin goes over various aspects of SwiftUI development and shares solid advice on avoiding performance issues in your UI code:</p><h3 id="swiftui-performance-tips-martinmitrevski"><a href="https://martinmitrevski.com/2022/04/14/swiftui-performance-tips/?ref=ioscodereview.com">SwiftUI performance tips ‚Äì martinmitrevski</a></h3><p>SwiftUI has been around for almost 3 years now, and during this period working with it, I‚Äôve noticed few groups of developer mistakes (both mine and from others) that can impact its performance. In this post, we will look at these pitfalls, and their potential solutions.</p><h2 id="-sponsored-jobs-">üßë‚Äçüíª Sponsored Jobs üßë‚Äçüíª</h2><p>My friends at Shape Games are looking for iOS developers:</p><ul><li><a href="https://careers.shapegames.com/jobs/1729911-ios-developer-remote?ref=ioscodereview.com">iOS developer (remote)</a></li><li><a href="https://careers.shapegames.com/jobs/1722970-ios-developer?ref=ioscodereview.com">iOS developer (relocation to Copenhagen)</a></li><li><a href="https://careers.shapegames.com/jobs/1744861-student-ios-developer?ref=ioscodereview.com">Student iOS developer</a></li></ul><p>They‚Äôre building the leading sports betting frontend platform. This posting was sponsored (yay!), but also I personally know many people working there, and I've been to their lovely office for meetups countless times. It‚Äôs a great mobile team who care about the craft üëç</p><p><br></p><p>‚òÆÔ∏è</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below. If you enjoyed it, you can help grow the newsletter by spreading the word ‚ò∫Ô∏è</p><p>Got feedback? Want to see more, or less of certain kinds of tips? I‚Äôd love to hear from you. Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #33 ]]></title>
        <description><![CDATA[ Hi there,

Welcome to the 33rd issue üëã We're back to a classic five-tips structure, and I hope you find something interesting today.

As an innovation, I've included a new section at the bottom with featured jobs. They're not sponsored this time, but I hope to get sponsored job or indie ]]></description>
        <link>https://ioscodereview.com/issues/33/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a590</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 06 Oct 2022 13:12:57 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>Welcome to the 33rd issue üëã We're back to a classic five-tips structure, and I hope you find something interesting today.</p><p>As an innovation, I've included a new section at the bottom with featured jobs. They're not sponsored this time, but I hope to get sponsored job or indie app ads in the future. The code tips themselves will never have any promoted content in them, only what I truly think is best ‚ò∫Ô∏è</p><hr><h2 id="traversing-the-view-hierarchy">Traversing the view hierarchy</h2><p>Iterating over superview chain, or parent view controllers, you name it. Awesome trick to replace recursive lookups.</p><p>Have you heard of <code><a href="https://developer.apple.com/documentation/swift/sequence(state:next:)?ref=ioscodereview.com">sequence(first:next)</a></code> ? It's a <code><a href="https://developer.apple.com/documentation/swift/sequence?ref=ioscodereview.com">Sequence</a></code> (the same protocol arrays, dictionaries, and other collections conform to), and can be used with <code>for...in</code> , <code>forEach</code>, <code>map</code>, etc.</p><p><a href="https://developer.apple.com/documentation/swift/sequence(state:next:)?ref=ioscodereview.com">sequence(first:next)</a> generates an iteratable sequence on the fly, each next element being derived from the previous one. As soon as <code>next</code> returns nil, iteration stops. So the <code>next</code> closure can return <code>nil</code>, but elements in the sequence are non-optional. If nil is never returned, the sequence is infinite.</p><p>For example, here's an infinite iteration over even numbers:</p><p><code>for i in sequence(first: 0, next: { $0 + 2 }) { print(i) }</code></p><p>A super neat application for this is to iterate over the view hierarchy, or view controller hierarchy, you name it:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/kyleve/status/1575353657825972224?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="completion-handlers">Completion handlers</h2><p>I really like how we can use typealiases for completion handlers to make code easier to read and refactor:</p><p><code>func do(completion: @escaping ((Result&lt;X, Error&gt;) -&gt; Void)?)</code></p><p>becomes</p><p><code>func do(completion: @escaping CompletionHandler&lt;X&gt;?)</code></p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/v_pradeilles/status/1493925764496044039?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="better-todo-warnings">Better TODO warnings</h2><p>If you're using warnings as TODO reminders, they might be mixing up with real warnings from the compiler. A little productivity tip: adding an emoji to the warnings, and using code snippets makes leaving and viewing TODO-warnings much nicer.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/Jeehut/status/1567849506682568705?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="refactoring-a-complex-view">Refactoring a complex View</h2><p>A short story on refactoring a complex SwiftUI view into smaller views that share the same view model instance. It's a nice approach to making the UI code more maintainable, and even testable.</p><h3 id="efficiently-develop-cleaner-swiftui-views-using-a-view-model"><a href="https://www.curiousalgorithm.com/post/efficiently-develop-cleaner-swiftui-views-using-a-view-model?ref=ioscodereview.com">Efficiently Develop Cleaner SwiftUI Views Using A View Model</a></h3><p>Learn how to quickly develop cleaner views by using a view model.</p><h2 id="initialization-in-swift">Initialization in Swift</h2><p>I learned Swift over the course of one summer, and this chapter on Initialization was what stuck with me the most.</p><p>Initialization is something we don't think too much about - you write your init method(s) and then if the compiler is not happy, do whatever Xcode suggests to fix it. But in reality, there are carefully thought-out rules and reasons behind restrictions being the way they are.</p><p>If you want to learn more about Swift itself, this is a nice read over a cup of something warm üçÅ</p><h3 id="initialization-the-swift-programming-language-swift-5-7-"><a href="https://docs.swift.org/swift-book/LanguageGuide/Initialization.html?ref=ioscodereview.com">Initialization ‚Äî The Swift Programming Language (Swift 5.7)</a></h3><p>Initialization is the process of preparing an instance of a class, structure, or enumeration for use.</p><h2 id="-featured-jobs">üßë‚Äçüíª Featured jobs</h2><p>Proton (the company behind ProtonMail) has four open iOS positions: <a href="https://careers.proton.me/o/ios-engineer-vpn?ref=ioscodereview.com">iOS (VPN)</a>,<a href="https://careers.proton.me/o/ios-engineer-drive?ref=ioscodereview.com"> iOS (Drive)</a>,<a href="https://careers.proton.me/o/senior-ios-engineer-new-proton-product?ref=ioscodereview.com"> Senior iOS (new product)</a>, <a href="https://careers.proton.me/o/engineering-manager-ios-core?ref=ioscodereview.com">Engineering Manager (Core iOS)</a>. All are available remote and in-office.</p><p>ü§ò</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below. If you enjoyed it, you can help grow the newsletter by spreading the word ‚ò∫Ô∏è</p><p>Got feedback? Want to see more, or less of certain kinds of tips? I‚Äôd love to hear from you. Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #32 ]]></title>
        <description><![CDATA[ Hi there!

Hope you're doing good and working toward your goals, whatever they are (whether that's work, resting more, spending more time with family, or protecting what's yours).

Today I have a couple of longer sections - hope you enjoy the read, and I'm always curious to hear your thoughts! ]]></description>
        <link>https://ioscodereview.com/issues/32/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a591</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 22 Sep 2022 12:30:02 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there!</p><p>Hope you're doing good and working toward your goals, whatever they are (whether that's work, resting more, spending more time with family, or protecting what's yours).</p><p>Today I have a couple of longer sections - hope you enjoy the read, and I'm always curious to hear your thoughts!</p><p>Let's dive in üëáüëá</p><hr><h2 id="is-it-swiftui-s-fault">Is it SwiftUI's fault?</h2><p>In the last couple of months there's been a lot of discourse on Twitter about the betas and the first public versions iOS 16/macOS 13. Some blame the rawness of the first versions specifically on SwiftUI and its immaturity, and this gets reverberated by others. Is it correct or even fair to blame incompleteness of features or bugs on one framework, disregarding other context such as processes, quality of QA, or time constraints?</p><p>I won't share the negative takes not to point fingers (I also don't have that many fingers üòÇ). Here's a few <em>other</em> takes on this, with a bonus positivity thread in the end. Tell me what you think!</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/fcbunn/status/1559564754561163264?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/fcbunn/status/913790160285917184?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/hybridcattt/status/1560560131481686016?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/hybridcattt/status/1560560524026613760?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/timroesner/status/1559570833261084673?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="swift-5-7-is-here-">Swift 5.7 is here!</h2><p>If you've already upgraded to Xcode 14, that means you can take advantage of improvements in Swift 5.7.</p><p>I might cover more individual features in the future, but in the meantime you can check out <a href="https://www.swift.org/blog/swift-language-updates-from-wwdc22/?ref=ioscodereview.com">the official overview</a> and <a href="https://www.swift.org/blog/swift-5.7-released/?ref=ioscodereview.com#swift-evolution-appendix">the full list of evolution proposals released in 5.7</a>.</p><p>Here's a thread about improvements to generics and protocols:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/slava_pestov/status/1533900187701223431?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>On the practical side of things, here's a regex to replace all <code>if let x = x {</code> with the new shorthand <code>if let x {</code>:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/avielgr/status/1572260975746715648?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="compiler-errors-ftw">Compiler errors ftw</h2><p>Truth. Linters are also nice :)</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/basthomas/status/1570329087436013568?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="directory-of-apple-frameworks">Directory of Apple frameworks</h2><p>A full directory of all Apple frameworks with ability to filter by platform and minimal supported version üí™</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/MarcoEidinger/status/1572154850376179712?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>ü§ò‚òÆÔ∏è</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below. If you enjoyed it, you can help grow the newsletter by spreading the word ‚ò∫Ô∏è</p><p>Also I‚Äôd love to hear from you. Just reply to this email or DM at <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üëã</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #31 ]]></title>
        <description><![CDATA[ Hi there,

Did you enjoy the Apple event yesterday? Whether you're into the latest tech, or in the camp of anti-consumerism, hope you had a nice day üôÇ

On Twitter it might seem that everyone is so excited about the new phones/watches/etc. But that's just the bubble. I, for ]]></description>
        <link>https://ioscodereview.com/issues/31/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a592</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 08 Sep 2022 12:50:25 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>Did you enjoy the Apple event yesterday? Whether you're into the latest tech, or in the camp of anti-consumerism, hope you had a nice day üôÇ</p><p>On Twitter it might seem that <em>everyone</em> is so excited about the new phones/watches/etc. But that's just the bubble. I, for one, will not be buying a new iPhone or watch any time soon - will keep enjoying my 2-year-old XS and series 5. To whomever needs to hear this, it's totally ok not to jump on buying the newest thing, but also it's ok to do so.</p><p>Now let's dive in, hope you learn something new today</p><hr><h2 id="on-weak-self-again-">On [weak] self (again)</h2><p>The weak self subject is a bit worn, but check this out. Steve has a good general point that such everyday things should be as ergonomic and effortless as possible in a language.</p><p>Here Steve also shared an article on the topic of self in closures. It's sort-of-a-reply to another opinionated piece, but I really like it on its own. If you were looking for once-and-for-all answer to the question of when to use <code>weak</code> and when not, this might be it.</p><p>I promise no more weak-self related tips üòÄ</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/stroughtonsmith/status/1515009921795997704?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h3 id="the-golden-rules-of-weak-self-chris-downie"><a href="https://chrisdownie.net/software/2022/04/10/the-golden-rules-of-weak-self/?ref=ioscodereview.com">The Golden Rules of weak self | Chris Downie</a></h3><p>Capturing self in a closure is a common thing to do in Swift, and one that hides a lot of nuance. Do you need to make it weak to avoid a reference cycle? Is making it weak all the time a problem?</p><h2 id="thoughts-on-massive-observable-objects">Thoughts on massive observable objects</h2><p>Having granular <code>ObservableObject</code>'s is a good way to go. To avoid unnecessary re-renders, give the high-level views only the dependencies they need.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/cwagdev/status/1506837668046401536?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/harlanhaskins/status/1555296150772535296?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="actions-in-environment">Actions in @Environment</h2><p>Very important TIL-moment if you're embracing <code>@Environment</code>-based action closures such as <code><a href="https://developer.apple.com/documentation/swiftui/openurlaction?ref=ioscodereview.com">OpenURLAction</a></code>. They should be callable types, not closures - otherwise views that use this variable will re-render unnecessarily whenever the environment <em>could</em> change - for example, on rotation or going to foreground.</p><p><a href="https://docs.swift.org/swift-book/ReferenceManual/Declarations.html?ref=ioscodereview.com#ID622">Callable structs</a> look like functions to the user of the api, as if you used a typealias for the closure type. If you define a type (struct, enum or class) and add a function named <code>func callAsFuntion()</code> , you'll then be able to invoke it by using <code>()</code> - <code>x()</code> is equivalent to <code>x.callAsFunction()</code>. This supports custom parameters too. It's a pretty cool feature in Swift!</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/lukeredpath/status/1491127803328495618?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/lukeredpath/status/1491127993032667136?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/lukeredpath/status/1491128201988689921?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/xavierjurado/status/1545470786097614849?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="slack-s-legacy-codebase-improvement-story">Slack's legacy codebase improvement story</h2><p>Recently Slack shared how they improve their legacy mobile codebase in a 3-article series. Here's an 8-minute summary, in case you don't have 30+ minutes to read the original, which is also linked there.</p><h3 id="mobile-app-refactoring-initiative-by-slack-by-elye"><a href="https://medium.com/mobile-app-development-publication/mobile-app-refactoring-initiative-by-slack-fedc4c4a6026?ref=ioscodereview.com">Mobile App Refactoring Initiative by Slack | by Elye</a></h3><p>A summary of how Slack stabilized, modularized, and modernized its mobile application code base</p><p>ü§ò</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below. If you enjoyed it, you can help grow the newsletter by spreading the word ‚ò∫Ô∏è</p><p>Got feedback? Want to see more, or less of certain kinds of tips? I‚Äôd love to hear from you. Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #30 ]]></title>
        <description><![CDATA[ Hi there,

I hope the summer is treating you well, and you're progressing toward your goal, whatever it is!

As promised in the last issue, here's me sharing behind-the-scenes on how I make the newsletter issues: https://youtu.be/CgTqqkzeeh8

Let's dive in üëá


On push notifications

Last week Airbnb accidentally ]]></description>
        <link>https://ioscodereview.com/issues/30/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a593</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 25 Aug 2022 13:13:00 +0200</pubDate>
        <media:content url="https://ioscodereview.com/content/images/2023/03/ios-code-review-newsletter-header-2.png" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>I hope the summer is treating you well, and you're progressing toward your goal, whatever it is!</p><p>As promised in the last issue, here's me sharing behind-the-scenes on how I make the newsletter issues: <a href="https://youtu.be/CgTqqkzeeh8?ref=ioscodereview.com">https://youtu.be/CgTqqkzeeh8</a></p><p>Let's dive in üëá</p><hr><h2 id="on-push-notifications">On push notifications</h2><p>Last week Airbnb accidentally sent a test push notification to real users. Sarun has a good point - it's not a good idea to use inappropriate words in text that could be seen by users. This applies to everything - not just push text, but also in code that shouldn't theoretically be executed in non-debug builds.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/sarunw/status/1559871056873390083?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="the-sum-effort">The sum effort</h2><p>This simple formula Jane shared really put things in perspective for me.</p><p>Also it brought me to realise: if someone put effort into making the code more readable and well-structured, then it's less effort to read / work with later. If someone wrote "bad code" - perhaps spent less effort writing it - it takes extra effort to read later. Either way, the sum of total effort can be the same. No easy way out, the effort has to be spent by someone at some point, always.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/jevakallio/status/1531262225633222658?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="better-equality-test-failures">Better equality test failures</h2><p>If you've ever seen a test failure like this and hated it, <code><a href="https://github.com/krzysztofzablocki/Difference?ref=ioscodereview.com">Difference</a></code> is a package that can help. It offers a <code>diff</code> function that returns a readable explanation of what exactly is different. The doc for the library includes examples of how to easily use this with XCTest, Quick, and Composable Architecture.</p><figure class="kg-card kg-image-card"><img src="https://ioscodereview.com/content/images/revue/items/images/017/620/455/original/before.png" class="kg-image" alt loading="lazy"></figure><h3 id="github-krzysztofzablocki-difference"><a href="https://github.com/krzysztofzablocki/Difference?ref=ioscodereview.com">GitHub - krzysztofzablocki/Difference</a></h3><p>Simple way to identify what is different between 2 instances of any type. Must have for TDD.</p><h2 id="rest-api">REST API</h2><p>If you ever wondered what's the difference between just API and REST API, here's a short, digestible writeup about it:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/Rapid_API/status/1547204161485283329?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="on-code-duplication">On code duplication</h2><p>The problem of duplication is more nuanced than it seems. Common advice such as "duplication is cheaper than the wrong abstraction" is often based on the simplified view of the problem, that it's just about <em>code</em>. ¬†In this article <a href="https://twitter.com/JasonSwett?ref=ioscodereview.com">@JasonSwett</a> looks at what duplication actually is, why it‚Äôs such a surprisingly complicated problem, and what can be done to address it. Thanks <a href="https://twitter.com/ctietze?ref=ioscodereview.com">@ctietze</a> for sharing the post!</p><blockquote>We could imagine that duplication could be defined as a piece of code that appears in two or more places. Indeed, this sounds like a very reasonable and accurate definition. But it‚Äôs actually wrong!</blockquote><blockquote><strong>Duplication is when there‚Äôs a single <em>behavior </em>that‚Äôs specified in two or more places</strong></blockquote><h3 id="duplication-code-with-jason"><a href="https://www.codewithjason.com/duplication/?ref=ioscodereview.com">Duplication - Code with Jason</a></h3><p>In this post I‚Äôll show what duplication is, why it‚Äôs such a surprisingly complicated problem, and what can be done to address it.</p><p>ü§ò</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below. If you enjoyed it, you can help grow the newsletter by spreading the word ‚ò∫Ô∏è</p><p>Got feedback? Want to see more, or less of certain kinds of tips? I‚Äôd love to hear from you. Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #29 ]]></title>
        <description><![CDATA[ Hi there,

As I'm writing this, I am recording a show-and-tell video sharing a bit about my process creating this newsletter. I'll share it on Twitter and in the next issue, so stay tuned :)

I hope you find something interesting in my collection today üëá


Implicit weak self is coming

Usually ]]></description>
        <link>https://ioscodereview.com/issues/29/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a594</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 11 Aug 2022 12:30:02 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>As I'm writing this, I am recording a show-and-tell video sharing a bit about my process creating this newsletter. I'll share it on Twitter and in the next issue, so stay tuned :)</p><p>I hope you find something interesting in my collection today üëá</p><hr><h2 id="implicit-weak-self-is-coming">Implicit weak self is coming</h2><p>Usually I don't share things that Cannot Be Used Yet, but this one got me really excited! Starting with a future version of Swift, we won't have to write <code>self</code> inside closures after capturing it weakly:</p><figure class="kg-card kg-image-card"><img src="https://ioscodereview.com/content/images/revue/items/images/017/384/113/original/screenshot_2022-08-11_at_00.53.36.png" class="kg-image" alt loading="lazy"></figure><h3 id="swift-evolution-0365-implicit-self-weak-capture-md-apple-swift-evolution-github"><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0365-implicit-self-weak-capture.md?ref=ioscodereview.com">swift-evolution/0365-implicit-self-weak-capture.md ¬∑ apple/swift-evolution ¬∑ GitHub</a></h3><p>As of <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0269-implicit-self-explicit-capture.md?ref=ioscodereview.com">SE-0269</a>, implicit <code>self</code> is permitted in closures when <code>self</code> is written explicitly in the capture list. We should extend this support to <code>weak self</code> captures, and permit implicit <code>self</code> as long as <code>self</code> has been unwrapped.</p><h2 id="the-background-modifier">The background modifier</h2><p>In the past year the family of ¬†<code>.background(...)</code> modifiers has evolved. Now it has a few versions, allowing to customise alignment, safe area ignoring behaviour, and shape style of the background. There's even a version without any parameters at all - it sets the background to a color fitting the current color scheme. All versions are <a href="https://developer.apple.com/documentation/swiftui/view/background(ignoressafeareaedges:)?ref=ioscodereview.com">listed here and are documented pretty well</a>.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/thillsman/status/1549105316230488068?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="testing-the-mocks">Testing the mocks</h2><p>Stumbled onto a peculiar use-case for unit tests, and I've never seen it in real-life projects. Documenting mock behaviour via tests will often be seen as "too much", but it can come handy in cases when lots of tests rely on one mock.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/dasdom/status/1556980686392889345?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/hybridcattt/status/1557046991640838147?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="thread-safety-in-swift">Thread safety in Swift</h2><p>A longer but worthy read about different ways to manage multithreading in Swift and their trade-offs.</p><h3 id="thread-safety-in-swift-1"><a href="https://swiftrocks.com/thread-safety-in-swift?ref=ioscodereview.com">Thread Safety in Swift</a></h3><p>Concurrency is the entry point for the most complicated and bizarre bugs a programmer will ever experience. In this article, I'll share my favorite methods of ensuring thread safety, as well as analyzing the performance of the different mechanisms.</p><h2 id="starting-with-open-source">Starting with open source</h2><p>If you want to contribute to a project but didn't know which one, here's a good collection:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/MarcoEidinger/status/1552990827642662918?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>ü§ò‚òÆÔ∏è</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below. If you enjoyed it, you can help grow the newsletter by spreading the word ‚ò∫Ô∏è</p><p>Got feedback? Want to see more, or less of certain kinds of tips? I‚Äôd love to hear from you. Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #28 ]]></title>
        <description><![CDATA[ Hi there,

I hope you find something useful or interesting in today's collection ‚ú®


Live-updating cells

Starting with iOS 15, there's a set of reconfigure methods that let you update a cell that's already on-screen. This allows us to make nice animations to views inside cells, which are not possible with ]]></description>
        <link>https://ioscodereview.com/issues/28/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a595</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 28 Jul 2022 13:12:02 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>I hope you find something useful or interesting in today's collection ‚ú®</p><hr><h2 id="live-updating-cells">Live-updating cells</h2><p>Starting with iOS 15, there's a set of <code><a href="https://developer.apple.com/documentation/uikit/uitableview/3801923-reconfigurerows?ref=ioscodereview.com">reconfigure</a></code> methods that let you update a cell that's already on-screen. This allows us to make nice animations to views inside cells, which are not possible with <code>reloadData</code> - as it recreates cells from scratch.</p><p>In earlier iOS versions it was also possible to update existing cells, by getting on-screen cells with <code><a href="https://developer.apple.com/documentation/uikit/uitableview/1614983-cellforrow?ref=ioscodereview.com">UITableView.cellForRow(at:)</a></code> and updating the state manually. <code>reconfigure</code> can do that with less friction, and it can also update the height of the cell.</p><p>Check out Tyler's thread for a deeper dive into the new methods:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/smileyborg/status/1403908057185144832?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="approaches-to-mocking">Approaches to mocking</h2><p>Using the factory pattern is a common approach to mocking, but with Swift there are simpler approaches that work just as well: such as injecting values, injecting behaviour as closures (as opposed to injecting instances that perform a behaviour), or having factory methods as closures (as opposed to factory classes). In this thread Nick goes into different ways one can mock behaviour or values:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/nicklockwood/status/1547169053755805698?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>TL;DR:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/nicklockwood/status/1547169072097402881?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="on-code-readability">On code readability</h2><p>One comment from Nick's thread stood out to me - it really highlights the two extremes of code architecture: "hardcode everything" =&gt; no flexibility, changing one thing breaks other places; vs "mock everything" = code is not discoverable, no transparency in what to change code to achieve the goal. Balance is somewhere in the middle.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/da_vid_off/status/1547217008219013120?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="technical-debt-is-debt">Technical debt is debt</h2><p>Sometimes we say "there should be no technical debt". It's a really good aspiration, we've all been there. But as in life, going into debt can be beneficial:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/GergelyOrosz/status/1514116172454707200?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>but also:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/tlakomy/status/1547331578816303104?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="testing-codable-initializers">Testing Codable initializers</h2><p>A well-structured and understandable article on unit-testing custom Codable initializers. Lots of little gems in there - for one, <a href="https://github.com/krzysztofzablocki/Difference?ref=ioscodereview.com">the Difference library</a> looks like a huge quality-of-life improvements for unit tests.</p><h3 id="how-to-test-custom-codable-initializer-danijela-s-blog"><a href="https://danijelavrzan.com/posts/2022/07/how-to-test-custom-codable/?ref=ioscodereview.com">How to test custom Codable initializer | Danijela's blog</a></h3><p>Sometimes, when parsing a JSON, you need to implement a custom Codable initializer. Because of that custom logic, you're no longer using the default implementation. It's a good idea to test your code.</p><p>ü§ò‚òÆÔ∏è</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below. If you enjoyed it, you can help grow the newsletter by spreading the word ‚ò∫Ô∏è</p><p>Got feedback? Want to see more, or less of certain kinds of tips? I‚Äôd love to hear from you. Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #27 ]]></title>
        <description><![CDATA[ Hi there,

It's getting harder and harder to not share cool things from iOS 16 (that we can't yet use). I'm managing to resist so far. Hope you find something interesting and useful in today's collection!

By the way, if you enjoy reading the newsletter - send it to a ]]></description>
        <link>https://ioscodereview.com/issues/27/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a596</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 14 Jul 2022 13:10:44 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>It's getting harder and harder to not share cool things from iOS 16 (that we can't yet use). I'm managing to resist so far. Hope you find something interesting and useful in today's collection!</p><p>By the way, if you enjoy reading the newsletter - send it to a colleague ‚ò∫Ô∏è</p><hr><h2 id="using-unsafe-pointers-safely">Using unsafe pointers safely</h2><p>Unsafe pointers and bytes are only "safe" to use inside the body closure. From <code><a href="https://developer.apple.com/documentation/swift/withunsafemutablepointer(to:_:)?ref=ioscodereview.com">withUnsafeMutablePointer</a></code><a href="https://developer.apple.com/documentation/swift/withunsafemutablepointer(to:_:)?ref=ioscodereview.com"> documentation</a>: <code>The pointer argument is valid only for the duration of the function‚Äôs execution.</code></p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/AirspeedSwift/status/1546760863599689728?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="dry-evolved">DRY, evolved</h2><p>Check out this thread about SPOT - <strong>Single Point Of Truth</strong> principle. It's similar to DRY (Don't Repeat Yourself), but better. I've been looking at code this way as long as I remember - I had no idea this way of thinking had its own name.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/adamgordonbell/status/1547249497872273409?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>This comment perfectly points out the difference between SPOT and DRY:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/NightWhistler/status/1547262343188566016?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="beautiful-rounded-corners">Beautiful rounded corners</h2><p>Are you using <code>cornerRadius</code> for rounding corners? There's a better way - <code>.clipShape</code> as a <code>RoundedRectangle</code> with <code>continuous</code> style in SwiftUI produces a smoother looking result. To achieve the same in UIKit, do <code>button.layer.cornerCurve = .continuous</code> .</p><p>Check this thread for comparison and SwiftUI code:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/vdbv/status/1531032275298750472?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="cloudkit">CloudKit</h2><p>In <a href="https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-21-1124111?ref=ioscodereview.com">issue #21</a> I shared an article about CloudKit being a red flag for indie developers. The biggest issue named was the inability to transfer the app to another developer account, if a CloudKit entitlement was ever used in the app.</p><p>That restriction is now gone - now apps that use iCloud can be transferred to another developer account üéâ</p><p>Here's the updated list of criteria for app transfer: <a href="https://help.apple.com/app-store-connect/?ref=ioscodereview.com#/devaf27784ff">App Transfer Criteria</a></p><h3 id="app-store-connect-update-releases-apple-developer"><a href="https://developer.apple.com/news/releases/?id=06152022a&ref=ioscodereview.com">App Store Connect Update - Releases - Apple Developer</a></h3><p>Apps that use iCloud can now be transferred to another developer in the Apple Developer Program.</p><h2 id="non-optional-core-data-attributes-in-swift">Non-optional Core Data attributes in Swift</h2><p>There is a distinction between the concept of optional and non-optional values in Swift and Core Data. In Swift, you get compile-time guarantees, but in Core Data, the framework is enforcing the model rules in run-time. Optional Core Data attributes should be optional properties in Swift, but what about non-optional attributes?</p><p>In this article Jesse shares a robust approach to handling the differences and making sure the app doesn't crash.</p><h3 id="how-to-more-gracefully-handle-non-optional-core-data-properties-in-swift-jesse-squires"><a href="https://www.jessesquires.com/blog/2022/01/26/core-data-optionals/?ref=ioscodereview.com">How to more gracefully handle non-optional Core Data properties in Swift ¬∑ Jesse Squires</a></h3><p><br></p><p>ü§ò‚òÄÔ∏è‚òÆÔ∏è</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below! If you enjoyed it, you can help grow the newsletter by spreading the word ‚ò∫Ô∏è</p><p>Got feedback? Want to see more, or less of certain kinds of tips? I‚Äôd love to hear from you - just reply to this email üëã</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #26 ]]></title>
        <description><![CDATA[ Hi there,

Every time I sit down to write an intro to an issue, I struggle between staying positive and the desire to address current events in the outside world. And every time I land on the decision to let this newsletter be a small island on the internet dedicated ]]></description>
        <link>https://ioscodereview.com/issues/26/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a597</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 30 Jun 2022 12:52:20 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>Every time I sit down to write an intro to an issue, I struggle between staying positive and the desire to address current events in the outside world. And every time I land on the decision to let this newsletter be a small island on the internet dedicated to learning something new in the field we're passionate about.</p><p>If you are affected by war, the pandemic, or any of the other struggles in our crazy world - know that I think of you every time I write this üíõ</p><p>And thanks to all of you for being loyal readers! Seeing the high open rates and receiving your feedback keeps my heart warm(-er) ‚ò∫Ô∏è</p><p>So I hope you find something interesting in today's collection. Let's dive in?</p><hr><h2 id="accessible-custom-tab-bars">Accessible custom tab bars</h2><p><code><a href="https://developer.apple.com/documentation/uikit/uiaccessibilitytraits/1648592-tabbar?ref=ioscodereview.com">.tabBar</a></code> accessibility trait is almost magical when it comes to making a custom tab bar view behave like a system one.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/dadederk/status/1542105711336951809?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>If you want to learn more about this, Bas Broek wrote a detailed article on implementing accessible custom tab bars:</p><h3 id="building-an-accessible-custom-tab-bar-bas-blog"><a href="https://www.basbroek.nl/custom-tab-bar-accessibility?ref=ioscodereview.com">Building an Accessible Custom Tab Bar | Bas‚Äô Blog</a></h3><p>Recently, I‚Äôve been working on making a custom tab bar in our app accessible. That is, make it work just like a native, out-of-the-box UITabBarController.</p><h2 id="interactive-image-preview-transition">Interactive image preview transition</h2><p>This is so cool. I didn't even realize that QuickLook framework can be used on iOS! Check out this short thread by Jordan:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/JordanMorgan10/status/1526999338928439296?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="sink">Sink</h2><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/dvrzan/status/1522615963027488770?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="building-safe-apis">Building safe APIs</h2><p>The whole Swift language is <a href="https://developer.apple.com/swift/?ref=ioscodereview.com#safety">built upon safety principles</a>, so it only makes sense to apply them to our own APIs:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/rockbruno_/status/1526252822022524933?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="nspersistentcloudkitcontainer-trickiness">NSPersistentCloudKitContainer trickiness</h2><p>A comprehensive write up about the realities of using Core Data with CloudKit syncing. The article is a few months old, and just now it's been updated with new findings. So if you've seen it before - it's worth checking out again.</p><h3 id="general-findings-about-nspersistentcloudkitcontainer"><a href="https://crunchybagel.com/nspersistentcloudkitcontainer/?ref=ioscodereview.com">General Findings About NSPersistentCloudKitContainer</a></h3><p>This article contains our findings when converting Streaks to use NSPersistentCloudKitContainer.</p><p>ü§ò‚òÆÔ∏è</p><p>Alright, that‚Äôs it for today.</p><p>What do you think about me writing the comment <em>above</em> the tweet or link? Does it work? Or do you think it should be <em>after</em>? I'm curious to hear what you think. Let me know by replying to this email :)</p><p>Did you enjoy this issue? Let me know by pressing the buttons below, so I can improve the newsletter üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #25 ]]></title>
        <description><![CDATA[ Hi there,

Hope you had a wonderful WWDC week! I myself have been on vacation (and still am), and only checked out the keynote and saw some tweets from the community.

Other newsletters have featured lots of WWDC-related articles - for example I loved the latest iOS Dev Weekly which ]]></description>
        <link>https://ioscodereview.com/issues/25/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a598</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 16 Jun 2022 12:30:01 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>Hope you had a wonderful WWDC week! I myself have been on vacation (and still am), and only checked out the keynote and saw some tweets from the community.</p><p>Other newsletters have featured lots of WWDC-related articles - for example I loved the latest <a href="https://iosdevweekly.com/?ref=ioscodereview.com">iOS Dev Weekly</a> which was 100% about WWDC.</p><p>I tend to forget all the new things by the time I can use them for real, so I'll be featuring more of the new APIs after Xcode 14 ships in September. My goal has always been to share things that can be used right away in real projects (gotta be honest it's also convenient because I could continue spending the vacation offline üòã)</p><p>I was also interviewed on the <a href="https://www.buzzsprout.com/1414396/10721946?ref=ioscodereview.com">AppForce1 podcast</a>, where I shared a bit about how I make the newsletter ‚ò∫Ô∏è</p><p>Now let's dive in!</p><hr><h2 id="-unavailable-attribute">#unavailable attribute</h2><p>The new <code><a href="https://docs.swift.org/swift-book/ReferenceManual/Attributes.html?ref=ioscodereview.com">#unavailable</a></code> attribute has been added in Swift 5.6 (Xcode 13.3) - we can now check for older OS versions directly:</p><p><code>if #unavailable(iOS 15.0) { /* this code will run on iOS 14 and below */ }</code></p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/twannl/status/1486774836357652483?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="dealing-with-swiftui-type-inference">Dealing with SwiftUI type inference</h2><p>Do you sometimes try to write f.ex. <code>Color.background</code>, only to have nothing come up in autocomplete? The issue is that <code>.background</code> exists, just not on <code>Color</code> - it's a separate shape style, and the shorthand is only available by the magic of type inference. J√©r√¥me here shares an approach for finding what you're looking for (see series of pictures in the full tweet)</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/jegnux/status/1491000100663042048?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="unit-tests-eh">Unit tests eh?</h2><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/tdinh_me/status/1519920418877952000?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>in all seriousness though:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/zet_manu/status/1510263282376101895?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/azamsharp/status/1512055836411105283?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="the-new-thing-is-out">The new thing is out</h2><p>Eternal wisdom from Jordan, now more relevant than ever before:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/JordanMorgan10/status/1510749975197761544?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="moving-the-cursor-in-terminal">Moving the cursor in terminal</h2><p>Okay this is not a code thing per se, but this terminal key binding has been a nice time saver for me since I learned it a couple of years ago:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/preshonyee/status/1511660537477799937?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>ü§ò‚òÆÔ∏è</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below, so I can improve the newsletter.</p><p>Got feedback? Want to see more, or less of certain kinds of tips? I‚Äôd love to hear from you. Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #24 ]]></title>
        <description><![CDATA[ Hi there,

As promised, today's issue is a special one, and I'm really excited to bring it to you. I wanted to spice things up a bit and invite a guest curator to create this issue. Because why not?

Say hi to Bas Broek - he will be curating the ]]></description>
        <link>https://ioscodereview.com/issues/24/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a599</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 02 Jun 2022 12:41:20 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>As promised, today's issue is a special one, and I'm really excited to bring it to you. I wanted to spice things up a bit and invite a guest curator to create this issue. Because why not?</p><p>Say hi to <a href="https://twitter.com/basthomas?ref=ioscodereview.com">Bas Broek</a> - he will be curating the collection today. Bas had been authoring <a href="https://swiftweeklybrief.com/?ref=ioscodereview.com">Swift Weekly Brief (sadly discontinued)</a> for 2 years before joining the accessibility team at Apple. Now he's back to the community and shares his favourite bits of wisdom with us below üëá üòå</p><p>--------------------</p><p>This is Bas; I'm a friend of Marina's. As she reached out to me asking if I'd be up for writing an issue, I immediately said yes!</p><p>Having curated a newsletter before, I know it can be quite a bit of work; having the community help out was always a highlight of writing the newsletter, so I'm always happy to return that favor.</p><p>Enjoy!</p><hr><h2 id="accessibility-hints">Accessibility hints</h2><p>This thread is not about the literal API, but rather a bunch of things that are good to know and be aware of when building accessible products. I would love to know ‚Äî how do you review code for accessibility?</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/RobRWAPP/status/1528351247702675461?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>Speaking of accessibility hints, here's Dani sharing an insight every day for the WHOLE YEAR. So great to see this topic being put in the spotlight. Check out <a href="https://twitter.com/dadederk?ref=ioscodereview.com">his twitter</a> and/or follow him for the daily accessibility tips.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/dadederk/status/1527318162861088768?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="attributed-strings">Attributed Strings</h2><p>As Marina mentioned in the last newsletter, it seems she's not the only one excited to see Natalia being back to blogging. Before she joined the SwiftUI team at Apple, her blog posts were a fresh breeze with amazing insights. Now, after leaving Apple, she's back to it, taking all the experience from her time at Apple with her ‚Äî and it shows.</p><p>The new <code><a href="https://developer.apple.com/documentation/foundation/attributedstring?ref=ioscodereview.com">AttributedString</a></code> API is type-safe and powerful, and can be used not only in SwiftUI, but also with UIKit and AppKit. The type-inference going on is quite complex though. Check out the full article offering a deeper understanding on configuring the new attributed strings: <a href="https://nilcoalescing.com/blog/AttributedStringAttributeScopes/?ref=ioscodereview.com">AttributedString Attribute Scopes</a></p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/natpanferova/status/1528633361341722624?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="equal-sizing-in-swiftui">Equal sizing in SwiftUI</h2><p>In this short article <a href="https://twitter.com/mcmaurberger?ref=ioscodereview.com">Matthias</a> shares a clean approach to making all elements in a <code>VStack</code> as wide as the widest element (but not take up the entire proposed width):</p><h3 id="swiftui-equal-and-ideal-sizes"><a href="https://sudrocket.de/blog/2022/05/swiftui-equal-and-ideal-sizes/?ref=ioscodereview.com">SwiftUI equal and ideal sizes</a></h3><p>One of the more common sentiments towards SwiftUI you‚Äôll come across on the Internet goes something like this: It‚Äôs magical until it isn‚Äôt. Meaning: SwiftUI let‚Äôs you write UI code so quickly that it sometimes feels like a superpower. But suddenly you hit a wall and there‚Äôs seemingly no way around it. One example that illustrates this quite well is when you want to make all children of a VStack as wide as the widest child. Sounds like it should be straightforward. But it‚Äôs not. It‚Äôs a surprisingly hard problem.</p><h2 id="beyond-code">Beyond code</h2><p>Paris shares an insight on something we may overlook; sometimes it's not only about code.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/pxpgraphics/status/1529287600460161031?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="wwdc-preparation">WWDC Preparation</h2><p>Here's a couple of helpful tips on preparing for WWDC, when it comes to audits and labs:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/rjstelling/status/1531198192859205632?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/twostraws/status/1531319533062959104?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>Thanks for reading! Enjoy WWDC next week, and see you around!</p><p>- Bas</p><p>--------------------</p><p>‚òÆÔ∏è</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below.</p><p>Do you want to see other guest curators on the newsletter? Tell me who you'd like to hear from by replying to this email üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #23 ]]></title>
        <description><![CDATA[ Hi there,

WWDC is coming soon, are you excited? I am, but also looking forward to some vacation time. Not sure yet how much of catching up with the freshest-and-greatest content I'll do in June, but either way there will be some interesting stuff to share.

Also stay tuned for ]]></description>
        <link>https://ioscodereview.com/issues/23/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a59a</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 19 May 2022 13:03:01 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>WWDC is coming soon, are you excited? I am, but also looking forward to some vacation time. Not sure yet how much of catching up with the freshest-and-greatest content I'll do in June, but either way there will be some interesting stuff to share.</p><p>Also stay tuned for the next issue #24 on June 1st, it will be a very special one ü§©</p><p>Now, let's dive in üëá</p><hr><h2 id="sizing-of-sf-symbols">Sizing of SF Symbols</h2><p>Great thread, nothing to add üòå Excited to see that Natalia is back to blogging. She posts interesting content regularly, I wish I could feature all of it! Make sure to <a href="https://twitter.com/natpanferova?ref=ioscodereview.com">follow her on Twitter</a>.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/natpanferova/status/1527171410392535041?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/natpanferova/status/1527171413601304576?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/jegnux/status/1527205230370234368?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/natpanferova/status/1527218791544786944?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="automating-the-encryption-compliance-check">Automating the encryption compliance check</h2><p>Definitely makes the life easier. For additional instructions check ¬†<a href="https://developer.apple.com/documentation/security/complying_with_encryption_export_regulations?ref=ioscodereview.com">Complying with Encryption Export Regulations</a></p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/danielpunkass/status/1517507834778370049?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="comparing-date-ranges">Comparing date ranges</h2><p>Since <code><a href="https://developer.apple.com/documentation/swift/closedrange/1784147-overlaps?ref=ioscodereview.com">overlaps(_:)</a></code> is declared on <code><a href="https://developer.apple.com/documentation/swift/range/?ref=ioscodereview.com">Range</a></code> and <code><a href="https://developer.apple.com/documentation/swift/closedrange?ref=ioscodereview.com">ClosedRange</a></code>, it can be useful not only for dates, along with <code><a href="https://developer.apple.com/documentation/swift/closedrange/1784630-contains?ref=ioscodereview.com">contains(_:)</a></code> (also found as the ¬†<code><a href="https://developer.apple.com/documentation/swift/closedrange/2963623?ref=ioscodereview.com">~=</a></code> operator). One can almost forget about comparison operators üòÄ</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/peres/status/1516797470482776067?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="on-dependency-injection">On dependency injection</h2><p>Some food for thought on the topic of injecting / resolving dependencies. In this Twitter thread you'll find interesting points for and against various approaches üëá</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/simonbs/status/1521428389462253569?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/simonbs/status/1521440277239635969?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="starting-with-unit-testing">Starting with unit testing</h2><p>I wrote a guide to help developers who are motivated to start unit testing their code, but are uncertain about where to begin in practice. Among other things, you'll find some approaches to picking what to test, and how to start testing seemingly untestable code.</p><h3 id="unit-testing-the-pragmatic-guide-on-where-to-start-marina-gornostaeva"><a href="https://hybridcattt.com/blog/start-testing-pragmatic-guide/?ref=ioscodereview.com">Unit testing: The pragmatic guide on where to start | Marina Gornostaeva</a></h3><p><br></p><p>‚òÆÔ∏è</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below, so I can improve the newsletter.</p><p>Got feedback? Want to see more, or less of certain kinds of tips? I‚Äôd love to hear from you. Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #22 ]]></title>
        <description><![CDATA[ Hi there,

Hope you enjoy today's collection üôå


Updating @State values

It's not safe to update @State properties from any callbacks except those provided by the SwiftUI framework. Always use View.onReceive(_:perform:) to react to external changes and update the view state. Below is the example of how to subscribe ]]></description>
        <link>https://ioscodereview.com/issues/22/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a59b</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 05 May 2022 12:51:40 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>Hope you enjoy today's collection üôå</p><hr><h2 id="updating-state-values">Updating @State values</h2><p>It's not safe to update <code><a href="https://developer.apple.com/documentation/swiftui/state?ref=ioscodereview.com">@State</a></code> properties from any callbacks except those provided by the SwiftUI framework. Always use <code><a href="https://developer.apple.com/documentation/swiftui/view/onreceive(_:perform:)?ref=ioscodereview.com">View.onReceive(_:perform:)</a></code> to react to external changes and update the view state. Below is the example of how to subscribe to <code>NotificationCenter</code> notifications:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/AlexBBrown/status/1466085295409938432?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/azamsharp/status/1465805517008392195?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="disabling-animation-on-a-view">Disabling animation on a View</h2><p><code><a href="https://developer.apple.com/documentation/swiftui/path/animation(_:)/?ref=ioscodereview.com">.animation(:_)</a></code> modifier was deprecated in iOS 15, so now to disable animations we should use <code><a href="https://developer.apple.com/documentation/swiftui/path/transaction(_:)/?ref=ioscodereview.com">.transaction(_:)</a></code> modifier that lets us customise the transition between two states. The doc says: "Use this modifier to change or replace the animation used in a view."</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/twannl/status/1511697995628261379?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="foreach-vs-for">forEach vs for</h2><p>There are some things a <code>for</code> loop can do that <code>forEach</code> can't, and vice versa. <code>for</code> offers a more fine-grained control flow, allowing to exit early with <code>break</code>, as well as to iterate conditionally with <code>for ... where ...</code> . On the other hand, ¬†<code>forEach</code> allows to pass closures to it. In most cases though it simply comes down to personal taste!</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/MarcoEidinger/status/1519226611085762561?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/dev_jmitchell/status/1229826803365072896?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/AirspeedSwift/status/1511932638113656839?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>jk! <code>reduce</code> is nice sometimes.</p><h2 id="on-unnecessary-optimization">On (unnecessary) optimization</h2><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/ds2001man/status/1516655307228909571?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="the-hidden-costs-of-your-dependencies">The Hidden Costs of Your Dependencies</h2><p>Ever had to argument why adding a third party dependency to the codebase does not come for free? Here's an amazing concise article summarizing all the different aspects:</p><h3 id="the-hidden-costs-of-your-dependencies-jason-zurita"><a href="https://jasonzurita.com/the-hidden-cost-of-dependencies/?ref=ioscodereview.com">The Hidden Costs of Your Dependencies | Jason Zurita</a></h3><p>Using a dependency isn‚Äôt always <em>bad</em>, but we should be intentional about how and when we use them and what the trade-offs are.</p><p>‚òÆÔ∏èüíôüíõ</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below, so I can improve the newsletter.</p><p>Got feedback? Want to see more, or less of certain kinds of tips? I‚Äôd love to hear from you. Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #21 ]]></title>
        <description><![CDATA[ Hi there,

Hope you're safe, wherever you are. I'm excited to share this week's findings with you!

This time I'm doing something new in addition to the usual tips. The pandemic has been hash on the conference scene, and the next conference season is coming up. I figured I'd highlight ]]></description>
        <link>https://ioscodereview.com/issues/21/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a59c</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 21 Apr 2022 13:21:14 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>Hope you're safe, wherever you are. I'm excited to share this week's findings with you!</p><p>This time I'm doing something new in addition to the usual tips. The pandemic has been hash on the conference scene, and the next conference season is coming up. I figured I'd highlight some conferences that are still looking for speakers.</p><p>Enjoy! ‚òÄÔ∏è</p><hr><h2 id="mainactor-run-vs-mainactor">MainActor.run vs @MainActor</h2><p>You can dispatch a <code>Task</code> to the main actor two ways - by explicitly calling <code>MainActor.run</code> or by annotating the closure with <code>@MainActor</code>. These two ways have different behaviour. If already on the main thread, the former will run immediately but the latter will run on the next runloop cycle. Find detailed explanation in <a href="https://www.hackingwithswift.com/quick-start/concurrency/how-to-use-mainactor-to-run-code-on-the-main-queue?ref=ioscodereview.com">this article by Paul Hudson</a>.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/onmyway133/status/1516431491042975744?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/lkuczborski/status/1516442306039230466?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="synchronizing-user-defaults">Synchronizing user defaults</h2><p>Since iOS 12, the <a href="https://developer.apple.com/documentation/foundation/userdefaults/1414005-synchronize?ref=ioscodereview.com">synchronize()</a> method on <code>UserDefaults</code> <em>does nothing</em>, and we don't need to call it anymore. It's interesting that the method is not marked as deprecated yet. Here's a quote from the <a href="https://developer.apple.com/documentation/macos-release-notes/foundation-release-notes?ref=ioscodereview.com">release notes for iOS 12</a>:</p><blockquote>Removed synchronization requirements. It‚Äôs no longer necessary to use <code><a href="http://click.revue.email/ss/c/i4W3jH19ejJsNqtlezSpO1paC9hhp-ntpmEysO3iFvoDNTUrH3Bb1DZT_EuqZsN45cuMlnc0lJl2xCTRxZhpwhLOeqL9w_bWAnnCR2HcKs0Hy8-QjXBXLQsPlOM29VmCKiYu0JhhU3BBeV-2ebpW-nHEmFZAc93DgHuEaTLy5fgS3ENkTUq1xomBWyLNbtlJ87qr88s-PJaduZqnzIku4BAALxlkyUMDmp-1h1r6MbRCKas2jYjA492MCIDt1KCLcqTjk3KPMwrsU9VNKSPCTTQ3QRutQ4ZvPOUu-DWgqTJlPE2bVVkJE4sBJ7wMUiAR/3le/ZmUMCrasSJq325mVl5xxPw/h24/fDgrz6hQwUe2g1t1EXrTVb-IDRYbSMQVdUO4qPMLkGQ?ref=ioscodereview.com">synchronize()</a></code>, <code><a href="http://click.revue.email/ss/c/i4W3jH19ejJsNqtlezSpO1paC9hhp-ntpmEysO3iFvoDNTUrH3Bb1DZT_EuqZsN4GuPdCW-1MztyveWOWMm4O3yYPe_xG2Wei8xIbJq7TkOO4nKiuoVoEzItQPVE9nCysAwBxlQVeBOl_zdT_YGkW6rab_iRi5XxHB2QbStP7ve_OJNhrZdPYS8kxdS5T6GOm5Swp45pZq3OOUC-g5cqIfzTNmoJSJkgqwMa1J-w9cbe4WOMCCBYvriYHibrU5E8wNUYxUx1p_kPM4bRiWuKJ8aOy7hVafJwPIwjFsq-V5Fv6GVYBQ1618HOeWy0yt1W/3le/ZmUMCrasSJq325mVl5xxPw/h25/Twm_garnrXIHnOfeU-1T1RJ0OP4G4gCVoqPWOHpYAUA?ref=ioscodereview.com">CFPreferencesAppSynchronize(:)</a></code>, or <code><a href="http://click.revue.email/ss/c/i4W3jH19ejJsNqtlezSpO1paC9hhp-ntpmEysO3iFvoDNTUrH3Bb1DZT_EuqZsN4GuPdCW-1MztyveWOWMm4O20JRg_37Scw2wNZNdqiovnglXM5WhXfIdCZtXzdShp0k8yAjukAo9ihjS28MTrRvkEav_fbU4hgjE07gwewP0kw7su17Kf5Ej8O6NFTn5LiQTlPO4BEbkWFExCEOUHfMRw2TnpITd-lGP8c44nDUfa9hgLe0pgDslffKgd1mPeywdyvAMgA9PXHICQSc7Jmm9FYO8C62Q0eO1PQ1w3XM9x8LvdiJle1GmCy0fzFbXKo/3le/ZmUMCrasSJq325mVl5xxPw/h26/Gs6RBAzxCJYg07P6ijpNKqSlEHmibhlGaDvxB6kVyFE?ref=ioscodereview.com">CFPreferencesSynchronize(:::)</a></code>. These methods will be deprecated in a future version of the OS. Now that you don‚Äôt need to call these synchronization methods, the performance characteristics of <code><a href="http://click.revue.email/ss/c/i4W3jH19ejJsNqtlezSpO1paC9hhp-ntpmEysO3iFvoDNTUrH3Bb1DZT_EuqZsN45cuMlnc0lJl2xCTRxZhpwtuScJEBitDVdk1408Pr1BBGJ2iFw3yAcRYRpa-wFAiBXM5qXmysZ6m43H1GTN1K1LiFZhGgN8zjHj6aFYQxoVv05os9C2kv2LFmuQYA4xko5KCVyYsO2bW8OfNw2qgW0XaUT-WurWCyiLKUtXaB0ful4NzfXlVi9Ofwsbh_KKuRMQNhzOcKLdzGqth-dEJKxywI_Ma2rl1H4n-ek01r5cY/3le/ZmUMCrasSJq325mVl5xxPw/h27/Un-5M77BNxaD5jvgSmF7-PNUSG6a_gbWAXCQzYWrl9g?ref=ioscodereview.com">UserDefaults</a></code>and Preferences Utilities are slightly different: The time taken for enqueueing write operations is now paid by the writing thread, rather than by the next thread to call <code><a href="http://click.revue.email/ss/c/i4W3jH19ejJsNqtlezSpO1paC9hhp-ntpmEysO3iFvoDNTUrH3Bb1DZT_EuqZsN45cuMlnc0lJl2xCTRxZhpwhLOeqL9w_bWAnnCR2HcKs0Hy8-QjXBXLQsPlOM29VmCKiYu0JhhU3BBeV-2ebpW-nHEmFZAc93DgHuEaTLy5fgS3ENkTUq1xomBWyLNbtlJ87qr88s-PJaduZqnzIku4BAALxlkyUMDmp-1h1r6MbRCKas2jYjA492MCIDt1KCLcqTjk3KPMwrsU9VNKSPCTTQ3QRutQ4ZvPOUu-DWgqTJlPE2bVVkJE4sBJ7wMUiAR/3le/ZmUMCrasSJq325mVl5xxPw/h28/uwjzeBb3ejd1r1BVKX7ge8lumjNpVyFhu2DfkaJLPaI?ref=ioscodereview.com">synchronize()</a></code> or do a read operation.</blockquote><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/JordanMorgan10/status/1516832320887656457?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="codable-in-firebase">Codable in Firebase</h2><p>There's now built-in <code>Codable</code> support in Firebase, so there's no need to bring in additional packages such as <code><a href="https://github.com/alickbass/CodableFirebase?ref=ioscodereview.com">CodableFirebase</a></code>. Now you can simply write: <code>ref.getDocument(as: Book.self) {...}.</code> The type just needs to have a property annotated with <code>@DocumentID</code> property wrapper, so the framework knows which property is the identifier. If you want to learn more, Peter also wrote a <a href="https://peterfriese.dev/posts/firestore-codable-the-comprehensive-guide/?ref=ioscodereview.com">comprehensive guide</a>.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/peterfriese/status/1507356658707619850?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="on-refactoring">On refactoring</h2><p>Wise words here. If one commit contains both refactoring and behaviour change, if things break (or, <em>when</em>) it'll be hard to tell whether they broke due to refactoring or due to a bug in new behaviour. I split these up, always.</p><p>Also sometimes people call any change in code structure <em>a refactoring</em>. Here's a quote from <a href="https://en.wikipedia.org/wiki/Code_refactoring?ref=ioscodereview.com">Wikipedia</a>: "code refactoring is the process of restructuring existing computer code‚Äîchanging the <em>factoring</em>‚Äîwithout changing its external behavior."</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/acdlite/status/1512135917393301506?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="cloudkit">CloudKit</h2><p>Did you know that apps using iCloud (CloudKit) cannot be transferred to another account? This means that selling an app with CloudKit can be a tricky endeavour - with the only option being to sell the whole developer account.</p><h3 id="icloud-red-flag-for-indie-developers"><a href="https://jknlsn.com/posts/2022-03-24-icloud-redflag-for-indie-developers?ref=ioscodereview.com">iCloud red flag for indie developers</a></h3><p>As a consumer, I love iCloud. One central storage for documents, photos and app data. What's not to love? As a developer, I'm much more wary.</p><h2 id="conference-time-">Conference time!</h2><p>This time I want to help the community by highlighting some of the upcoming conferences.</p><p>CFP (call for papers) is a format when potential speakers submit their talk ideas. If you've been dreaming about giving a talk - this is your hint to finally go for it ü§ò</p><h3 id="looking-for-speakers">Looking for speakers</h3><ul><li><strong>iOSDevUK</strong>, Aberystwyth, UK, 5-8 September 2022. <a href="https://www.iosdevuk.com/speakercall-1.?ref=ioscodereview.com">https://www.iosdevuk.com/speakercall-1.</a> They're looking for speakers from underrepresented groups.</li><li><strong>SwiftLeeds</strong>, Leeds, UK, 20 October 2022. <a href="https://swiftleeds.co.uk/?ref=ioscodereview.com">https://swiftleeds.co.uk/</a></li><li><strong>360idev</strong>, Denver, US, 28-31 Aug 2022. <a href="https://360idev.com/call-for-papers/?ref=ioscodereview.com">https://360idev.com/call-for-papers/</a></li><li><strong>SwiftConf</strong>, Cologne, Germany, Aug 17-18, 2022. <a href="https://swiftconf.com/?ref=ioscodereview.com">https://swiftconf.com</a></li></ul><h3 id="new-kid-on-the-block">New kid on the block</h3><ul><li><strong>plSwift </strong>- A brand-new Swift/iOS conference in Wroc≈Çaw, Poland. 25-26 May 2022. <a href="https://t.co/0DVLmRHxsr?ref=ioscodereview.com">plswift.com</a></li></ul><p>‚òÆÔ∏è</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below, so I can improve the newsletter.</p><p>Got feedback? Want to see more, or less of certain kinds of tips? I‚Äôd love to hear from you. Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #20 ]]></title>
        <description><![CDATA[ Hi there,

Can't believe this is already the 20th issue ¬†üéâ A milestone for sure. Thank you for your continuous support and feedback - and for spreading the word!


Old new UIKit APIs

When new APIs are introduced at WWDC, we can't use them right away in apps supporting previous iOS ]]></description>
        <link>https://ioscodereview.com/issues/20/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a59d</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 07 Apr 2022 12:47:31 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>Can't believe this is already the 20th issue ¬†üéâ A milestone for sure. Thank you for your continuous support and feedback - and for spreading the word!</p><hr><h2 id="old-new-uikit-apis">Old new UIKit APIs</h2><p>When new APIs are introduced at WWDC, we can't use them right away in apps supporting previous iOS versions. And when the time comes, we already forgot about them.</p><p><strong>@onmyway133</strong> shares a collection of reminders about cool and useful APIs that were introduced in previous years:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/onmyway133/status/1511358074367328258?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>Here's a link to <code><a href="https://developer.apple.com/documentation/uikit/uiviewpropertyanimator?ref=ioscodereview.com">UIViewPropertyAnimator documentation</a></code>.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/onmyway133/status/1511358087839375362?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p><a href="https://developer.apple.com/documentation/uikit/uistackview/2866023-setcustomspacing?ref=ioscodereview.com">Documentation for </a><code><a href="https://developer.apple.com/documentation/uikit/uistackview/2866023-setcustomspacing?ref=ioscodereview.com">setCustomSpacing(_:after:)</a></code> - alas, not very useful.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/onmyway133/status/1511358100598448130?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>Here's a link to <code><a href="https://developer.apple.com/documentation/uikit/uitextcontenttype?ref=ioscodereview.com">UITextContentType documentation</a></code>.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/onmyway133/status/1511358112552284163?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>Some useful links: <code><a href="https://developer.apple.com/documentation/uikit/uitabbaritemappearance?ref=ioscodereview.com">UITabBarItemAppearance documentation</a></code>, <code><a href="https://developer.apple.com/documentation/uikit/uitabbarappearance?ref=ioscodereview.com">UITabBarAppearance documentation</a></code>, <a href="https://emptytheory.com/2019/12/31/using-uitabbarappearance-for-tab-bar-changes-in-ios-13/?ref=ioscodereview.com">Using UITabBarAppearance for Tab Bar changes in iOS 13</a>. ¬†Similar API is available for navigation bars: <code><a href="https://developer.apple.com/documentation/uikit/uinavigationbarappearance?ref=ioscodereview.com">UINavigationBarAppearance documentation</a></code>, <a href="https://sarunw.com/posts/uinavigationbar-changes-in-ios13/?ref=ioscodereview.com">UINavigationBar changes in iOS 13</a>.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/onmyway133/status/1511358040284442625?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>Here's a link to <code><a href="https://developer.apple.com/documentation/uikit/uiscrollview/keyboarddismissmode?ref=ioscodereview.com">KeyboardDismissMode documentation</a></code>.</p><h2 id="array-slice-indices">Array slice indices</h2><p>The fact that a slice is just a "view" into the original array can be unexpected and lead to indexing bugs. Convert to the slice to <code>Array(slice)</code> to avoid this, though then new memory will be used.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/DrCarleeknikov/status/1511108710889758721?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="int-vs-uint">Int vs UInt</h2><p>Turns out, <a href="https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html?ref=ioscodereview.com">the official Swift documentation</a> recommends against using <code>UInt</code> for simply noting values that shouldn't be negative:</p><blockquote>A consistent use of Int for integer values aids code interoperability, avoids the need to convert between different number types, and matches integer type inference, as described in Type Safety and Type Inference.</blockquote><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/GilroyBen/status/1317081098195734528?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="on-software-design">On software design</h2><p>Have you heard of the broken windows theory? In short, it says that when there's a broken window on a building, more windows will get broken there. One graffiti attracts more graffiti. This is a fairly short article, that nonetheless brings an interesting perspective to the topic of software design and maintenance.</p><h3 id="apply-broken-windows-theory-to-the-software-design"><a href="https://www.offnotes.org/apply-broken-windows-theory-to-the-software-design/?ref=ioscodereview.com">Apply "Broken-Windows" theory to the Software Design</a></h3><p>"Broken Windows" is one of the most cited articles in the history of criminology. What can it teach in the world of software development?</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #19 ]]></title>
        <description><![CDATA[ Hi there,

The world is still a mess, but I'm really excited to bring you some learnings today. Enjoy! üôå


The Code Review Pyramid

What to look at in a code review? Check out this infographic shared by @gunnarmorling. Also available on the blog: The Code Review Pyramid







Struct properties - ]]></description>
        <link>https://ioscodereview.com/issues/19/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a59e</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 24 Mar 2022 12:50:04 +0100</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>The world is still a mess, but I'm really excited to bring you some learnings today. Enjoy! üôå</p><hr><h2 id="the-code-review-pyramid">The Code Review Pyramid</h2><p>What to look at in a code review? Check out this infographic shared by <strong>@gunnarmorling</strong>. Also available on the blog: <a href="https://www.morling.dev/blog/the-code-review-pyramid/?ref=ioscodereview.com">The Code Review Pyramid</a></p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/gunnarmorling/status/1501645187407388679?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="struct-properties-var-or-let">Struct properties - var or let?</h2><p>Found this conversation thread on pros and cons of making properties in structs ¬†<code>var</code> vs <code>let</code>. I like the take by <strong>@myell0w</strong>, and you'll find even more opinions in the thread.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/mluisbrown/status/1320798726735187968?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/mluisbrown/status/1320802409271205888?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/myell0w/status/1320807408390807553?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="decoding-corrupted-arrays-with-codable">Decoding corrupted arrays with Codable</h2><p>By default, decoding an array of <code>Codable</code> will fail if one of the elements fails to decode. That's not obvious behaviour - and it's not always desirable.</p><p>The common way to solve this is to decode as an array of wrapper objects where the model is optional, and <code>compactMap</code> it after. For concrete implementation details, check out the article:</p><h3 id="decode-an-array-with-a-corrupted-element-sarunw"><a href="https://sarunw.com/posts/decode-array-with-corrupted-element/?ref=ioscodereview.com">Decode an array with a corrupted element | Sarunw</a></h3><p>When working with an unstable, legacy, or third party API, you might get a malformed object in an array. Learn how to decode a JSON array with corrupted data in Codable safely.</p><h2 id="fixing-swiftui-preview-pausing">Fixing SwiftUI preview pausing</h2><p>Turns out, structure of the code affects how SwiftUI previews are functioning. For example, changing the default value of a property will pause previews, but if the property is computed - changing the body won't pause previews.</p><p>This is because live reloading is implemented using <code>@_dynamicReplacement</code> attribute, which only supports replacing <em>bodies</em> of functions and properties. If you want to learn even more details, check out this article I wrote 2 months ago and forgot to include earlier üòÄ</p><h3 id="fixing-swiftui-s-automatic-preview-updating-paused-marina-gornostaeva"><a href="https://hybridcattt.com/blog/fixing-swiftui-previews/?ref=ioscodereview.com">Fixing SwiftUI‚Äôs Automatic Preview Updating Paused | Marina Gornostaeva</a></h3><p>Understand why SwiftUI previews keep getting paused and how to improve the situation</p><h2 id="a-refactoring-story">A refactoring story</h2><p>An entertaining and educational read about refactoring of a complex app. Good with a cup of tea üçµ</p><h3 id="refactoring-uber-s-rider-app-space-is-disorienting"><a href="http://spaceisdisorienting.com/refactoring-the-uber-rider-app?ref=ioscodereview.com">Refactoring Uber's Rider app ‚Ä¢ Space is Disorienting</a></h3><p>There was a lot of discussion at the end of 2020 about Uber‚Äôs mobile apps. Many wondered aloud why we didn‚Äôt just refactor the app instead of rewriting it. I thought I‚Äôd add some context into where things were <em>prior</em> to the rewrite.</p><p>‚òÆÔ∏è</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below, so I can improve the newsletter.</p><p>Got feedback? Want to see more, or less of certain kinds of tips? I‚Äôd love to hear from you. Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #18 ]]></title>
        <description><![CDATA[ Hi there,

I hope you enjoy today's content. Let's dive in üëá


Documenting app's footprint

Here's an interesting thread where people share how they document where the app saves things and how they like to organise constants. Lots of opinions - some prefer enums, others prefer extensions on UserDefaults. I personally ]]></description>
        <link>https://ioscodereview.com/issues/18/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a59f</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 10 Mar 2022 12:47:29 +0100</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>I hope you enjoy today's content. Let's dive in üëá</p><hr><h2 id="documenting-app-s-footprint">Documenting app's footprint</h2><p>Here's an interesting thread where people share how they document where the app saves things and how they like to organise constants. Lots of opinions - some prefer enums, others prefer extensions on <code>UserDefaults</code>. I personally like to use enums as shown in this tweet - making one per-app or per-module depending on the size of the codebase.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/hybridcattt/status/1495704348743057414?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="named-loops">Named loops</h2><p>If you have nested loops, you can label them, and use the label as part of your <code>break</code> or <code>continue</code> statements. This also works for <code>if</code>, <code>switch</code>, <code>do</code> statements. Here's an article with more detailed examples: <a href="https://andybargh.com/break-and-continue/?ref=ioscodereview.com">Swift‚Äôs Break and Continue Statements by Andy Bargh</a></p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/zet_manu/status/1498324614346276866?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="text-or-string">Text or String?</h2><p>If you also get tired of wrapping strings in <code>Text</code> all the time, here's a tiny extension to make it easier:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/blazs/status/1500415081116581888?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="some-wise-words">Some wise words</h2><p>I concur:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/mdiep/status/1471600882844319765?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="on-passing-app-store-review">On passing App Store review</h2><p>This one is not about improving the code, but improving the release cycle of the app. In this thread <strong>@jordibruin</strong> shares how he organises his App Store review submissions to minimise chances of getting rejected. Such wonderful advice that I couldn't not share!</p><p>He explains what he writes in the messages, attachments he makes, and most interestingly about his FAQ page he shares with the review team.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/jordibruin/status/1471081934684147716?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>‚òÆÔ∏è</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below, so I can improve the newsletter.</p><p>Got feedback? Want to see more, or less of certain kinds of tips? I‚Äôd love to hear from you. Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #17 ]]></title>
        <description><![CDATA[ I spent the whole morning thinking about whether it's appropriate to send out an issue today. For the sake of consistency I decided in favour of delivering on the promise of code improvement tips in your inbox every two weeks.

This time I got no cheerful words though. If you're ]]></description>
        <link>https://ioscodereview.com/issues/17/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a5a0</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 24 Feb 2022 12:04:06 +0100</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>I spent the whole morning thinking about whether it's appropriate to send out an issue today. For the sake of consistency I decided in favour of delivering on the promise of code improvement tips in your inbox every two weeks.</p><p>This time I got no cheerful words though. If you're able to enjoy something today - I hope you enjoy these tips.</p><hr><h2 id="uninitialized-variables-defer-">Uninitialized variables + defer = üëØ‚Äç‚ôÄÔ∏è</h2><p>One of my favourite combinations of Swift's features:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/nunovieira_dev/status/1487265828227764225?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="httpserver-or-httpserver">HttpServer or HTTPServer?</h2><p><a href="https://swift.org/documentation/api-design-guidelines/?ref=ioscodereview.com">Swift API design guidelines</a> have the answer:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/fabianfett/status/1489160450004733957?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="representing-measurement-units">Representing measurement units</h2><p><code><a href="https://developer.apple.com/documentation/foundation/measurement?ref=ioscodereview.com">Measurement</a></code> is a type that represents a numeric quantity labeled with a unit of measure, with support for unit conversion and unit-aware calculations. <code><a href="https://developer.apple.com/documentation/foundation/measurementformatter?ref=ioscodereview.com">MeasurementFormatter</a></code> has a range of options for presenting measurements in a localised way. Both are available since iOS 10. Starting iOS 15, SwiftUI's <code>Text</code> supports measurement formatting too:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/BigMtnStudio/status/1494223870408208384?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="the-missing-swiftui-docs">The missing SwiftUI docs</h2><p>Community-made documentation for SwiftUI types with beautiful examples. For instance, check out <code><a href="https://swiftontap.com/tabview?ref=ioscodereview.com">TabView</a></code><a href="https://swiftontap.com/tabview?ref=ioscodereview.com"> documentation</a> to get a taste.</p><h3 id="swiftontap"><a href="https://swiftontap.com/?ref=ioscodereview.com">SwiftOnTap</a></h3><p>SwiftUI fully documented, with visual examples on every page.</p><h2 id="is-there-the-best-architecture">Is there the best architecture?</h2><p>What works for a tiny startup won't work for a mature product with a large dev team, and vice versa. It's obvious, but still worth remembering when we discuss architectures in abstract.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/peres/status/1470754984304250882?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>‚òÆÔ∏è</p><p>Alright, that‚Äôs it for today.</p><p>Wherever you are, I hope you're safe.</p><p>I‚Äôd love to hear from you - reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #16 ]]></title>
        <description><![CDATA[ Hi there,

This time I have exciting news to share - last week we crossed the 1000 subscribers mark ü•≥ It's so honouring to be able to share the learnings with such a wide community from all around the world. Thank you for tuning in!

And now, let's dive into the ]]></description>
        <link>https://ioscodereview.com/issues/16/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a5a1</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 10 Feb 2022 12:16:37 +0100</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>This time I have exciting news to share - last week we crossed the 1000 subscribers mark ü•≥ It's so honouring to be able to share the learnings with such a wide community from all around the world. Thank you for tuning in!</p><p>And now, let's dive into the tips üëá</p><hr><h2 id="managing-image-assets">Managing image assets</h2><p>This is 100% my favourite way to organise assets - images or SF symbols, and even localisation strings.</p><p>The best part is that you can easily check in unit tests that none of the assets are missing (or misspelled). Just conform your enum to <code>CaseIterable</code> and test:</p><p><code>Asset.allCases.forEach { ÔªøXCTAssertNotNil($0.image, "\($0) is missing") }</code></p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/iSapozhnik/status/1490300632686862338?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="use-labels-in-swiftui">Use Labels in SwiftUI</h2><p>Here's a nice short summary of benefits of using <code>Label</code> over just an <code>HStack</code> with <code>Image</code> and <code>Text</code>. I think we should always prefer <code>Label</code>. More details and examples in <a href="https://developer.apple.com/documentation/swiftui/label?ref=ioscodereview.com">the documentation</a>.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/Code_Bender/status/1465820393424531462?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="on-counting-characters">On counting characters</h2><p><a href="https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-9-789293?ref=ioscodereview.com">Few issues ago</a> I wrote about being careful not to mix ranges from <code>String</code> and <code>NSString</code>. And here's a graphic example of how just a simple emoji is counted differently, with explanation why:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/krzyzanowskim/status/1491042128499253249?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/TheCodeLorax/status/1491070795950731264?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="on-pure-functions">On pure functions</h2><p>This is a great approach to structuring code, and it pairs well with the concept of <a href="https://twitter.com/danielemargutti/status/1490592233690644486?s=20&t=l3O937-2uS5UWzu0HzQUpQ&ref=ioscodereview.com">pure functions</a>:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/danielemargutti/status/1490592233690644486?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="visual-logging">Visual logging</h2><p>I started using emojis in logs only recently, and it's life changing on large projects. For log levels, or just easily finding that one print statement you just added.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/parrots/status/1486731248420593686?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="memory-management-with-async-await">Memory management with async/await</h2><p>This article was widely shared so you may have already seen it, but if not - definitely check it out if you're already using concurrency. The biggest takeaway: we have to remember to cancel forever-running observations, such as <code>for await x in in publisher {...}</code>.</p><h3 id="memory-management-when-using-async-await-in-swift-swift-by-sundell"><a href="https://swiftbysundell.com/articles/memory-management-when-using-async-await/?ref=ioscodereview.com">Memory management when using async/await in Swift | Swift by Sundell</a></h3><p>Managing an app‚Äôs memory is something that tends to be especially tricky when it comes to asynchronous code, so let‚Äôs take a look at how to do just that when using async/await.</p><p>ü§ò</p><p>Alright, that‚Äôs it for today.</p><p>I have a question for you: I'm sending this newsletter around lunch time in the European timezone. How has your experience been with that? Share your thoughts by replying to this email or by pressing the buttons below.</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #15 ]]></title>
        <description><![CDATA[ Hi there,

Hope your Thursday is going the way you want it to go üåü Let's dive into this week's highlights!


On mixing Swift and ObjC

Adding a shim layer is a great way to approach moving to Swift in an Objective-C codebase. I can confirm from hands-on experience practicing it ]]></description>
        <link>https://ioscodereview.com/issues/15/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a5a2</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 27 Jan 2022 12:57:44 +0100</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>Hope your Thursday is going the way you want it to go üåü Let's dive into this week's highlights!</p><hr><h2 id="on-mixing-swift-and-objc">On mixing Swift and ObjC</h2><p>Adding a shim layer is a great way to approach moving to Swift in an Objective-C codebase. I can confirm from hands-on experience practicing it successfully on large ObjC projects.</p><p>I had this tweet saved in bookmarks for a while, thinking maybe I'll write an article on it some day. But no need anymore - Steve himself just published a great article going deeper on this topic. Huzza! Here's the full article: <a href="https://www.steveonstuff.com/2022/01/13/migrating-from-objc-to-swift.html?ref=ioscodereview.com">An Approach for Migrating From Objective-C to Swift</a></p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/SteveBarnegren/status/1322342727120523266?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="golden-path">Golden path</h2><p><a href="https://en.wikipedia.org/wiki/Happy_path?ref=ioscodereview.com">Wikipedia describes</a> golden (happy) path as a default scenario featuring no exceptional or error conditions. Swift sure took it to heart by introducing the <code>guard</code> statement. If you are not using it actively yet, maybe this is your sign üòÄ</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/TheCodingArt/status/1481273053237723138?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/greg_ellis/status/1478382971820417031?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="-discardableresult">@discardableResult</h2><p><code>@discardableResult</code> is the proper way to silence the unused variable warning:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/BarekJaafar/status/1483577815253532676?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="lazy-variables-are-not-thread-safe">Lazy variables are not thread safe</h2><p>Antoine explains how to avoid data races with lazy variables in this section: <a href="https://www.avanderlee.com/swift/thread-sanitizer-data-races/?ref=ioscodereview.com#how-to-solve-a-data-race">How to solve a data race</a>. TL;DR: you can either make all operations with the variable on the same thread, or use actors - the new feature in Swift.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/twannl/status/1480553967063126027?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="spell-check-in-comments">Spell check in comments</h2><p>Did you know that Xcode has a built-in spellchecker for comments? That's been introduced in Xcode 11. I think it's strange that it's not enabled by default. <strong>@felibe444</strong> wrote a quick guide on how to turn it on: <a href="https://fbernutz.github.io/posts/2022-01-23-spelling-grammar-in-xcode/?ref=ioscodereview.com">Typos in Xcode ‚Äì Never Again!</a></p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/felibe444/status/1485231971890601990?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="hig-for-text">HIG for text</h2><p>Made by <a href="https://twitter.com/k_katsumi?ref=ioscodereview.com">@k_katsumi</a>, Apple Localization Terms Glossary is a handy reference point for text in your app. You can easily refer to texts that Apple uses in their UI, as well as see corresponding localisations to other languages.</p><p>Another great resource in this area is Apple Style Guide, the official glossary of how to use certain terms. It's like Human Interface Guidelines but for text - definitely worth checking out.</p><h3 id="apple-localization-terms-glossary"><a href="https://applelocalization.com/?ref=ioscodereview.com">Apple Localization Terms Glossary</a></h3><p>An unofficial Apple localization terms glossary that allows you to search for standard localization texts provided by the Apple platform.</p><h3 id="-apple-style-guide-on-apple-books"><a href="https://books.apple.com/book/id1161855204?ref=ioscodereview.com">‚ÄéApple Style Guide on Apple Books</a></h3><p>This book provides editorial guidelines for text in Apple materials. Apple developers and third-party developers should follow this guide for customer-facing text.</p><p>ü§ò</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below, so I can improve the newsletter.</p><p>Got feedback? Want to see more, or less of certain kinds of tips? I‚Äôd love to hear from you. Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #14 ]]></title>
        <description><![CDATA[ Hi there,

Welcome to the first issue of 2022! ‚òÄÔ∏è

Hope everyone had lovely holidays. I did, and am pumped to jump back into sharing tips regularly. Enjoy!


On counting words

There are multiple problems with splitting words by punctuation and whitespace - even in English "shouldn't" would split into two ]]></description>
        <link>https://ioscodereview.com/issues/14/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a5a3</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 13 Jan 2022 13:22:06 +0100</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>Welcome to the first issue of 2022! ‚òÄÔ∏è</p><p>Hope everyone had lovely holidays. I did, and am pumped to jump back into sharing tips regularly. Enjoy!</p><hr><h2 id="on-counting-words">On counting words</h2><p>There are multiple problems with splitting words by punctuation and whitespace - even in English "shouldn't" would split into two 'words'. And some languages don't even have spaces. Full article: <a href="https://medium.com/@sorenlind/three-ways-to-enumerate-the-words-in-a-string-using-swift-7da5504f0062?ref=ioscodereview.com">Three Ways to Enumerate the Words In a String Using Swift</a> by <a href="https://twitter.com/sorenlind?ref=ioscodereview.com">@sorenlind</a></p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/SufiyanYasa/status/1480149173424910336?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="working-with-years-in-dates">Working with years in dates</h2><p>Are you using <code>YYYY</code> or <code>yyyy</code> in your date formats? <code>YYYY</code> represents <em>week year</em> which is the same as calendar year most of the time, but isn't for some dates at the end of December. So there's plenty of time to fix it üòÄ Good resources on this:</p><p><a href="https://nsdateformatter.com/?ref=ioscodereview.com">https://nsdateformatter.com</a> to quickly test different formats. This site also has a nice documentation page where you can get a refresher on which APIs to use when. Or check out <a href="http://unicode.org/reports/tr35/tr35-31/tr35-dates.html?ref=ioscodereview.com#Date_Format_Patterns">the official Unicode documentation</a> if you want to get to the original.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/VishalMalvi_/status/1475835430067052546?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="custom-date-formats-localized">Custom date formats, localized</h2><p>Setting <code>DateFormatter</code>'s <code><a href="https://developer.apple.com/documentation/foundation/dateformatter/1415411-datestyle?ref=ioscodereview.com">dateStyle</a></code> and <code><a href="https://developer.apple.com/documentation/foundation/dateformatter/1413467-timestyle?ref=ioscodereview.com">timeStyle</a></code> ¬†result in it producing localised strings. To get a custom set of date components as a localised string, we can use <code><a href="https://developer.apple.com/documentation/foundation/dateformatter/1417087-setlocalizeddateformatfromtempla?ref=ioscodereview.com">setLocalizedDateFormatFromTemplate(_:)</a></code>:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/DonnyWals/status/1316703536407818241?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="learnings-from-swiftui-apis">Learnings from SwiftUI APIs</h2><p>This is how you set a custom title view in the navigation bar in SwiftUI. How would one ever guess that this is how it should be done? <code><a href="https://developer.apple.com/documentation/swiftui/toolbaritemplacement/principal?ref=ioscodereview.com">ToolbarItemPlacement.principal</a></code> ¬†has a small paragraph about its effect. In my opinion, this API is not discoverable at all. (thanks <strong>@sarunw</strong> for sharing this!)</p><p>Two learnings here: 1) SwiftUI is still cool and powerful, you can do so much with so little code 2) With great flexibility of API, the understandability can take a hit. Because it will behave differently in different contexts and different platforms, SwiftUI has to use overly generic terms such as 'toolbar' or 'principal placement'. So users have to resort to documentation for understanding what it even means. This is a big tradeoff and something to keep in mind when designing our own API.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/sarunw/status/1480983729942192132?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="storekit-resources">StoreKit resources</h2><p>Stumbled onto two repos with comprehensive information on working with StoreKit APIs. There is a repo for StoreKit 2 (new in iOS 15) and a repo for the good old StoreKit. If you're looking to implement in-app purchases from scratch, these are great as reference after checking the official Apple documentation.</p><p>Both repos have a mile-long readme with every little detail covered, as well as working code that covers every edge case - unlike the official samples provided by Apple. Made by <a href="https://twitter.com/archer_russel?ref=ioscodereview.com">@archer_russel</a></p><h3 id="github-russell-archer-storehelper"><a href="https://github.com/russell-archer/StoreHelper?ref=ioscodereview.com">GitHub - russell-archer/StoreHelper</a></h3><p>Implementing and testing In-App Purchases with StoreKit2 in Xcode 13, Swift 5.5 and iOS 15.</p><h3 id="github-russell-archer-iapdemo"><a href="https://github.com/russell-archer/IAPDemo?ref=ioscodereview.com">GitHub - russell-archer/IAPDemo</a></h3><p>Implementing and testing In-App Purchases in Xcode 12 and iOS 14, including local receipt validation.</p><h2 id="review-prs-in-ide-form">Review PRs in IDE form</h2><p>Did you know that you can review PRs in Github in a full-blown IDE right in the browser? I find it more convenient, being able to navigate between files and having extra code highlighting. You can even make edits. Inline PR discussions are included. Press `.` (dot) while on the PR page, or change the url from GitHub.com to GitHub.dev.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://ioscodereview.com/content/images/revue/items/images/013/514/068/original/github.png" class="kg-image" alt loading="lazy"><figcaption>VS Code in the browser</figcaption></figure><p>ü§ò</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below.</p><p>Got feedback? Want to see more, or less of certain kinds of tips? I‚Äôd love to hear from you. Simply reply to this email, or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #13 ]]></title>
        <description><![CDATA[ Hi there,

Welcome to the 13th issue, the last one for 2021. As a treat, there are a few more tips than usual. Enjoy!

Happy holidays and see you on January 13th! ‚ùÑÔ∏è


Changes to app launch sequence

On iOS 15, iOS might pre-warm your app by initialising the app delegate ]]></description>
        <link>https://ioscodereview.com/issues/13/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a5a4</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 09 Dec 2021 13:01:55 +0100</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>Welcome to the 13th issue, the last one for 2021. As a treat, there are a few more tips than usual. Enjoy!</p><p>Happy holidays and see you on January 13th! ‚ùÑÔ∏è</p><hr><h2 id="changes-to-app-launch-sequence">Changes to app launch sequence</h2><p>On iOS 15, iOS might pre-warm your app by initialising the app delegate &amp; co few minutes before the user launches the app. <code>application(:didFinishLaunching:...)</code> will be called when the app is finally launched, but other resources are loaded earlier.</p><p>The culprit is that some resources such as keychain might not be available, as the device might be still locked. So we shouldn't be initiating any work or for example checking of the API token presence earlier than <code>application(:didFinishLaunching:...)</code>. Check official documentation on this behaviour here: <a href="https://developer.apple.com/documentation/uikit/app_and_environment/responding_to_the_launch_of_your_app/about_the_app_launch_sequence?ref=ioscodereview.com">About the App Launch Sequence</a>.</p><h3 id="solving-mysterious-logout-issues-on-ios-15-source-diving"><a href="https://sourcediving.com/solving-mysterious-logout-issues-on-ios-15-8b818c089466?gi=bedb7055d213&ref=ioscodereview.com">Solving Mysterious Logout Issues on iOS 15 | Source Diving</a></h3><p>At Cookpad, after the public launch of iOS 15 we started to receive reports from users telling us that they were being repeatedly logged out when opening our app. This came as quite a surprise since‚Ä¶</p><h2 id="learning-from-cllocation-apis">Learning from CLLocation APIs</h2><p>Two learnings here: 1) desired location accuracy in <code>CoreLocation</code> can be set to a custom value in meters 2) how <em>not</em> to design an API ü§° Here it's understandable though - this API comes from pre-Swift times and needs to be compatible with Objective-C, so it couldn't be modelled with enums with associated values. Thanks @Kilo_Loco for the find!</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/Kilo_Loco/status/1468354190850224128?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="printing-http-status-codes">Printing HTTP status codes</h2><p>Turns out Foundation has a method for producing human-readable strings from HTTP status codes: <code><a href="https://developer.apple.com/documentation/foundation/httpurlresponse/1409741-localizedstring?ref=ioscodereview.com">HTTPURLResponse.localizedString(forStatusCode:)</a></code></p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/toomasvahter/status/1454946289620291590?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="easy-boxes-in-switui">Easy boxes in SwitUI</h2><p><code><a href="https://developer.apple.com/documentation/swiftui/groupbox?ref=ioscodereview.com">GroupBox</a></code> is a SwiftUI component that replaces the setup with <code>VStack</code> + padding + mask. GroupBox can be customised with different styles, though there's only one provided out of the box. We can build our own styles, ¬†here's a great article on that: <a href="https://swiftwithmajid.com/2020/10/15/mastering-groupbox-in-swiftui/?ref=ioscodereview.com">Mastering GroupBox in SwiftUI on Swift with Majid</a>.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/gaudioaffectus/status/1464254742528409605?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="common-compositional-layouts-for-uicollectionview">Common compositional layouts for UICollectionView</h2><p>Filip has shared an awesome collection of various compositional layouts in his <a href="https://github.com/nemecek-filip/CompositionalDiffablePlayground.ios?ref=ioscodereview.com">Github repo</a>. If you are looking to start mastering <code>UICollectionViewCompositionalLayout</code> or <code>NSDiffableDataSource*</code>, I recommend checking it out.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/nemecek_f/status/1425401952872058883?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="working-with-arrays-in-real-apps">Working with arrays in real apps</h2><p>If you need to take an item from an array, perform an asynchronous operation with it, and update it in the array, how do you do that safely without messing with indexes, which can change in the meantime? That requires some careful code that would need to be unit-tested.</p><p>This is a library for working with identifiable objects in collections, making it easy to access elements by identifiers instead of indexes. The readme goes more into the use-cases and problems with access by index.</p><h3 id="github-pointfreeco-swift-identified-collections"><a href="https://github.com/pointfreeco/swift-identified-collections?ref=ioscodereview.com">GitHub - pointfreeco/swift-identified-collections</a></h3><p>A library of data structures for working with collections of identifiable elements in an ergonomic, performant way.</p><h2 id="some-philosophy">Some philosophy</h2><p>Some of you are working in small companies, and some in bigger cos. This tweet isn't really code related, but I feel that it applies to anything. I've never thought of it this way before, but the distinction applies so clearly to all the teams I worked at. Which culture do you want to foster?</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/scottbelsky/status/1467469486521339905?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>‚òÉÔ∏è</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below, so I can improve the newsletter.</p><p>Got feedback? Want to see more, or less of certain kinds of tips? I‚Äôd love to hear from you. Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #12 ]]></title>
        <description><![CDATA[ Hi there,

How is your week going?

I hope you enjoy today's tips. Let me know what you found most interesting by replying to this email üôå


Tired of translatesAutoresizingMasksIntoConstraints?

Two neat ways to deal with the good old (and annoying) ¬†translatesAutoresizingMasksIntoConstraints üëç






Or like that:

let label = UILabel().forAutoLayout()







Type-safe identifiers ]]></description>
        <link>https://ioscodereview.com/issues/12/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a5a5</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 25 Nov 2021 13:50:15 +0100</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>How is your week going?</p><p>I hope you enjoy today's tips. Let me know what you found most interesting by replying to this email üôå</p><hr><h2 id="tired-of-translatesautoresizingmasksintoconstraints">Tired of translatesAutoresizingMasksIntoConstraints?</h2><p>Two neat ways to deal with the good old (and annoying) ¬†<code><em>translatesAutoresizingMasksIntoConstraints</em></code> üëç</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/ronyfadel/status/1462431756561403906?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>Or like that:</p><p><code>let label = UILabel().forAutoLayout()</code></p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/ZiadeMarcus/status/1255509639015383044?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="type-safe-identifiers">Type-safe identifiers</h2><p>When we use string or int for identifiers, it can be easy to accidentally pass the wrong value to the function that takes a said identifier. <a href="https://swiftwithmajid.com/2021/02/18/phantom-types-in-swift/?ref=ioscodereview.com">@mecid wrote an article</a> on using phantom types to make API that works with identifiers type-safe, so the compiler does the checking for us.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/mecid/status/1462753818882584578?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="understanding-swiftui-navigation">Understanding SwiftUI navigation</h2><p>A nice short write-up on the current state of navigation in SwiftUI.</p><p>While the repo itself contains tools that you can use in your code, the readme goes over the issues that out-of-the-box navigation API has and potential directions for solving them.</p><p>It's a valuable resource for understanding how to deal with navigation better, even if you don't wish to use third-party code.</p><h3 id="github-pointfreeco-swiftui-navigation-tools-for-making-swiftui-navigation-simpler-more-ergonomic-and-more-precise-"><a href="https://github.com/pointfreeco/swiftui-navigation?ref=ioscodereview.com">GitHub - pointfreeco/swiftui-navigation: Tools for making SwiftUI navigation simpler, more ergonomic and more precise.</a></h3><p>Tools for making SwiftUI navigation simpler, more ergonomic and more precise. - GitHub</p><h2 id="improving-old-code">Improving old code</h2><p>This is a great approach to working on old code. Old code can be improved significantly even by small refactoring - it's not always necessary to make big changes to make impact on code quality.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/mdiep/status/1461378490352254978?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="on-non-fatal-errors">On non-fatal errors</h2><p>We often write checks like this one:</p><p><code>guard let requiredValue = value else { return }</code></p><p>In reality, when this case happens, the user will just see that nothing happens in response to their actions, and the developer will never know about such cases. Force unwrapping and crashing the app is not the answer either.</p><p>Antoine discusses ways to approach this problem in <a href="https://www.avanderlee.com/optimization/non-fatal-errors-vs-fatal-crashes/?ref=ioscodereview.com">his recent article</a>.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/twannl/status/1463135000535126021?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>‚úåÔ∏è</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below, so I can improve the newsletter.</p><p>Got feedback? Want to see more, or less of certain kinds of tips? I‚Äôd love to hear from you. Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #11 ]]></title>
        <description><![CDATA[ Hi there,

I hope you enjoy this week‚Äôs findings ‚òÄÔ∏èüôå


On text truncation in SwiftUI

Once I spent a whole day debugging a text truncation issue in SwiftUI. I had a list of views with multiline text in each. All was good, but on rare occasions one of the views ]]></description>
        <link>https://ioscodereview.com/issues/11/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a5a6</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 11 Nov 2021 14:07:22 +0100</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>I hope you enjoy this week‚Äôs findings ‚òÄÔ∏èüôå</p><hr><h2 id="on-text-truncation-in-swiftui">On text truncation in SwiftUI</h2><p>Once I spent a whole day debugging a text truncation issue in SwiftUI. I had a list of views with multiline text in each. All was good, but on rare occasions one of the views would have truncated text. It would be seemingly random - the same item would be truncated or not depending on which position in the list it was in.</p><p>Eventually it turned out that I "just" needed to add <code><a href="http://Fixes this view at its ideal size in the specified dimensions.">fixedSize(...)</a></code> modifier to the <code>Text</code>s. It tells the text to take its ideal size (it's called intrinsic size in UIKit).</p><p>It bugs me that multiline text mostly works without it, so you think all is fine until you catch the truncation on some specific input. Do we <em>have to</em> use it on all multiline texts to avoid these issues? Apparently.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/ZevEisenberg/status/1455555606245478408?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="compiler-enums-">Compiler + enums = üß°</h2><p>This tip might be obvious to most devs, but this feature of enums is so useful to me, that it's worth sharing still. The idea is to always spell out all enum cases in <code>switch</code> statements, so the compiler helps out when a new case is added.</p><p>If you use <code>default</code> mainly because there are many cases that don't need handling, you can list cases with a comma: <code>case .a, .b, .c, .d, .e: break</code></p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/toomasvahter/status/1424505703197143042?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="more-on-logging">More on logging</h2><p>Last issue included a tip on <code>print()</code> vs <code>os_log()</code>, and today I have a tip for you if you're still using <code><a href="https://developer.apple.com/documentation/foundation/1409759-nslog?ref=ioscodereview.com">NSLog()</a></code>. The first parameter is a format string, containing 0 or more <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Strings/Articles/formatSpecifiers.html?ref=ioscodereview.com">format specifiers</a> starting with <code>%</code> (fx <code>%@</code> or <code>%f</code>). We shouldn't include interpolation in format strings - it's a matter of time until a printed url or error contains these symbols by accident - causing a crash.</p><figure class="kg-card kg-image-card"><img src="https://ioscodereview.com/content/images/revue/items/images/012/312/248/original/nslogbadaccess.png" class="kg-image" alt loading="lazy"></figure><h3 id="michael-tsai-blog-dangerous-nslog-calls-in-swift"><a href="https://mjtsai.com/blog/2021/11/02/dangerous-nslog-calls-in-swift/?ref=ioscodereview.com">Michael Tsai - Blog - Dangerous NSLog() Calls in Swift</a></h3><p>In the scenario of my crash, the interpolation of ‚Äúurl‚Äù and ‚Äúerror‚Äù results in surprise template placeholders, because of the presence of spaces in the path that the URL represents. In my tests, a file called ‚ÄúOpen Program Ideas File‚Äù exists and is used to test some file manipulations. When the path to this file is encoded as a URL, the name of the file becomes ‚ÄúOpen%20Program%20Ideas%20File‚Äù. ¬†Each instance of ‚Äú%20‚Äù followed by a letter is liable to be interpreted by NSLog as a printf-style format specifier. So as far as our filename‚Äôs string is concerned, we have ‚Äú%20P‚Äù, ‚Äú%20I‚Äù, and ‚Äú%20F‚Äù threatening to cause trouble.</p><h2 id="passing-around-object-ids">Passing around object ids</h2><p>Quick tip from this morning on improving readability of your code that works with <code><a href="https://developer.apple.com/documentation/swift/identifiable?ref=ioscodereview.com">Identifiable</a></code> models. This protocol is part of Swift Standard Library, so it's relevant even if these models are not used in SwiftUI.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/DonnyWals/status/1458751452495687680?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/DonnyWals/status/1458753865365528578?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="bugs-not-an-if-but-when">Bugs: not an if, but when</h2><p>A bit of philosophical content here. It resonated with me a lot - I've been training table tennis most of my life, and I can relate to the analogy in this article. Unless you're significantly better than the opponent, you're actually just trying to minimize mistakes and keep the ball in play as long as possible.</p><p>When we develop long-living software, we're just trying not to lose - to bugs, technical debt, scaling issues. I love this way of looking at why we do unit tests, code reviews and regular maintenance.</p><blockquote><strong>ifwhen</strong></blockquote><h3 id="software-development-is-a-loser-s-game-by-ben-the-hosk-hosking-medium"><a href="https://thehosk.medium.com/software-development-is-a-losers-game-fc68bb30d7eb?ref=ioscodereview.com">Software development is a loser‚Äôs game | by Ben "The Hosk" Hosking | Medium</a></h3><p>I‚Äôm not saying developers are losers but most software developers are not beating software development, software development is beating them.</p><p>ü§ò</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below.</p><p>Thanks for your ongoing feedback! Want to see more, or less of certain kinds of tips? I‚Äôd love to hear from you. Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #10 ]]></title>
        <description><![CDATA[ Hi there,

Hope your Thursday is going the way you want it to go üçÅ Let's dive in üëá


async/await is really here

While it's undoubtedly a superior way to write asynchronous code, I generally stayed away from async/await-related tips, because no one could really use them yet. I wrote ]]></description>
        <link>https://ioscodereview.com/issues/10/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a5a7</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 28 Oct 2021 13:19:01 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>Hope your Thursday is going the way you want it to go üçÅ Let's dive in üëá</p><hr><h2 id="async-await-is-really-here">async/await is really here</h2><p>While it's undoubtedly a superior way to write asynchronous code, I generally stayed away from async/await-related tips, because no one could really use them yet. I wrote about the issues <a href="https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-8-767711?ref=ioscodereview.com">few weeks ago</a>. But not for much longer!</p><p>Xcode 13.2 beta was released yesterday with support for backward deployment of async/await all the way back to iOS 13. This is achieved by embedding the Swift runtime with the app, like it was done before Swift gained ABI stability.</p><p>If you're open to trying it out for real in your projects, the Swift team is actively seeking feedback and issue reports during this beta period to help make the backport more stable. Just download Xcode 13.2 beta and try async/await features on your iOS 13 or iOS 14 device.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/johnsundell/status/1453429350272053251?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/dgregor79/status/1453432581622362112?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/johnsundell/status/1453673235384573958?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="print-vs-os_log-">print() vs os_log()</h2><p>A reminder about <code>print()</code> being slow. If you print something frequently, the lag can be really noticeable.</p><p>There's a way out - you can use <code>os_log</code> API instead. It doesn't slow the app down, and as an added benefit logs can be seen both in the debugger console and in Console.app, even on release builds from App Store. An even cooler thing is that interpolated values are redacted in release builds, unless included with <code>%{public}@</code> instead of <code>%@</code>.</p><p>To learn more about <code>os_log</code>, check out <a href="https://www.avanderlee.com/workflow/oslog-unified-logging/?ref=ioscodereview.com">the best article ever about os_log</a> from <a href="https://twitter.com/twannl?ref=ioscodereview.com">@twannl</a>. To learn about shortcomings of <code>os_log</code>, check out <a href="https://mjtsai.com/blog/2019/03/06/problems-with-os_log/?ref=ioscodereview.com">Problems with os_log</a> by <a href="https://twitter.com/mjtsai?ref=ioscodereview.com">@mjtsai</a>.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/MartinLasek/status/1446574109228367880?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="managing-fallbacks">Managing fallbacks</h2><p>There are a lot of new views and modifiers in SwiftUI that can only be used from iOS 15 and up. If you support iOS 14 too, then you might use fallbacks there.</p><p><strong>@davedelong</strong> came up with a nice approach - housing custom fallback code under <code>.backport</code>, so it's easy to find usages in the project and remove fallbacks later when you drop support for iOS 14.</p><p>If it looks confusing, this short article by <a href="https://twitter.com/ralfebert?ref=ioscodereview.com">@ralfebert</a> goes step-by-step into arriving at this approach: <a href="https://www.ralfebert.de/swiftui/backporting-ios-view-modifiers/?ref=ioscodereview.com">Using iOS-15-only View modifiers in older iOS versions</a></p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/davedelong/status/1446151822800945155?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="a-good-custom-operator">A good custom operator</h2><p>Custom operators are usually confusing to readers of the code, and many developers don't like them for this reason. But I found a really nice use-case shared by <strong>@twannl</strong>. The meaning is clear enough at call site (in my opinion), and it actually would save lots of typing in a project where colors are used extensively in the code:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/twannl/status/1453640612939501569?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>--</p><p>and just to end on a reassuring note - I think a lot of us feel this way right now. It's totally normal ü•≤</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/mkflint/status/1453433556559073281?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>‚úåÔ∏è</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below, so I can improve the newsletter further.</p><p>Got feedback? Want to see more, or less of certain kinds of tips? I‚Äôd love to hear from you. Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #9 ]]></title>
        <description><![CDATA[ Hi there,

It's that Thursday again ü•≥ I found so many gems in the last few weeks, that today's issue contains more tips than usual. I also re-tweet additional tips throughout the week that didn't make it into the newsletter, so make sure to follow @ios_code_review for even more ]]></description>
        <link>https://ioscodereview.com/issues/9/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a5a8</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 14 Oct 2021 15:09:40 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>It's that Thursday again ü•≥ I found so many gems in the last few weeks, that today's issue contains more tips than usual. I also re-tweet additional tips throughout the week that didn't make it into the newsletter, so make sure to follow <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> for even more tips.</p><hr><h2 id="-swiftui-previews">‚ù§Ô∏è SwiftUI previews</h2><p>SwiftUI previews can be very handy for other use-cases besides previewing SwiftUI views.</p><p>You can use previews to preview UIKit views, which can save you dozens of hours in rebuilding to see your changes:</p><h3 id="github-theoriginalbit-previewview-make-use-of-swiftui-previews-for-uikit-"><a href="https://github.com/theoriginalbit/PreviewView?ref=ioscodereview.com">GitHub - theoriginalbit/PreviewView: Make use of SwiftUI Previews for UIKit!</a></h3><p>Make use of SwiftUI Previews for UIKit! Contribute to theoriginalbit/PreviewView development by creating an account on GitHub.</p><p>SwiftUI previews can also be used to preview app themes and other code-only visuals such as generated images:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/hybridcattt/status/1445732331990315018?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="on-manipulating-strings">On manipulating strings</h2><p>Swift's strings are unicode-compatible in the best way, counting the real displayed graphemes as the user would see them.</p><p>We need to be careful though when working with <code>NSString</code> APIs, because they deal with unicode differently. In the example below, <code>print((word as NSString).length)</code> would print <code>5</code> , not <code>4</code>. So be careful not to apply ranges returned from <code>NSString</code>-based APIs to ¬†<code>String</code> instances.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/swiftandtips/status/1443576380474626060?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="-sf-symbols">‚ù§Ô∏è SF Symbols</h2><p>SFSymbols are really powerful these days. They support thickness, styling and even multiple colors. What you see here on the screenshot is achievable with just native APIs on iOS 15. For an overview on how to use SFSymbols in SwiftUI and UIKit, check out <a href="https://www.hackingwithswift.com/articles/237/complete-guide-to-sf-symbols?ref=ioscodereview.com">The Complete Guide to SF Symbols by Paul Hudson</a>. There's also an <a href="https://developer.apple.com/sf-symbols/?ref=ioscodereview.com">official Mac app</a> for browsing and previewing all available symbols.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/JordanMorgan10/status/1445494218965749762?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="unit-testing-retain-cycles">Unit testing retain cycles</h2><p>Sometimes it's useful to test not only what a type does functionally, but also that there are no retain cycles and an instance deallocates as expected. This can be useful for view controllers and other complex classes dealing with closures and dependencies, where retain cycles are common.</p><p>Here's a short snippet by <strong>@ZiadeMarcus</strong> for verifying that an instance has deallocated after a test. It uses <code><a href="https://developer.apple.com/documentation/xctest/xctestcase/2887226-addteardownblock?ref=ioscodereview.com">addTeardownBlock</a></code> which is pretty neat on its own and can be used for other purposes too.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/ZiadeMarcus/status/1448300525842227205?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="assert-failure-messages">Assert failure messages</h2><p>We write unit tests with the intention that they pass, but they really help us when they fail and catch errors in our code. So we should strive to have useful failure messages that hint at what's wrong. Not all assert failures provide insight out of the box - <a href="https://twitter.com/basthomas?ref=ioscodereview.com">@basthomas</a> gives an overview of commonly used XCTAssert* functions and how their failure messages are reported:</p><h3 id="-improving-your-xctassert-failure-messages-bas-blog"><a href="https://www.basbroek.nl/xctassert-asterisk?ref=ioscodereview.com">(Improving Your) XCTAssert* Failure Messages | Bas‚Äô Blog</a></h3><p><br></p><h2 id="a-couple-of-debugging-tricks">A couple of debugging tricks</h2><p>In iOS 15 you can do <code>po [tableView _rowData]</code> in the debugger to print the internal geometry (e.g. heights, y-offsets for each row, etc) of the table view. This can be useful to track down why things look the way they do. For Swift, it would be <code>po tableView.value(forKey: "_rowData‚Äù)!</code>. This tip was shared by <a href="https://twitter.com/smileyborg?ref=ioscodereview.com">@smileyborg</a>.</p><p>Another trick is to print app's view controller hierarchy with <code>po [UIViewController _printHierarchy]</code>:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/guillaumealgis/status/1225071479676723200?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>ü§ò</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below, so I can improve the newsletter.</p><p>Got feedback? Want to see more, or less of certain kinds of tips? I‚Äôd love to hear from you. Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #8 ]]></title>
        <description><![CDATA[ Hi there,

It's Thursday again ‚ú® Got a few really interesting things to share. Let's dive straight in üëá


Status of async/await

Considering to start using async/await for real? Here are some things worth knowing before you do. Backporting to older iOS versions is proving challenging and might not happen; ]]></description>
        <link>https://ioscodereview.com/issues/8/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a5a9</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 30 Sep 2021 13:10:38 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>It's Thursday again ‚ú® Got a few really interesting things to share. Let's dive straight in üëá</p><hr><h2 id="status-of-async-await">Status of async/await</h2><p>Considering to start using async/await for real? Here are some things worth knowing before you do. Backporting to older iOS versions is proving challenging and might not happen; and a few serious issues and crashes have been found on the current version shipped with Xcode 13 / iOS 15.0.</p><p>I was excited to start using this for real, but will be holding off until there's a more stable version out there.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/XcodeReleases/status/1437937028193144834?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h3 id="swift-5-5-has-serious-stack-corruption-bugs-compiler-swift-forums"><a href="https://forums.swift.org/t/swift-5-5-has-serious-stack-corruption-bugs/52344?ref=ioscodereview.com">Swift 5.5 has serious stack corruption bugs! - Compiler - Swift Forums</a></h3><p>hi all, I‚Äôve discovered several stack corruption bugs related to async/await which can be reproduced in simple test programs compiled with recent nightly toolchains. i have confirmed that two three four of these bugs are‚Ä¶</p><h2 id="catching-errors">Catching errors</h2><p>There are so many ways to write catch statements in Swift. It's as flexible as switch statements, and same as switch statements also verifies that all possible errors are handled, producing a compiler error otherwise.</p><p>Check out <a href="https://sarunw.com/posts/different-ways-to-catch-throwing-errors-in-swift/?ref=ioscodereview.com#catch-all-errors">Sarun's article</a> for detailed examples of each case. Here's <a href="https://docs.swift.org/swift-book/ReferenceManual/Patterns.html?ref=ioscodereview.com#grammar_pattern">the official language reference on patterns in Swift</a>.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/sarunw/status/1438558971900661776?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="modern-dependency-injection">Modern dependency injection</h2><p>Dependency injection as a design pattern can manifest in different ways - from passing dependencies at initialisation to service locators and 3rd party libraries. (here's a nice <a href="https://quickbirdstudios.com/blog/swift-dependency-injection-service-locators/?ref=ioscodereview.com">overview</a> of the good old ways from 2019 by <a href="https://twitter.com/kofse?ref=ioscodereview.com">@kofse</a>)</p><p>Inspired by SwiftUI's <code>@Enviroment</code>, nowadays dependency injection can be made simpler and easier to use, thanks to Swift's latest features such as static subscripts, extensions, and property wrappers:</p><h3 id="dependency-injection-in-swift-using-latest-swift-features-swiftlee"><a href="https://www.avanderlee.com/swift/dependency-injection/?ref=ioscodereview.com">Dependency Injection in Swift using latest Swift features - SwiftLee</a></h3><p>Dependency Injection using latest Swift features allows you to mock data, and write tests easily without 3rd party dependencies.</p><h2 id="margins-on-uistackview">Margins on UIStackView</h2><p>Did you know that <code>UIStackView</code> supports layout margins out of the box? With one small boolean property <code><a href="https://developer.apple.com/documentation/uikit/uistackview/1616220-islayoutmarginsrelativearrangeme?ref=ioscodereview.com">isLayoutMarginsRelativeArrangement</a></code> we can ask the stack view to lay the content within its <code>layoutMargins</code> instead of its edges. And it respects safe area out of the box, thanks to UIView's <code><a href="https://developer.apple.com/documentation/uikit/uiview/2891101-insetslayoutmarginsfromsafearea?ref=ioscodereview.com">insetsLayoutMarginsFromSafeArea</a></code> which is true by default.</p><p>If you want to learn more about the layout margin system in UIKit, I gave a whole <a href="https://vimeo.com/362202970?ref=ioscodereview.com">talk</a> about it at NSSpain in 2019 :)</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/sarunw/status/1441450256194023425?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>ü§ò</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below, so I can improve the newsletter.</p><p>Got feedback? Want to see more, or less of certain kinds of tips? I‚Äôd love to hear from you. Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #7 ]]></title>
        <description><![CDATA[ Hi there,

Happy Xcode RC week! The release notes are extensive, but nonetheless are worth checking at some point, because there are many small improvements that are not mentioned anywhere else. I'll be going through the changelog myself, and will post anything that can improve our code üôå

Let's dive in ]]></description>
        <link>https://ioscodereview.com/issues/7/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a5aa</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 16 Sep 2021 12:10:03 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>Happy Xcode RC week! The <a href="https://developer.apple.com/documentation/xcode-release-notes/xcode-13-release-notes?ref=ioscodereview.com">release notes</a> are extensive, but nonetheless are worth checking at some point, because there are many small improvements that are not mentioned anywhere else. I'll be going through the changelog myself, and will post anything that can improve our code üôå</p><p>Let's dive in üëá</p><hr><h2 id="crash-in-combine">Crash in Combine</h2><p>It's almost a tradition now to start the newsletter with a tip about an obscure Combine issue... This time, it turned out that <code><a href="https://developer.apple.com/documentation/combine/fail/breakpointonerror()?ref=ioscodereview.com">breakpointOnError()</a></code> crashes apps. To solve this, you can make an extension that conditionally uses this only if debugger is attached. But I just comment it out completely when not debugging üòÖ</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/hybridcattt/status/1437767688672133128?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="swiftui-combine-">SwiftUI + Combine = üß°</h2><p>SwiftUI's <code><a href="https://developer.apple.com/documentation/swiftui/view/onreceive(_:perform:)?ref=ioscodereview.com">onReceive</a></code> opens some really interesting possibilities. Here's <strong>@danielsaidi</strong> with an example showcasing the power of SwiftUI when you sprinkle extra Combine on top. This code subscribes to a data binding of a UI element (a form in this case) and pipes changes into a save function. Makes the UI code really concise and pretty hard to break.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/danielsaidi/status/1433201914171334657?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="swift-api-design-guidelines">Swift API design guidelines</h2><p>Saw a tweet the other day, a person saying that they wish Swift had an official API guideline. So a refresher just in case - it does! Makes you a pro at writing function signatures that feel right at home in Swift.</p><h3 id="swift-org-api-design-guidelines"><a href="https://swift.org/documentation/api-design-guidelines/?ref=ioscodereview.com">Swift.org - API Design Guidelines</a></h3><p>Swift is a general-purpose programming language built using a modern approach to safety, performance, and software design patterns.</p><h2 id="lazy-local-variables">Lazy local variables</h2><p>Starting with Swift 5.5 (shipped with Xcode 13), we can use the <code>lazy</code> keyword on local variables. Code that had to use closures to achieve this lazy behaviour can now be simplified üéâ</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://ioscodereview.com/content/images/revue/items/images/011/125/140/original/screenshot_2021-09-15_at_23.05.14.png" class="kg-image" alt loading="lazy"><figcaption>Code example from the release notes</figcaption></figure><h2 id="time-based-git-diffs">Time-based git diffs</h2><p>Git supports a bunch of ways to reference commits (<em>revisions</em>): by commit hash (full or short), branch name, HEAD~n to jump back n commits, etc. Apparently you can not only reference commits, but also reference a specific moment in time. Thanks to <strong>@trevorbrindlejs</strong> for sharing this.</p><p>If you want to learn about all the ways to reference revisions, check <a href="https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection?ref=ioscodereview.com">the documentation</a>.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/trevorbrindlejs/status/1428013045490626569?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>ü§ò</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below, so I can improve the newsletter.</p><p>Got feedback? Want to see more, or less of certain kinds of tips? I‚Äôd love to hear from you. Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #6 ]]></title>
        <description><![CDATA[ Hi there,

How is your Thursday going?

iOS 15 GM is right around the corner, people are buzzing about last moment API changes and additions. And I'm here with some good old code improvement tips üòÄüëá


Waiting on multiple async calls

Have you seen code that's running multiple async calls in ]]></description>
        <link>https://ioscodereview.com/issues/6/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a5ab</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 02 Sep 2021 13:47:05 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>How is your Thursday going?</p><p>iOS 15 GM is right around the corner, people are buzzing about last moment API changes and additions. And I'm here with some good old code improvement tips üòÄüëá</p><hr><h2 id="waiting-on-multiple-async-calls">Waiting on multiple async calls</h2><p>Have you seen code that's running multiple async calls in a loop, calling completion on the last item in the loop? Or counting the number of callbacks called? I've seen it a lot, and the last time has prompted me to share this tip üôÇ</p><p><a href="https://developer.apple.com/documentation/dispatch/dispatchgroup?ref=ioscodereview.com">DispatchGroup</a> allows you to wait on multiple async operations, as complex as they may be. The concept is simple: the dispatch group keeps track of how many tasks are outstanding (unfinished). <code>enter()</code> and <code>leave()</code> calls increment and decrement the internal counter. Once the counter reaches zero, your custom closure is called. Here's a small example by <strong>@joemasilotti</strong>:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/joemasilotti/status/1373036156871315456?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="conditional-modifiers-are-bad-">Conditional modifiers are bad? üò¨</h2><p>Are you using conditional modifiers in SwiftUI? I am üôà Folks at <strong>@objcio</strong> came out with a detailed explanations on why it's not such a good idea. SwiftUI uses the type system for diffing of state, and conditional modifiers such as <code>applyIf(...)</code><em> </em>break that<em>.</em></p><p>The article also dives into why SwiftUI works the way it does, so check it out if you want to learn more: <a href="https://www.objc.io/blog/2021/08/24/conditional-view-modifiers/?ref=ioscodereview.com">Why Conditional View Modifiers are a Bad Idea</a></p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/objcio/status/1430126941034659841?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="timers-scrolling-run-loops">Timers, scrolling, run loops</h2><p>When you use <code><a href="https://developer.apple.com/documentation/foundation/timer/2091889-scheduledtimer?ref=ioscodereview.com">Timer.sheduledTimerscheduledTimer(withTimeInterval:...)</a></code>, it will not trigger while the user is interacting with a scroll view, or is performing any other touch-tracking interaction. The timer will continue after the interaction has ended. That's because this convenience method auto-schedules the timer in the <code>.default</code> runloop mode, and the default mode doesn't check the timer during touch interactions.</p><p>If you want the timer to continue as normal during touch events, you'd have to init and schedule the timer with <code>.common</code> mode manually: <code>RunLoop.current.add(timer, forMode: .common)</code></p><p><strong>@qdoug</strong> shared a handy cheat-sheet for remembering which mode to use, as their names are super confusing:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/qdoug/status/1429833467425083392?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="review-the-resources-too">Review the resources too</h2><p>A fascinating anecdote shared by <strong>@krzyzanowskim</strong>. 98% of an app's size is icons, 11 MB each. That's nearly 1600x1600px. Why a png icon need to be this big? I bet this is not intentional, and these folks can reduce their app size at least 5x by including appropriately-sized images.</p><p>AKA this is a reminder to review the assets that are being introduced to the app, and not only code üôÉ</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/krzyzanowskim/status/1428331763177295878?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="quick-2-in-1-tip">Quick 2-in-1 tip</h2><p>1) <a href="https://developer.apple.com/documentation/foundation/nscache?ref=ioscodereview.com">NSCache</a> exists and is a good alternative to a plain dictionary when you want to cache non-trivially sized items</p><p>2) How feedback is delivered is extremely important. Simply being friendly goes a long way ‚ú®</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/trevorbrindlejs/status/1428013045490626569?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/swiftandtips/status/1432005825137156102?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>ü§ò</p><p>Alright, that‚Äôs it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below, so I can improve the newsletter.</p><p>Got feedback? Want to see more, or less of certain kinds of tips? I‚Äôd love to hear from you. Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #5 ]]></title>
        <description><![CDATA[ Hi there,

Hope your Thursday is going the way you want it to go üåü

Let's dive in right away!


Check your back buttons

Do you remember about this obscure feature added in iOS 14? Holding the back button shows the navigation stack history and lets you navigate to any item. ]]></description>
        <link>https://ioscodereview.com/issues/5/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a5ac</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 19 Aug 2021 14:22:37 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there,</p><p>Hope your Thursday is going the way you want it to go üåü</p><p>Let's dive in right away!</p><hr><h2 id="check-your-back-buttons">Check your back buttons</h2><p>Do you remember about this obscure feature added in iOS 14? Holding the back button shows the navigation stack history and lets you navigate to any item. Cool feature, right? Not so fast...</p><p>The titles are taken from the back button. If you're still hiding the back button titles by setting <code>navigationItem.backButtonTitle = ""</code> , you will have this bug, where rows are just empty. I checked some popular apps and many of them have this issue üòµ</p><p>Since iOS 14, there's a proper way to hide the back button title by using <code>backButtonDisplayMode</code>. <strong>@sarunw</strong> wrote a detailed guide on it, make sure to check it out!</p><p>PS. if you're on SwiftUI, remember to add the <code><a href="https://developer.apple.com/documentation/swiftui/view/navigationtitle(_:)-5di1u?ref=ioscodereview.com">.navigationTitle(_:)</a> </code>modifier even when you hide the navigation bar on that view.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://ioscodereview.com/content/images/revue/items/images/010/562/663/original/history-stack-bug.png" class="kg-image" alt loading="lazy"><figcaption>the nasty history stack bug. source: sarunw.com</figcaption></figure><h3 id="a-new-way-to-manage-the-back-button-title-in-ios-14-with-backbuttondisplaymode-sarunw"><a href="https://sarunw.com/posts/new-way-to-manage-back-button-title-in-ios14/?ref=ioscodereview.com">A new way to manage the back button title in iOS 14 with backButtonDisplayMode | Sarunw</a></h3><p>Apple adds a new way to control where the back button will pick up its title. Let's see how this make thing a lot easier going forward.</p><h2 id="on-force-unwrapping">On force unwrapping</h2><p>Yet another debate on force unwrapping happened last week. With usually no end in sight for this polarising topic, we might have found <strong>the</strong> answer.</p><p>I loved this perspective from <strong>@johnhaney</strong>: both sides of the debate have the same goal - to account for the nil cases. The only difference is that for some, it's to think of it right away, and for others, only to do that if&amp;when the crashes happen in production and become a problem.</p><p>Check the whole thread if you want to read other interesting opinions.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/johnhaney/status/1423832649697792001?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="testing-throwing-code">Testing throwing code</h2><p>Test code is also code. <strong>@nicklockwood</strong> shares three tips for modernizing the implementation of your unit tests with <code>XCTUnwrap</code> and marking test functions as throwing:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/nicklockwood/status/1427942851309187075?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/nicklockwood/status/1427942852710051840?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/nicklockwood/status/1427942854182191108?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="pro-rebase-tip">Pro rebase tip</h2><p>If you're using rebase and are switching branches in the process, this tip will save you a bunch of friction. This is an older tweet, but I regularly meet people who are unaware of this trick, so here it is :)</p><p>If you're unsure why one would want to use rebase, I recommend reading the <a href="https://www.thinktecture.com/en/tools/demystifying-git-rebase/?ref=ioscodereview.com">Demystifying Git Rebase</a> article series.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/hybridcattt/status/1114596481359581185?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>ü§ò</p><p>Alright, that's it for today.</p><p>Did you enjoy this issue? Let me know by pressing the buttons below, so I can improve the newsletter.</p><p>Got feedback? Want to see more, or less of certain kinds of tips? I'd love to hear from you. Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #4 ]]></title>
        <description><![CDATA[ Hi there. Did you know that it's already August?

In today's issue, among other things, @v_pradeilles shares two video tips, memory leaks in Combine make a come-back, and we fix Copilot's code. Let's dive in üëá


When not to use [weak self]

@swiftandtips found a well-structured writeup on when to ]]></description>
        <link>https://ioscodereview.com/issues/4/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a5ad</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 05 Aug 2021 16:19:35 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there. Did you know that it's already August?</p><p>In today's issue, among other things, <a href="https://twitter.com/v_pradeilles?ref=ioscodereview.com">@v_pradeilles</a> shares two video tips, memory leaks in Combine make a come-back, and we fix Copilot's code. Let's dive in üëá</p><hr><h2 id="when-not-to-use-weak-self-">When not to use [weak self]</h2><p><a href="https://twitter.com/swiftandtips?ref=ioscodereview.com">@swiftandtips</a> found a well-structured writeup on when to use and not to use <em>[weak self]</em> in closures. Here's a concise chart to help you decide.</p><p>If you also want to learn the why's, read the full article: <a href="https://medium.com/flawless-app-stories/you-dont-always-need-weak-self-a778bec505ef?ref=ioscodereview.com">You don‚Äôt (always) need [weak self]</a> by <a href="https://twitter.com/BesherMaleh?ref=ioscodereview.com">@BesherMaleh</a></p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/swiftandtips/status/1418559144739721219?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="lazy-collections-for-speed">Lazy collections for speed</h2><p>Love the new tip series by <a href="https://twitter.com/v_pradeilles?ref=ioscodereview.com">@v_pradeilles</a>. In this short video he demonstrates speeding up his code 400.000 times just by adding <em>.lazy.</em> Yes, only five characters üî• <a href="https://www.youtube.com/watch?v=YeGVrZJj-Mg&ref=ioscodereview.com">Watch full video on Youtube (6 min)</a></p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/v_pradeilles/status/1417811945034555398?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="there-s-no-secrets-in-userdefaults">There's no secrets in UserDefaults</h2><p>And another tip from <a href="https://twitter.com/v_pradeilles?ref=ioscodereview.com">@v_pradeilles</a>. You've likely heard that saving sensitive data to UserDefaults is a bad idea, but perhaps weren't sure why?</p><p>Vincent recorded a short tutorial demonstrating how the data saved in UserDefaults can be easily accessed. <a href="https://www.youtube.com/watch?v=UAgtOTOH2nQ&ref=ioscodereview.com">Watch on Youtube (4 min)</a></p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/v_pradeilles/status/1417498539387760655?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="memory-leaks-in-combine">Memory leaks in Combine</h2><p>We've touched on this topic in the <a href="https://newsletter.ioscodereview.com/issues/code-review-curated-code-improvement-tips-issue-3-684687?ref=ioscodereview.com">Issue #3</a>. Well, there are always more places to find retain cycles in.</p><p>If you're binding a publisher's values to a property of a class, watch out for which operator you use. Using <a href="https://developer.apple.com/documentation/combine/just/assign(to:on:)?ref=ioscodereview.com">.assign(to: \.property, on: self)</a> will retain <em>self</em> and may cause a retain cycle. On the other hand using <a href="https://developer.apple.com/documentation/combine/just/assign(to:)?ref=ioscodereview.com">.assign(to: $property)</a> retains the property's publisher, not <em>self</em>.</p><p>This old forums thread has an example of leaking code. Know your enemy!</p><h3 id="does-assign-to-produce-memory-leaks-using-swift-swift-forums"><a href="https://forums.swift.org/t/does-assign-to-produce-memory-leaks/29546?ref=ioscodereview.com">Does 'assign(to:)' produce memory leaks? - Using Swift - Swift Forums</a></h3><p>Hello there! I'm playing around with Combine and I've found a possible memory leak when using 'assign(to:)' to store stream result in current object. Let me show a couple of examples using 'assign(to:)' and 'sink' to co‚Ä¶</p><h2 id="remember-copilot">Remember Copilot?</h2><p>In <a href="https://newsletter.ioscodereview.com/issues/code-review-curated-code-improvement-tips-issue-2-677988?ref=ioscodereview.com">Issue #2</a> I asked for your suggestions on what can be improved in Copilot's code, and you sent some great suggestions! There are many things that could be improved there. Did you notice that it doesn't even compile?</p><p>I made a <a href="https://github.com/hybridcattt/remix-copilot-swift-playground/blob/main/RemixCopilot.playground/Contents.swift?ref=ioscodereview.com">playground with four improvement iterations</a>. Check it out to see if you've spotted everything, or if there's anything we missed üëÄ</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/krzyzanowskim/status/1410320595221463044?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>‚úåÔ∏è</p><p>Did you enjoy this issue? Let me know by pressing the buttons below, so I can improve the newsletter.</p><p>Got feedback? I‚Äôd love to hear your thoughts! Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #3 ]]></title>
        <description><![CDATA[ Hi there!

I hope your Thursday is going well ‚òÄÔ∏è Today's issue covers topics such as architecture, Combine, Swift, SwiftUI, UIKit, and development process. Let's dive in!


Architectures are for humans

Last week a particular topic resonated through the community: the mental toll the different architectures bring on developers. The issue ]]></description>
        <link>https://ioscodereview.com/issues/3/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a5ae</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 22 Jul 2021 13:33:43 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there!</p><p>I hope your Thursday is going well ‚òÄÔ∏è Today's issue covers topics such as architecture, Combine, Swift, SwiftUI, UIKit, and development process. Let's dive in!</p><hr><h2 id="architectures-are-for-humans">Architectures are for humans</h2><p>Last week a particular topic resonated through the community: the mental toll the different architectures bring on developers. The issue is especially prominent for complex architectures such as VIPER, which is known for having many similarly-named small files per each screen.</p><p><a href="https://twitter.com/collindonnell/status/1415052296002539525?ref=ioscodereview.com">@collinodonnel</a> shared his experience, which triggered many others to come forward. Dozens of developers shared similar experiences last week.</p><blockquote>Any task required routing through six classes, and I found myself physically exhausted when I had to interact with it.</blockquote><p>I have struggled with VIPER myself in exactly the same way.</p><p>Let this serve as a reminder to all of us. Not that VIPER is a bad architecture pattern, but that architectures are not <em>only</em> about clean code or testability. They're also about people. It's us humans who have to be able to understand the codebase, reason about it, and work on it - productively.</p><h2 id="retain-cycles-with-combine">Retain cycles with Combine</h2><p>Combine's <a href="https://developer.apple.com/documentation/combine/publisher/map(_:)-99evh?ref=ioscodereview.com"><em>map</em></a> operator retains the transform closure during the publisher's lifetime. When we pass a function declared on <em>self</em>, <em>self</em> is retained as well. If the subscription is kept alive by the same object, then we have an unbreakable retain cycle that prevents <em>self</em> from ever deallocating.</p><p>Marking <em>self</em> as <em>unowned</em> would leave the possibility of the app crashing. <a href="https://twitter.com/eneko?ref=ioscodereview.com">@eneko</a> shares a safe way to resolve the retain cycle:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/eneko/status/1416143468070465537?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="configuring-swiftui-views-with-environment">Configuring SwiftUI views with Environment</h2><p><a href="https://twitter.com/mecid?ref=ioscodereview.com">Majid</a> shares a real-life example of how to leverage custom environment variables to configure custom SwiftUI views. Check out his <a href="https://swiftwithmajid.com/2019/08/21/the-power-of-environment-in-swiftui/?ref=ioscodereview.com">article</a> if you want to understand SwiftUI's <em>Environment</em> better. ¬†The way we do things in SwiftUI is definitely different from how we used to do them in UIKit üôà</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/mecid/status/1417079242463010822?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="reverse-arrays-for-free">Reverse arrays for free</h2><p>An interesting fact shared by <a href="https://twitter.com/swiftandtips?ref=ioscodereview.com">@swiftandtips</a>: reversing an array with <em>reversed()</em> doesn't use any new memory, and has constant time complexity (read: is very, very fast). ¬†<a href="https://developer.apple.com/documentation/swift/array/1690025-reversed?ref=ioscodereview.com">Read documentation with examples here</a>.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/swiftandtips/status/1417289735165333506?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="detecting-orientation-changes-in-uikit">Detecting orientation changes in UIKit</h2><p>Why do we want to know about changes in device orientation? Most often it is to know about screen size changes. In today's variety of devices, device orientation is not the only possible cause for the app's window to change size - think moving the app to split screen on iPad. Individual view controllers can also change size - f.ex. when <a href="https://useyourloaf.com/blog/change-the-width-of-master-view-in-split-view-controller/?ref=ioscodereview.com">changing width of columns in UISplitViewController</a>.</p><p>Because of all this, it's much safer to rely on <a href="https://developer.apple.com/documentation/uikit/uicontentcontainer/1621466-viewwilltransitiontosize?ref=ioscodereview.com">viewWillTransitionToSize</a> for concrete size changes in view controllers, and on <a href="https://developer.apple.com/documentation/uikit/uitraitenvironment/1623516-traitcollectiondidchange?ref=ioscodereview.com">traitCollectionDidChange</a> for general changes in environment, such as size class, dark mode, preferred text size and so on. Thanks <a href="https://twitter.com/mluisbrown?ref=ioscodereview.com">@mluisbrown</a> for bringing this up!</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/mluisbrown/status/1413590534992670722?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="getting-unstuck-in-the-morning">Getting unstuck in the morning</h2><p>This tip is not about tweaking the code, but about tweaking your own development process. Are you sometimes feeling stuck when picking up a new task in the morning? There are some smart ideas in <a href="https://twitter.com/nicklockwood?ref=ioscodereview.com">@nicklockwood</a>'s thread.</p><p>My favourite trick is to create the pull request in the morning, even if I finished the implementation and pushed the commits the day before. Besides the productivity boost, it gives a chance to look at the solution with fresh eyes and think of missed edge cases.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/nicklockwood/status/1415594572848242691?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>‚úåÔ∏è</p><p>Did you enjoy this issue? Let me know by pressing the buttons below, so I can improve the newsletter.</p><p>Got feedback? I‚Äôd love to hear your thoughts! Reply to this email or reach out on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #2 ]]></title>
        <description><![CDATA[ Hi there!

Even though it's summer and many are on vacation, there is no shortage of things that we can learn from our awesome Apple developer community.

I hope you enjoy this week's findings ‚òÄÔ∏èüôå


Function annotations for structs

If you write Swift, most likely you use structs a lot. John ]]></description>
        <link>https://ioscodereview.com/issues/2/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a5af</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Thu, 08 Jul 2021 12:37:35 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there!</p><p>Even though it's summer and many are on vacation, there is no shortage of things that we can learn from our awesome Apple developer community.</p><p>I hope you enjoy this week's findings ‚òÄÔ∏èüôå</p><hr><h2 id="function-annotations-for-structs">Function annotations for structs</h2><p>If you write Swift, most likely you use structs <em>a lot</em>. <a href="https://twitter.com/johnsundell?ref=ioscodereview.com">John Sundell</a> goes in depth on how marking functions in structs <em>mutating</em> can help you make code more structured and concise.</p><h3 id="mutating-and-non-mutating-swift-contexts-swift-by-sundell"><a href="https://swiftbysundell.com/articles/mutating-and-nonmutating-swift-contexts/?ref=ioscodereview.com">Mutating and non-mutating Swift contexts | Swift by Sundell</a></h3><p>What sort of capabilities that a mutating Swift context has, and what the mutating and nonmutating keywords do.</p><h2 id="handling-actions-in-uibutton">Handling actions in UIButton</h2><p>Did you know about <a href="https://developer.apple.com/documentation/uikit/uicontrol/event/1618222-primaryactiontriggered?ref=ioscodereview.com">UIControl.Event.primaryActionTriggered</a>? It's been around since iOS 9.0, and it makes <em>touchUpInside </em>obsolete for button action handling. It also makes accidentally picking <em>touchUpOutside</em> and wondering why the button won't work for an hour less likely. <a href="https://developer.apple.com/documentation/uikit/uicontrol/event?ref=ioscodereview.com"><em>touch*</em> events</a> are still useful for handling touch movements in custom controls, but we can simply use <em>primaryAcitionTriggered</em> in day-to-day. via <a href="https://twitter.com/_mochs?ref=ioscodereview.com">@_mochs</a></p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/_mochs/status/1412470444595109888?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="on-testing-and-refactoring">On testing and refactoring</h2><p>Stumbled onto this quote from 2017, and I just had to share it. In my view, this is the best way for us developers to view ourselves as professionals in our field.</p><p>"I don't ask permission to write a test or refactor, any more than I ask for permission to write an if statement or a for loop" - <a href="https://twitter.com/RonJeffries?ref=ioscodereview.com">@RonJeffries</a></p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/chrisshinkle/status/923187864913039360?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="working-on-multiple-branches-in-git">Working on multiple branches in git</h2><p><a href="https://twitter.com/rockbruno_?ref=ioscodereview.com">@rockbruno_</a> uncovered an awesome git feature: <em>git worktree</em> allows us to check out multiple branches at once in the same repo. <em>git worktree</em> has benefits over cloning multiple copies: you save on disk space (in case your repo has long history) and all worktrees share the same local branches and stashes.</p><p>You can use worktrees to have parallel branches checked out long term, f.ex. an older version of the app for comparing functionality, or just to quickly check out coworker's branch during code review.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/rockbruno_/status/1412743209633992707?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="let-s-review-copilot-s-code-">Let's review Copilot's code!</h2><p>A lot has been said already about Github's Copilot tool, good and bad. I don't have access yet, and I'm sure not many of you do. While we wait, let's review Copilot-suggested code!</p><p>How many bugs and improvement opportunities can you find in this piece shared by <a href="https://twitter.com/krzyzanowskim?ref=ioscodereview.com">@krzyzanowskim</a>?</p><p><a href="https://forms.gle/gnmVJdpujgAQJkAJ9?ref=ioscodereview.com">Let me know by filling a one-question form</a>, all anonymous of course. If I get enough replies, I will share most popular ones on our <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">Twitter</a> next week.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/krzyzanowskim/status/1410320595221463044?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>‚úåÔ∏è</p><p>What did you think about these tips? I‚Äôd love to hear your thoughts on Twitter via <a href="https://twitter.com/ios_code_review?utm_campaign=%20%EF%A3%BF%20Code%20Review%20%7C%20%20Curated%20code%20improvement%20tips&utm_medium=email&utm_source=Revue%20newsletter">@ios_code_review</a> or over email at <a href="mailto:ioscodereview@hybridcattt.com?utm_campaign=%20%EF%A3%BF%20Code%20Review%20%7C%20%20Curated%20code%20improvement%20tips&utm_medium=email&utm_source=Revue%20newsletter">ioscodereview@hybridcattt.com</a> üôå</p> ]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[ Issue #1 - Highlights from 2020 ]]></title>
        <description><![CDATA[ Hi there. How awesome of you to stop by!

This issue was actually never sent to anyone. I've just created the newsletter, and this is a sample of how the future issues might look. I will share the valuable code improvement tips I stumble upon while browsing Twitter, spiced by ]]></description>
        <link>https://ioscodereview.com/issues/1/</link>
        <guid isPermaLink="false">6383ae5c4685dc003c51a5b0</guid>
        <category><![CDATA[  ]]></category>
        <dc:creator><![CDATA[ Marina Vatmakhter ]]></dc:creator>
        <pubDate>Wed, 30 Jun 2021 14:23:30 +0200</pubDate>
        <media:content url="" medium="image"/>
        <content:encoded><![CDATA[ <p>Hi there. How awesome of you to stop by!</p><p>This issue was actually never sent to anyone. I've just created the newsletter, and this is a sample of how the future issues might look. I will share the valuable code improvement tips I stumble upon while browsing Twitter, spiced by occasional comments from my side. I cover Swift, Objective-C, UIKit, SwiftUI and much more. The plan is to send the newsletter every two weeks or once a month.</p><p>This issue contains my most favourite tips from 2020. Code improvement tips rarely age, so I hope you find these useful üôå</p><hr><h2 id="change-suggestions-in-pr-comments">Change suggestions in PR comments</h2><p>While multiline change suggestions were introduced on Github all the way back in February 2020, it's such a time saver during code reviews, that it is worth reminding about.</p><p>When a you use <a href="https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/incorporating-feedback-in-your-pull-request?ref=ioscodereview.com">change suggestions in PR comments</a>, the changes can be incorporated automatically with a click of a button in the web UI, without having to first apply requested changes locally and then pushing to remote.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/github/status/1232734207853522949?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="tired-of-translatesautoresizingmasksintoconstraints">Tired of translatesAutoresizingMasksIntoConstraints?</h2><p>This is the nicest way I‚Äôve <strong>ever</strong> seen to deal with <em>translatesAutoresizingMasksIntoConstraints</em>.</p><p><em>let label = UILabel().forAutoLayout()</em> // just like that ü§Ø by <a href="https://twitter.com/ZiadeMarcus?ref=ioscodereview.com">@ZiadeMarcus</a></p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/ZiadeMarcus/status/1255509639015383044?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="access-control-for-performance">Access control for performance</h2><p>It's not obvious that choices such as marking types and members <em>private</em> or <em>final</em>, or choosing between using <em>struct</em> or <em>class</em> are not only code style preferences, but also affect performance. Read the article by <a href="https://avitsadok.medium.com/?ref=ioscodereview.com">Avi Tsadok</a>:</p><h3 id="9-ways-to-boost-your-swift-code-performance-by-avi-tsadok-better-programming"><a href="https://betterprogramming.pub/9-ways-to-boost-your-swift-code-performance-56e0986dd9ec?gi=b200951a424a&ref=ioscodereview.com">9 Ways to Boost Your Swift Code Performance | by Avi Tsadok | Better Programming</a></h3><p>Swift is a fast language and it gets faster in every release. iOS devices are also fast, so the chances are these tips won‚Äôt be needed at all. Even in those cases where we do bump into performance‚Ä¶</p><h2 id="any-documentation-no-documentation">Any documentation &gt; no documentation</h2><p>A reminder that even smallest bits of documentation can be helpful. via <a href="https://twitter.com/SergDort?ref=ioscodereview.com">@SergDort</a></p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/SergDort/status/1333421850819485697?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="minimalistic-functions">Minimalistic functions</h2><p>I love this idea of functions only taking the most specific parameters they need, courtesy of <a href="https://twitter.com/Jonathanff?ref=ioscodereview.com">@Jonathanff</a>. This approach doesn't only improve reusability, but also reduces unwanted side effects (possibility of changing something you didn't mean to change) and makes code easier to review. It's not a silver bullet though, so use with care.</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/Jonathanff/status/1290663787964465152?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="tech-debt-as-a-tool">Tech debt as a tool</h2><p>Adding tech debt is acceptable in some cases, and is often necessary. <a href="https://twitter.com/danielsaidi?ref=ioscodereview.com">@danielsaidi</a> shares a solid approach to accepting technical debt:</p><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/danielsaidi/status/1329041213362745350?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><h2 id="to-end-on-a-fun-note-">To end on a fun note...</h2><figure class="kg-card kg-embed-card">
<blockquote class="twitter-tweet"><a href="https://twitter.com/simonnickel/status/1309763015819104256?ref=ioscodereview.com"></a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</figure><p>Nothing and no one is perfect, let's just remember that we're all human üòá</p><p>‚úåÔ∏è</p><p>What did you think about these tips? I'd love to hear your thoughts on Twitter via <a href="https://twitter.com/ios_code_review?ref=ioscodereview.com">@ios_code_review</a> or ¬†over email at <a href="mailto:ioscodereview@hybridcattt.com">ioscodereview@hybridcattt.com</a> üôå</p> ]]></content:encoded>
    </item>

    <item>
      <title>[bonus issue] Ô£ø iOS Code Review - Issue #36 | Curated code improvement tips</title>
      <description type="html"><![CDATA[<p>Hi there,</p><p>Yesterday I've sent out the issue #35, and it was flagged as spam by Gmail. It was due to technical problems on Revue side, not sure what exactly. They got fixed after I reached out to support, and now the emails are delivered ok.</p><p>I know that a lot of you are looking forward to receiving the newsletter, but I didn't want to just redeliver the same email again. Hence this bonus issue with two great articles üòä </p><p>If you're on gmail, check your spam folder for the previous email, and please mark it as "not spam" üôè If you're not on Gmail, I hope you don't mind the bonus issue üíö</p><p>I am investigating changing to a more reliable email platform, so the email layout might be slightly different next time. </p>]]></description>
      <pubDate>Fri, 04 Nov 2022 13:07:52 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/bonus-issue-ios-code-review-issue-36-curated-code-improvement-tips-1440142</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review - Issue #35 |  Curated code improvement tips</title>
      <description type="html"><![CDATA[<p>Hi there,</p><p>Welcome to the issue #35 üëã Enjoy!</p>]]></description>
      <pubDate>Thu, 03 Nov 2022 12:33:05 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-issue-35-curated-code-improvement-tips-1417649</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review - Issue #34 |  Curated code improvement tips</title>
      <description type="html"><![CDATA[<p>Hi there,</p><p>Welcome to issue #34 üëã Hope you learn something new today! </p><p>I also got the first sponsor this time - I'm really excited to be able to get some funds to continue growing the newsletter! I'm already investing them into improving my curation workflow and building a custom landing page. If you're looking for a job, check out the sponsored section at the end ‚ò∫Ô∏è</p>]]></description>
      <pubDate>Thu, 20 Oct 2022 11:05:16 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-issue-34-curated-code-improvement-tips-1395950</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review - Issue #33 |  Curated code improvement tips</title>
      <description type="html"><![CDATA[<p>Hi there,</p><p>Welcome to the 33rd issue üëã We're back to a classic five-tips structure, and I hope you find something interesting today. </p><p>As an innovation, I've included a new section at the bottom with featured jobs. They're not sponsored this time, but I hope to get sponsored job or indie app ads in the future. The code tips themselves will never have any promoted content in them, only what I truly think is best ‚ò∫Ô∏è</p>]]></description>
      <pubDate>Thu, 06 Oct 2022 11:12:57 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-issue-33-curated-code-improvement-tips-1373081</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review - Issue #32 |  Curated code improvement tips</title>
      <description type="html"><![CDATA[<p>Hi there!</p><p>Hope you're doing good and working toward your goals, whatever they are (whether that's work, resting more, spending more time with family, or protecting what's yours). </p><p>Today I have a couple of longer sections - hope you enjoy the read, and I'm always curious to hear your thoughts!</p><p>Let's dive in üëáüëá</p>]]></description>
      <pubDate>Thu, 22 Sep 2022 10:30:02 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-issue-32-curated-code-improvement-tips-1348476</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review - Issue #31 |  Curated code improvement tips</title>
      <description type="html"><![CDATA[<p>Hi there, </p><p>Did you enjoy the Apple event yesterday? Whether you're into the latest tech, or in the camp of anti-consumerism, hope you had a nice day üôÇ </p><p>On Twitter it might seem that <em>everyone</em> is so excited about the new phones/watches/etc. But that's just the bubble. I, for one, will not be buying a new iPhone or watch any time soon - will keep enjoying my 2-year-old XS and series 5. To whomever needs to hear this, it's totally ok not to jump on buying the newest thing, but also it's ok to do so. </p><p>Now let's dive in, hope you learn something new today </p>]]></description>
      <pubDate>Thu, 08 Sep 2022 10:50:25 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-issue-31-curated-code-improvement-tips-1327246</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review |  Curated code improvement tips - Issue #30</title>
      <description type="html"><![CDATA[<p>Hi there,</p><p>I hope the summer is treating you well, and you're progressing toward your goal, whatever it is!</p><p>As promised in the last issue, here's me sharing behind-the-scenes on how I make the newsletter issues: <a href="https://youtu.be/CgTqqkzeeh8" target="_blank">https://youtu.be/CgTqqkzeeh8</a></p><p>Let's dive in üëá</p>]]></description>
      <pubDate>Thu, 25 Aug 2022 11:13:00 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-30-1306376</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review - Issue #29 |  Curated code improvement tips</title>
      <description type="html"><![CDATA[<p>Hi there,</p><p>As I'm writing this, I am recording a show-and-tell video sharing a bit about my process creating this newsletter. I'll share it on Twitter and in the next issue, so stay tuned :) </p><p>I hope you find something interesting in my collection today üëá</p>]]></description>
      <pubDate>Thu, 11 Aug 2022 10:30:02 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-issue-29-curated-code-improvement-tips-1285726</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review - Issue #28 |  Curated code improvement tips</title>
      <description type="html"><![CDATA[<p>Hi there,</p><p>I hope you find something useful or interesting in today's collection ‚ú® </p>]]></description>
      <pubDate>Thu, 28 Jul 2022 11:12:02 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-issue-28-curated-code-improvement-tips-1266658</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review |  Curated code improvement tips - Issue #27</title>
      <description type="html"><![CDATA[<p>Hi there,</p><p>It's getting harder and harder to not share cool things from iOS 16 (that we can't yet use). I'm managing to resist so far. Hope you find something interesting and useful in today's collection!</p><p>By the way, if you enjoy reading the newsletter - send it to a colleague ‚ò∫Ô∏è</p>]]></description>
      <pubDate>Thu, 14 Jul 2022 11:10:44 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-27-1248058</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review |  Curated code improvement tips - Issue #26</title>
      <description type="html"><![CDATA[<p>Hi there,</p><p>Every time I sit down to write an intro to an issue, I struggle between staying positive and the desire to address current events in the outside world. And every time I land on the decision to let this newsletter be a small island on the internet dedicated to learning something new in the field we're passionate about. </p><p>If you are affected by war, the pandemic, or any of the other struggles in our crazy world - know that I think of you every time I write this üíõ </p><p>And thanks to all of you for being loyal readers! Seeing the high open rates and receiving your feedback keeps my heart warm(-er) ‚ò∫Ô∏è</p><p>So I hope you find something interesting in today's collection. Let's dive in?</p>]]></description>
      <pubDate>Thu, 30 Jun 2022 10:52:20 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-26-1225711</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review |  Curated code improvement tips - Issue #25</title>
      <description type="html"><![CDATA[<p>Hi there,</p><p>Hope you had a wonderful WWDC week! I myself have been on vacation (and still am), and only checked out the keynote and saw some tweets from the community. </p><p>Other newsletters have featured lots of WWDC-related articles - for example I loved the latest <a href="https://iosdevweekly.com" target="_blank">iOS Dev Weekly</a> which was 100% about WWDC.</p><p>I tend to forget all the new things by the time I can use them for real, so I'll be featuring more of the new APIs after Xcode 14 ships in September. My goal has always been to share things that can be used right away in real projects (gotta be honest it's also convenient because I could continue spending the vacation offline üòã)</p><p>I was also interviewed on the <a href="https://www.buzzsprout.com/1414396/10721946" target="_blank">AppForce1 podcast</a>, where I shared a bit about how I make the newsletter ‚ò∫Ô∏è  </p><p>Now let's dive in!</p>]]></description>
      <pubDate>Thu, 16 Jun 2022 10:30:01 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-25-1206264</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review |  Curated code improvement tips - Issue #24</title>
      <description type="html"><![CDATA[<p>Hi there,</p><p>As promised, today's issue is a special one, and I'm really excited to bring it to you. I wanted to spice things up a bit and invite a guest curator to create this issue. Because why not?</p><p>Say hi to <a href="https://twitter.com/basthomas" target="_blank">Bas Broek</a> - he will be curating the collection today. Bas had been authoring <a href="https://swiftweeklybrief.com/" target="_blank">Swift Weekly Brief (sadly discontinued)</a> for 2 years before joining the accessibility team at Apple. Now he's back to the community and shares his favourite bits of wisdom with us below üëá üòå</p><p>--------------------</p><p>This is Bas; I'm a friend of Marina's. As she reached out to me asking if I'd be up for writing an issue, I immediately said yes!</p><p>Having curated a newsletter before, I know it can be quite a bit of work; having the community help out was always a highlight of writing the newsletter, so I'm always happy to return that favor.</p><p>Enjoy!</p>]]></description>
      <pubDate>Thu, 02 Jun 2022 10:41:20 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-24-1186350</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review |  Curated code improvement tips - Issue #23</title>
      <description type="html"><![CDATA[<p>Hi there,</p><p>WWDC is coming soon, are you excited? I am, but also looking forward to some vacation time. Not sure yet how much of catching up with the freshest-and-greatest content I'll do in June, but either way there will be some interesting stuff to share.</p><p>Also stay tuned for the next issue #24 on June 1st, it will be a very special one ü§©</p><p>Now, let's dive in üëá</p>]]></description>
      <pubDate>Thu, 19 May 2022 11:03:01 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-23-1165731</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review |  Curated code improvement tips - Issue #22</title>
      <description type="html"><![CDATA[<p>Hi there, </p><p>Hope you enjoy today's collection üôå</p>]]></description>
      <pubDate>Thu, 05 May 2022 10:51:40 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-22-1145218</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review |  Curated code improvement tips - Issue #21</title>
      <description type="html"><![CDATA[<p>Hi there, </p><p>Hope you're safe, wherever you are. I'm excited to share this week's findings with you! </p><p>This time I'm doing something new in addition to the usual tips. The pandemic has been hash on the conference scene, and the next conference season is coming up. I figured I'd highlight some conferences that are still looking for speakers. </p><p>Enjoy! ‚òÄÔ∏è</p>]]></description>
      <pubDate>Thu, 21 Apr 2022 11:21:14 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-21-1124111</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review |  Curated code improvement tips - Issue #20</title>
      <description type="html"><![CDATA[<p>Hi there, </p><p>Can't believe this is already the 20th issue  üéâ A milestone for sure. Thank you for your continuous support and feedback - and for spreading the word!</p>]]></description>
      <pubDate>Thu, 07 Apr 2022 10:47:31 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-20-1101122</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review |  Curated code improvement tips - Issue #19</title>
      <description type="html"><![CDATA[<p>Hi there,</p><p>The world is still a mess, but I'm really excited to bring you some learnings today. Enjoy! üôå</p>]]></description>
      <pubDate>Thu, 24 Mar 2022 11:50:04 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-19-1078688</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review |  Curated code improvement tips - Issue #18</title>
      <description type="html"><![CDATA[<p>Hi there,</p><p>I hope you enjoy today's content. Let's dive in üëá</p>]]></description>
      <pubDate>Thu, 10 Mar 2022 11:47:29 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-18-1055645</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review |  Curated code improvement tips - Issue #17</title>
      <description type="html"><![CDATA[<p>I spent the whole morning thinking about whether it's appropriate to send out an issue today. For the sake of consistency I decided in favour of delivering on the promise of code improvement tips in your inbox every two weeks.</p><p>This time I got no cheerful words though. If you're able to enjoy something today - I hope you enjoy these tips.</p>]]></description>
      <pubDate>Thu, 24 Feb 2022 11:04:06 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-17-1032468</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review |  Curated code improvement tips - Issue #16</title>
      <description type="html"><![CDATA[<p>Hi there,</p><p>This time I have exciting news to share - last week we crossed the 1000 subscribers mark ü•≥ It's so honouring to be able to share the learnings with such a wide community from all around the world. Thank you for tuning in!</p><p>And now, let's dive into the tips üëá</p>]]></description>
      <pubDate>Thu, 10 Feb 2022 11:16:37 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-16-1008909</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review |  Curated code improvement tips - Issue #15</title>
      <description type="html"><![CDATA[<p>Hi there,</p><p>Hope your Thursday is going the way you want it to go üåü Let's dive into this week's highlights! </p>]]></description>
      <pubDate>Thu, 27 Jan 2022 11:57:44 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-15-985276</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review |  Curated code improvement tips - Issue #14</title>
      <description type="html"><![CDATA[<p>Hi there,</p><p>Welcome to the first issue of 2022! ‚òÄÔ∏è</p><p>Hope everyone had lovely holidays. I did, and am pumped to jump back into sharing tips regularly. Enjoy!</p>]]></description>
      <pubDate>Thu, 13 Jan 2022 12:22:06 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-14-922655</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review |  Curated code improvement tips - Issue #13</title>
      <description type="html"><![CDATA[<p>Hi there,</p><p>Welcome to the 13th issue, the last one for 2021. As a treat, there are a few more tips than usual. Enjoy!</p><p>Happy holidays and see you on January 13th! ‚ùÑÔ∏è</p>]]></description>
      <pubDate>Thu, 09 Dec 2021 12:01:55 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-13-898954</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review |  Curated code improvement tips - Issue #12</title>
      <description type="html"><![CDATA[<p>Hi there,</p><p>How is your week going? </p><p>I hope you enjoy today's tips. Let me know what you found most interesting by replying to this email üôå</p>]]></description>
      <pubDate>Thu, 25 Nov 2021 12:50:15 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-12-869205</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review |  Curated code improvement tips - Issue #11</title>
      <description type="html"><![CDATA[<p>Hi there,</p><p>I hope you enjoy this week‚Äôs findings ‚òÄÔ∏èüôå</p>]]></description>
      <pubDate>Thu, 11 Nov 2021 13:07:22 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-11-831765</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review |  Curated code improvement tips - Issue #10</title>
      <description type="html"><![CDATA[<p>Hi there,</p><p>Hope your Thursday is going the way you want it to go üçÅ Let's dive in üëá</p>]]></description>
      <pubDate>Thu, 28 Oct 2021 11:19:01 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-10-810923</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review |  Curated code improvement tips - Issue #9</title>
      <description type="html"><![CDATA[<p>Hi there,</p><p>It's that Thursday again ü•≥ I found so many gems in the last few weeks, that today's issue contains more tips than usual. I also re-tweet additional tips throughout the week that didn't make it into the newsletter, so make sure to follow <a href="https://twitter.com/ios_code_review" target="_blank">@ios_code_review</a> for even more tips. </p>]]></description>
      <pubDate>Thu, 14 Oct 2021 13:09:40 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-9-789293</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review |  Curated code improvement tips - Issue #8</title>
      <description type="html"><![CDATA[<p>Hi there,</p><p>It's Thursday again ‚ú® Got a few really interesting things to share. Let's dive straight in üëá</p>]]></description>
      <pubDate>Thu, 30 Sep 2021 11:10:38 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-8-767711</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review |  Curated code improvement tips - Issue #7</title>
      <description type="html"><![CDATA[<p>Hi there,</p><p>Happy Xcode RC week! The <a href="https://developer.apple.com/documentation/xcode-release-notes/xcode-13-release-notes" target="_blank">release notes</a> are extensive, but nonetheless are worth checking at some point, because there are many small improvements that are not mentioned anywhere else. I'll be going through the changelog myself, and will post anything that can improve our code üôå</p><p>Let's dive in üëá</p>]]></description>
      <pubDate>Thu, 16 Sep 2021 10:10:03 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-7-747728</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review |  Curated code improvement tips - Issue #6</title>
      <description type="html"><![CDATA[<p>Hi there, </p><p>How is your Thursday going? </p><p>iOS 15 GM is right around the corner, people are buzzing about last moment API changes and additions. And I'm here with some good old code improvement tips üòÄüëá</p>]]></description>
      <pubDate>Thu, 02 Sep 2021 11:47:05 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-6-728425</link>
    </item>
    <item>
      <title>Ô£ø iOS Code Review |  Curated code improvement tips - Issue #5</title>
      <description type="html"><![CDATA[<p>Hi there,</p><p>Hope your Thursday is going the way you want it to go üåü</p><p>Let's dive in right away!</p>]]></description>
      <pubDate>Thu, 19 Aug 2021 12:22:37 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/ios-code-review-curated-code-improvement-tips-issue-5-713957</link>
    </item>
    <item>
      <title> Ô£ø Code Review |  Curated code improvement tips - Issue #4</title>
      <description type="html"><![CDATA[<p>Hi there. Did you know that it's already August?</p><p>In today's issue, among other things, <a href="https://twitter.com/v_pradeilles" target="_blank">@v_pradeilles</a> shares two video tips, memory leaks in Combine make a come-back, and we fix Copilot's code. Let's dive in üëá</p>]]></description>
      <pubDate>Thu, 05 Aug 2021 14:19:35 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/code-review-curated-code-improvement-tips-issue-4-698282</link>
    </item>
    <item>
      <title> Ô£ø Code Review |  Curated code improvement tips - Issue #3</title>
      <description type="html"><![CDATA[<p>Hi there!</p><p>I hope your Thursday is going well ‚òÄÔ∏è Today's issue covers topics such as architecture, Combine, Swift, SwiftUI, UIKit, and development process. Let's dive in! </p>]]></description>
      <pubDate>Thu, 22 Jul 2021 11:33:43 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/code-review-curated-code-improvement-tips-issue-3-684687</link>
    </item>
    <item>
      <title> Ô£ø Code Review |  Curated code improvement tips - Issue #2</title>
      <description type="html"><![CDATA[<p>Hi there! </p><p>Even though it's summer and many are on vacation, there is no shortage of things that we can learn from our awesome Apple developer community. </p><p>I hope you enjoy this week's findings ‚òÄÔ∏èüôå</p>]]></description>
      <pubDate>Thu, 08 Jul 2021 10:37:35 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/code-review-curated-code-improvement-tips-issue-2-677988</link>
    </item>
    <item>
      <title>Ô£ø Code Review - Issue #1 | Highlights from 2020</title>
      <description type="html"><![CDATA[<p>Hi there. How awesome of you to stop by!</p><p>This issue was actually never sent to anyone. I've just created the newsletter, and this is a sample of how the future issues might look. I will share the valuable code improvement tips I stumble upon while browsing Twitter, spiced by occasional comments from my side. I cover Swift, Objective-C, UIKit, SwiftUI and much more. The plan is to send the newsletter every two weeks or once a month.</p><p>This issue contains my most favourite tips from 2020. Code improvement tips rarely age, so I hope you find these useful üôå</p>]]></description>
      <pubDate>Wed, 30 Jun 2021 12:23:30 +0000</pubDate>
      <link>https://newsletter.ioscodereview.com/issues/code-review-issue-1-highlights-from-2020-675182</link>
    </item>

</channel>
</rss>