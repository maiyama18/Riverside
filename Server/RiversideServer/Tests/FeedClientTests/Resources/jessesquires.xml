<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <link href="https://www.jessesquires.com/feed.xml" rel="self" type="application/atom+xml" />
    <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>

    <id>https://www.jessesquires.com/</id>
    <link href="https://www.jessesquires.com/" />
    <updated>2023-12-29T12:29:11-08:00</updated>

    <title>Jesse Squires</title>
    <subtitle>Turing complete with a stack of 0xdeadbeef</subtitle>
    <icon>https://www.jessesquires.com/img/logo.png</icon>
    <rights>Copyright © 2012-2023, Jesse Squires</rights>
    <author>
        <name>Jesse Squires</name>
        <uri>https://www.jessesquires.com/</uri>
    </author>

    

    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/12/29/reading-list-2023/</id>
        <link href="https://www.jessesquires.com/blog/2023/12/29/reading-list-2023/" />
        <title>A list of books I read in 2023</title>
        <published>2023-12-29T12:02:14-08:00</published>
        <updated>2023-12-29T12:02:14-08:00</updated>

        <category term="reading-notes" />
        <category term="books" /><category term="reading-list" />
        <summary type="html">&lt;p&gt;Continuing another tradition, here are the books I read in 2023. Similar to my &lt;a href=&quot;/blog/2023/12/29/top-posts-of-2023/&quot;&gt;previous post&lt;/a&gt; highlighting my top posts of 2023, I also skipped publishing my reading list last year, for 2022. Again, I was simply too burnt out by the end of that year. I also did not read that much compared to previous years — thanks again to burnout. You can find previous years &lt;a href=&quot;/blog/tags/reading-list/&quot;&gt;here under the #reading-list tag&lt;/a&gt;.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;Continuing another tradition, here are the books I read in 2023. Similar to my &lt;a href=&quot;/blog/2023/12/29/top-posts-of-2023/&quot;&gt;previous post&lt;/a&gt; highlighting my top posts of 2023, I also skipped publishing my reading list last year, for 2022. Again, I was simply too burnt out by the end of that year. I also did not read that much compared to previous years — thanks again to burnout. You can find previous years &lt;a href=&quot;/blog/tags/reading-list/&quot;&gt;here under the #reading-list tag&lt;/a&gt;.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Since I skipped last year, I’ll include everything for 2022 and 2023 in this list. As usual, these are in no particular order but I’ve grouped books by the same author together.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;The Will to Change: Men, Masculinity, and Love&lt;/em&gt;, by bell hooks&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Bone Black&lt;/em&gt;, by bell hooks&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;All About Love: New Visions&lt;/em&gt;, by bell hooks&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Night Sky with Exit Wounds&lt;/em&gt;, by Ocean Vuong&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Time Is a Mother&lt;/em&gt;, by Ocean Vuong&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Happy-Go-Lucky&lt;/em&gt;, by David Sedaris&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;The Hidden Life of Trees&lt;/em&gt;, by Peter Wohlleben&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;War and Peace in Kurdistan&lt;/em&gt;, by Abdullah Öcalan&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Liberating Life: Woman’s Revolution&lt;/em&gt;, by Abdullah Öcalan&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Arabian Love Poems&lt;/em&gt;, by Nizar Qabbani&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Salt Houses&lt;/em&gt;, by Hala Alyan&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;How to Be an Antiracist&lt;/em&gt;, by Ibram X. Kendi&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hopefully, I can get back into a better reading routine for 2024.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/12/29/reading-list-2023/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/12/29/top-posts-of-2023/</id>
        <link href="https://www.jessesquires.com/blog/2023/12/29/top-posts-of-2023/" />
        <title>Top posts of 2023</title>
        <published>2023-12-29T10:33:40-08:00</published>
        <updated>2023-12-29T10:33:40-08:00</updated>

        <category term="essays" />
        <category term="top-posts" />
        <summary type="html">&lt;p&gt;To continue my (almost) tradition of sharing my top posts, here are my most popular posts of 2023. You can find previous years &lt;a href=&quot;/blog/tags/top-posts/&quot;&gt;here under the #top-posts tag&lt;/a&gt;. Last year, 2022, is notably absent from this series — I was too burnt out last year (for a number of reasons) to write one of these posts. So as a bonus, I’ll include my top posts of 2022 here as well! As usual, all of my analytics data is &lt;a href=&quot;https://stats.jessesquires.com&quot;&gt;publicly available&lt;/a&gt;, made possible by the excellent &lt;a href=&quot;https://www.goatcounter.com&quot;&gt;GoatCounter Analytics&lt;/a&gt;, so you can view it too.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;To continue my (almost) tradition of sharing my top posts, here are my most popular posts of 2023. You can find previous years &lt;a href=&quot;/blog/tags/top-posts/&quot;&gt;here under the #top-posts tag&lt;/a&gt;. Last year, 2022, is notably absent from this series — I was too burnt out last year (for a number of reasons) to write one of these posts. So as a bonus, I’ll include my top posts of 2022 here as well! As usual, all of my analytics data is &lt;a href=&quot;https://stats.jessesquires.com&quot;&gt;publicly available&lt;/a&gt;, made possible by the excellent &lt;a href=&quot;https://www.goatcounter.com&quot;&gt;GoatCounter Analytics&lt;/a&gt;, so you can view it too.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;I would like thank everyone who continues to read my blog. I truly appreciate being able to share my writing with all of you.&lt;/p&gt;

&lt;h4 id=&quot;most-popular-posts-written-in-2023&quot;&gt;Most popular posts written in 2023&lt;/h4&gt;

&lt;p&gt;You can view &lt;a href=&quot;https://stats.jessesquires.com/?period-start=2023-01-01&amp;amp;period-end=2023-12-31&amp;amp;filter=%2Fblog%2F2023&quot;&gt;the data here&lt;/a&gt; for this year’s top posts, which is filtered to display site visits for all of 2023 and only for posts written in 2023 (that is, URLs matching &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/blog/2023/&lt;/code&gt;). To see everything I’ve written in 2023, you can &lt;a href=&quot;/blog/archive/&quot;&gt;browse the archive&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2023/03/02/icloud-tabs-bug/&quot;&gt;How to fix iCloud Safari tabs syncing bug&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2023/03/23/improve-multiplatform-swiftui-code/&quot;&gt;Improving multiplatform SwiftUI code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2023/07/17/stop-prefixing-userdefaults-keys/&quot;&gt;Stop prefixing your UserDefaults keys&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2023/03/02/xcode-tip-filter-console/&quot;&gt;Xcode Tip: filtering debugger output&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2023/03/22/xcode-tip-filter-modified-files/&quot;&gt;Xcode Tip: filter to show modified files only&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2023/02/20/ios-view-controller-loading/&quot;&gt;How to find and fix premature view controller loading on iOS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2023/08/17/swift-url-absolutestring-path/&quot;&gt;Swift URL absoluteString versus path&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2023/01/18/eventmachine-failure-on-macos-ventura/&quot;&gt;Fix: eventmachine gem failed to build on macOS Ventura with Ruby 2.7.6&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2023/04/04/exploring-a-new-ios-codebase/&quot;&gt;Exploring a new iOS codebase&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2023/07/11/where-are-xcode-bookmarks-stored/&quot;&gt;Where are Xcode bookmarks stored?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;most-popular-posts-written-in-2022&quot;&gt;Most popular posts written in 2022&lt;/h4&gt;

&lt;p&gt;Similarly to 2023, you can view the &lt;a href=&quot;https://stats.jessesquires.com/?period-start=2022-01-01&amp;amp;period-end=2022-12-31&amp;amp;filter=%2Fblog%2F2022&quot;&gt;2022 data here&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2022/04/19/github-suspending-russian-accounts/&quot;&gt;GitHub suspending Russian accounts deleted project history and pull requests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2022/02/01/decimal-vs-double/&quot;&gt;When should you use Decimal instead of Double?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2022/03/26/gh-action-merge-release-to-main/&quot;&gt;Automate merging release branches into your main branch with GitHub Actions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2022/01/11/time-machine-error-35-monterey/&quot;&gt;Time Machine error 35 in macOS Monterey&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2022/08/11/implementing-a-main-thread-watchdog-on-ios/&quot;&gt;Implementing a main thread watchdog on iOS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2022/01/26/core-data-optionals/&quot;&gt;How to more gracefully handle non-optional Core Data properties in Swift&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2022/03/25/my-website-disappeared-from-bing-and-duckduckgo/&quot;&gt;My website disappeared from Bing and DuckDuckGo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2022/01/11/on-third-party-apple-watch-apps/&quot;&gt;On third-party Apple Watch apps&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2022/02/15/mac-sigh-of-death/&quot;&gt;The MacBook sigh of death&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2022/01/11/ios-app-library-is-drunk/&quot;&gt;iOS App Library is drunk&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/12/29/top-posts-of-2023/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/12/16/macbook-notch-and-menu-bar-fixes/</id>
        <link href="https://www.jessesquires.com/blog/2023/12/16/macbook-notch-and-menu-bar-fixes/" />
        <title>How to fix Mac menu bar icons hidden by the MacBook notch</title>
        <published>2023-12-16T10:48:15-08:00</published>
        <updated>2023-12-16T10:48:15-08:00</updated>

        <category term="essays" />
        <category term="apple" /><category term="macbook-pro" /><category term="macbook" /><category term="macos" />
        <summary type="html">&lt;p&gt;Last week I &lt;a href=&quot;/blog/2023/12/04/new-m3-mbp/&quot;&gt;wrote about setting up a new MacBook Pro&lt;/a&gt; — my first Apple Silicon Mac, and thus my first MacBook with a notch. I lamented how poorly macOS interacts with the notch, specifically how menu bar apps and icons simply get hidden if you have too many to display. Lots of folks on Mastodon offered various solutions, and some readers emailed me with options as well. I figured it was worth making a separate post about this specific issue to list all of the workarounds and alternatives. It is clear that this is a widespread problem that users are having.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;Last week I &lt;a href=&quot;/blog/2023/12/04/new-m3-mbp/&quot;&gt;wrote about setting up a new MacBook Pro&lt;/a&gt; — my first Apple Silicon Mac, and thus my first MacBook with a notch. I lamented how poorly macOS interacts with the notch, specifically how menu bar apps and icons simply get hidden if you have too many to display. Lots of folks on Mastodon offered various solutions, and some readers emailed me with options as well. I figured it was worth making a separate post about this specific issue to list all of the workarounds and alternatives. It is clear that this is a widespread problem that users are having.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;problems-with-the-notch&quot;&gt;Problems with the notch&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2023/12/04/new-m3-mbp/&quot;&gt;I previously wrote&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I have gripes about the notch. There isn’t enough room to display all of my menu bar apps and icons, so… they just get hidden!? Apparently, everyone in Cupertino thinks the best solution to this problem is to hide them with zero indication that there are more that simply can’t be displayed because of the notch. I wasted so much time trying to figure out why Little Snitch and 1Password were not running on my new machine. Was there a compatibility issue with Apple Silicon that I didn’t know about? That couldn’t be. In turns out, they were running the whole time but they were hidden by the notch.&lt;/p&gt;

  &lt;p&gt;[…]&lt;/p&gt;

  &lt;p&gt;This “design” (or lack thereof) is so dumb. It is utterly ridiculous to me that this is still how it “works” &lt;strong&gt;two years after&lt;/strong&gt; the introduction of the redesigned MacBook Pro with a notch. How hard could it be to add an overflow menu with a “«” (or should it be “»”?) button that shows the remaining apps and icons that can’t be displayed? This entire situation with the notch is ironic, because the iPhone notch and “dynamic island” are so &lt;strong&gt;thoughtfully designed&lt;/strong&gt; with zero compromises regarding the functionality of iOS. In fact, they actually provide a &lt;em&gt;better&lt;/em&gt; user experience. Yet on the Mac, how the notch interacts with macOS is laughably incompetent. It is shockingly lazy regarding attention to detail, and results in an outright disruptive and confusing user experience.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And as &lt;a href=&quot;https://mjtsai.com/blog/2023/12/08/mac-menu-bar-icons-and-the-notch/&quot;&gt;Michael Tsai pointed out&lt;/a&gt;, the situation from a developer’s perspective is just as bad:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Aside from the problem of the icons being hidden, there’s no API for an app to &lt;em&gt;tell&lt;/em&gt; whether its icon is hidden. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSStatusItem.isVisible&lt;/code&gt; tells you whether the app or user &lt;em&gt;wants&lt;/em&gt; the icon to be visible, but it will return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; if the icon is hidden in the notch—or even if it’s hidden behind a menu title.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;first-party-workarounds&quot;&gt;First-party workarounds&lt;/h3&gt;

&lt;p&gt;If you prefer &lt;em&gt;not&lt;/em&gt; to install any third-party apps (like me), there are a number of steps you can take to alleviate your crowded menu bar and possibly remedy the issue entirely (which I’ve successfully done). My goal with the steps below is to get all of my apps and icons to display when Finder is active. Some applications have more menu items that span across the other side of the notch, and in this scenario there is not much we can do to prevent hidden menu bar icons — which was actually the case &lt;em&gt;before&lt;/em&gt; the notch existed for applications with a very large number of menu items.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Move macOS system-provided icons into Control Center. A number of icons can be configured to display only in Control Center, which frees up space in your menu bar for icons and third-party apps that must be displayed in the menu bar. For example, you can move WiFi, Bluetooth, Battery level, AirDrop, etc. into Control Center. Additionally, some icons can be configured to only display when they are active, like Focus status or Screen Mirroring.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reorder your apps and icons from right to left to display the ones that are &lt;em&gt;most important&lt;/em&gt; to you on the right and least important on the left. The result is that the least important icons are the ones that get hidden by application menus or the notch, while the most important icons are more likely to remain visible. For example, I like having Time Machine in the menu bar, but it doesn’t matter if it gets hidden while I’m working in an app with a large menu that spans to the other side of the notch, thus hiding Time Machine. Therefore, I have placed Time Machine in the left-most position. Furthermore, I place system icons that display &lt;em&gt;only when active&lt;/em&gt; (like Focus status) in the &lt;em&gt;right most&lt;/em&gt; position. This is important for me, because I want to make sure I always see when these things are active.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reduce the menu bar item spacing and padding via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDefaults&lt;/code&gt;. (Thanks to &lt;a href=&quot;https://mastodon.social/@gummibando/111546699397435187&quot;&gt;Oliver Busch&lt;/a&gt; for the tip. Also see &lt;a href=&quot;https://www.reddit.com/r/MacOS/comments/16lpfg5/hidden_preference_to_alter_the_menubar_spacing/&quot;&gt;this Reddit post&lt;/a&gt;.) There are two defaults settings you can configure via Terminal, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSStatusItemSpacing&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSStatusItemSelectionPadding&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Read the current defaults:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defaults &lt;span class=&quot;nt&quot;&gt;-currentHost&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-globalDomain&lt;/span&gt; NSStatusItemSpacing
defaults &lt;span class=&quot;nt&quot;&gt;-currentHost&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-globalDomain&lt;/span&gt; NSStatusItemSelectionPadding
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; These values are &lt;em&gt;not set&lt;/em&gt; by default. This means you will get an error that the keys and values do not exist if you have not previously set them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write the defaults by providing an integer value:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defaults &lt;span class=&quot;nt&quot;&gt;-currentHost&lt;/span&gt; write &lt;span class=&quot;nt&quot;&gt;-globalDomain&lt;/span&gt; NSStatusItemSpacing &lt;span class=&quot;nt&quot;&gt;-int&lt;/span&gt; 12
defaults &lt;span class=&quot;nt&quot;&gt;-currentHost&lt;/span&gt; write &lt;span class=&quot;nt&quot;&gt;-globalDomain&lt;/span&gt; NSStatusItemSelectionPadding &lt;span class=&quot;nt&quot;&gt;-int&lt;/span&gt; 8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Unfortunately, you will need to logout and login for the changes to take effect.&lt;/p&gt;

&lt;p&gt;After some experimentation, I landed on the values above — &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;12&lt;/code&gt; for spacing and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8&lt;/code&gt; for padding fit my needs. You should experiment as well. The smallest tolerable values are probably around &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remove the values to restore the default behavior:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defaults &lt;span class=&quot;nt&quot;&gt;-currentHost&lt;/span&gt; delete &lt;span class=&quot;nt&quot;&gt;-globalDomain&lt;/span&gt; NSStatusItemSpacing
defaults &lt;span class=&quot;nt&quot;&gt;-currentHost&lt;/span&gt; delete &lt;span class=&quot;nt&quot;&gt;-globalDomain&lt;/span&gt; NSStatusItemSelectionPadding
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again, you will need to logout and login for the changes to take effect.&lt;/p&gt;

&lt;h3 id=&quot;third-party-solutions&quot;&gt;Third-party solutions&lt;/h3&gt;

&lt;p&gt;There are several third-party applications to help organize and manage all of your menu bar apps and icons. The apps I have listed below seem to capture the three broad categories of possible solutions. I know there are a few others out there with similar functionality, but I think these are the most representative.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Bartender&lt;/strong&gt;. (Paid with Free Trial. &lt;a href=&quot;https://www.macbartender.com&quot;&gt;Website&lt;/a&gt;). This one is very advanced and complex with elaborate customization options, including styling the entire menu bar. It works well, but I found it to be very heavy-handed and a bit cumbersome for my needs. It felt clunky and glitchy to me, in ways that I think the developer has tried hard to mitigate, but I imagine Apple does not make developing this sort of app easy. (I don’t think there are any public APIs for this stuff.) Bartender seems to rely on some hacks (like screen recording) to dynamically hide and show your overflowed menu bar apps. Like iOS, macOS now has a privacy feature where you are notified when apps are using the camera, microphone, screen recording, etc. On iOS there’s a little dot indicator that shows in the status bar, on macOS there’s an icon that displays in your menu bar. One specific issue I had with Bartender, was that the privacy indicator icon for screen recording appears very frequently, which was annoying.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Hidden Bar&lt;/strong&gt;. (Free. &lt;a href=&quot;https://apps.apple.com/us/app/hidden-bar/id1452453066&quot;&gt;Mac App Store&lt;/a&gt;, &lt;a href=&quot;https://github.com/dwarvesf/hidden&quot;&gt;GitHub&lt;/a&gt;). This one is extremely lightweight, providing a simple chevron “&amp;lt;” icon to expand and collapse the extra icons. You can customize which icons are always shown, and which are hidden when the menu is collapsed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Say No to Notch&lt;/strong&gt;. (Free with IAPs, &lt;a href=&quot;https://apps.apple.com/us/app/say-no-to-notch/id1639306886&quot;&gt;Mac App Store&lt;/a&gt;). This is another heavy-handed approach. This one adds a letterboxed-style black bar to the top of your screen and shifts the entire menu bar down below the notch — along with the entire contents of your screen. I do not like the reduced screen real estate that this creates.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of these apps have pros and cons. Unfortunately, I was not quite satisfied with any of them. However, your experience and preferences might be very different!&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;As noted above, I have opted for the collection of first-party workarounds. For me, all of the third-party apps felt cumbersome, wonky, lacking, or simply did not match my aesthetic taste. That’s not to say they aren’t great apps and creative solutions — they just aren’t for me. In any case, I hope this post has been helpful if you’ve been searching for solutions to the MacBook notch problem.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/12/16/macbook-notch-and-menu-bar-fixes/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/12/15/mastodon/</id>
        <link href="https://www.jessesquires.com/blog/2023/12/15/mastodon/" />
        <title>Find me on Mastodon</title>
        <published>2023-12-15T16:28:37-08:00</published>
        <updated>2023-12-15T16:28:37-08:00</updated>

        <category term="essays" />
        <category term="social-media" /><category term="mastodon" />
        <summary type="html">&lt;p&gt;With the recent announcement that &lt;a href=&quot;https://www.theverge.com/2023/12/13/24000120/threads-meta-activitypub-test-mastodon&quot;&gt;Threads.net is starting to integrate with ActivityPub&lt;/a&gt;, I figured it would be a good time to remind folks that you can follow me on Mastodon at &lt;a href=&quot;https://mastodon.social/@jsq&quot;&gt;@jsq@mastodon.social&lt;/a&gt;. Many of my connections have moved over from Twitter — but sadly, not all of them. Although, some have moved over to Threads. If you would like to join &lt;a href=&quot;https://mastodon.social&quot;&gt;Mastodon.social&lt;/a&gt;, you can &lt;a href=&quot;https://mastodon.social/invite/sHEgnWM2&quot;&gt;use my invite link&lt;/a&gt;.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;With the recent announcement that &lt;a href=&quot;https://www.theverge.com/2023/12/13/24000120/threads-meta-activitypub-test-mastodon&quot;&gt;Threads.net is starting to integrate with ActivityPub&lt;/a&gt;, I figured it would be a good time to remind folks that you can follow me on Mastodon at &lt;a href=&quot;https://mastodon.social/@jsq&quot;&gt;@jsq@mastodon.social&lt;/a&gt;. Many of my connections have moved over from Twitter — but sadly, not all of them. Although, some have moved over to Threads. If you would like to join &lt;a href=&quot;https://mastodon.social&quot;&gt;Mastodon.social&lt;/a&gt;, you can &lt;a href=&quot;https://mastodon.social/invite/sHEgnWM2&quot;&gt;use my invite link&lt;/a&gt;.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;As I &lt;a href=&quot;/blog/2022/12/14/mastodon/&quot;&gt;previously wrote&lt;/a&gt;, Mastodon is pretty fucking awesome and I really enjoy it. It is currently my only (active) social media account. I am &lt;a href=&quot;/blog/2023/02/06/goodbye-twitter/&quot;&gt;no longer using Twitter&lt;/a&gt;, for reasons I hope should be obvious by now. Seriously, what a shitshow. However, my posts on this blog &lt;strong&gt;are&lt;/strong&gt; still automatically posted to Twitter for now. (That’s another reason for this post, so I don’t have to login to that awful website.)&lt;/p&gt;

&lt;p&gt;I have no plans to create an account on Threads. Let’s be honest, Facebook is truly not that much better than Twitter. All (for-profit) social media is predatory, manipulative, invasive, and socially destructive.&lt;/p&gt;

&lt;p&gt;If you were hoping to find me on Threads, sorry. But if Threads follows through on its promise to federate, then that shouldn’t be a problem for either of us.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/12/15/mastodon/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/12/07/going-indie-4/</id>
        <link href="https://www.jessesquires.com/blog/2023/12/07/going-indie-4/" />
        <title>Going Indie: bookkeeping and invoicing</title>
        <published>2023-12-07T08:53:52-08:00</published>
        <updated>2023-12-07T08:53:52-08:00</updated>

        <category term="essays" />
        <category term="series-going-indie" /><category term="indie-dev" /><category term="contracting" /><category term="freelance" /><category term="consulting" />
        <summary type="html">&lt;p&gt;Welcome to the fourth (and I think final!) part of my going indie series! Previously, I discussed the exciting topics of &lt;a href=&quot;/blog/2023/08/16/going-indie-3/&quot;&gt;business structure, taxes, and retirement&lt;/a&gt;. Today, I’m going to discuss two final topics: bookkeeping and invoicing. The first is about how to correctly track your income and expenses, and the second is about making sure you get paid! Because this is capitalism, baby — we are not here for passion, we are here to pay those bills.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;Welcome to the fourth (and I think final!) part of my going indie series! Previously, I discussed the exciting topics of &lt;a href=&quot;/blog/2023/08/16/going-indie-3/&quot;&gt;business structure, taxes, and retirement&lt;/a&gt;. Today, I’m going to discuss two final topics: bookkeeping and invoicing. The first is about how to correctly track your income and expenses, and the second is about making sure you get paid! Because this is capitalism, baby — we are not here for passion, we are here to pay those bills.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Disclaimer: As I have previously disclaimed, I am not an accountant. But the content in this post is what I have learned from my accountant, as well as multiple years of being indie. Accountants are pretty rad, you should get one! They will teach you a lot and when the IRS comes knocking with an audit, you’ll be glad to have someone on your side who understands our deliberately esoteric and obtuse tax code that was written and paid for by neoliberal sociopaths.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;accounts&quot;&gt;Accounts&lt;/h3&gt;

&lt;p&gt;I mentioned bank accounts in &lt;a href=&quot;/blog/2023/08/16/going-indie-3/&quot;&gt;the previous post&lt;/a&gt;, but I’ll reiterate briefly. It would be wise to open &lt;em&gt;new&lt;/em&gt; bank accounts that are solely for your business. I would recommend having one checking account and one credit card, at the very least.&lt;/p&gt;

&lt;p&gt;If you are a sole proprietor, you can open regular accounts. Sole proprietors do not need to open “business” accounts (although you can, if you want). If you have another business structure (as discussed &lt;a href=&quot;/blog/2023/08/16/going-indie-3/&quot;&gt;previously&lt;/a&gt;), then you might require business accounts.&lt;/p&gt;

&lt;p&gt;Anyway — the purpose of opening new accounts is to keep your business income and expenses separate from all of your personal finances. Do the simple thing first, and make adjustments as needed.&lt;/p&gt;

&lt;h3 id=&quot;bookkeeping-software&quot;&gt;Bookkeeping software&lt;/h3&gt;

&lt;p&gt;You are going to need software for this, preferably something that automatically pulls in transactions from your checking and credit card accounts. Then you can categorize your income and expenses accordingly, which can hopefully be automated as well.&lt;/p&gt;

&lt;p&gt;I use &lt;a href=&quot;https://quickbooks.intuit.com&quot;&gt;QuickBooks&lt;/a&gt; and I highly recommend it. Yes, it is a bit “corporate” and maybe not the most delightful piece of software — but it works, it is basically an industry standard, and your accountant is most likely already very familiar with it. That last point is key. QuickBooks makes working with your accountant easy because you can give them special accountant access. There are a lot of different versions and plans with various features. I use QuickBooks Self-Employed, which is pretty lightweight and fits my needs just fine. If you have an LLC or S-Corp, you might want to consider their other offerings.&lt;/p&gt;

&lt;p&gt;For the rest of this post, I’ll assume you are using QuickBooks Self-Employed. However, if you are using an alternative I’m sure it has similar features.&lt;/p&gt;

&lt;h3 id=&quot;how-to-keep-your-books&quot;&gt;How to keep your books&lt;/h3&gt;

&lt;p&gt;If you have ever used a personal finance tracking tool like Mint, then you’ll feel comfortable in QuickBooks. The main tasks at hand are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Track your income and expenses. That is, hook up QuickBooks to your accounts and let it pull in all of your transactions. Done.&lt;/li&gt;
  &lt;li&gt;Categorize everything correctly. QuickBooks has all the categories you might need. Most of this categorization happens automatically. If needed, you can setup custom rules.&lt;/li&gt;
  &lt;li&gt;Keep receipts! (And attach them to their corresponding transactions in QuickBooks.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you do these things and keep track regularly (for example, I do my bookkeeping every Friday), then at the end of the year you can use QuickBooks to generate all the various reports you need for your taxes. Receipts are necessary documentation in case you get audited, and after uploading them to QuickBooks your accountant will be able to access them.&lt;/p&gt;

&lt;p&gt;The most difficult part is categorization, but that’s not too hard. Once you learn how all of your different expenses should be tracked, this becomes easy to maintain. Many items have obvious categories: meals, travel, computers, software, etc. Here are some of the not-so-obvious things to track:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If you need to deposit money into your business account, categorize this as a “personal deposit”. The only time I ever did this was when I first started out and had an empty bank account. The point here is to not mistakenly track a deposit of your own cash as “income”. QuickBooks will omit “personal deposits” in your annual income reports.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When you withdraw money to pay yourself, categorize this as a “personal withdrawal”. Typically, when money is leaving your account this would be considered an expense, but that is not the case in this situation. Thus, you want to avoid accidentally mislabeling this transaction. QuickBooks will omit “personal withdrawals” in your annual expense reports.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Similar to paying yourself, withdrawals for retirement accounts like a Solo 401(k) contributions should be labeled as a “personal withdrawal”. Be sure to track your contributions and consult with your accountant and financial advisor.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Claim a home office. After doing this, you can claim rent, energy (gas and electricity), and renter’s insurance. (Or if you own a home, your mortgage and homeowner’s insurance.) The formula for this involves finding the square footage of your office as a percentage of the total square footage of your entire apartment or home. Then you can split expenses accordingly. For example, if your home office is 10% of your apartment, then you can deduct 10% of your rent as a business expense.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Health insurance premiums. These monthly expenses can be deducted.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pay other utilities like Internet and cell phone via your business account and split them 50-50 as personal and business expenses.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Large computer expenses, like a new laptop should usually be categorized as a “fixed asset” rather than a normal business expense. This is because these devices are kept in use for multiple years and depreciate over time. Consult your accountant.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, for subscription-based software I highly recommend paying &lt;em&gt;annually&lt;/em&gt; instead of monthly, if you can. A single transaction with a single receipt is much easier to track than 12 transactions and 12 receipts. Plus, many services offer discounts if you pay annually.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-qualifies-as-an-expense&quot;&gt;What qualifies as an expense?&lt;/h3&gt;

&lt;p&gt;I have already named and alluded to a number of different expenses you can claim. My understanding is that what can be considered an expense is quite broad. According to my accountant, &lt;em&gt;&lt;strong&gt;anything&lt;/strong&gt; that helps you run your business&lt;/em&gt; is usually a valid expense. As I mentioned above, your home office and any related costs can be expensed. Expense all software and services you use. Conferences, along with &lt;em&gt;all&lt;/em&gt; associated costs (travel, food, etc.), are valid expenses. Anything broadly relating to “professional development” is a valid expense. If working from a coffee shop for the day, anything you purchase can be expensed.&lt;/p&gt;

&lt;p&gt;Again, consult your accountant. But one thing I learned over the years is that when I first started, I was &lt;em&gt;way too conservative&lt;/em&gt; in tracking expenses. For my first year, I had hardly any expenses. I thought, “well, all I really did was sit at my desk at home.” I definitely missed out on claiming some valid expenses that year.&lt;/p&gt;

&lt;p&gt;So, my advice is to freely claim as many expenses as possible but &lt;strong&gt;stay organized&lt;/strong&gt; with your bookkeeping. Then during tax season, if you claimed something that is not a valid expense, it is easy to throw out. It is much harder, if not impossible, to try to track down expenses you might have missed over the last 12 months.&lt;/p&gt;

&lt;h3 id=&quot;creating-invoices&quot;&gt;Creating invoices&lt;/h3&gt;

&lt;p&gt;Invoices are another “first impression” for your clients. They should be professional and high quality. They should &lt;em&gt;look&lt;/em&gt; professional and high quality. Don’t pick some random, shitty invoice template. Take the time to make a nice template — you only have to do it once.&lt;/p&gt;

&lt;p&gt;QuickBooks has some built-in invoicing and payment processing features, but I have never used them. The generated invoices are rather bland and cannot be customized. I don’t think they look very nice, nor professional. As far as payments go, all of my clients use ACH transfers — so I give them my account information and they direct deposit payments. I imagine this is pretty common, so you probably do not need to find payment processing / invoicing software.&lt;/p&gt;

&lt;p&gt;I have been very happy using &lt;a href=&quot;https://www.apple.com/pages/&quot;&gt;Pages&lt;/a&gt; to create my invoices. Pages has a great invoice template that you can use as a starting point. I recommend customizing it with your own branding, or create a template from scratch and use the provided template as a guide. You can export any document in Pages as a template via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File &amp;gt; Save as Template&lt;/code&gt;. If you don’t want to use Pages, I’m sure there are plenty of other options out there.&lt;/p&gt;

&lt;p&gt;As far as content goes, my invoices contain:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The date the invoice is being sent.&lt;/li&gt;
  &lt;li&gt;An invoice number. I use the date for this. For example, an invoice sent on April 1, 1976 would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#19760401&lt;/code&gt;. I find that this makes it the easiest to keep track of. Not to mention, it is consistent and makes them easy to sort.&lt;/li&gt;
  &lt;li&gt;My contact info.&lt;/li&gt;
  &lt;li&gt;A “To:” field with the client’s contact info.&lt;/li&gt;
  &lt;li&gt;The project name.&lt;/li&gt;
  &lt;li&gt;A table with my hours for each day, rate, and a total cost.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sending-invoices&quot;&gt;Sending invoices&lt;/h3&gt;

&lt;p&gt;My preference is to send invoices every two weeks and request that they be fulfilled within two weeks. To me, this is “the sweet spot”. I prefer getting paid as early as possible because I am not in the business of giving interest-free loans to companies. The sooner you can make your monthly contribution to your retirement account (or other investments), the better. Even in full-time positions, there is no &lt;em&gt;real&lt;/em&gt; reason that workers can’t get paid at the end of every day for that day’s work. This would be especially impactful for low-wage workers for whom waiting two weeks for payment can be seriously precarious. Delayed payments for labor are about power and subjugation. But, I digress.&lt;/p&gt;

&lt;p&gt;The downside of more frequent invoicing is that you have more work to do for bookkeeping. But, it’s not that bad. Unfortunately, due to the archaic bureaucracy present in many organizations, my preferences are often not possible to accommodate. However, sometimes clients are, surprisingly, interested in more frequent invoicing. I have experienced all of the following: weekly invoices with weekly payments, bi-weekly invoices and bi-weekly payments, monthly invoices with monthly payments.&lt;/p&gt;

&lt;p&gt;Know your preferences and communicate them, but know that your client may not be able to accommodate you. The frequency of invoicing and payments is something to be negotiated with each client. Make sure you establish and confirm these details at the start of your contract to avoid confusion later.&lt;/p&gt;

&lt;p&gt;For all of my work so far, I have sent pdf invoices via email to the client. Depending on the organization, this sometimes goes to the accounting department, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accounting@company.com&lt;/code&gt; or something similar.&lt;/p&gt;

&lt;h3 id=&quot;how-to-automate-invoicing&quot;&gt;How to automate invoicing&lt;/h3&gt;

&lt;p&gt;This is a bonus section to share a bit of my workflow. I have yet to figure out how to &lt;em&gt;fully&lt;/em&gt; automate invoices, but I’ve gotten pretty close by eliminating a lot of tedious, repetitive steps. If you have additional tips, let me know! Here’s how I handle this:&lt;/p&gt;

&lt;p&gt;I setup an email template for the client. Basically, you want to write a sample email and save it as a draft. Enter the client’s email in the “To:” field as if it is a real email. Add all of your content. I keep my emails brief, &lt;em&gt;“Hello &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NAME&lt;/code&gt;! Here’s my invoice for the month. Let me know if you have any questions!”&lt;/em&gt; Something like that. I always set the subject to “Invoice - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DATE&lt;/code&gt;” and I have an email signature with my contact info.&lt;/p&gt;

&lt;p&gt;For Fastmail and Mail.app on macOS, you can drag this saved draft to a new folder called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Templates/&lt;/code&gt; to save it as a template. I’m sure other email clients and services are similar. When you are ready to send an invoice, navigate to the correct template email. In Mail.app, you can right-click and click “Send Again”, which generates a new email from the template. Then fill-in the details, attach the pdf invoice, and send! (Again, I’m sure other mail clients can do this.)&lt;/p&gt;

&lt;p&gt;While working, every day I track and record my hours on the current invoice. That is, updating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.pages&lt;/code&gt; file. Then, I have an AppleScript to automatically export the pages file as a pdf. (You can find &lt;a href=&quot;https://gist.github.com/jessesquires/93401538a94fb6b8cdbc56ca673c8e8a&quot;&gt;the script here&lt;/a&gt;.) This saves me a handful of tedious clicks.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;That’s everything I have to share about bookkeeping and invoicing, and how I deal with these tasks as an indie developer. And this post concludes my series on &lt;em&gt;Going Indie&lt;/em&gt; — at least for now. If I think of other topics or if readers have a lot of questions, I will certainly write more.&lt;/p&gt;

&lt;p&gt;If you’ve been following this series and you’ve reached this point, thank you for letting me share my thoughts and experience with you. I hope you’ve enjoyed it!&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/12/07/going-indie-4/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/12/06/xcode-shell-env/</id>
        <link href="https://www.jessesquires.com/blog/2023/12/06/xcode-shell-env/" />
        <title>Xcode does not have access to your shell environment</title>
        <published>2023-12-06T10:19:56-08:00</published>
        <updated>2023-12-15T15:50:32-08:00</updated>

        <category term="software-dev" />
        <category term="xcode" /><category term="apple-silicon" /><category term="m3" /><category term="homebrew" />
        <summary type="html">&lt;p&gt;I recently discovered, while &lt;a href=&quot;/blog/2023/12/04/new-m3-mbp/&quot;&gt;setting up my first Apple Silicon Mac&lt;/a&gt;, that Xcode does not have access to your shell environment. But there’s one caveat to that. (Thanks to &lt;a href=&quot;https://mastodon.social/@NeoNacho/111494454201420440#.&quot;&gt;Boris for confirming&lt;/a&gt;!) This post will hopefully be a reminder to my future self when I encounter this issue again.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;I recently discovered, while &lt;a href=&quot;/blog/2023/12/04/new-m3-mbp/&quot;&gt;setting up my first Apple Silicon Mac&lt;/a&gt;, that Xcode does not have access to your shell environment. But there’s one caveat to that. (Thanks to &lt;a href=&quot;https://mastodon.social/@NeoNacho/111494454201420440#.&quot;&gt;Boris for confirming&lt;/a&gt;!) This post will hopefully be a reminder to my future self when I encounter this issue again.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;I realized the problem when an Xcode build failed because a Run Script &lt;a href=&quot;https://developer.apple.com/documentation/xcode/customizing-the-build-phases-of-a-target&quot;&gt;Build Phase&lt;/a&gt; that runs &lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;SwiftLint&lt;/a&gt; failed because the SwiftLint binary could not be found. I have SwiftLint installed via &lt;a href=&quot;https://brew.sh&quot;&gt;Homebrew&lt;/a&gt;. I knew SwiftLint was in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt; because I could run it successfully on the command line. This meant Xcode did not have access to my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt; (and, as I learned later, my entire shell environment).&lt;/p&gt;

&lt;p&gt;This only started to happen after switching from an Intel Mac to an Apple Silicon Mac — and that was the issue. Homebrew &lt;a href=&quot;https://docs.brew.sh/Installation&quot;&gt;installs at different locations&lt;/a&gt; for Intel (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/local&lt;/code&gt;) and Apple Silicon (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt/homebrew&lt;/code&gt;). Invoking SwiftLint from a Run Script Build Phase in Xcode on Intel Macs &lt;em&gt;just happens to work&lt;/em&gt; because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/local&lt;/code&gt; is part of your default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt;. To fix the issue on Apple Silicon Macs, you need to tell Xcode where to look for Homebrew packages in your script.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:/opt/homebrew/bin&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 class=&quot;text-center text-light-dark&quot;&gt;* * *&lt;/h4&gt;

&lt;p&gt;Anyway, the moral of this story is that Xcode does not have access to your shell environment. This is not necessarily an obvious thing, especially on Intel machines. Xcode only gets whatever the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt; is, configured via launch services — &lt;strong&gt;unless&lt;/strong&gt; you launch it through a terminal. What this means is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xcodebuild&lt;/code&gt; run from terminal and Xcode could end up with potentially different behavior in their Run Script Build Phases because they expose different environments. Good to know!&lt;/p&gt;

&lt;div class=&quot;d-block bg-light-dark pt-3 px-3 pb-0 my-3 border border-2 border-secondary rounded update-notice&quot;&gt;
    &lt;h5 id=&quot;updated-15-december-2023&quot;&gt;
        &lt;a href=&quot;#updated-15-december-2023&quot; class=&quot;text-reset&quot;&gt;&lt;i class=&quot;bi bi-link&quot;&gt;&lt;/i&gt; Update&lt;/a&gt;
        &lt;small class=&quot;text-body-secondary&quot; title=&quot;15 Dec 2023 03:50:32 PM PST&quot;&gt;
            &lt;i&gt;15 December 2023&lt;/i&gt;
        &lt;/small&gt;
    &lt;/h5&gt;
    
&lt;p&gt;Thanks to Dave for &lt;a href=&quot;https://iosdevweekly.com/issues/640?#tools&quot;&gt;linking to this post this week&lt;/a&gt; and sharing a very relevant tip on this topic:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Don’t forget you can still set environment variables from your project’s scheme configuration. Edit your scheme from the Product menu, select the Arguments tab against the Run behaviour, and set Environment Variables.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;

&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/12/06/xcode-shell-env/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/12/05/m3-performance/</id>
        <link href="https://www.jessesquires.com/blog/2023/12/05/m3-performance/" />
        <title>M3 Max Performance</title>
        <published>2023-12-05T10:52:20-08:00</published>
        <updated>2023-12-05T10:52:20-08:00</updated>

        <category term="software-dev" />
        <category term="apple-silicon" /><category term="m3" /><category term="xcode" />
        <summary type="html">&lt;p&gt;After &lt;a href=&quot;/blog/2023/12/04/new-m3-mbp/&quot;&gt;setting up my new M3 MacBook Pro&lt;/a&gt;, I decided to do some quick performance comparisons with my old Intel machine. Anecdotally, I would have told you that it is insanely faster but seeing the data made my jaw drop.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;After &lt;a href=&quot;/blog/2023/12/04/new-m3-mbp/&quot;&gt;setting up my new M3 MacBook Pro&lt;/a&gt;, I decided to do some quick performance comparisons with my old Intel machine. Anecdotally, I would have told you that it is insanely faster but seeing the data made my jaw drop.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;First, here are the specs for the two machines:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2020 13” MacBook Pro, Intel 2.3 Ghz Quad-Core i7, 32GB RAM&lt;/li&gt;
  &lt;li&gt;2023 14” MacBook Pro, M3 Max (16‑core CPU, 40‑core GPU), 128GB memory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do I really &lt;em&gt;need&lt;/em&gt; an M3 Max? Probably not, but I waited until the &lt;em&gt;third generation&lt;/em&gt; of M-series chips to upgrade, I wanted to make it count, and I want to keep this machine for years to come. Also, as &lt;a href=&quot;/blog/2023/04/10/going-indie/&quot;&gt;an indie dev&lt;/a&gt; I get to write this off on my taxes as a business expense. :)&lt;/p&gt;

&lt;h3 id=&quot;xcode-performance&quot;&gt;Xcode Performance&lt;/h3&gt;

&lt;p&gt;Before erasing and resetting my old laptop, I wanted to see how Xcode performance compared between the Intel and the M3. I did not do an incredibly “scientific” comparison between these two machines, but more of a real world experiment. For example, I did not quit every single running application, etc. However, I was not actively using either machine during the test. I used Migration Assistant to setup the new M3 MacBook from the old Intel MacBook, so they were at least configured as similarly as possible.&lt;/p&gt;

&lt;p&gt;I built and ran the same Xcode project on both. The project is massive, with over 100 monthly committers according to GitHub stats. It’s an iOS app that has started to remind me of what it used to be like working on the Instagram iOS app. If you’ve ever worked on one of these extremely large apps, you know that Xcode &lt;em&gt;is painfully slow&lt;/em&gt; — which is why these big companies implement alternative build systems like Buck and Bazel. This project contains around 1.5 million lines of code, including third-party dependencies — based on a naive run of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wc -l&lt;/code&gt;. It is Objective-C and Swift, but mostly Swift. The majority of Objective-C code comes from third-party dependencies.&lt;/p&gt;

&lt;p&gt;Below are the results for various tasks. I have listed the build times as reported by Xcode’s build logs in the sidebar.&lt;/p&gt;

&lt;p&gt;A clean build of the project in Xcode:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;M3 Max: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2m 23s&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Intel i7: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;11m 32s&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s about a 5.5x speed up! And, of course, the fans on the Intel were going full speed the entire time. The fans on the M3 turned on briefly and quietly for maybe 30-60 seconds, which I almost didn’t notice because the fans on the Intel were so damn loud.&lt;/p&gt;

&lt;p&gt;Next, I tried running an incremental build:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;M3 Max: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;20s&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Intel i7: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;66s&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And finally, I did a build-and-run, measuring a cold launch of the iOS simulator:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;M3 Max: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;51s&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Intel i7: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2m 31s&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The performance improvement is simply unbelievable. Using this new M3 machine is an insanely different experience. The impact on my development workflow is &lt;strong&gt;dramatic&lt;/strong&gt; and, honestly, unthinkable. I have never experienced such a profound hardware upgrade. My iteration cycles in Xcode are almost instant now. Previously, I dreaded having to do a clean build on the Intel machine — nearly 12 minutes is enough time to do all sorts of other things! Now, a clean build is simply no issue. And for smaller projects, every action in Xcode feels nearly instantaneous on the M3.&lt;/p&gt;

&lt;h3 id=&quot;other-notes&quot;&gt;Other notes&lt;/h3&gt;

&lt;p&gt;Battery life is incredible. Even when using Xcode, the battery life is impressive. On the Intel machine, the battery would be nearly drained after only 1-2 hours of using Xcode. On the M3 machine, I’ve been able to go entire work days on a single charge.&lt;/p&gt;

&lt;p&gt;I did not measure generally daily usage and tasks, but I can say with confidence that the M3 simply outperforms the Intel by orders of magnitude in every way imaginable. Everything is faster. Typically slow-to-launch apps like Photoshop launch almost instantly. Simply opening large Xcode projects on the Intel machine was usually a chore, but for the M3 it is effortless.&lt;/p&gt;

&lt;p&gt;When using Xcode for large projects like the one I described above, my Intel machine would &lt;em&gt;crawl&lt;/em&gt; — sometimes it would get so bogged down that it was almost unusable, preventing me from doing anything else. With the M3, I don’t even notice that Xcode is running when I switch to other tasks in other applications. My Intel machine would often beach-ball on just a normal day with normal tasks. I have yet to see a loading spinner on this new M3.&lt;/p&gt;

&lt;p&gt;I am very happy I finally upgraded to Apple Silicon. If, like me, you have been waiting “for the right moment” to upgrade from an Intel machine, now is the time.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/12/05/m3-performance/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/12/04/new-m3-mbp/</id>
        <link href="https://www.jessesquires.com/blog/2023/12/04/new-m3-mbp/" />
        <title>Setting up a new M3 MacBook Pro</title>
        <published>2023-12-04T11:00:48-08:00</published>
        <updated>2023-12-04T11:00:48-08:00</updated>

        <category term="essays" />
        <category term="apple-silicon" /><category term="m3" />
        <summary type="html">&lt;p&gt;I typically try to keep devices for as long as I can — historically, that’s been around 5-6 years for laptops. During the Intel era of MacBooks, the year-over-year spec bumps were usually not impactful enough to justify more frequent upgrades. However, the transition to Apple Silicon has changed that. I recently upgraded to my first M-series MacBook Pro.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;I typically try to keep devices for as long as I can — historically, that’s been around 5-6 years for laptops. During the Intel era of MacBooks, the year-over-year spec bumps were usually not impactful enough to justify more frequent upgrades. However, the transition to Apple Silicon has changed that. I recently upgraded to my first M-series MacBook Pro.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;I replaced my 2020 Intel 13” MacBook Pro, which had a 2.3 Ghz Quad-Core i7. I can’t remember, but I &lt;em&gt;think&lt;/em&gt; this was the highest-end processor you could get at the time for that model. This was the last generation of Intel Machines, which I waited to get until they &lt;a href=&quot;https://www.wsj.com/graphics/apple-still-hasnt-fixed-its-macbook-keyboard-problem/&quot;&gt;fixed those defective keyboards&lt;/a&gt;. I anticipated keeping that Intel machine well into 2025, but the insane performance of the M-series chips was too incredible to wait any longer. I upgraded to the newly released 14” MacBook Pro with an M3 Max — and in Space Black, of course. I hope to keep this machine for a while, and based on my experience so far, I think that will be easy to do.&lt;/p&gt;

&lt;p&gt;Overall, this is — by far — simply the best laptop I have ever used. It is the best Mac I have ever used.&lt;/p&gt;

&lt;h3 id=&quot;a-defective-magsafe-cable&quot;&gt;A defective MagSafe cable&lt;/h3&gt;

&lt;p&gt;Unfortunately, unboxing and initial setup were not without problems. I quickly realized that the laptop was not charging. The charging indicator light on the MagSafe cable connector also refused to light up. What it just the cable, or was it the MagSafe port on the laptop as well? Or worse? I tried charging with the USB-C cable and charger from my old Intel machine, along with every possible combination of the old and new charger with the old and new laptop with a USB-C cable. Everything worked with USB-C. It appeared that it was only the MagSafe cable. Finally, I ran &lt;a href=&quot;https://support.apple.com/en-us/102550&quot;&gt;Apple Diagnostics&lt;/a&gt; to be sure that nothing was wrong with the actual machine, which reported that everything was working properly. What a relief!&lt;/p&gt;

&lt;p&gt;Still, minor hardware issues like these do not instill confidence. Apple has a solid track record with hardware, but their serious issues with software quality are widely documented by now. All I could think was, &lt;em&gt;what else could be wrong?&lt;/em&gt; Seeing how this was my first M-series machine, I did not have an extra MagSafe cable around to verify that the machine was, in fact, ok. I stopped the setup process and waited until I could get to an Apple Store — the last thing I wanted was to fully setup and configure this new machine, only to find out it needed to be replaced.&lt;/p&gt;

&lt;p&gt;My experience at the Apple Store was frustrating, and honestly, somewhat laughable. The “genius” that assisted me plugged in my defective cable to his machine to verify it did not work — and that was it. I had to ask that we also plug-in a working MagSafe cable to verify that the MacBook Pro was also functioning properly. He did not run a diagnostic in the store, since I explained I had already done that.&lt;/p&gt;

&lt;p&gt;Because everything was still under warranty (of course), I owed nothing and we ordered a new replacement MagSafe cable because none were in stock. In the meantime, I could charge via USB-C. However, if my warranty had been expired, in addition to paying for a &lt;a href=&quot;https://www.apple.com/shop/product/MUVQ3AM/A/usb-c-to-magsafe-3-cable-2-m-space-black&quot;&gt;replacement MagSafe cable&lt;/a&gt;, Apple would have charged me $100 for “labor”. That’s right, one-hundred-fucking-dollars for a “genius” to plug in a cable. I think that is absurd, especially considering I did all of the actual work — debugging the entire issue at home, running diagnostics, and commuting to the store.&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;d-flex justify-content-center col-12  col-sm-8 col-md-6 &quot;&gt;
        &lt;figure&gt;
            &lt;img class=&quot;img-thumbnail img-fluid&quot; src=&quot;/img/blog/m3-repair.jpg&quot; title=&quot;MacBook Repair Receipt&quot; alt=&quot;MacBook Repair Receipt&quot; /&gt;
            &lt;div class=&quot;row&quot;&gt;
                &lt;div class=&quot;col-12 d-flex justify-content-center&quot;&gt;
                
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Apparently, plugging in a cable is a “LEVEL 1 HARDWARE REPAIR” — so call me a genius, because I plug in at least half a dozen cables every day. If my warranty had been expired, I would gladly pay for the replacement cable but there is no way I would have paid for this “repair”. What a joke!&lt;/p&gt;

&lt;h3 id=&quot;migration-assistant&quot;&gt;Migration Assistant&lt;/h3&gt;

&lt;p&gt;I used Migration Assistant to move all of my data from the Intel machine to the new M3 machine. It &lt;em&gt;mostly worked&lt;/em&gt;. A few apps did not transfer at all, for unknown reasons. Some apps transferred without their licenses, so I had to re-enter those. Not a big deal. The biggest issue was that &lt;a href=&quot;https://docs.brew.sh/Installation&quot;&gt;homebrew installations&lt;/a&gt; differ between Intel and Apple Silicon machines. I had to remove the old, migrated homebrew installation and re-install. Some of my dot files, configurations, and System Settings also had to be fixed. Overall, it was a decent experience and, while not perfect, Migration Assistant did save me a lot of time. Yet because of its imperfection and my paranoia about software quality, I double-checked everything.&lt;/p&gt;

&lt;p&gt;Fortunately for me, I &lt;em&gt;did not&lt;/em&gt; have to deal with hundreds of security-theater permissions prompts, like what Jason Snell (and many others) &lt;a href=&quot;https://sixcolors.com/post/2023/11/a-picture-is-worth-a-thousand-permissions-requests/&quot;&gt;have experienced when upgrading&lt;/a&gt;. However, I think your experience depends on &lt;em&gt;how&lt;/em&gt; you use Migration Assistant. Snell explains that he migrated using a backup. I followed &lt;a href=&quot;https://eclecticlight.co/2021/10/22/migrating-to-a-new-mac/&quot;&gt;Howard Oakley’s instructions&lt;/a&gt; on using Migration Assistant, which specify &lt;em&gt;skipping&lt;/em&gt;  Migration Assistant during initial setup, creating a new admin account on the new mac, &lt;em&gt;and then&lt;/em&gt; running Migration Assistant on both Macs to replace the admin account on the new Mac with the account from the old one.&lt;/p&gt;

&lt;h3 id=&quot;the-notch&quot;&gt;The Notch&lt;/h3&gt;

&lt;p&gt;I have gripes about the notch. There isn’t enough room to display all of my menu bar apps and icons, so… they just get hidden!? Apparently, everyone in Cupertino thinks the best solution to this problem is to hide them with zero indication that there are more that simply can’t be displayed because of the notch. I wasted so much time trying to figure out why Little Snitch and 1Password were not running on my new machine. Was there a compatibility issue with Apple Silicon that I didn’t know about? That couldn’t be. In turns out, they were running the whole time but they were hidden by the notch.&lt;/p&gt;

&lt;p&gt;Here are the apps and icons I had in my menu bar: &lt;a href=&quot;https://www.obdev.at/products/littlesnitch/index.html&quot;&gt;Little Snitch&lt;/a&gt;, &lt;a href=&quot;https://1password.com&quot;&gt;1Password&lt;/a&gt;, &lt;a href=&quot;https://harshil.net/pause&quot;&gt;Pause&lt;/a&gt;, &lt;a href=&quot;https://www.hexedbits.com/lucifer/&quot;&gt;Lucifer&lt;/a&gt;, &lt;a href=&quot;https://www.hexedbits.com/redeye/&quot;&gt;Red Eye&lt;/a&gt;, &lt;a href=&quot;https://tot.rocks&quot;&gt;Tot&lt;/a&gt;, &lt;a href=&quot;https://nordvpn.com&quot;&gt;NordVPN&lt;/a&gt;, Time Machine, Script Menu, Audio/Volume, Bluetooth, WiFi, Battery with percentage, Input Sources, Control Center, Date and Time with Day of the Week. I don’t think that’s unreasonable — 10 system icons and 7 third-party menu bar apps. On my 13” Intel MacBook Pro, the icons reached to about halfway across the screen. On the 14” M3 MacBook Pro, ironically a machine with a larger display, at least 3 icons get hidden.&lt;/p&gt;

&lt;p&gt;This “design” (or lack thereof) is so dumb. It is utterly ridiculous to me that this is still how it “works” &lt;strong&gt;two years after&lt;/strong&gt; the introduction of the redesigned MacBook Pro with a notch. How hard could it be to add an overflow menu with a “«” (or should it be “»”?) button that shows the remaining apps and icons that can’t be displayed? This entire situation with the notch is ironic, because the iPhone notch and “dynamic island” are so &lt;strong&gt;thoughtfully designed&lt;/strong&gt; with zero compromises regarding the functionality of iOS. In fact, they actually provide a &lt;em&gt;better&lt;/em&gt; user experience. Yet on the Mac, how the notch interacts with macOS is laughably incompetent. It is shockingly lazy regarding attention to detail, and results in an outright disruptive and confusing user experience.&lt;/p&gt;

&lt;p&gt;The best advice I got was to fix this with a 3rd-party app, &lt;a href=&quot;https://www.macbartender.com&quot;&gt;Bartender&lt;/a&gt;. I tried Bartender — and kudos to the developer for making a great app — however, I just didn’t like it. It felt clunky and glitchy to me, in ways that I think the developer has tried hard to mitigate, but I imagine Apple does not make developing this sort of app easy. It seems to rely on a lot of hacks (like screen recording!?) to dynamically hide and show your overflowed menu bar apps.&lt;/p&gt;

&lt;p&gt;The other option is &lt;a href=&quot;https://apps.apple.com/us/app/say-no-to-notch/id1639306886?mt=12&quot;&gt;Say No to Notch&lt;/a&gt;, which adds a letterboxed-style black bar to the top of your screen and shifts the entire menu bar down below the notch. Again, kudos to the developer for creativity. But, yuck! I did not like this solution either. Also, part of the appeal of the 14” display is that I’m getting a bit more screen real estate than my 13” Intel.&lt;/p&gt;

&lt;p&gt;The final option, and ultimately what I decided to do, is embrace the notch and deal with it. (And, of course, install &lt;a href=&quot;https://apps.apple.com/us/app/notchmeister/id1599169747?mt=12&quot;&gt;Notchmeister&lt;/a&gt;.) I removed as many of the system icons as I could from the menu bar — Bluetooth, WiFi, and Battery are now only in Control Center. Seeing the status of these now requires the extra click into Control Center, but it could be worse. I set Audio/Volume to only display when active — namely, so that the AirPods icon will appear in the menu bar when using them. Finally, I removed “Day of the Week” from showing with the Date and Time. Not a huge loss. For now, this configuration seems to work for my needs most of the time for the menu bar apps that I always keep open.&lt;/p&gt;

&lt;p&gt;However, some applications (like Xcode) have large file menus that extend to the other side of the notch, thus hiding the menu bar apps. While this was an issue on my Intel machine as well, it is more apparent and disruptive with the notch. There are also some menu bar apps I open temporarily, like &lt;a href=&quot;https://simgenie.app&quot;&gt;Sim Genie&lt;/a&gt;. This also causes problems. What I’ve done to address this is to order my menu bar apps and icons from &lt;em&gt;least important&lt;/em&gt; on the left to &lt;em&gt;most important&lt;/em&gt; on the right. The result is that the least important icons are the ones that get hidden by application menus or the notch, while the most important icons are more likely to remain visible. For example, Time Machine — which I want in the menu bar, but it doesn’t matter if this gets hidden while I’m working in Xcode and using Sim Genie.&lt;/p&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h3&gt;

&lt;p&gt;Despite a rough unboxing experience due to a defective cable and gripes about the notch, I absolutely love this M3 MacBook Pro. Migration Assistant worked reasonably well and after resolving or working around the issues I described above, this machine is fantastic. As I said in the beginning of this post, this is simply the best laptop I have ever used. Performance is insane — outright, but especially in comparison to my old Intel machine — and I’ll write about that soon.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/12/04/new-m3-mbp/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/11/14/fix-airpods-reset/</id>
        <link href="https://www.jessesquires.com/blog/2023/11/14/fix-airpods-reset/" />
        <title>How to fix malfunctioning AirPods by resetting them</title>
        <published>2023-11-14T12:21:41-08:00</published>
        <updated>2023-11-14T12:21:41-08:00</updated>

        <category term="software-dev" />
        <category term="airpods" />
        <summary type="html">&lt;p&gt;A few weeks ago my AirPods Pro 2 (with Lightning, not USB-C) suddenly started acting buggy and weird. The case no longer made the chime sound when plugging them in to charge. I stopped getting “Left Behind” notifications from the Find My app. After updating to iOS 17, I could not get them to install &lt;a href=&quot;https://www.macrumors.com/2023/11/09/airpods-pro-2-firmware-6b32/&quot;&gt;the latest firmware&lt;/a&gt;, which enables the new features for Adaptive Audio, Conversation Awareness, and Personalized Volume. I had been trying for weeks to &lt;a href=&quot;https://www.macrumors.com/how-to/update-airpods/&quot;&gt;follow the magic steps that will trigger a firmware update&lt;/a&gt; with no luck. Even worse, after a full charge of both the AirPods and the case, the batteries for all of them would drain to zero percent within 2-3 days.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;A few weeks ago my AirPods Pro 2 (with Lightning, not USB-C) suddenly started acting buggy and weird. The case no longer made the chime sound when plugging them in to charge. I stopped getting “Left Behind” notifications from the Find My app. After updating to iOS 17, I could not get them to install &lt;a href=&quot;https://www.macrumors.com/2023/11/09/airpods-pro-2-firmware-6b32/&quot;&gt;the latest firmware&lt;/a&gt;, which enables the new features for Adaptive Audio, Conversation Awareness, and Personalized Volume. I had been trying for weeks to &lt;a href=&quot;https://www.macrumors.com/how-to/update-airpods/&quot;&gt;follow the magic steps that will trigger a firmware update&lt;/a&gt; with no luck. Even worse, after a full charge of both the AirPods and the case, the batteries for all of them would drain to zero percent within 2-3 days.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;I have no idea what triggered all of these issues, but my current theory is that I interrupted a firmware update that put them in an inconsistent state. But, who knows. In any case, I’m happy to report that a hard reset seems to have fixed all of these problems! If you’ve been experiencing any of these (or similar) issues with your AirPods, you should try resetting them.&lt;/p&gt;

&lt;p&gt;I found &lt;a href=&quot;https://support.apple.com/en-us/HT209463&quot;&gt;this support guide from Apple&lt;/a&gt; on how to reset your AirPods, which states &lt;em&gt;“You might need to reset your AirPods if they won’t charge, or to fix a different issue.”&lt;/em&gt; It isn’t clear to me exactly what resetting does — aside from the obvious steps of completely unpairing them, removing them from your iCloud account, forgetting them in your Bluetooth settings, and then repairing them. I suspect it might also restore the last-known good firmware?&lt;/p&gt;

&lt;p&gt;Here are the steps &lt;a href=&quot;https://support.apple.com/en-us/HT209463&quot;&gt;from the support guide&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Put your AirPods in their charging case, and close the lid.&lt;/li&gt;
    &lt;li&gt;Wait 30 seconds.&lt;/li&gt;
    &lt;li&gt;Open the lid of your charging case, and put your AirPods in your ears.&lt;/li&gt;
    &lt;li&gt;Go to Settings &amp;gt; Bluetooth. Or go to Settings &amp;gt; [your AirPods].&lt;/li&gt;
    &lt;li&gt;If your AirPods appear there as connected, tap the More Info button  next to your AirPods, tap Forget This Device, then tap again to confirm.&lt;/li&gt;
    &lt;li&gt;If your AirPods don’t appear there, continue to the next step.&lt;/li&gt;
    &lt;li&gt;Put your AirPods in their charging case, and keep the lid open.&lt;/li&gt;
    &lt;li&gt;Press and hold the setup button on the back of the case for about 15 seconds, until the status light on the front of the case flashes amber, then white.&lt;/li&gt;
    &lt;li&gt;Reconnect your AirPods: With your AirPods in their charging case and the lid open, place your AirPods close to your iPhone or iPad. Follow the steps on your device’s screen.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that on step (8), it took longer than 15 seconds for me. It was more like 30 seconds. The light on the case was initially white, and &lt;em&gt;then&lt;/em&gt; amber, then white again. Make sure you hold the button until you see the amber light, and then white.&lt;/p&gt;

&lt;p&gt;After following these steps, I then tried to &lt;a href=&quot;https://www.macrumors.com/how-to/update-airpods/&quot;&gt;trigger a firmware update&lt;/a&gt; following the random magic steps that people have experimented with to make this happen implicitly. I wish Apple would just add an “Update Firmware” button in the Settings! Anyway — the firmware update installed successfully almost immediately and the case even chimed after it completed!&lt;/p&gt;

&lt;p&gt;As far as I can tell, my AirPods are as good as new.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/11/14/fix-airpods-reset/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/10/30/github-tip-filter-involves/</id>
        <link href="https://www.jessesquires.com/blog/2023/10/30/github-tip-filter-involves/" />
        <title>GitHub Tip: using the involves filter</title>
        <published>2023-10-30T10:54:33-07:00</published>
        <updated>2023-10-30T10:54:33-07:00</updated>

        <category term="software-dev" />
        <category term="github" /><category term="productivity" />
        <summary type="html">&lt;p&gt;When you work on a large team and are participating in many pull requests on GitHub, it can be difficult to keep track of everything you are working on. In addition to opening your own pull requests, you can be assigned to them, you can be requested as a reviewer, you can comment in discussion threads, and you can be mentioned by others. Each of these occurrences requires your attention — perhaps immediately, but always eventually.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;When you work on a large team and are participating in many pull requests on GitHub, it can be difficult to keep track of everything you are working on. In addition to opening your own pull requests, you can be assigned to them, you can be requested as a reviewer, you can comment in discussion threads, and you can be mentioned by others. Each of these occurrences requires your attention — perhaps immediately, but always eventually.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;GitHub provides some convenient “built-in” filters to help you navigate the matters above. You can see all of your own pull requests, everything that’s assigned to you, or everything where you are mentioned.&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;d-flex justify-content-center col-12  col-sm-8 col-md-6 &quot;&gt;
        &lt;figure&gt;
            &lt;img class=&quot;img-thumbnail img-fluid&quot; src=&quot;/img/blog/github-pr-filters.jpg&quot; title=&quot;GitHub PR filters&quot; alt=&quot;GitHub PR filters&quot; /&gt;
            &lt;div class=&quot;row&quot;&gt;
                &lt;div class=&quot;col-12 d-flex justify-content-center&quot;&gt;
                
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;However, wouldn’t it also be nice to see &lt;em&gt;all of these pull requests&lt;/em&gt; at once? That is, all of your own pull requests, everything assigned to review, and everything where you are actively in discussion? You can, with &lt;a href=&quot;https://docs.github.com/en/search-github/searching-on-github/searching-issues-and-pull-requests#search-by-a-user-thats-involved-in-an-issue-or-pull-request&quot;&gt;the filter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;involves:@me&lt;/code&gt;&lt;/a&gt;, which will show you all the pull requests you are &lt;em&gt;involved in&lt;/em&gt;, in any capacity. In other words, it shows you everything that requires your attention. I have found this super helpful when I’m participating in lots of pull request review discussions as well as opening a lot of pull requests, and I want to see everything together. Better yet, it also works when filtering issues.&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;d-flex justify-content-center col-12  col-sm-8 col-md-6 &quot;&gt;
        &lt;figure&gt;
            &lt;img class=&quot;img-thumbnail img-fluid&quot; src=&quot;/img/blog/github-pr-involves.jpg&quot; title=&quot;GitHub involves: filter&quot; alt=&quot;GitHub involves: filter&quot; /&gt;
            &lt;div class=&quot;row&quot;&gt;
                &lt;div class=&quot;col-12 d-flex justify-content-center&quot;&gt;
                
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/10/30/github-tip-filter-involves/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/08/17/swift-url-absolutestring-path/</id>
        <link href="https://www.jessesquires.com/blog/2023/08/17/swift-url-absolutestring-path/" />
        <title>Swift URL absoluteString versus path</title>
        <published>2023-08-17T08:32:52-07:00</published>
        <updated>2023-08-17T08:32:52-07:00</updated>

        <category term="software-dev" />
        <category term="ios" /><category term="macos" /><category term="swift" /><category term="foundation" />
        <summary type="html">&lt;p&gt;Foundation’s &lt;a href=&quot;https://developer.apple.com/documentation/foundation/url&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt;&lt;/a&gt; (née &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSURL&lt;/code&gt;) is a nearly ubiquitous API on Apple platforms. One of its shortcomings is that it is heavily overloaded – an instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; could represent a &lt;em&gt;web&lt;/em&gt; URL or a &lt;em&gt;file&lt;/em&gt; URL. While there are many similarities between accessing resources on a local disk or on a web server, I think there should be explicit types for each, say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebURL&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileURL&lt;/code&gt;.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;Foundation’s &lt;a href=&quot;https://developer.apple.com/documentation/foundation/url&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt;&lt;/a&gt; (née &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSURL&lt;/code&gt;) is a nearly ubiquitous API on Apple platforms. One of its shortcomings is that it is heavily overloaded – an instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; could represent a &lt;em&gt;web&lt;/em&gt; URL or a &lt;em&gt;file&lt;/em&gt; URL. While there are many similarities between accessing resources on a local disk or on a web server, I think there should be explicit types for each, say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebURL&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileURL&lt;/code&gt;.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;What makes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; more confusing is how &lt;em&gt;other&lt;/em&gt; APIs often interchangeably use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; or provide multiple APIs with the same functionality where some use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; and others use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;. The best example of this is &lt;a href=&quot;https://developer.apple.com/documentation/foundation/filemanager&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileManager&lt;/code&gt;&lt;/a&gt;, which can’t seem to decide on one or the other. You can construct a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; from a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; or build a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; incrementally from multiple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; values, and you can convert a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; back to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;. Also when working with networking APIs, it is common to move back and forth between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Even after years of working with &lt;a href=&quot;https://developer.apple.com/documentation/foundation&quot;&gt;Foundation&lt;/a&gt; on Apple platforms, I make the same mistake using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; with files all the time. When you are working with networking code and you need a string representation of a URL, you need to call &lt;a href=&quot;https://developer.apple.com/documentation/foundation/url/1779984-absolutestring&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL.absoluteString&lt;/code&gt;&lt;/a&gt;. This is so common and it is always the first thing I reach for — it even has “string” in the name! But when working with file URLs and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileManager&lt;/code&gt;, this is &lt;strong&gt;not&lt;/strong&gt; what you want.&lt;/p&gt;

&lt;p&gt;I was recently writing some code dealing with files using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileManager&lt;/code&gt; and, out of habit, I tried to pass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL.absoluteString&lt;/code&gt; to an API that needed a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; file path. It took way too long for me to figure out the bug, because I am so used to seeing and using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;absoluteString&lt;/code&gt;. It was not an obvious error.&lt;/p&gt;

&lt;p&gt;For file URLs, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL.absoluteString&lt;/code&gt; will produce:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;file:///Users/jsq/Documents/file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that the string includes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file://&lt;/code&gt; scheme. For file-based APIs that require a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; file path, passing the value returned by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;absoluteString&lt;/code&gt; will fail.&lt;/p&gt;

&lt;p&gt;However, &lt;a href=&quot;https://developer.apple.com/documentation/foundation/url/1779812-path&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL.path&lt;/code&gt;&lt;/a&gt; will produce the full file path &lt;em&gt;without&lt;/em&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file://&lt;/code&gt; scheme prefix.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/Users/jsq/Documents/file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When working with &lt;em&gt;file&lt;/em&gt; URLs, the correct way to convert to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; value is to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL.path&lt;/code&gt;. This is confusing, because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL.path&lt;/code&gt; for &lt;em&gt;web&lt;/em&gt; URLs means something very different. And this helps illustrate the problem with the overloaded behavior of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; — many of the APIs behave differently depending on the type of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; you have. Even more confusing, some APIs do not make sense to include for both kinds of URLs. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL.host&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL.query&lt;/code&gt; do not apply to file URLs.&lt;/p&gt;

&lt;p&gt;Of course, &lt;a href=&quot;https://developer.apple.com/documentation/foundation/url/1780396-isfileurl&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL.isFileURL&lt;/code&gt;&lt;/a&gt; exists to allow you to distinguish between the two if needed, but this further exposes the poor design of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; and emphasizes the need for two explicit types. Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileManager&lt;/code&gt; would be much more intuitive if all of its APIs worked with a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileURL&lt;/code&gt; type instead of mixing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt;.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/08/17/swift-url-absolutestring-path/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/08/16/going-indie-3/</id>
        <link href="https://www.jessesquires.com/blog/2023/08/16/going-indie-3/" />
        <title>Going indie: business structure, taxes, and retirement</title>
        <published>2023-08-16T04:06:28-07:00</published>
        <updated>2023-08-17T02:59:12-07:00</updated>

        <category term="essays" />
        <category term="series-going-indie" /><category term="indie-dev" /><category term="contracting" /><category term="freelance" /><category term="consulting" />
        <summary type="html">&lt;p&gt;Welcome to the third part of my going indie series! In the &lt;a href=&quot;/blog/2023/05/08/going-indie-2/&quot;&gt;previous post&lt;/a&gt;, I discussed building a foundation, getting started, and finding clients. In this post, I am going to discuss many of the decidedly &lt;em&gt;un-fun&lt;/em&gt; administrative aspects of being freelance and contracting like saving for retirement and — everyone’s favorite — taxes. Most folks consider these topics to be boring and tedious, but understanding them is critical to your success. The best approach is one of curiosity. As a software developer, you might find the task of optimizing (and minimizing!) your tax burden to be an interesting problem to solve — I definitely do!&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;Welcome to the third part of my going indie series! In the &lt;a href=&quot;/blog/2023/05/08/going-indie-2/&quot;&gt;previous post&lt;/a&gt;, I discussed building a foundation, getting started, and finding clients. In this post, I am going to discuss many of the decidedly &lt;em&gt;un-fun&lt;/em&gt; administrative aspects of being freelance and contracting like saving for retirement and — everyone’s favorite — taxes. Most folks consider these topics to be boring and tedious, but understanding them is critical to your success. The best approach is one of curiosity. As a software developer, you might find the task of optimizing (and minimizing!) your tax burden to be an interesting problem to solve — I definitely do!&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Disclaimer: I am not an accountant, nor a financial advisor. I highly recommend you get both! All the information in this post is derived from my experience, conversations with my accountant, and advice from my financial advisor. Of course, your tax situation and financial situation differ from mine, so “your mileage may vary” as they say. For example, I do not have children, but if you do that has a significant impact on your taxes and finances.&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;Also, as I noted &lt;a href=&quot;/blog/2023/04/10/going-indie/&quot;&gt;in my first post&lt;/a&gt;&lt;/em&gt;, this series assumes you are based in the United States. While many aspects of this series are widely applicable, this post is very specific to the US.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What you may not realize is that going indie means &lt;em&gt;starting your own business&lt;/em&gt;. Congratulations, you are now a small business owner as far as the IRS is concerned. Don’t worry, that does not mean some sort of formal business entity is necessary (as you will see below). It only means you need to shift your thinking a bit. My goal with this post is to give you a head start on learning how to structure your business, and what to expect regarding taxes. My hope is that you can begin your journey with more information than I had — which was literally zero.&lt;/p&gt;

&lt;p&gt;If you do not have an accountant or financial advisor, I highly recommend you get both. Find someone you trust. Their expertise will help guide you in making the correct decisions for yourself and they will save you a ton of time and potential headaches. Likely, someone in your network can make a recommendation for both.&lt;/p&gt;

&lt;h3 id=&quot;business-structure&quot;&gt;Business structure&lt;/h3&gt;

&lt;p&gt;The first task after deciding to go independent and do freelance/contract work is deciding how to structure your self-employed business. You have a few options, each with its own pros and cons. The factors that differ between the options primarily center around taxes, reporting, paperwork, and bookkeeping. There are many resources on the internet that explain the differences, benefits, and drawbacks of each self-employed business entity — so I will be brief. I am not an expert on these topics, so you should ultimately consult your accountant. My goal here is to make you aware of your options and give you the gist of each.&lt;/p&gt;

&lt;p&gt;In all scenarios, you should open a new bank account for your business. It’s also a good idea to get a separate credit card that you use solely for business expenses. This is not strictly necessary as a sole proprietor (and the accounts can be normal accounts in your name, not actual business accounts), but it is a good practice to keep everything separate. This will make bookkeeping significantly easier for you.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sole Proprietorship.&lt;/strong&gt; [&lt;a href=&quot;https://www.irs.gov/businesses/small-businesses-self-employed/sole-proprietorships&quot;&gt;IRS&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Sole_proprietorship&quot;&gt;Wiki&lt;/a&gt;] A Sole Proprietorship is owned and run by one person and in which there is no legal distinction between the owner and the business entity. Being a sole proprietor is the simplest and easiest structure. You do not need to establish a formal legal entity. There is no paperwork or setup. You operate as yourself, as an individual, under your legal name. Similar to being a full-time W-2 worker, you file taxes using your social security number (SSN), etc. You can (optionally) “level-up” by getting a &lt;em&gt;Fictitious Business Name&lt;/em&gt; (FBN), which allows you to operate under a different “business” name. However, as the name indicates, this is not a “real” business entity. It merely provides a facade to your sole proprietorship, which can be useful in some situations. If you opt to have an FBN, then you also need to get an &lt;a href=&quot;https://www.irs.gov/businesses/small-businesses-self-employed/employer-id-numbers&quot;&gt;Employer Identification Number&lt;/a&gt; (EIN) to associate with it. An EIN is basically an “SSN for your business” — you file your taxes using the EIN instead of your SSN and you provide your EIN to your clients for your 1099 forms. In addition to income tax, you also pay self-employment tax. You “pay yourself” simply by withdrawing or transferring funds from your business account.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;S Corporation (S-Corp).&lt;/strong&gt; [&lt;a href=&quot;https://www.irs.gov/businesses/small-businesses-self-employed/s-corporations&quot;&gt;IRS&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/S_corporation&quot;&gt;Wiki&lt;/a&gt;] An S-Corp is a more formal structure that requires you to establish a payroll system and pay yourself a salary. You need an EIN and there is various paperwork to complete to establish the S-Corp entity. The process can take a couple weeks or up to 3 months, depending on your circumstances. It differs in that you can have multiple shareholders. An S-Corp is similar to a sole proprietorship in that it is a “pass-through entity” meaning the corporation’s income and losses are divided among and passed through to its shareholders (i.e., you). In this scenario, you are the singular shareholder so you more or less file taxes like an individual would. However, S-Corps have access to additional deductions and can yield higher tax savings. Notably, an S-Corp is not a “full” corporation and alleviates you from double taxation where you would otherwise pay corporate tax as well as individual income tax. You still pay self-employment tax like a sole proprietor, and because you have to run a payroll system you also pay payroll taxes. You “pay yourself” via your payroll system. S-Corps also come with some additional fees and specific states impose their own taxes on S-Corps. Also note that some states tax S-Corps as C-Corps, negating the pass-through benefit. Because of the additional fees and taxes, it usually does not make financial sense to establish an S-Corp until your annual earnings pass a threshold of around $100,000 — at which point you are better positioned to reap the tax benefits. (Again, consult your accountant here.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Limited Liability Company (LLC).&lt;/strong&gt; [&lt;a href=&quot;https://www.irs.gov/businesses/small-businesses-self-employed/limited-liability-company-llc&quot;&gt;IRS&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Limited_liability_company&quot;&gt;Wiki&lt;/a&gt;] An LLC is what I know the least about. It is an established business entity that you also have to file paperwork to legally setup, pay fees, get an EIN, etc. An LLC does not need to have payroll. It is not a corporation but it is a legal form of a company. It is a hybrid business structure that can combine the pass-through taxation of a sole proprietorship with the limited liability of a corporation. Regulation of LLCs varies from state to state. LLCs generally have fewer formalities and reporting requirements than S-Corps, which can make them easier and less expensive to manage.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My advice is: &lt;strong&gt;do the simplest thing first.&lt;/strong&gt; If you are just getting started, operate as a sole proprietor. You do not need to complete any legal paperwork and you can start working immediately. This is beneficial because if you decide that you &lt;em&gt;do not like&lt;/em&gt; freelancing and contracting, then you can stop and go back to full-time work without having to do anything else. At the same time, if you &lt;em&gt;do&lt;/em&gt; decide to stay independent, then it is easy to transition to an S-Corp or LLC later. I have a friend that established an LLC once for a project that eventually fizzled out, and he said the process to dissolve it was a nightmare. He wished he had just gone with a sole proprietorship first.&lt;/p&gt;

&lt;p&gt;Finally, one important caveat is that sole proprietorships do not shield you from liability, whereas S-Corps and LLCs do. For example, say something terrible happens and a client files a lawsuit against you. With an S-Corp or an LLC, your personal assets are protected. That is, the client is suing &lt;em&gt;the business entity&lt;/em&gt; and they can only go after the &lt;em&gt;business entity’s assets&lt;/em&gt;. If you are a sole proprietor, then the client is suing &lt;em&gt;you&lt;/em&gt; personally. Technically, that puts everything you own at risk of seizure and liquidation — bank accounts, investments, property. &lt;strong&gt;However&lt;/strong&gt; — this is &lt;em&gt;extremely&lt;/em&gt; unlikely and especially rare in our line of work. You are not going to get sued for a software bug. (I mean, &lt;em&gt;maybe&lt;/em&gt; you could? But let’s be real.)&lt;/p&gt;

&lt;p&gt;If you were starting a construction business or a restaurant, that is a very different story with very real scenarios involving liability. So do not allow the issue of liability scare you away from starting with a sole proprietorship! Tons of people are sole proprietors without any problems. It is important to weigh the potential &lt;em&gt;risks&lt;/em&gt; of your type of business when choosing the appropriate structure. For software development and design, that risk is &lt;em&gt;extremely&lt;/em&gt; low. Still, ask your accountant!&lt;/p&gt;

&lt;h3 id=&quot;taxes&quot;&gt;Taxes&lt;/h3&gt;

&lt;p&gt;Taxes are terrible. Everyone knows this. And they are even worse when you are self-employed. However, you can mitigate your tax burden with deductions, which I’ll discuss below. Regardless of your business structure you will pay your normal income tax, which is the same as when you are a full-time worker at a company. The same federal and state income tax brackets apply.&lt;/p&gt;

&lt;p&gt;What differs when you are self-employed is that you must also pay self-employment tax, or SECA (named after the Self-Employed Contributions Act). SECA taxes include Social Security and Medicare. When you are a full-time worker at a company, you also pay these taxes (called FICA, per the Federal Insurance Contributions Act) and you can see the deductions taken from your paychecks. So what’s the difference? When you work at a company, the company pays &lt;em&gt;half&lt;/em&gt; of these taxes (FICA) and you pay the other half. When you are self-employed, you pay the &lt;em&gt;full amount&lt;/em&gt; (SECA) — because you are &lt;em&gt;the employee&lt;/em&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;em&gt;the employer&lt;/em&gt;. The total self-employment tax is 15.3 percent. When you work at a company, you and the company each pay 7.65 percent.&lt;/p&gt;

&lt;p&gt;There are a lot of details that go into these calculations that I will not cover in this post, but you are in luck — I made an app for that! &lt;a href=&quot;https://www.hexedbits.com/taxatio/&quot;&gt;Taxatio&lt;/a&gt; is tax calculator for freelancers that I released last year. It is available for iOS and macOS. It will help you with these calculations and tax estimations, as well as explain what’s going on with detailed breakdowns.&lt;/p&gt;

&lt;h4 class=&quot;text-center text-light-dark&quot;&gt;* * *&lt;/h4&gt;

&lt;p&gt;I would be remiss if I did not take this opportunity to highlight the injustices of our tax system. SECA/FICA taxes are &lt;strong&gt;regressive taxes&lt;/strong&gt; — the more money you make, the less you pay as a percentage of your total income. This imposes an undue burden on the poor and lower wage workers, not to mention the rich usually pay &lt;em&gt;nothing&lt;/em&gt;. SECA/FICA are taxes on &lt;em&gt;earned income&lt;/em&gt;, that is, income you earn through labor. Because the rich do not work, but rather “earn” money through their pre-existing assets and investments, they pay nothing into Social Security and Medicare. Furthermore, their wealth — that is, their property, investments, inheritance, and other assets — is taxed at significantly lower rates. Thus, the rich get richer simply because they &lt;em&gt;own things&lt;/em&gt; all while doing no labor whatsoever, yet they still reap the benefits of our decaying social safety net that &lt;em&gt;real workers&lt;/em&gt; provide.&lt;/p&gt;

&lt;p&gt;The more you learn about our tax system, the more obvious it becomes that income taxes are designed to punish poor and working class people — and if you &lt;strong&gt;must work&lt;/strong&gt; to pay your bills and survive, then &lt;strong&gt;you are working class&lt;/strong&gt;. You may consider yourself middle class, but this is a facade propped up by our precarious and predatory credit system. Being “middle class” is a status that can be revoked at a moment’s notice, as we witnessed during the 2008 housing crisis. The middle class is an artificial bifurcation of working people manufactured by the rich via credit that deludes us into thinking there exists a ladder we can simply climb to join the wealthy elite at the top. It is a scam. No one &lt;em&gt;earns&lt;/em&gt; a billion dollars — they &lt;em&gt;steal&lt;/em&gt; it. (And before someone tries to lecture me about the “risk” of investments — there is no “risk” when you have a literal mountain of money and wealth at your disposal, not to mention a government that will bail you out after you make billions of dollars in derivatives evaporate overnight.)&lt;/p&gt;

&lt;p&gt;SECA taxes have a significant impact on independent workers. It is wrong that you must pay &lt;em&gt;double&lt;/em&gt; as a single person, as if you have the same influence and wealth as an entire corporation. Even full-time workers should not have to split the burden of FICA taxes with corporations reap millions in profits while suppressing wages and destroying our environment with impunity.&lt;/p&gt;

&lt;p&gt;But, I digress.&lt;/p&gt;

&lt;h4 class=&quot;text-center text-light-dark&quot;&gt;* * *&lt;/h4&gt;

&lt;h3 id=&quot;estimated-taxes&quot;&gt;Estimated taxes&lt;/h3&gt;

&lt;p&gt;The most significant difference regarding taxes when you are self-employed and doing 1099 freelance/contract work is &lt;em&gt;how&lt;/em&gt; and &lt;em&gt;when&lt;/em&gt; you pay taxes. Your clients &lt;em&gt;do not&lt;/em&gt; do any tax withholding. When you are a full-time W-2 worker, FICA taxes are withheld from each paycheck you receive. When you are self-employed, you &lt;em&gt;must&lt;/em&gt; pay quarterly estimated taxes. This includes federal &lt;em&gt;and&lt;/em&gt; state income tax (unless, of course, you live in a state that does not collect income tax). Instead of paying a small amount on each paycheck, you pay lump sum once per quarter.&lt;/p&gt;

&lt;p&gt;Take note — quarterly estimated taxes are no joke. As an example, suppose your adjusted gross income for the year is $200,000. Your quarterly estimated tax payments may be as high as $18,000 &lt;em&gt;per quarter&lt;/em&gt;. That’s &lt;em&gt;a lot&lt;/em&gt; of money to drop at once. This means you need to be prepared. When clients pay you, do not withdraw the full amount from your business account to pay yourself. You always need to leave money in your business account for tax payments. Again, you are in luck because &lt;a href=&quot;https://www.hexedbits.com/taxatio/&quot;&gt;Taxatio&lt;/a&gt; will help you here by showing you the complete quarterly payments breakdown.&lt;/p&gt;

&lt;p&gt;The hardest part about estimated taxes is… well, estimating them! When you first get started, this is a moving target. You are not sure how much you will make for the year. Do your best to make projections. Your accountant can help you here, too. After your first year of being independent is over, you can use the previous year’s income as your estimate for the next year. If you do not pay your quarterlies on time, in full, or at all, you will get hit with fees and penalties when you file your tax returns.&lt;/p&gt;

&lt;p&gt;One reason I recommend going independent at the beginning of the calendar year is to simplify your taxes and estimates. If you start your freelance/contract work during the same year that you quit your full-time job, then you will have mixed income: some W-2, some 1099. This makes your estimations a bit more of a moving target, and they will not stabilize until after your second year — that is, your first &lt;em&gt;full calendar year&lt;/em&gt; of being independent. However, you should not worry about this too much.&lt;/p&gt;

&lt;p&gt;There is one nice thing about estimated taxes (and using &lt;a href=&quot;https://www.hexedbits.com/taxatio/&quot;&gt;Taxatio&lt;/a&gt; to plan). If you have accurate projections for your annual income, like me, that means you have an accurate understanding of your annual tax burden. This allows me to optimize my time and work. For example, once I have made enough money for the year and know I have enough to cover my taxes, I can stop working. Historically, this means I can not work for 2-3 months each year.&lt;/p&gt;

&lt;p&gt;Conveniently, you can pay (and automatically schedule!) your federal estimated tax payments by creating an account with &lt;a href=&quot;https://www.eftps.gov/eftps/&quot;&gt;EFTPS.gov&lt;/a&gt;. For state estimated taxes, you will need to figure out the equivalent for your state. If you live in California, like me, then you can create an account with the &lt;a href=&quot;https://www.ftb.ca.gov&quot;&gt;California FTB&lt;/a&gt; where you can similarly schedule and pay your estimated payments.&lt;/p&gt;

&lt;h3 id=&quot;deductions&quot;&gt;Deductions&lt;/h3&gt;

&lt;p&gt;Of course, we cannot discuss taxes without also discussing the available mechanisms we can employ to &lt;em&gt;reduce&lt;/em&gt; them. In the example above, we discovered than an annual income of $200,000 could result in quarterly tax payments around $18,000. However, you can dramatically decrease this amount with deductions.&lt;/p&gt;

&lt;p&gt;It is important to understand the difference between your &lt;em&gt;gross income&lt;/em&gt; (the total amount of money you earn) and your &lt;em&gt;taxable income&lt;/em&gt; (the portion of your income that is subject to income tax). Deductions are subtracted from your gross income, which results in reducing your taxable income. Some of the most common deductions include health insurance premiums and a home office. Consult your accountant for advice.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;/blog/2023/04/10/going-indie/&quot;&gt;part one&lt;/a&gt; I mentioned that you can purchase health insurance via the Affordable Care Act (ACA). Every state is different, but I have been happy with my experience in California. If you get health insurance (which, you probably should), the entirety of your premiums are tax deductible. Also note that failing to purchase insurance coverage will result in a tax penalty.&lt;/p&gt;

&lt;p&gt;Another substantial deduction is self-employment tax (SECA). You are allowed to deduct half of SECA — that is, the “employer” portion. While I think paying double is an unnecessary burden on sole proprietors, it does help to be able to deduct this.&lt;/p&gt;

&lt;p&gt;Finally, and most importantly, you should be keeping track of your expenses. Expenses are subtracted from your gross income, which again results in reducing your taxable income. I will discuss bookkeeping in detail in the next part of this series.&lt;/p&gt;

&lt;p&gt;And, of course, &lt;a href=&quot;https://www.hexedbits.com/taxatio/&quot;&gt;Taxatio&lt;/a&gt; does these calculations and will show you a breakdown. The current version is limited with a single field for your total amount of deductions, but a future update will expand this functionality to allow a full itemized list.&lt;/p&gt;

&lt;h3 id=&quot;saving-for-retirement&quot;&gt;Saving for retirement&lt;/h3&gt;

&lt;p&gt;The last significant piece of this puzzle involving business structure, taxes, and deductions is how you can continue to save for retirement despite no longer working full-time at a company. Typically, most companies provide retirement plans and many often offer matching contributions. Most commonly, you will have the opportunity to open a &lt;a href=&quot;https://en.wikipedia.org/wiki/401(k)&quot;&gt;401(k) plan&lt;/a&gt;. If you are lucky, the company will match a portion of your contributions.&lt;/p&gt;

&lt;p&gt;In my experience, many folks are unaware that as a self-employed business owner you can open a &lt;a href=&quot;https://www.irs.gov/retirement-plans/one-participant-401k-plans&quot;&gt;Solo 401(k) plan&lt;/a&gt;. The rules are the same in terms of the maximum annual contribution amounts — except you are &lt;em&gt;the employee&lt;/em&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;em&gt;the company&lt;/em&gt;. This means you can contribute as an individual and then “match yourself” as the company. In 2023, the maximum individual contribution is $22,500. The maximum company contribution is $43,500 &lt;em&gt;or&lt;/em&gt; 25% of your earned income — whichever is smaller. This means you can put &lt;em&gt;up to&lt;/em&gt; $66,000 into your Solo 401(k) &lt;em&gt;per year&lt;/em&gt;, assuming you make enough to maximize the company contribution. &lt;strong&gt;Yes&lt;/strong&gt; — &lt;em&gt;that is a sweet fucking deal&lt;/em&gt;. You might be missing out on stock options at a company, but you can dump a ton of savings into retirement.&lt;/p&gt;

&lt;p&gt;With a 401(k), your contributions can be traditional (pre-tax) or Roth (after-tax). The difference is that traditional contributions reduce your taxable income, thus reducing the taxes you pay now. However, you will then pay taxes on the funds you withdraw during retirement. For Roth, you pay taxes now before making contributions and then when you withdraw funds during retirement, they are not taxed. The question to ask yourself is: &lt;em&gt;do you want to pay taxes now, or later?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The other popular option is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Roth_IRA&quot;&gt;Roth IRA&lt;/a&gt;. However, the maximum contribution for 2023 is only $6,500. You can have both a Solo 401(k) and an IRA, if you want. Be aware that there are many rules and regulations regarding contributions. I do not recommend trying to setup these accounts on your own. If you must choose one, a Solo 401(k) is often the better choice as it allows you to save significantly more. However, paperwork for an IRA can be much simpler, so that might be a good start depending on your circumstances.&lt;/p&gt;

&lt;p&gt;For all of these important decisions, you should consult your financial advisor to make the choices that work best for you and your financial goals.&lt;/p&gt;

&lt;p&gt;Finally, do I need to say it? &lt;a href=&quot;https://www.hexedbits.com/taxatio/&quot;&gt;Taxatio&lt;/a&gt; does these calculations for you. Currently, it only supports Solo 401(k) plans, but I would like to add support for Roth IRAs in a future update.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Today we covered some ugly, mundane — but nonetheless important — details of going independent. I hope this post was helpful if you are considering going independent. There is still more to come in this series. In the next part, I will discuss bookkeeping and invoicing! Stay tuned.&lt;/p&gt;

&lt;div class=&quot;d-block bg-light-dark pt-3 px-3 pb-0 my-3 border border-2 border-secondary rounded update-notice&quot;&gt;
    &lt;h5 id=&quot;updated-17-august-2023&quot;&gt;
        &lt;a href=&quot;#updated-17-august-2023&quot; class=&quot;text-reset&quot;&gt;&lt;i class=&quot;bi bi-link&quot;&gt;&lt;/i&gt; Update&lt;/a&gt;
        &lt;small class=&quot;text-body-secondary&quot; title=&quot;17 Aug 2023 11:59:12 AM &quot;&gt;
            &lt;i&gt;17 August 2023&lt;/i&gt;
        &lt;/small&gt;
    &lt;/h5&gt;
    
&lt;p&gt;Many thanks to &lt;a href=&quot;https://mastodon.social/@mjtsai/110900729704601727&quot;&gt;Michael Tsai&lt;/a&gt; and &lt;a href=&quot;https://github.com/jessesquires/jessesquires.com/issues/186#issue-1853100101&quot;&gt;@ljmatkins&lt;/a&gt; for their feedback on this post regarding details about LLCs and retirement plans. I have updated this post to reflect their corrections and other notes.&lt;/p&gt;

&lt;/div&gt;

&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/08/16/going-indie-3/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/07/18/navigation-link-accessory-view-swiftui/</id>
        <link href="https://www.jessesquires.com/blog/2023/07/18/navigation-link-accessory-view-swiftui/" />
        <title>How to customize NavigationLink accessory views in SwiftUI</title>
        <published>2023-07-18T08:49:58-07:00</published>
        <updated>2023-07-18T08:49:58-07:00</updated>

        <category term="software-dev" />
        <category term="ios" /><category term="swiftui" /><category term="uikit" />
        <summary type="html">&lt;p&gt;In UIKit, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UITableViewCell&lt;/code&gt; has a customizable accessory view. You can use one of the few accessory options that is provided by iOS by setting the &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uitableviewcell/1623228-accessorytype&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessoryType&lt;/code&gt;&lt;/a&gt; property, or you can provide a custom view using &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uitableviewcell/1623219-accessoryview&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessoryView&lt;/code&gt;&lt;/a&gt;, which can be any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIView&lt;/code&gt;. The equivalent of constructing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UITableViewCell&lt;/code&gt; with a &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uitableviewcell/accessorytype/disclosureindicator&quot;&gt;chevron accessory&lt;/a&gt; in SwiftUI is using a &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/navigationlink&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationLink&lt;/code&gt;&lt;/a&gt;. Unfortunately, however, SwiftUI does not provide an API to customize the accessory view for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationLink&lt;/code&gt; — you are stuck with the default chevron.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;In UIKit, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UITableViewCell&lt;/code&gt; has a customizable accessory view. You can use one of the few accessory options that is provided by iOS by setting the &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uitableviewcell/1623228-accessorytype&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessoryType&lt;/code&gt;&lt;/a&gt; property, or you can provide a custom view using &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uitableviewcell/1623219-accessoryview&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessoryView&lt;/code&gt;&lt;/a&gt;, which can be any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIView&lt;/code&gt;. The equivalent of constructing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UITableViewCell&lt;/code&gt; with a &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uitableviewcell/accessorytype/disclosureindicator&quot;&gt;chevron accessory&lt;/a&gt; in SwiftUI is using a &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/navigationlink&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationLink&lt;/code&gt;&lt;/a&gt;. Unfortunately, however, SwiftUI does not provide an API to customize the accessory view for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationLink&lt;/code&gt; — you are stuck with the default chevron.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Leading by example, UIKit demonstrates the need for different accessory views to communicate to the user what to expect when they tap a table view cell. You can find all the different accessory types in use in the apps built-in to iOS — chevrons, the information icons (“i” with a circle), and checkmarks. It is very common for apps to customize the accessory view for cells in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UITableView&lt;/code&gt; or views in a SwiftUI &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt;. It is surprising that SwiftUI still lacks an official API for this.&lt;/p&gt;

&lt;p&gt;What’s worse than a default chevron that cannot be customized is that there is also no API to opt-out and simply hide it. And what’s even worse than &lt;em&gt;that&lt;/em&gt; is that the default chevron for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationLink&lt;/code&gt; is &lt;strong&gt;different&lt;/strong&gt; than the chevron provided by SFSymbols. If used together, they clash and it’s ugly.&lt;/p&gt;

&lt;p&gt;So, like many things in SwiftUI, we have to resort to hacks and obscure workarounds to achieve decades-old UIKit behavior. The best way I’ve found to hide the default chevron in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationLink&lt;/code&gt; is to hide the entire thing underneath another view using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZStack&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Suppose we are using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationLink&lt;/code&gt; to display an “About” view in our app:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// HACK: ZStack with zero opacity + EmptyView&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Hides default chevron accessory view for NavigationLink&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;ZStack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;NavigationLink&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;AboutView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;EmptyView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;Label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;About&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;systemName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;info.circle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This allows you to provide an entirely custom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt; for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationLink&lt;/code&gt;. In this case, that’s the foremost &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Label&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZStack&lt;/code&gt;. Obviously, you would not want to copy and paste this snippet every time you need a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationLink&lt;/code&gt;, so we can write a better version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationLink&lt;/code&gt; to encapsulate this for us. We can mimic the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationLink&lt;/code&gt; API.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BetterNavigationLink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Label&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Destination&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;@ViewBuilder&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;kd&quot;&gt;@ViewBuilder&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// HACK: ZStack with zero opacity + EmptyView&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Hides default chevron accessory view for NavigationLink&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;ZStack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;NavigationLink&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;EmptyView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With that, we have a drop-in replacement for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationLink&lt;/code&gt; and can update all call sites to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BetterNavigationLink&lt;/code&gt; instead.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;BetterNavigationLink&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;About&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;systemName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;info.circle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;AboutView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 class=&quot;text-center text-light-dark&quot;&gt;* * *&lt;/h4&gt;

&lt;p&gt;I think &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationLink&lt;/code&gt; can be made significantly better with some small changes. First, I do not think there should be &lt;em&gt;any&lt;/em&gt; accessory view by default — accessories should be opt-in, just like with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UITableViewCell&lt;/code&gt;. Second, I think &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationLink&lt;/code&gt; should allow you to set &lt;em&gt;any&lt;/em&gt; SFSymbol as the accessory. Perhaps this could be a new view modifier for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationLink&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;NavigationLink&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;AboutView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;About&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;navigationAccessory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;systemName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;info.circle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wouldn’t that be nice?&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/07/18/navigation-link-accessory-view-swiftui/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/07/17/stop-prefixing-userdefaults-keys/</id>
        <link href="https://www.jessesquires.com/blog/2023/07/17/stop-prefixing-userdefaults-keys/" />
        <title>Stop prefixing your UserDefaults keys</title>
        <published>2023-07-17T08:41:13-07:00</published>
        <updated>2023-07-17T11:37:12-07:00</updated>

        <category term="software-dev" />
        <category term="ios" /><category term="macos" />
        <summary type="html">&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/foundation/userdefaults&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDefaults&lt;/code&gt;&lt;/a&gt; is probably one of the most popular APIs on Apple Platforms. It is a highly-optimized key-value persisted store that is backed by a property list, and it is most commonly used for saving small pieces of data like user preferences. Despite its ease-of-use, there is one common anti-pattern I see developers use often.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/foundation/userdefaults&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDefaults&lt;/code&gt;&lt;/a&gt; is probably one of the most popular APIs on Apple Platforms. It is a highly-optimized key-value persisted store that is backed by a property list, and it is most commonly used for saving small pieces of data like user preferences. Despite its ease-of-use, there is one common anti-pattern I see developers use often.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;In dozens of iOS projects over the years, I find that developers are prefixing key names with the app’s bundle identifier. For example, instead of naming a key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;sounds-enabled&quot;&lt;/code&gt; it will be named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;com.mycompany.MyApp.sounds-enabled&quot;&lt;/code&gt;. I am writing this post as a PSA to tell you that you &lt;strong&gt;do not need to do this!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On iOS, in your application’s user data sandbox you will find the backing plist for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDefaults&lt;/code&gt; at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/Library/Preferences/com.mycompany.MyApp.plist&lt;/code&gt;. On macOS, for a non-sanboxed app you will find the plist at the same path and for an app that &lt;em&gt;is&lt;/em&gt; sandboxed you will find the plist at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/Library/Containers/MyApp/Data/Library/Preferences/com.mycompany.MyApp.plist&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As you can see, your instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDefaults&lt;/code&gt; is &lt;strong&gt;already&lt;/strong&gt; namespaced by your app’s bundle identifier! Prefixing your keys is redundant. So please — do not prefix your key names with your app’s bundle identifier!&lt;/p&gt;

&lt;h4 class=&quot;text-center text-light-dark&quot;&gt;* * *&lt;/h4&gt;

&lt;p&gt;You might argue that prefixing key names is harmless, and that could be true sometimes. However, there are &lt;a href=&quot;https://github.com/jessesquires/Foil/pull/61#issuecomment-1253147705&quot;&gt;known issues&lt;/a&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDefaults&lt;/code&gt; &lt;a href=&quot;https://developer.apple.com/documentation/foundation/userdefaults#2926902&quot;&gt;key-value observing&lt;/a&gt; if key names have periods in the name — KVO does not work in that scenario. Furthermore, if you use debug tools (like &lt;a href=&quot;https://github.com/FLEXTool/FLEX&quot;&gt;FLEX&lt;/a&gt;) that allow you to inspect the values saved in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDefaults&lt;/code&gt; or if you manually open the plist (which is just XML) to examine it, it gets really cumbersome to search and read through if every single key is prefixed with the same ~30 characters.&lt;/p&gt;

&lt;p&gt;Lastly, if you are convinced to drop the unnecessary prefixes, beware that you will need to write migration code to save your values from the old key to the new one, otherwise you will lose data.&lt;/p&gt;

&lt;div class=&quot;d-block bg-light-dark pt-3 px-3 pb-0 my-3 border border-2 border-secondary rounded update-notice&quot;&gt;
    &lt;h5 id=&quot;updated-17-july-2023&quot;&gt;
        &lt;a href=&quot;#updated-17-july-2023&quot; class=&quot;text-reset&quot;&gt;&lt;i class=&quot;bi bi-link&quot;&gt;&lt;/i&gt; Update&lt;/a&gt;
        &lt;small class=&quot;text-body-secondary&quot; title=&quot;17 Jul 2023 11:37:12 AM PDT&quot;&gt;
            &lt;i&gt;17 July 2023&lt;/i&gt;
        &lt;/small&gt;
    &lt;/h5&gt;
    
&lt;p&gt;A few folks on Mastodon have pointed out situations where prefixing might be warranted. Or rather, pointed out problematic scenarios to generally watch out for.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mastodon.social/@gregheo/110730986118754748&quot;&gt;Greg Heo mentioned&lt;/a&gt; that you should carefully consider your key names if you are using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDefaults&lt;/code&gt; &lt;em&gt;shared domains&lt;/em&gt;. Typically, this scenario would be sharing data between your main app and an extension — so hopefully you are not colliding with your own key names.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mastodon.social/@mattiem/110730470926606357&quot;&gt;Matt Massicotte noted&lt;/a&gt; that some system frameworks store values in your app’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDefaults&lt;/code&gt;. For example, AppKit and SwiftUI on macOS store state restoration data, most commonly window size and location. I had forgotten about this. However, I &lt;strong&gt;highly doubt&lt;/strong&gt; you’ll have naming collisions. For example, here are a couple of keys for one of my apps: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSWindow Frame com_apple_SwiftUI_Settings_window&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com_apple_SwiftUI_Settings_selectedTabIndex&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;More importantly, &lt;a href=&quot;https://mastodon.social/@andy@iosdev.space/110730254596336650&quot;&gt;Andy Ibanez warned&lt;/a&gt; that a third-party dependency might read and write to the same key name. That is very bad! If you are a library author, you &lt;strong&gt;should not&lt;/strong&gt; be writing to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDefaults.standard&lt;/code&gt;. This is why &lt;a href=&quot;https://developer.apple.com/documentation/foundation/userdefaults/1409957-init&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDefaults.init(suiteName:)&lt;/code&gt;&lt;/a&gt; exists — your library should initialize its own suite.&lt;/p&gt;

&lt;p&gt;All of these are valid concerns. Still, I think for the &lt;em&gt;majority&lt;/em&gt; of use cases, prefixing is not necessary.&lt;/p&gt;

&lt;/div&gt;

&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/07/17/stop-prefixing-userdefaults-keys/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/07/11/where-are-xcode-bookmarks-stored/</id>
        <link href="https://www.jessesquires.com/blog/2023/07/11/where-are-xcode-bookmarks-stored/" />
        <title>Where are Xcode bookmarks stored?</title>
        <published>2023-07-11T12:17:32-07:00</published>
        <updated>2023-07-11T12:17:32-07:00</updated>

        <category term="software-dev" />
        <category term="xcode" /><category term="xcode-tips" />
        <summary type="html">&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/xcode-release-notes/xcode-15-release-notes&quot;&gt;Xcode 15&lt;/a&gt; introduces a new “bookmarks” feature, which lets you &lt;a href=&quot;https://sarunw.com/posts/bookmark-in-xcode15/&quot;&gt;bookmark lines or entire files&lt;/a&gt;. It is a welcome change that has &lt;a href=&quot;https://en.wikipedia.org/wiki/Sherlock_(software)#Sherlocked_as_a_term&quot;&gt;sherlocked&lt;/a&gt; my hack for &lt;a href=&quot;/blog/2020/01/21/xcode-tip-breakpoints-as-bookmarks/&quot;&gt;using breakpoints as bookmarks&lt;/a&gt;.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/xcode-release-notes/xcode-15-release-notes&quot;&gt;Xcode 15&lt;/a&gt; introduces a new “bookmarks” feature, which lets you &lt;a href=&quot;https://sarunw.com/posts/bookmark-in-xcode15/&quot;&gt;bookmark lines or entire files&lt;/a&gt;. It is a welcome change that has &lt;a href=&quot;https://en.wikipedia.org/wiki/Sherlock_(software)#Sherlocked_as_a_term&quot;&gt;sherlocked&lt;/a&gt; my hack for &lt;a href=&quot;/blog/2020/01/21/xcode-tip-breakpoints-as-bookmarks/&quot;&gt;using breakpoints as bookmarks&lt;/a&gt;.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;However, one advantage of breakpoints is that &lt;a href=&quot;/blog/2023/02/21/xcode-tip-sharing-breakpoints/&quot;&gt;they can be shared&lt;/a&gt;. This is useful for symbolic breakpoints that can be shared across projects. But it could also be useful for teams to share breakpoints within a project. As I was &lt;a href=&quot;/blog/2020/01/21/xcode-tip-breakpoints-as-bookmarks/&quot;&gt;updating my old post&lt;/a&gt;, I was wondering if the same was possible for bookmarks. The question then is, how and where does Xcode save them?&lt;/p&gt;

&lt;p&gt;Bookmarks are stored in a plist at the following path:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PROJECT_NAME.xcodeproj/project.xcworkspace/xcuserdata/USER.xcuserdatad/Bookmarks/bookmarks.plist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROJECT_NAME&lt;/code&gt; is the name of your project and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;USER&lt;/code&gt; is the current user – that is, the output of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$USER&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;whoami&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Typically, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xcuserdata/&lt;/code&gt; is added to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; so you likely would not notice any changes to this directory. Importantly, bookmarks are user-specific and there is a unique &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.xcuserdatad/&lt;/code&gt; directory for each user. So if multiple users create bookmarks, you would have something like the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MyApp.xcodeproj/project.xcworkspace/xcuserdata/jsq.xcuserdatad/Bookmarks/bookmarks.plist
MyApp.xcodeproj/project.xcworkspace/xcuserdata/gregheo.xcuserdatad/Bookmarks/bookmarks.plist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Furthermore, Xcode filters bookmarks in the UI based on the current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$USER&lt;/code&gt;. This means if you &lt;em&gt;do&lt;/em&gt; check-in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xcuserdata/&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bookmarks.plist&lt;/code&gt; for each user, Xcode will only display &lt;em&gt;your&lt;/em&gt; bookmarks in the Bookmarks Navigator panel.&lt;/p&gt;

&lt;p&gt;I think this is a reasonable design choice. However, I can imagine scenarios where it would be useful to share bookmarks with your team, similar to breakpoints. For example, if you are trying to debug a problem with your remote team member and you’ve tracked down the issue to a few specific files and lines, you could bookmark those locations, push your branch, and have the other person checkout that branch. That’s a nicer, more precise experience than listing a bunch of filenames and line numbers in a Slack message that will eventually get lost. Another example would be for an interview exercise or a coding tutorial. You could prepare an Xcode project with bookmarks to guide someone through an exercise.&lt;/p&gt;

&lt;p&gt;For now, this is not possible in Xcode’s UI, but you could easily write a script to move a pre-populated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bookmarks.plist&lt;/code&gt; file to the correct location, based on the current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$USER&lt;/code&gt;.&lt;/p&gt;

&lt;h4 class=&quot;text-center text-light-dark&quot;&gt;* * *&lt;/h4&gt;

&lt;p&gt;While I’m here, there is one other usability issue with bookmarks. You have to right-click in a file to bring up the contextual menu to create one. It’s a bit cumbersome. There are keyboard shortcuts, but it would also be nice if you could create bookmarks by clicking in the line number gutter — similar to how you create breakpoints.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/07/11/where-are-xcode-bookmarks-stored/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/07/11/creating-dynamic-colors-in-swiftui/</id>
        <link href="https://www.jessesquires.com/blog/2023/07/11/creating-dynamic-colors-in-swiftui/" />
        <title>Creating dynamic colors in SwiftUI</title>
        <published>2023-07-11T09:05:52-07:00</published>
        <updated>2023-07-11T09:05:52-07:00</updated>

        <category term="software-dev" />
        <category term="swiftui" /><category term="ios" /><category term="macos" /><category term="uikit" /><category term="appkit" /><category term="dark-mode" />
        <summary type="html">&lt;p&gt;Beginning with the introduction of &lt;a href=&quot;/blog/tags/dark-mode/&quot;&gt;dark mode&lt;/a&gt; in iOS 13, colors in iOS are now (optionally) dynamic. You can provide light and dark variants for all colors in your app. However, I was surprised to find that SwiftUI — which also made its first appearance on the platform in iOS 13 — &lt;em&gt;still&lt;/em&gt; does not provide any API for creating dynamic colors.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;Beginning with the introduction of &lt;a href=&quot;/blog/tags/dark-mode/&quot;&gt;dark mode&lt;/a&gt; in iOS 13, colors in iOS are now (optionally) dynamic. You can provide light and dark variants for all colors in your app. However, I was surprised to find that SwiftUI — which also made its first appearance on the platform in iOS 13 — &lt;em&gt;still&lt;/em&gt; does not provide any API for creating dynamic colors.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;In UIKit, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIColor&lt;/code&gt; provides a dynamic initializer, &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uicolor/3238041-init&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init(dynamicProvider:)&lt;/code&gt;&lt;/a&gt;, which I &lt;a href=&quot;/blog/2020/03/23/implementing-dark-mode-with-cgcolor/&quot;&gt;wrote about here&lt;/a&gt;. AppKit provides the equivalent API for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSColor&lt;/code&gt;. Unfortunately, an equivalent API for SwiftUI’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Color&lt;/code&gt; &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/color&quot;&gt;is missing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;UIKit also allows you to extract a specific variant from a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIColor&lt;/code&gt; using &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uicolor/3238042-resolvedcolor&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolvedColor(with:)&lt;/code&gt;&lt;/a&gt;, which will return either the dark or light variant based on the provided trait collection. Again, AppKit provides the equivalent API for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSColor&lt;/code&gt;. Surprisingly, in iOS 17 SwiftUI’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Color&lt;/code&gt; gained a new API for color resolution, &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/color/resolve(in:)&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolve(in:)&lt;/code&gt;&lt;/a&gt;, which returns the resolved color value based on the provided &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EnvironmentValues&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The result is that SwiftUI’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Color&lt;/code&gt; API is oddly incomplete. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Color&lt;/code&gt; has no equivalent API to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIColor.init(dynamicProvider:)&lt;/code&gt;, but &lt;em&gt;it does&lt;/em&gt; provide its own version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIColor.resolvedColor(with:)&lt;/code&gt;. This is not only inconvenient, but very confusing.&lt;/p&gt;

&lt;p&gt;Of course, you can use Asset Catalogs to define dynamic colors and reference them in SwiftUI, and Xcode 15 &lt;a href=&quot;https://nilcoalescing.com/blog/Xcode15Assets/&quot;&gt;makes that easier&lt;/a&gt;! But if you need to programmatically initialize dynamic colors in SwiftUI, you are out of luck due to this glaring omission. Instead, you must resort to UIKit and AppKit. So, here’s a helpful extension that accommodates the missing API for all platforms.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SwiftUI&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#if canImport(AppKit)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppKit&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#if canImport(UIKit)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIKit&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;#if canImport(UIKit)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;#else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cp&quot;&gt;#if canImport(UIKit)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;#if os(watchOS)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// watchOS does not support light mode / dark mode&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Per Apple HIG, prefer dark-style interfaces&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uiColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;#else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uiColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dynamicProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;traits&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;traits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userInterfaceStyle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;unspecified&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;light&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dark&lt;/span&gt;

            &lt;span class=&quot;kd&quot;&gt;@unknown&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;assertionFailure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unknown userInterfaceStyle: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;traits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userInterfaceStyle&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;light&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;

    &lt;span class=&quot;cp&quot;&gt;#if canImport(AppKit)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nsColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dynamicProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appearance&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appearance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aqua&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vibrantLight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessibilityHighContrastAqua&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;accessibilityHighContrastVibrantLight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;light&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;darkAqua&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vibrantDark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessibilityHighContrastDarkAqua&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;accessibilityHighContrastVibrantDark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dark&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;assertionFailure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unknown appearance: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appearance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;light&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now you can initialize a SwiftUI &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Color&lt;/code&gt; programmatically with a light and dark variant.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;textColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anotherColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/07/11/creating-dynamic-colors-in-swiftui/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/05/08/going-indie-2/</id>
        <link href="https://www.jessesquires.com/blog/2023/05/08/going-indie-2/" />
        <title>Going Indie: building a foundation, finding clients, and negotiating rates</title>
        <published>2023-05-08T09:42:09-07:00</published>
        <updated>2023-05-08T09:42:09-07:00</updated>

        <category term="essays" />
        <category term="series-going-indie" /><category term="indie-dev" /><category term="contracting" /><category term="freelance" /><category term="consulting" />
        <summary type="html">&lt;p&gt;Welcome to my next post on going indie! In the &lt;a href=&quot;/blog/2023/04/10/going-indie/&quot;&gt;previous one&lt;/a&gt;, I provided a high-level overview and introduction, and answered some of the most common questions I get from folks. In this post I’m going to dive deeper into how you can prepare to go independent, how to find clients, and other tips.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;Welcome to my next post on going indie! In the &lt;a href=&quot;/blog/2023/04/10/going-indie/&quot;&gt;previous one&lt;/a&gt;, I provided a high-level overview and introduction, and answered some of the most common questions I get from folks. In this post I’m going to dive deeper into how you can prepare to go independent, how to find clients, and other tips.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Disclaimer: As I &lt;a href=&quot;/blog/2023/04/10/going-indie/&quot;&gt;mentioned before&lt;/a&gt;, certain aspects of this series will be US-centric and I acknowledge that folks from underrepresented identities in the tech industry may not be able to replicate my trajectory or have the same experience.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;building-a-foundation&quot;&gt;Building a foundation&lt;/h3&gt;

&lt;p&gt;When I look around the indie dev community within the broader Apple developer community, there is one characteristic that most indie devs share — they do &lt;em&gt;more&lt;/em&gt; than just write code. There are too many indie devs that I admire to attempt to list them all here, but they are all involved in more than &lt;em&gt;only&lt;/em&gt; writing apps. They write blogs, they speak at conferences, they produce podcasts, they are involved in open source, they publish newsletters.&lt;/p&gt;

&lt;p&gt;I recognize that not everyone is able to do open source, or blog, or speak at conferences for various reasons — time constraints, childcare, etc. While these extra activities are certainly not required to do freelance work or make your own apps, they will help tremendously.&lt;/p&gt;

&lt;p&gt;There is no single thing you can do to prepare for going indie, and it is definitely a long-term plan you should make. My career trajectory and experience set me up very well to eventually transition to being independent, but I was not necessarily conscious of this in the moment. Much of what I have been able to do originates from a place of privilege. I have had a lot of spare time to dedicate to “extracurricular activities” (open source, blogging, etc.) outside normal working hours when I was working at my full-time jobs in the past.&lt;/p&gt;

&lt;p&gt;I got involved in the &lt;a href=&quot;https://github.com/jessesquires&quot;&gt;open source iOS community&lt;/a&gt; very early in my career with &lt;a href=&quot;/projects/&quot;&gt;a number of projects&lt;/a&gt;, but &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController&quot;&gt;JSQMessagesViewController&lt;/a&gt; (RIP) in particular was a huge success story. I also started this blog almost a decade ago (!!) and got unexpectedly &lt;a href=&quot;https://daringfireball.net/linked/2014/08/18/swift-performance&quot;&gt;Fireballed&lt;/a&gt; very early — that was pure luck, and it kickstarted my online following. My open source work and blogging helped me get recognized in the industry and build a following &lt;a href=&quot;https://twitter.com/jesse_squires&quot;&gt;on Twitter&lt;/a&gt; (also RIP), which eventually lead to me &lt;a href=&quot;/speaking/&quot;&gt;speaking&lt;/a&gt; at local meetups, and then at indie conferences.&lt;/p&gt;

&lt;p&gt;In many ways, I really lucked out on the &lt;em&gt;timing&lt;/em&gt; of my involvement in iOS development — iOS was still somewhat nascent (I started around iOS 5) and there were more opportunities back then for open source to fill-in gaps in the SDKs and improve the APIs. (We did not even have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UICollectionView&lt;/code&gt; back then!) There was also a strong iOS meetup scene in San Francisco, with multiple groups meeting regularly, like &lt;a href=&quot;https://www.meetup.com/swift-language/&quot;&gt;SLUG&lt;/a&gt; (RIP). Many factors contributed to the decline of the iOS meetup scene in SF, but the pandemic expedited that process and left little room for others to try to revive it. After a few years of blogging, open source, meetups, and conferences, I eventually started the &lt;a href=&quot;https://github.com/SwiftWeekly&quot;&gt;Swift Weekly Brief&lt;/a&gt; newsletter (RIP) after Swift was announced. The newsletter project led to starting the &lt;a href=&quot;https://swiftunwrapped.github.io&quot;&gt;Swift Unwrapped&lt;/a&gt; podcast (RIP) with &lt;a href=&quot;https://www.jpsim.com&quot;&gt;my friend JP Simard&lt;/a&gt; — who I first met through SLUG! And then eventually, somehow, I ended up &lt;a href=&quot;https://www.meetup.com/swift-language/events/240443949/&quot;&gt;hosting a panel&lt;/a&gt; with Chris Lattner at WWDC 2017. And the rest, as they say, is history.&lt;/p&gt;

&lt;p&gt;In addition to everything above, I worked full-time jobs at various companies in the industry for about 7 years. That industry experience was important. One aspect of full-time work that I did not intentionally plan, but that ended up being incredibly valuable was working for a diverse set of companies — they were all different sizes, they were at different stages, they made very different products, and they had very different business models. That breadth of exposure and experience was extremely beneficial when I started working with clients — which were, of course, all very different.&lt;/p&gt;

&lt;p&gt;When you put all of these things together, you end up with multiple &lt;strong&gt;positive feedback loops&lt;/strong&gt;. Open source gives you valuable experience in programming and project management, it gives you topics to blog about, and it helps build your portfolio. Those experiences and portfolio pieces help you land competitive jobs. Blogging gives you exposure and recognition, which can help you speak at conferences. Notably, I link to my &lt;a href=&quot;/hire-me/&quot;&gt;“Hire Me” page&lt;/a&gt; at the bottom of every blog post in case a potential client is reading (you never know!). Speaking at conferences helps promote your open source work, blog, or podcast. Each of these contribute to building your résumé, leading to even better job prospects. Everything provides more experience to learn from and write about on your blog or present at a conference. And, so on. Each of these things has the potential to lead you to a new client, or better yet, have a client &lt;em&gt;discover you&lt;/em&gt;. Everything feeds into everything else creating multiple intertwined positive feedback loops, culminating in a body of work and evidence that you can show potential clients to get contracts and freelance gigs. Then, add your indie apps on top of all of this. Your experience helps you write better apps, your apps build your portfolio and provide more content for your blog or conference talks, and so on.&lt;/p&gt;

&lt;p&gt;While I do not think everyone needs to follow my exact footsteps in order to successfully go independent or start freelancing, I attribute my success so far to the accumulation of all of these experiences. They all had an incredibly important impact on me, but the most important aspect was all the compounding effects and positive feedback loops. Also recognize that you do not have to do &lt;em&gt;all&lt;/em&gt; of these things, especially not all at once. Pick one, maybe two, that interest you the most. Maybe you start a blog first and after you feel established with that, try to speak at a conference.&lt;/p&gt;

&lt;p&gt;The last point I want to emphasize is that &lt;em&gt;none of this&lt;/em&gt; happened instantly. None of the indie devs you look up to launched a blog with 100 popular posts overnight, nor published a podcast with 100 episodes in a single day. All projects are a gradual process. I did not actively work on all the projects I mentioned above &lt;em&gt;at the same time&lt;/em&gt;. Little by little, I slowly built up my portfolio. I spent 7 years doing a mix of working full-time, contributing to open source, blogging, speaking, and podcasting — and notably, &lt;strong&gt;not all at once, nor consistently&lt;/strong&gt;. I had plenty of low points where I did very little outside of my full-time job. I also had periods of time where I focused on a single project outside of work, like the newsletter or the podcast.&lt;/p&gt;

&lt;p&gt;Each of these projects is a long-term investment and overtime your body of work grows. Not to mention, your past work often continues to pay dividends in the future. For example, some of my current most-visited blog posts were written years ago! Just like building an app, you have to start somewhere. Furthermore, the majority of the popular projects mentioned above, the ones I am most well-known for, are all now defunct! Not everything needs to last forever, nor should it.&lt;/p&gt;

&lt;h3 id=&quot;finding-clients&quot;&gt;Finding clients&lt;/h3&gt;

&lt;p&gt;The stronger the foundation you build, the easier it will be to find clients. An important aspect of everything I discussed above is that each of these things is building your network. You meet a lot of people in the industry through conferences, full-time jobs, open source projects, etc. I have met so many people over the years and made a lot of friends. Again, doing all of these extra things outside of a full-time job is &lt;em&gt;not a prerequisite&lt;/em&gt; to going indie and contracting, but it gives you a much better place to start — not only because of all of the positive feedback loops, but also because of how it expands your network. And it is important to note that working at multiple different companies when you are full-time expands your network, too. Each time you change jobs to work with new people, your network grows. Furthermore, when &lt;em&gt;your coworkers&lt;/em&gt; leave for a new job your &lt;em&gt;secondary&lt;/em&gt; network grows.&lt;/p&gt;

&lt;p&gt;So far, for the past 3 years, &lt;strong&gt;all&lt;/strong&gt; of my clients have come to me through friends and acquaintances — former coworkers, fellow conference speakers, folks in open source, and other people that I have met during my time in the tech industry. I think this is the best way to find clients rather than reaching out to complete strangers because you begin the conversation with some baseline rapport through your mutual connections. If you do not have the experience I have had with all the “extracurricular activities”, or if you are unable to do so, do not worry. A great first step to finding clients is to reach out to your former coworkers and managers. They may be at a different company now that is looking for contractors, or they might have another connection that is looking for freelancers. However, you would also be surprised how often folks quit a full-time job and return to the same company as contractor, so do not be shy to ask your previous employer about contracting opportunities.&lt;/p&gt;

&lt;h3 id=&quot;keeping-clients-and-other-tips&quot;&gt;Keeping clients and other tips&lt;/h3&gt;

&lt;p&gt;This is probably obvious, but the best way to keep clients is to impress them with your skills. Do the best work you can. Build rapport. Work on having clear, &lt;strong&gt;pro-active&lt;/strong&gt; communication with them. Often, one client can lead to another. If a client has a great experience working with you, they are more likely to recommend you to someone else in their network. As you can see, there is a recurring theme of building positive feedback loops.&lt;/p&gt;

&lt;p&gt;Another critical task is to ask for feedback. You should do this regularly, &lt;em&gt;during your contracts&lt;/em&gt; with your clients. This is for your benefit, to identify your strengths and your weaknesses. Otherwise, you will never know how you can improve. Finally, when a contract ends, &lt;em&gt;ask your client for a testimonial&lt;/em&gt;. They may decline, and that’s ok, but it never hurts to ask. Be sure to ask permission to publish the testimonial. Testimonials are so valuable to your continued success. They provide a source of legitimacy for new clients and can help address hesitations they may have when deciding whether or not to work with you. You can find the testimonials I have collected &lt;a href=&quot;/hire-me/&quot;&gt;here&lt;/a&gt;. Also note that some of my testimonials are from when I worked full-time jobs. If you need to jump-start your collection, ask one of your former managers for a testimonial.&lt;/p&gt;

&lt;p&gt;The final piece of advice I have regarding clients is to avoid the predatory freelance platforms that are attempting to &lt;em&gt;gig-ify&lt;/em&gt; contract and freelance work. These are platforms like Upwork, Freelancer.com, Fiverr, etc. They all facilitate and foster a race-to-the-bottom for hourly rates, impose excessive fees (up to 20% of your hourly rate!), and are generally nothing more than extractive middlemen. Think &lt;em&gt;Uber, but for freelancers&lt;/em&gt;. You are their product. These platforms exist solely to further commodify your labor (beyond capitalism’s existing commodification of labor), de-value your highly-trained skills, and disguise wage theft through the collection of predatory fees. If your only option is using one of these platforms, you are better off working a full-time job.&lt;/p&gt;

&lt;h3 id=&quot;negotiating-rates&quot;&gt;Negotiating rates&lt;/h3&gt;

&lt;p&gt;Negotiating hourly rates or project rates is difficult to discuss generally. There are so many variables to consider with any given client and project, as well as your skill level. I cannot comment on other areas of expertise in the tech industry, but based on my experience with freelance iOS development, hourly rates range from $100/hour to $300/hour. Most commonly, what I see is $150-200/hour. If you are just starting out, it may be worth your time and energy to take some lower paying contracts to build on your experience and collect testimonials. But our goal, obviously, is to get the highest hourly rate possible.&lt;/p&gt;

&lt;p&gt;You should determine your limits and requirements before negotiating with clients. You must ask yourself, &lt;em&gt;“am I willing to lose this potential client over hourly rates?”&lt;/em&gt; If you do not want to work for less than $150/hour and a potential client is unwilling (or unable) to meet this requirement, then you need to be comfortable and confident enough to not only walk away, but also not regret passing on that project. Will you later think to yourself, &lt;em&gt;“damn, I really should have taken that project for $125/hour”&lt;/em&gt;? If so, then you did not accurately determine your limit. It does not matter what your limit is, and everyone’s will be different. What matters is knowing your limit and sticking to it, otherwise you will be miserable working for too little, or regretting a missed opportunity. It is also worth considering what types of projects you &lt;em&gt;will not&lt;/em&gt; work on. For example, I do not fuck with cryptocurrency and NFTs. If a potential client project deals with those things, &lt;em&gt;I am not interested&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;One important thing to remember is that all parts of a contract can be negotiable. For example, suppose a client offers $125/hour at 30 hours per week, but you have recently been working contracts for $175/hour. You could instead offer $175/hour at only 20 hours per week, which is still within their &lt;em&gt;weekly&lt;/em&gt; budget. And you can propose that you try this for one month and then re-evaluate. I have been in a similar situation that ended up working out very well — the client was pleasantly surprised and more than pleased with what I could accomplish with only 20 hours each week. Many clients &lt;em&gt;think&lt;/em&gt; they need someone full-time, but they &lt;em&gt;rarely&lt;/em&gt; do. As a contractor, you are removed from much of the company bureaucracy, which gives you more time to do actual work.&lt;/p&gt;

&lt;p&gt;Another strategy is to negotiate working at a lower rate for a specific duration, at which point you and the client decide if you both want to continue. If so, you both agree to increase your rate. For example, you can propose working for one month at $125/hour. At the end of that month, you and the client re-evaluate — are you both happy with the progress so far and do you want to continue working together? If yes, then your rate goes up to $175/hour. You could also take this approach without adjusting your rates, and work for the first month at your full rate. This strategy gives both you and the client an opportunity to evaluate the pros and cons, then commit or walk away. Most often, clients are hesitant to pay higher rates because they do not understand what they are getting. Offering these introductory, “probationary” periods is a low-barrier way to show them what you can do.&lt;/p&gt;

&lt;p&gt;Philosophically, I have issues with hourly rates as they do not capture the true value of your labor. If you are highly skilled and great at what you do, then you can complete tasks efficiently and quickly. But getting work done quickly at an hourly rate punishes you for being extremely good at what you do. If a task takes you 1 hour at $200/hour, that’s $200. But if it takes you 5 hours, that’s $1,000. The logic does not make sense. If you can complete a project in one month versus someone else that will take 4 months — aren’t you &lt;em&gt;more&lt;/em&gt; valuable than the other person? Yes, and so you should be paid more. This should factor into how you determine your hourly rates. The better you are, the more you should charge. This line of reasoning is how you convince your client to pay more — clients &lt;em&gt;do not&lt;/em&gt; place more value on a project taking &lt;em&gt;longer&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Anyway, I could write an entirely separate post on hourly rates and the value of labor. Unfortunately, hourly rates are the norm and project-based rates are not very common. This is what we’ve got to work with for now, which is why your rates should be higher rather than lower. I have never worked a contract for a project-based rate (yet). In the meantime, if this topic is interesting to you, you should watch this brief &lt;a href=&quot;https://www.youtube.com/shorts/TxeEzZvVGUc&quot;&gt;video from Chris Do&lt;/a&gt; that clearly articulates this conundrum. His other videos are great, too!&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Today we covered how to prepare yourself for going independent, creating positive feedback loops, the importance of networking, finding clients, and negotiating contracts. I hope this post was helpful if you are considering going independent. There is still more to come in this series. In future posts I will discuss bookkeeping, taxes, saving for retirement, and more! Stay tuned.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/05/08/going-indie-2/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/04/26/estimating-rss-subscribers/</id>
        <link href="https://www.jessesquires.com/blog/2023/04/26/estimating-rss-subscribers/" />
        <title>Estimating RSS subscribers on NearlyFreeSpeech.net</title>
        <published>2023-04-26T09:16:39-07:00</published>
        <updated>2023-04-26T09:16:39-07:00</updated>

        <category term="software-dev" />
        <category term="rss" /><category term="json" /><category term="nfsn" /><category term="nearlyfreespeech" /><category term="web" />
        <summary type="html">&lt;p&gt;I recently asked on Mastodon for tips on estimating your total number of RSS subscribers. It turns out it is rather easy to do. While I do have (privacy-aware) &lt;a href=&quot;/blog/2020/05/08/simple-private-opensource-analytics-with-goatcounter/&quot;&gt;analytics for my site&lt;/a&gt;, this only tracks page views.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;I recently asked on Mastodon for tips on estimating your total number of RSS subscribers. It turns out it is rather easy to do. While I do have (privacy-aware) &lt;a href=&quot;/blog/2020/05/08/simple-private-opensource-analytics-with-goatcounter/&quot;&gt;analytics for my site&lt;/a&gt;, this only tracks page views.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Some friends pointed me to &lt;a href=&quot;https://darekkay.com/blog/rss-subscriber-count/&quot;&gt;this blog post&lt;/a&gt; which describes how to do this by simply searching through your web server logs. If you use &lt;a href=&quot;https://www.nearlyfreespeech.net&quot;&gt;NearlyFreeSpeech.net&lt;/a&gt; for hosting, like me, there are some additional steps.&lt;/p&gt;

&lt;p&gt;First, logs are &lt;em&gt;not&lt;/em&gt; enabled by default on NFSN. You need to navigate to your site settings to turn on logging. Logs are then stored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/logs&lt;/code&gt;. You can find all the information you need about log files on NFSN &lt;a href=&quot;https://faq.nearlyfreespeech.net/section/logfiles/-&quot;&gt;in these FAQs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You should wait at least a few days or a week after enabling logs before accessing them so that you can collect some data. Then you can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep&lt;/code&gt; the logs to see the requests for your feeds. I publish an RSS feed as well as a JSON feed.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;access_log | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;feed.xml
&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;access_log | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;feed.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unsurprisingly, the number of subscribers to the RSS feed is significantly higher than the JSON feed.&lt;/p&gt;

&lt;p&gt;Some centralized services put the number of subscribers in the “user agent” string of their HTTP requests. You’ll see log entries like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;GET /feed.xml HTTP/1.1&quot;&lt;/span&gt; 304 - &lt;span class=&quot;s2&quot;&gt;&quot;-&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Feedbin feed-id:1344882 - 122 subscribers&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;GET /feed.xml HTTP/1.1&quot;&lt;/span&gt; 304 - &lt;span class=&quot;s2&quot;&gt;&quot;-&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Feedly/1.0 (+http://www.feedly.com/fetcher.html; 265 subscribers; like FeedFetcher-Google)&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I anticipated having at least a few thousand subscribers based on my site analytics, but it appears to be more on the order of a few hundred.  It’s a shame that RSS readers are not more popular.&lt;/p&gt;

&lt;p&gt;Obviously, decentralized RSS reader apps cannot provide subscriber data. But it was still neat to see what apps people are using. For example, it was nice to see &lt;a href=&quot;https://netnewswire.com&quot;&gt;NetNewsWire&lt;/a&gt; in the logs!&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;GET /feed.json HTTP/1.1&quot;&lt;/span&gt; 304 - &lt;span class=&quot;s2&quot;&gt;&quot;-&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;NetNewsWire (RSS Reader; https://netnewswire.com/)&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are interested in seeing the &lt;em&gt;total&lt;/em&gt; number of requests for your feed, you can pipe the output to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wc&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;access_log | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;feed.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;wc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is important to note that this number &lt;strong&gt;does not&lt;/strong&gt; represent &lt;em&gt;unique&lt;/em&gt; users, but it was still interesting for me to see. In one week, my feeds were requested over 78,000 times. That was much higher than I expected.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/04/26/estimating-rss-subscribers/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/04/25/linebreakstrategy-pushout/</id>
        <link href="https://www.jessesquires.com/blog/2023/04/25/linebreakstrategy-pushout/" />
        <title>How to prevent orphan words in text views on iOS and macOS</title>
        <published>2023-04-25T10:22:55-07:00</published>
        <updated>2023-04-25T10:22:55-07:00</updated>

        <category term="software-dev" />
        <category term="ios" /><category term="macos" /><category term="uikit" /><category term="appkit" /><category term="textkit" />
        <summary type="html">&lt;p&gt;When you display text in your app, you might come across situations where the text layout produces undesirable results under certain layout constraints. The text could wrap on smaller devices or be truncated in certain localizations. At this point, we are well-equipped with adaptive APIs to make our layouts work on all screen sizes — for example, we have &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uifont/scaling_fonts_automatically&quot;&gt;Dynamic Type&lt;/a&gt;, &lt;a href=&quot;https://developer.apple.com/documentation/uikit/view_layout&quot;&gt;Auto Layout&lt;/a&gt;, and &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uitraitcollection&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UITraitCollection&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;When you display text in your app, you might come across situations where the text layout produces undesirable results under certain layout constraints. The text could wrap on smaller devices or be truncated in certain localizations. At this point, we are well-equipped with adaptive APIs to make our layouts work on all screen sizes — for example, we have &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uifont/scaling_fonts_automatically&quot;&gt;Dynamic Type&lt;/a&gt;, &lt;a href=&quot;https://developer.apple.com/documentation/uikit/view_layout&quot;&gt;Auto Layout&lt;/a&gt;, and &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uitraitcollection&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UITraitCollection&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;However, some situations require fine tuning the formatting and layout of text using TextKit. Text layout APIs on Apple Platforms are provided by TextKit, which is available as part of &lt;a href=&quot;https://developer.apple.com/documentation/uikit/textkit&quot;&gt;UIKit&lt;/a&gt; and &lt;a href=&quot;https://developer.apple.com/documentation/appkit/textkit&quot;&gt;AppKit&lt;/a&gt;. TextKit is what powers &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uitextview&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UITextView&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.apple.com/documentation/appkit/nstextview&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSTextView&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One scenario where adaptivity APIs will not help is when you layout a body of text that results in an orphan word on the final line. Often, this simply looks bad. The text does not look balanced. Orphaned words are not aesthetically pleasing. This is especially true if you have only two lines of text, where the second line contains a single word. It is even worse if the text is center-aligned. How can we solve this issue?&lt;/p&gt;

&lt;p&gt;Image our text view is laying out text like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TextKit manages text storage and performs layout of text-based content on iOS and
macOS.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The TextKit APIs we need to use are part of &lt;a href=&quot;https://developer.apple.com/documentation/uikit/nsparagraphstyle&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSParagraphStyle&lt;/code&gt;&lt;/a&gt;. The first API you might try to use is &lt;a href=&quot;https://developer.apple.com/documentation/uikit/nslinebreakmode&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSLineBreakMode&lt;/code&gt;&lt;/a&gt; which has been available since iOS 6 and macOS 10. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.lineBreakMode&lt;/code&gt; of an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSParagraphStyle&lt;/code&gt; specifies what happens when a line is too long for a container. Your options are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.byWordWrapping&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.byCharWrapping&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.byClipping&lt;/code&gt;, and more. However, none of these will address the issue of orphan words.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;textView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITextView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AttributedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TextKit manages text storage and performs layout of text-based content on iOS and macOS.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Does Not Work!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;paragraphStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSMutableParagraphStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;paragraphStyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lineBreakMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byWordWrapping&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paragraphStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paragraphStyle&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;textView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributedText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSAttributedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSParagraphStyle&lt;/code&gt; API we need to use is the similarly named, but much newer &lt;a href=&quot;https://developer.apple.com/documentation/uikit/nsparagraphstyle/linebreakstrategy&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LineBreakStrategy&lt;/code&gt;&lt;/a&gt;, which was added in iOS 14 and macOS 11. This property specifies how the text system breaks lines while laying out paragraphs. The option we want is &lt;a href=&quot;https://developer.apple.com/documentation/uikit/nsparagraphstyle/linebreakstrategy/3667460-pushout&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.pushOut&lt;/code&gt;&lt;/a&gt;, which &lt;em&gt;“pushes out individual lines to avoid an orphan word on the last line of the paragraph.”&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;textView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITextView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AttributedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TextKit manages text storage and performs layout of text-based content on iOS and macOS.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Fixed!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;paragraphStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSMutableParagraphStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;paragraphStyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lineBreakStrategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pushOut&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paragraphStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paragraphStyle&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;textView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributedText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSAttributedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will adjust the layout so that there are at least two words on the second line:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TextKit manages text storage and performs layout of text-based content on iOS
and macOS.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/04/25/linebreakstrategy-pushout/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/04/24/new-app-taxatio/</id>
        <link href="https://www.jessesquires.com/blog/2023/04/24/new-app-taxatio/" />
        <title>Introducing Taxatio</title>
        <published>2023-04-24T09:46:19-07:00</published>
        <updated>2023-04-24T09:46:19-07:00</updated>

        <category term="software-dev" />
        <category term="ios" /><category term="macos" /><category term="swiftui" /><category term="apps" /><category term="indie-dev" /><category term="contracting" /><category term="freelance" /><category term="consulting" /><category term="taxatio-journal" />
        <summary type="html">&lt;p&gt;I’m excited to share that I recently released a new app, a tax calculator for freelancers called &lt;a href=&quot;https://www.hexedbits.com/taxatio/&quot;&gt;Taxatio&lt;/a&gt;. It is specifically for self-employed sole proprietors based in the United States — freelancers, consultants, independent contractors, and indie developers (like me!). One of the more confusing and difficult aspects of &lt;a href=&quot;/blog/2023/04/10/going-indie/&quot;&gt;going independent&lt;/a&gt; is taxes. And that’s why I made this. It is a multiplatform SwiftUI app for iOS and macOS available as a universal purchase &lt;a href=&quot;https://apps.apple.com/app/taxatio/id6443885452&quot;&gt;on the App Store&lt;/a&gt;.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;I’m excited to share that I recently released a new app, a tax calculator for freelancers called &lt;a href=&quot;https://www.hexedbits.com/taxatio/&quot;&gt;Taxatio&lt;/a&gt;. It is specifically for self-employed sole proprietors based in the United States — freelancers, consultants, independent contractors, and indie developers (like me!). One of the more confusing and difficult aspects of &lt;a href=&quot;/blog/2023/04/10/going-indie/&quot;&gt;going independent&lt;/a&gt; is taxes. And that’s why I made this. It is a multiplatform SwiftUI app for iOS and macOS available as a universal purchase &lt;a href=&quot;https://apps.apple.com/app/taxatio/id6443885452&quot;&gt;on the App Store&lt;/a&gt;.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;I did a soft launch &lt;a href=&quot;https://www.hexedbits.com/news/2022/12/05/taxatio-launch/&quot;&gt;back in December&lt;/a&gt; and released the first update &lt;a href=&quot;https://www.hexedbits.com/news/2023/03/31/taxatio-update/&quot;&gt;last month&lt;/a&gt;. It has been a long process and a fun project, and I’m glad I can finally share it. Ultimately, I made this app for myself. As &lt;a href=&quot;/blog/2023/04/10/going-indie/&quot;&gt;an indie dev and contractor&lt;/a&gt;, taxes are confusing and hard — at least at first. There is much more to consider as opposed to being a full-time W-2 employee. Notably, you have to pay quarterly estimated taxes since deductions are not automatically taken from your payments from clients as a 1099 contractor.&lt;/p&gt;

&lt;p&gt;This app started out as a note in the Notes app with my rough calculations and estimations. When that got too ridiculous, I made a Swift Playground. When that grew unwieldy, I moved all the calculation code into a proper Swift Package with unit tests. After that, I realized that all I needed to do was build a UI and then anyone could use this tool and benefit from it. Now here I am, with a fully-fledged app for iOS and macOS, built with SwiftUI.&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;d-flex justify-content-center col-12 &quot;&gt;
        &lt;figure&gt;
            &lt;img class=&quot;img-thumbnail img-fluid&quot; src=&quot;/img/blog/taxatio.jpg&quot; title=&quot;Taxatio for iOS and macOS&quot; alt=&quot;Taxatio for iOS and macOS&quot; /&gt;
            &lt;div class=&quot;row&quot;&gt;
                &lt;div class=&quot;col-12 d-flex justify-content-center&quot;&gt;
                
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;the-name-and-icon&quot;&gt;The name and icon&lt;/h3&gt;

&lt;p&gt;The word &lt;a href=&quot;https://en.wiktionary.org/wiki/taxatio&quot;&gt;taxatio&lt;/a&gt; is a Latin noun meaning “valuing” or “estimation” and it is the root of the English word &lt;em&gt;taxation&lt;/em&gt;. Note that it is &lt;strong&gt;not&lt;/strong&gt; pronounced “Tax a tio” (tax a TEE-OH) like one of my good friends guessed, which I think is how you say “tax an uncle” in Spanish. You can listen to the correct &lt;a href=&quot;https://translate.google.com/?sl=la&amp;amp;tl=en&amp;amp;text=taxatio&amp;amp;op=translate&quot;&gt;pronunciation here&lt;/a&gt;. So, that’s the name!&lt;/p&gt;

&lt;p&gt;I am not a designer, but I attempted to make an icon anyway. It is a stylized dollar sign with abstract flames in the background. The intent is to subtly communicate that paying taxes is similar to lighting your money on fire (at least in the US where tax money is primarily used to subsidize the lives of the rich). The more I learn about taxes in general, the more I realize that income tax is specifically designed to punish poor people, whose only means to earn income is through wage labor. Meanwhile, other forms of “income” that ultra wealthy people have — like simply owning property, inheritance, and stonks — are taxed at significantly lower rates. But, I digress.&lt;/p&gt;

&lt;h3 id=&quot;motivations-goals-and-constraints&quot;&gt;Motivations, goals, and constraints&lt;/h3&gt;

&lt;p&gt;I want to emphasize that this app is nothing like TurboTax, QuickBooks, or similar apps. It is a simple estimator. If you have an independent business, you probably use QuickBooks for bookkeeping. I do too. However, you might notice that the quarterly estimated taxes that QuickBooks attempts to estimate are always wrong. This was a big motivation for me to do these calculations myself. QuickBooks simply tries to be too smart based on historical data (which you do not have when you first start out) and projections based on current data (which may not be accurate depending on your upcoming contracts). Additionally, QuickBooks does not know anything about retirement contributions which may also affect your taxes.&lt;/p&gt;

&lt;p&gt;This app is obviously very niche and is mostly for myself, but it serves a few purposes. I wanted to learn SwiftUI and specifically experiment with making a multiplatform app for iOS (iPhone and iPad) and macOS (not using Catalyst). It is a tool I wanted to have and use to get a better understanding of my taxes and to do financial planning during the year. And finally, it is a good project to add to my portfolio. This was my first time ever using SwiftUI.&lt;/p&gt;

&lt;p&gt;The icing on the cake is that I could make this a &lt;em&gt;real&lt;/em&gt; app and sell it on the App Store — and hopefully help out other contractors and freelancers like myself, which is my other primary motivation. You could type “tax calculator” into your favorite search engine and you will find a bunch of poorly-written, sleazy-looking websites to estimate your taxes — they all have a rather terrible experience and limited functionality. I knew I could do much better in general, but more specifically, I wanted Taxatio to also be a tool for folks &lt;em&gt;to learn and understand&lt;/em&gt; what is going on with their taxes. Taxatio has clear breakdowns to show you how things are computed, and each part of the app has helpful tooltips that explain the calculations and tax rules.&lt;/p&gt;

&lt;p&gt;I had a few constraints for building it. I wanted to experiment with out-of-the-box, vanilla iOS and macOS development. That meant no third-party libraries or assets, only use SwiftUI (when possible), only use SFSymbols, customize behavior as little as possible, etc. In other words, what can you do with &lt;em&gt;just&lt;/em&gt; Xcode and everything else that Apple provides with minimal customization? This was important, because this is not an app that I want to spend &lt;em&gt;that&lt;/em&gt; much time on — it is a small, fun project with a limited scope. There were only a few occasions where I needed to use AppKit and UIKit. Much to my surprise and delight, you can get quite far with only the SDK and no third-party help nowadays!&lt;/p&gt;

&lt;h3 id=&quot;features-and-limitations&quot;&gt;Features and limitations&lt;/h3&gt;

&lt;p&gt;As I mentioned, Taxatio has an intentionally limited scope — there is no way for me to reasonably account for all tax scenarios unless I want to spend my entire life writing tax software. The biggest constraints are that the app assumes you are a single-filer and have no dependents. This may change in the future, but those are not scenarios I need to accommodate for myself. Presently, deductions are limited to a single field but I plan to expand on this in future updates. I might also expand on different types of retirement accounts if there are enough requests. Even with these constraints, I suspect the app will be useful to quite a few people.&lt;/p&gt;

&lt;p&gt;After you enter your income, expenses, deductions, etc. you are presented with a detailed breakdown of your adjusted gross income, federal income tax, state income tax, and self-employment tax. Each field also has tooltips that explain how the value was computed. You can also see your tax brackets, along with a breakdown of how much you pay in each bracket. You can select the specific tax year to do historical comparisons, too. It begins with 2020, which is the year &lt;a href=&quot;/blog/2023/04/10/going-indie/&quot;&gt;I went independent&lt;/a&gt; and started doing my own calculations in the Notes app, so this is sort of a small “easter egg”.&lt;/p&gt;

&lt;h3 id=&quot;getting-to-an-mvp&quot;&gt;Getting to an MVP&lt;/h3&gt;

&lt;p&gt;This project reminded me how damn hard it is to &lt;strong&gt;actually release&lt;/strong&gt; software. The core functionality only took around a month or two to write, building the initial UI (for iOS &lt;em&gt;and&lt;/em&gt; macOS) took about another month or two, and then I spent maybe another month on polish, bug fixes, and refinements. Of course, these were not 4-5 consecutive months, but days and weeks spread out over the course of last year. I had a finished app for months before actually submitting to the App Store. I really dragged my feet on getting all of the metadata together (screenshots, description, etc.) as well as building &lt;a href=&quot;https://www.hexedbits.com/taxatio/&quot;&gt;a product page&lt;/a&gt;. For me, all of this stuff at the end is the hardest part — it’s not as fun as programming.&lt;/p&gt;

&lt;p&gt;There is a blog post I read long ago about shipping software and deciding on what will suffice for a minimum viable product (MVP). The author wrote something like, &lt;em&gt;“You should never be embarrassed by what you ship as an MVP, but you &lt;strong&gt;should&lt;/strong&gt; be embarrassed by what you &lt;strong&gt;do not&lt;/strong&gt; ship.”&lt;/em&gt; The idea was that MVPs are, by definition, not what you &lt;em&gt;want&lt;/em&gt; to ship but what you &lt;em&gt;have to&lt;/em&gt; ship. You have to stop somewhere for 1.0, otherwise you will be developing forever and never release anything. I cannot remember who wrote that post. If you know, please tell me and I will link to it!&lt;/p&gt;

&lt;p&gt;Anyway, this is so true. If you &lt;em&gt;are not&lt;/em&gt; embarrassed by all the features your app is missing then you waited too long. (Again, you &lt;em&gt;should&lt;/em&gt; be proud of what you &lt;em&gt;do&lt;/em&gt; ship.) I shipped 1.0 &lt;em&gt;without&lt;/em&gt; state tax calculations. It only computed federal income tax and self-employment tax. Was that embarrassing? Yes, but I’m glad I shipped sooner rather than later and I’m proud of all the features that 1.0 did have — including a bunch of easter eggs. Did I prioritize easter eggs over actual features? Yes, absolutely. (I’ll write more on this another time.)&lt;/p&gt;

&lt;p&gt;The main reason I waited to write this post was so I could &lt;a href=&quot;https://www.hexedbits.com/news/2023/03/31/taxatio-update/&quot;&gt;ship an update&lt;/a&gt; that included state taxes and be less embarrassed about this announcement. Implementing state tax calculations was difficult and took &lt;em&gt;soooo&lt;/em&gt; long because all the states are different. Not to mention, I only ever needed to compute California income tax for myself, so this was the first big feature that provided functionality beyond my own needs.&lt;/p&gt;

&lt;h3 id=&quot;development-retrospective&quot;&gt;Development retrospective&lt;/h3&gt;

&lt;p&gt;Like I mentioned above, the total time it took to make this app was only a few months, but it was spread out over many more. The most difficult part was understanding how to do all the various calculations correctly and finding all of the information about tax brackets, etc. which change every year. There is no centralized database for all of this information. I was learning SwiftUI as I went. I was developing for three devices — iPhone, iPad, and Mac — and two platforms. Given all of that, I feel like the timeline was reasonable.&lt;/p&gt;

&lt;p&gt;Overall, this was a great experience and when SwiftUI &lt;em&gt;just works&lt;/em&gt; it feels magical. However, when SwiftUI &lt;em&gt;does not&lt;/em&gt; work as advertised, it is significantly more confusing than UIKit or AppKit. SwiftUI often has surprising, unexpected behavior. It is very limited compared to UIKit and AppKit, yet what it does provide is typically extremely good. One thing I know for certain is that I would not have been able to build for both iOS and macOS this quickly without SwiftUI.&lt;/p&gt;

&lt;p&gt;I think SwiftUI was very well suited for this tiny, simple app. However, I will not &lt;em&gt;always&lt;/em&gt; reach for SwiftUI in the future. For more complex apps, I still prefer using UIKit/AppKit — or, at least I’ll start with a UIKit/AppKit shell. I have a few more app ideas I want to pursue and only some of them would be good candidates for being entirely SwiftUI.&lt;/p&gt;

&lt;h3 id=&quot;open-source-coming-soon&quot;&gt;Open source coming soon&lt;/h3&gt;

&lt;p&gt;I mentioned above that an early phase of this app was just a Swift Package and a Playground. That package is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TaxCalc&lt;/code&gt; and I plan to make it open source eventually — hopefully by the end of this year. This package encapsulates all the core functionality in the app. I do not plan to open source the entire app. But in theory, you take the package and build your own UI on top of it.&lt;/p&gt;

&lt;h3 id=&quot;taxatio-dev-journal-series&quot;&gt;Taxatio dev journal series&lt;/h3&gt;

&lt;p&gt;Finally, I plan to write a short series of posts about how and why I implemented various parts of the app. I learned a lot while making it. I hope you enjoyed this introductory post. Stay tuned for more! And if you appreciate my blog, consider &lt;a href=&quot;https://apps.apple.com/app/taxatio/id6443885452&quot;&gt;going to the App Store&lt;/a&gt; and giving me some money!&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/04/24/new-app-taxatio/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/04/10/going-indie/</id>
        <link href="https://www.jessesquires.com/blog/2023/04/10/going-indie/" />
        <title>Going Independent: My experience and reflections 3 years later</title>
        <published>2023-04-10T09:47:22-07:00</published>
        <updated>2023-04-10T09:47:22-07:00</updated>

        <category term="essays" />
        <category term="series-going-indie" /><category term="indie-dev" /><category term="contracting" /><category term="freelance" /><category term="consulting" />
        <summary type="html">&lt;p&gt;A number of folks have reached out to me recently (and over the years) asking me about my experience going indie. I originally wanted to write this reflection after my first year, but I could not find the time nor motivation. The early days of the pandemic really drained me. However, I hope these past three years of experience will only make this post more valuable to those seeking to do the same thing I did. I am writing this for anyone who is interested in trying to go independent — either with your own app development business, solo contracting and freelancing, or both.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;A number of folks have reached out to me recently (and over the years) asking me about my experience going indie. I originally wanted to write this reflection after my first year, but I could not find the time nor motivation. The early days of the pandemic really drained me. However, I hope these past three years of experience will only make this post more valuable to those seeking to do the same thing I did. I am writing this for anyone who is interested in trying to go independent — either with your own app development business, solo contracting and freelancing, or both.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;This post aims to be a sort of introduction and reflection. I plan to publish a series of posts about going independent and doing contract work that will elaborate more in-depth on various topics — how to prepare, finding clients, bookkeeping, taxes, and more. So stay tuned!&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;Also, this post assumes that for contracting work, you will be based in the United States and classified as a sole proprietor for tax purposes. Unfortunately, I cannot comment on what it is like to go independent in other countries when it comes to taxes and business structure. However, other aspects of this post should still be helpful for folks living outside the US.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;I quit my full-time job in the summer of 2019 with the goal of pursuing indie iOS and macOS development and do freelance/contract work. I planned to take time off for the last half of 2019, and then get started at the beginning of the new year in 2020. I am now in my fourth year, which feels surreal. I cannot believe it has been so long and that I have made it this far. Honestly, I thought after one or two years, I would be back at a company in a full-time role. However, after three full years things are still going great — despite the pandemic and recent layoffs throughout the tech industry.&lt;/p&gt;

&lt;p&gt;My current arrangement is that I spend the majority of my time on client work — contracting/freelancing. This is what pays the bills and allows me to work on my indie apps. The split is probably about 70-30 or 80-20, depending on the contracting workload I have each month. Slowly but surely, I plan to rebalance my time to reach a 50-50 split between client work and indie work. After that, I want to progress toward 80 percent indie work and 20 percent client work. My goal is to eventually drop client work altogether and focus all of my time on my indie apps — but being an indie dev is incredibly hard and I am not sure if I will ever get to this point. But I will try!&lt;/p&gt;

&lt;p&gt;Overall, this has been an incredibly valuable and rewarding experience for me. Despite periods of stress and a few mistakes along the way, I love being independent. I have learned so much doing this. Unless something significant in my life changes (which is possible!), I do not see myself returning to full-time work at a company in the near future, or possibly ever.&lt;/p&gt;

&lt;h4 class=&quot;text-center text-light-dark&quot;&gt;* * *&lt;/h4&gt;

&lt;p&gt;Before continuing, I want to acknowledge that not everyone will be able to replicate my trajectory and experience going independent — especially folks from underrepresented identities in our industry. Not everyone will be able to do what I have done in exactly the same way. Some folks’ identities will be a barrier, some folks may have important obligations like childcare, and others may face financial constraints.&lt;/p&gt;

&lt;p&gt;As a cis white guy, I have a lot of privilege. Clients typically approach me with a baseline of respect and trust that may not be afforded to people of other skin tones, genders, or orientations. I still have to negotiate rates with clients, but my skills have never been seriously questioned. I rarely have to “prove myself” and I am usually taken at my word when it comes to my abilities and expertise. To anyone from an underrepresented identity reading this, if you are interested in going indie and freelancing, I am more than happy to help however I can — answering questions, giving advice, etc. Please &lt;a href=&quot;/contact/&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;why-go-indie&quot;&gt;Why go indie?&lt;/h3&gt;

&lt;p&gt;If you want to go independent, you &lt;em&gt;really&lt;/em&gt; need to &lt;strong&gt;want it&lt;/strong&gt;. You cannot half-ass this work and lifestyle. It takes &lt;em&gt;a ton&lt;/em&gt; of work and effort — but the benefits and rewards are so worth it. You must be detail-oriented and be able to do self-directed work. There is no structure to your days like working at a company. Outside of working on client projects and your own apps, you have to be willing to do all the administrative work, too — bookkeeping, invoicing, taxes, finding new clients, etc. But do not allow these things to scare you away! (I will cover these topics in future posts in this series.)&lt;/p&gt;

&lt;p&gt;After your first year or two, you will have learned mostly everything you need to know. For me, the first year was full of learning — how to keep my books, how to deal with taxes, how to continue saving for retirement, how to structure my days, how to manage my time, how to get shit done, how to take time off, and the list goes on. Be prepared for this in your first year and do not give up. My second year was all about making refinements and optimizations to all the things I learned in year one. Finally, in my third year I started to feel like I had everything figured out — I was on autopilot and coasting through all those tasks that were previously bumps in the road. Currently, administrative tasks are a breeze, I have consistent work with long-term clients, and I am able to make time to work on my indie apps. I know how to structure my days to get work done, and I know when I need to take time off.&lt;/p&gt;

&lt;h4 class=&quot;text-center text-light-dark&quot;&gt;* * *&lt;/h4&gt;

&lt;p&gt;Philosophically, I have always wanted to be independent. I have never been a “school spirit” or “company pride” kind of guy. Many workers in the tech industry love all the free company swag. I will accept a free company-branded coffee mug, but I will &lt;strong&gt;never&lt;/strong&gt; wear a free t-shirt with the company logo on it. I simply have never identified with a corporation. I never “drank the koolaid” like some folks. I dislike feeling as if a company “owns me” (most employment contracts claim ownership of all intellectual property you produce while employed, even if it occurs outside of working hours). I also dislike how management and executives at big tech companies often seem to feel so entitled to workers’ time. However, working full-time in the industry did give me valuable experience.&lt;/p&gt;

&lt;p&gt;Being an indie dev is something I have always wanted to do, or at least attempt. I want to write and release my own apps — without the explicit goal of &lt;em&gt;starting a company™&lt;/em&gt;. That is, I have no interest in creating a startup, finding investors, and raising money. My goal is to be &lt;strong&gt;independent&lt;/strong&gt;, rather than be beholden to a group of capitalist investors seeking to extract as much value out of me as they can (and ruining whatever product I create in the process). Investors are just another type of boss — like a CEO, but worse. Investors want increasing financial returns, exponential growth at all costs, and ultimately, &lt;em&gt;control&lt;/em&gt;. Like &lt;a href=&quot;https://moxie.org&quot;&gt;Moxie always says&lt;/a&gt;, &lt;em&gt;bad business models produce bad technology&lt;/em&gt; — and I am interested in neither. If one of my app ideas takes off and grows enough organically to become a company (without external investment), that would be great, but my only goal is to make a living for myself and make useful software that does not suck.&lt;/p&gt;

&lt;h3 id=&quot;preparing-to-go-indie&quot;&gt;Preparing to go indie&lt;/h3&gt;

&lt;p&gt;I will elaborate on preparation in a future post in this series. For this post, I only want to emphasize how valuable it was for me work at a &lt;strong&gt;diverse&lt;/strong&gt; set of companies when I was working as a full-time worker. These experiences were crucial for me to be successful as a contractor. There is no single thing you can do to prepare for going indie. It is a long-term game you have to play. But know that your experience working in the industry is helping you build a solid foundation for working with clients, as well as building your own apps. The more depth and breadth you can cover, the better. Every company I worked at was very different — from small startups to large tech corporations, all with very different products and business models.&lt;/p&gt;

&lt;p&gt;Also, I want to briefly mention other opportunities for growth, development, and building a foundation: blogging, speaking at conferences, doing open source, and making side projects. Of course, &lt;em&gt;none&lt;/em&gt; of these things are required, especially not &lt;em&gt;all&lt;/em&gt; of them. And, many folks do not have the privilege to participate in these “extracurricular activities”. If you are able to choose one or two, it will help.&lt;/p&gt;

&lt;h3 id=&quot;preparing-to-quit-full-time&quot;&gt;Preparing to quit full-time&lt;/h3&gt;

&lt;p&gt;First, it is almost &lt;em&gt;never&lt;/em&gt; going to feel like a good time to quit your job. Tech companies often move at a relentless pace. There will always be a new big project coming up. There will always be another vesting date. You have to find the time that is right &lt;strong&gt;for you&lt;/strong&gt; to quit, because there will never be a time that is right for &lt;em&gt;the company&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Once I felt established in the industry and felt like I had enough experience to go solo, I started planning how to make it happen. When I quit my full-time job in the summer of 2019 I had around 8-12 months of living expenses saved — depending on how frugal I wanted to be. I did not intend to be out of work for an entire year, but I wanted some extra padding in case I had trouble finding client work, or if something went wrong.&lt;/p&gt;

&lt;p&gt;Once you have the savings, you just have to jump. I sat on my savings for longer than I needed, waiting for the right time to leave my job. It is difficult to abandon the comfort and stability of a full-time position. When I finally quit during the summer of 2019, I felt a mixture of relief, anxiety, excitement, and stress. After a few weeks, most of that stress was gone and I knew I made the right decision. I took some time off and traveled. I picked up a brief one-month contract in October 2019 through a friend, then I traveled a bit more, and did not work for rest of the year. At the start of 2020, I picked up my first long-term clients and I have had consistent work since. I will write more on finding clients later in this series of posts.&lt;/p&gt;

&lt;p&gt;I recommend quitting full-time work sometime in the second half of the year — not the first half. If you are struggling to “find the right time”, often the end of the year is best. Most companies slow down during the holidays in November and December. Those months are a great time to reset and not work! It is also convenient to begin a new calendar year with a clean slate as a contractor (or unemployed) because it will simplify your tax situation. Personally, I loved having most of the summer to be free. I am so glad I had that time for myself, free from the obligations and toil of labor. Having that break was incredible. Eventually, I want to take off for a long period of time like that again.&lt;/p&gt;

&lt;h3 id=&quot;time-management-and-finding-a-balance&quot;&gt;Time management and finding a balance&lt;/h3&gt;

&lt;p&gt;When you start out — unless you have &lt;em&gt;a ton&lt;/em&gt; of money saved — contracting is how you will finance your indie development, like I mentioned above. Unfortunately, splitting time between client work and indie projects is much easier said than done. You must prioritize what actually earns you money, which is contracting/freelancing. It is very difficult to balance both types of work when you are first getting started. Similar to having a full-time job, after a long day of client work, I often do not want to work &lt;em&gt;even more&lt;/em&gt; on my indie apps. (If you are only interested in contracting, then this will not be a problem for you!)&lt;/p&gt;

&lt;p&gt;What I have found is that it is best to allocate full days to one or the other. Each week I try to do only client work Monday through Thursday, and do indie work on Friday. Sometimes, I will take Thursday for indie work as well, depending on my schedule. Sometimes I work on indie projects in the evening, if I have the energy and nothing better to do. I have also experimented with half days where I spend the morning on indie work and the afternoon on client work, or vice versa. Depending on the clients and projects, that can work well too.&lt;/p&gt;

&lt;p&gt;I have not made as much progress as I would like on my indie projects at this point. However, my first year was spent essentially 100% on client work. I was trying to get established and organized and was learning a lot about this new way of working. My second year was similar, with mostly client work. I was still struggling to find the right balance, and I was working with multiple clients at once — which was exciting and financially lucrative, but it left little time for my indie projects. Also, there was a fucking pandemic, so I try not to be too hard on myself. Toward the end of year two and during year three, I feel like I finally found a better balance and workflow.&lt;/p&gt;

&lt;p&gt;As always with software development, getting 1.0 released is the hardest goddamn part. Once you finally ship an indie project, subsequent updates are significantly easier to manage. You can make point-releases as large or as small as you want. That incremental progress is very satisfying once you get over the hump of the initial release. Releasing updates for existing apps is also substantially easier to balance with client work.&lt;/p&gt;

&lt;h3 id=&quot;life-doesnt-stop&quot;&gt;Life doesn’t stop&lt;/h3&gt;

&lt;p&gt;Aside from the obligations of client work, the other main contributor to my lack of progress on indie apps is… life. Life does not stop. Just like with a full-time job, fucked up things happen (because capitalism), or there is a global pandemic, or you get sick, or someone in your family dies, or you go through a breakup, or you get depressed (because capitalism) — and yet, you are still expected to work every day (because capitalism). Being independent does not solve any of these issues, and it arguably makes dealing with them worse. As a contractor, you only get paid for the hours you work. There is no paid time off. So, when worst comes to worst, it is always the indie projects that must take a back seat to everything else.&lt;/p&gt;

&lt;p&gt;If you are not careful financially, you could end up in a tough spot. The main way to mitigate this is to account for unexpected life events in your hourly rates and maintain an emergency “nest egg” in your savings. Higher hourly rates and a solid amount of savings means you can afford to take a week off because you get sick, or because you are depressed as fuck and tired of staring at code all day. A comfortable amount of savings means you will not feel stressed and anxious when you need to take a mental health break, or a vacation. Remember to be good to yourself! Your self-worth is not defined by your capacity for production under capitalism. I will discuss finances in more detail later in this series.&lt;/p&gt;

&lt;h3 id=&quot;pros-and-cons-differences-expectations-and-faqs&quot;&gt;Pros and cons, differences, expectations, and FAQs&lt;/h3&gt;

&lt;p&gt;The rest of this post is a collection of thoughts that do not fit in the sections above and answers to questions that folks often ask me. I will elaborate on many of these topics in more detail later in this series. It is extremely difficult to quantify the pros and cons between indie dev and contracting work versus full-time employment. They are so different in so many ways. It really depends on what you value. Let’s begin with the big one that everyone cares about the most.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Does freelancing/contracting make more money than full-time employment?&lt;/strong&gt; Well, the answer is not straight-forward. In my experience, I have been able to meet or exceed my base salary from when I was working full-time, and according to &lt;a href=&quot;https://www.levels.fyi/&quot;&gt;levels.fyi&lt;/a&gt; I am still comfortably within current salary ranges. However, depending on the company, once you add stock options and bonuses, usually a full-time position pays more overall. &lt;strong&gt;But&lt;/strong&gt; — importantly, I am only working 20-30 hours per week on client work &lt;strong&gt;and&lt;/strong&gt; I usually take time off for a total of 1-3 months each year. &lt;strong&gt;I am not working full-time&lt;/strong&gt;, which is why this comparison is difficult. In other words, I am making roughly the same amount of money, but working only like half the amount of time. The question you have to ask yourself is, &lt;em&gt;do you care more about total compensation, or more about your time?&lt;/em&gt; Personally, I would rather forgo stock and bonuses in exchange for a 3-day or 4-day workweek. There are precisely two currencies in the predatory global capitalist system we live in — time and money. For me, time will always be more important than money. The other impact on income is taxes. As a sole proprietor, you pay more in taxes because of self-employment tax — however, this can be mitigated with deductions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you compensate for the lack of other benefits and perks?&lt;/strong&gt; Most tech companies offer a range of benefits and perks that you obviously do not receive as a contractor. For health insurance, you can get a plan independently via the Affordable Care Act. For tax purposes, health insurance premiums are a business expense that you can write-off. Alternatively, if you have a spouse that works full-time, you can be added to their plan. You do not get free lunch at the office anymore, but you can expense meals and coffee, for example when working at cafes or meeting with clients. In general, any purchase that helps your business (as a self-employed contractor and indie developer), can be written-off on your taxes. Make sure you also take a home office deduction. All your expenses and deductions help recover “lost” benefits and perks by reducing your tax burden.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No sick days and no PTO.&lt;/strong&gt; Obviously, there are no paid sick days and no paid time off for vacation. However, as I previously mentioned, you account for this in your hourly rates. The higher your hourly rate, the more cushion you have regarding being sick or taking vacation. More importantly, you are not beholden to oppressive, bullshit PTO policies that give you a paltry 15-20 days off each year. You can pretend like you are a European and take an entire two months off in the summer. Like I mentioned above, I am making roughly the same salary while working part-time &lt;strong&gt;and&lt;/strong&gt; every year I have been able to take off for 1-3 months. As a contractor you do not have to ask permission to leave for the day or to take time off. Of course, some negotiation of time-off is necessary — but you are not beholden to a PTO policy. As long as you give enough notice, you can come and go as you please. I have never had a problem telling a client that I will be gone for 1-2 months. I cannot emphasize how valuable it is to be able to have &lt;em&gt;large chunks&lt;/em&gt; of time off. Only working part-time helps prevent burnout, too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you manage working from home and work-life balance?&lt;/strong&gt; Due to the pandemic, everyone in a software engineering role has most likely experienced long-term working from home over the past few years. So I will keep this brief. For me, it is important to leave my house at least once a day — leaving for coffee and perhaps working from the cafe, going out for lunch, running errands, going for a run or bike ride, etc. I also try to make regular plans to see friends throughout the week. It is important to break up your days and stay social without an office, and as a contractor you have the flexibility to do that. This gives me a massively better work-life balance. I personally loathe tech offices. If I never have to enter one again, I will be content. You can also reclaim the time you would have spent commuting to and from the office.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you stay current on what’s happening in the industry?&lt;/strong&gt; There used to be a vibrant scene of iOS and Swift meetups in the Bay Area, but the pandemic essentially ended all of that. The best options for me now are talking with other devs on public Slacks and on Mastodon (RIP Twitter). I also subscribe to dozens of RSS feeds from various developer blogs. However, working with bigger clients that have bigger teams provides that sort of “industry community” as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Typical 9-5 workdays are sadly still a thing.&lt;/strong&gt; As a contractor, I anticipated having immense freedom and eschewing the archaic 9-5 workday. This is mostly true, as I described above — I often do errands or go for a run in the middle of the day. However, most clients you work with will probably still be bound to the 9-5 workday. This was something I did not think about initially. This does not mean you have to work 9-5, but you will likely need to maintain roughly those core hours of availability. For me, that sometimes means I am answering Slack messages while standing in line at the grocery store in the middle of the afternoon. This trade-off does not bother me much. Rarely are my days interrupted with true work emergencies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Establishing boundaries.&lt;/strong&gt; One thing I enjoy about being a contractor is that I can be as involved or as removed from a client’s company culture and politics as I like, within certain contexts. For example, I cannot attend a client’s monthly All Hands meeting — but that is good news for me! I hate meetings! Clients do not want to waste billable hours. They want productivity. This means you can focus most of your time on simply writing code and getting shit done. You are not beholden to mandatory meetings or any of the inner-workings of your client’s company. Because you exist outside of the company hierarchy, all sorts of baggage that exists for permanent workers does not exist for you. Overall, there are simply better boundaries around your time because you are external to the client and working hourly. They do not want to waste your time because they know they are paying for it. Ironically, this is also true when you are a full-time worker, but somehow organizations tend to fill software engineers’ calendars with meetings of dubious value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Working hourly versus salaried.&lt;/strong&gt; Personally, I enjoy &lt;em&gt;not&lt;/em&gt; being salaried. In addition to the clearer boundaries between you and work, hourly wages give you a more tangible view of your labor. Maybe I want to take advantage of a beautiful day and work in the evening. Those hours are still billable. Perhaps I want to work extra hours one day in order to take a half day the next. It does not matter how I allocate my hours as long as I get shit done. There is a clear transactional relationship when doing client work — you do the work, you send an invoice, you get paid. When working full-time at a company, I feel like there is always a lot more “fluff” and blurred boundaries. You might be expected to work late into the evening or on the weekends, but you do not get extra pay for that as a full-time worker. Also, you have to pretend like you believe in a company mission statement, when everyone knows we are all just trying increase profits and shareholder value for the capitalists. Unlike a salaried position, if you don’t work, then you don’t get paid. But salaried workers are often working more than they should have to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exposure to many different companies and projects.&lt;/strong&gt; Finally, the last part of contracting that I truly enjoy is the breadth and diversity of experience you get. Often, in full-time positions at companies, I would get burnt out — not just from work in general, but from &lt;em&gt;working specifically at that company&lt;/em&gt;. As a contractor, you are always getting to work with new clients and working on new projects. You get exposed to such a diversity of projects and technologies, not to mention seeing how different companies operate is fascinating. You have to keep learning. Your perspective broadens as you work with different clients, rather than narrows by stagnating within a company. This helps keep me interested and helps prevent me from burning out so quickly.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;If you made it this far, congrats! I know this post was long and full of new information. If you are considering going independent, I hope this was a good introduction. Stay tuned as I publish more posts in this series in the coming weeks! If there are any topics you want to know more about, please let me know and I will try to include them.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/04/10/going-indie/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/04/04/exploring-a-new-ios-codebase/</id>
        <link href="https://www.jessesquires.com/blog/2023/04/04/exploring-a-new-ios-codebase/" />
        <title>Exploring a new iOS codebase</title>
        <published>2023-04-04T10:44:29-07:00</published>
        <updated>2023-04-04T10:44:29-07:00</updated>

        <category term="software-dev" />
        <category term="ios" /><category term="xcode" /><category term="debugging" />
        <summary type="html">&lt;p&gt;Whether you are starting a new job or joining a new project, getting oriented in a new iOS codebase can be difficult and overwhelming. It is particularly hard if the codebase is very large, and especially challenging if you are early in your career and do not yet have much experience to draw from.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;Whether you are starting a new job or joining a new project, getting oriented in a new iOS codebase can be difficult and overwhelming. It is particularly hard if the codebase is very large, and especially challenging if you are early in your career and do not yet have much experience to draw from.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Where do you even begin? How do you know where to look? You’re probably familiar enough to know there’s going to be an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt; somewhere and a bunch of view controllers, but after running the app how do you find out which view controllers correspond to which screens?&lt;/p&gt;

&lt;p&gt;You will probably be assigned some starter tasks, small bugs to help you ramp up. Perhaps you have a mentor that can help guide you. While you should &lt;em&gt;definitely&lt;/em&gt; ask questions &lt;em&gt;early and often&lt;/em&gt;, it is also beneficial to try to discover some things on your own. By &lt;em&gt;trying&lt;/em&gt; to figure out where you need to make changes on your own, you’ll learn more, you’ll get oriented in the project more quickly, and you’ll be able to ask &lt;em&gt;better&lt;/em&gt; questions to your team.&lt;/p&gt;

&lt;p&gt;A great way to get started in an iOS codebase is by setting a symbolic breakpoint in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-[UIViewController viewDidAppear:]&lt;/code&gt;. This is very similar to the breakpoint &lt;a href=&quot;/blog/2023/02/20/ios-view-controller-loading/&quot;&gt;I previously wrote about&lt;/a&gt;. You’ll need to configure the breakpoint with a “Log Message” action with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%B&lt;/code&gt; to print the breakpoint name, and a “Debugger Command” action with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;po $arg1&lt;/code&gt; which will print the instance of the view controller. Finally, tell the debugger to continue after evaluating the actions. I also recommend &lt;a href=&quot;/blog/2023/03/02/xcode-tip-filter-console/&quot;&gt;filtering the debugger out&lt;/a&gt; when you build and run.&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;d-flex justify-content-center col-12  col-sm-8 col-md-6 &quot;&gt;
        &lt;figure&gt;
            &lt;img class=&quot;img-thumbnail img-fluid&quot; src=&quot;/img/blog/xcode-viewdidappear-breakpoint.jpg&quot; title=&quot;Xcode breakpoint for viewDidAppear&quot; alt=&quot;Xcode breakpoint for viewDidAppear&quot; /&gt;
            &lt;div class=&quot;row&quot;&gt;
                &lt;div class=&quot;col-12 d-flex justify-content-center&quot;&gt;
                
                    &lt;figcaption&gt;
                        &lt;p&gt;&lt;small class=&quot;text-muted text-center&quot;&gt;
                            Xcode breakpoint for viewDidAppear 
                        &lt;/small&gt;&lt;/p&gt;
                    &lt;/figcaption&gt;
                
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Enable the breakpoint and run the app. As you navigate to new screens, you’ll see log messages in the console like the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-[UIViewController viewDidAppear:]
&amp;lt;LaunchScreenViewController: 0x7fc2a8974ba0&amp;gt;

-[UIViewController viewDidAppear:]
&amp;lt;TimelineViewController: 0x7fc2a884c650&amp;gt;

-[UIViewController viewDidAppear:]
&amp;lt;ProfileViewController: 0x7fc2a90c5600&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Each time a new view appears, you’ll see the name of the corresponding view controller class name! Then you can simply search Xcode for that view controller class and find where you need to make edits. If you are still stuck, don’t worry. You can ask your team for help, but this time you’ll already know roughly &lt;em&gt;where&lt;/em&gt; you need to make changes. Also, I recommend that you &lt;a href=&quot;/blog/2023/02/21/xcode-tip-sharing-breakpoints/&quot;&gt;share this breakpoint&lt;/a&gt; to reuse it in other projects.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: unfortunately, I’m not sure what the equivalent strategy would be for this in SwiftUI, if there is one at all. If you have ideas, please let me know and I’ll update this post!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, if you want to explore even further, you should try using &lt;a href=&quot;https://github.com/FLEXTool/FLEX&quot;&gt;FLEX&lt;/a&gt; and &lt;a href=&quot;https://github.com/facebook/chisel&quot;&gt;Chisel&lt;/a&gt;.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/04/04/exploring-a-new-ios-codebase/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/04/02/hardcore-and-karma/</id>
        <link href="https://www.jessesquires.com/blog/2023/04/02/hardcore-and-karma/" />
        <title>Love for hardcore, and a taste of karma</title>
        <published>2023-04-02T13:07:06-07:00</published>
        <updated>2023-04-02T13:07:06-07:00</updated>

        <category term="essays" />
        <category term="hardcore" /><category term="music" /><category term="punk" /><category term="masculinity" />
        <summary type="html">&lt;p&gt;I grew up in the 90s and early 2000s. I was a skater kid and when I wasn’t skateboarding I was playing Tony Hawk’s Pro Skater on my Playstation. That scene introduced me to punk music, which eventually led me to hardcore music. By my early teens I was going to shows nearly every week with my friends.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;I grew up in the 90s and early 2000s. I was a skater kid and when I wasn’t skateboarding I was playing Tony Hawk’s Pro Skater on my Playstation. That scene introduced me to punk music, which eventually led me to hardcore music. By my early teens I was going to shows nearly every week with my friends.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Aside from exposing me to passionate music that I still love today, the punk and hardcore scenes introduced me to radical politics, new ways of thinking about the fucked up world we live in, and gave me a warm sense of community and belonging. Hardcore helped me through some very rough years back then. This counterculture is still thriving today, and I go to shows regularly in the Bay Area.&lt;/p&gt;

&lt;h4 class=&quot;text-center text-light-dark&quot;&gt;* * *&lt;/h4&gt;

&lt;p&gt;If you aren’t familiar with hardcore, you can watch anything on &lt;a href=&quot;https://www.youtube.com/user/hate5six&quot;&gt;@hate5six’s YouTube channel&lt;/a&gt;. But I’d recommend these recent sets by &lt;a href=&quot;https://www.youtube.com/watch?v=Wk4V1JzbryM&quot;&gt;End It&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=hz7csuwPrEo&quot;&gt;Terror&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=ggk41xAdEMQ&quot;&gt;Zulu&lt;/a&gt;, and &lt;a href=&quot;https://www.youtube.com/watch?v=cCR4N87jPnY&quot;&gt;Trapped Under Ice&lt;/a&gt; to get a good taste of this scene and community. (And if you like it, &lt;a href=&quot;https://www.youtube.com/shorts/cEUYJ3FVbjk&quot;&gt;go to a show&lt;/a&gt;!) In hardcore, the stage belongs to &lt;strong&gt;everyone&lt;/strong&gt; (if there is a stage at all). So you’ll see kids running across it to stage dive, and jumping for the mic to sing along. And then there’s the mosh pit, with kids two-stepping and slam dancing, throwing elbows and spin kicks. Only at a hardcore show will you see &lt;a href=&quot;https://www.youtube.com/shorts/M_tIsCn9qHs&quot;&gt;a person in a wheelchair crowd surf&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/watch?v=V8rRnsNchYY&amp;amp;t=27s&quot;&gt;stage dive&lt;/a&gt;, with loving assistance from the crowd &lt;em&gt;and the vocalist&lt;/em&gt; of the band. Everyone is so &lt;em&gt;alive&lt;/em&gt;. The energy, excitement, and enthusiasm for the music is palpable. It is truly a beautiful thing to witness and be a part of.&lt;/p&gt;

&lt;p&gt;Despite the displays of aggression in the pit, an important part of this community’s social contract is that &lt;strong&gt;no one gets hurt on purpose&lt;/strong&gt;. You can dance in the pit as much as you want, as long as you aren’t &lt;em&gt;deliberately&lt;/em&gt; trying to hurt people. Whenever people get knocked down or fall, especially in the pit, everyone around picks them up as quickly as possible. If you are standing at the edge of the pit, you might get hit accidentally. If you are up front, you’ll likely have to catch someone jumping off the stage. There’s an implicit consent if you are standing in these &lt;em&gt;“accidents might happen here”&lt;/em&gt; zones. If you aren’t up for that, there are safe places you can enjoy the show and opt-out of potential accidents.&lt;/p&gt;

&lt;h4 class=&quot;text-center text-light-dark&quot;&gt;* * *&lt;/h4&gt;

&lt;p&gt;Most of the time, hardcore is a healthy outlet for kids trying to navigate our predatory, oppressive, and excessively violent surveillance state. Hardcore was the best thing that ever happen to me in my youth. Without such a positive influence at a young age, I’m not sure where I’d be now. But unfortunately, like every diverse interest-based subculture, there are bros.&lt;/p&gt;

&lt;p&gt;In the tech industry, there are lots of rad, unique folks. But then, there are tech bros. I wish it weren’t true, but there are hardcore bros, too. It’s hard to define a “bro”, it’s often a situation where “you know it when you see it”. But generally, I think a good working definition is a dude who is insecure with his own masculinity, who is oblivious to the lived experience of folks with other identities, and who acts with a reckless disregard for the needs and safety of those around him.&lt;/p&gt;

&lt;p&gt;Regrettably, hardcore bros are sometimes &lt;em&gt;too&lt;/em&gt; aggressive when dancing and &lt;em&gt;do&lt;/em&gt; try to hurt people on purpose. They enter &lt;em&gt;“the accident zone”&lt;/em&gt; and then take personal offense to getting nicked by a fist or spin kick from someone minding their own business dancing in the pit. Instead of brushing it off like the benign accident it is (like everyone else), they try to start a fight like a child. Their insecurities prevent them from adhering to the social contract that keeps everyone safe at shows. At a good show, they’ll be confronted and told to stop. Sometimes they’ll be asked to leave or escorted out. At some shows, sadly, the only option is to avoid them. But it’s important to emphasize that these kinds of men — the ones trying to hurt people on purpose — are usually the exception at shows, not the norm. &lt;em&gt;They do not belong here.&lt;/em&gt;&lt;/p&gt;

&lt;h4 class=&quot;text-center text-light-dark&quot;&gt;* * *&lt;/h4&gt;

&lt;p&gt;I was at a show a few weeks ago at a small bar/venue in SF and a few bros were acting like assholes. One in particular — literally the biggest guy in the room — was being way too aggressive for how tight the venue space was. He wasn’t just trying to dance, he was trying to hurt people. Unfortunately, his toxic behavior went unchecked. There simply weren’t enough &lt;em&gt;non-toxic&lt;/em&gt; large dudes to confront him. Long story short, I left that show with a black eye.&lt;/p&gt;

&lt;p&gt;Sure, I was in &lt;em&gt;“the accident zone”&lt;/em&gt; at the edge of the pit (where I love to be), but this “accident” was more than the usual small scuff, which I can handle. Most folks, when they are moshing and realize they are approaching the edge of the pit, they back off. But hardcore bros hit harder. They don’t know who they’re hitting and they don’t care, and it all happens so fast. After nearly two decades of going to shows, always close to the pit and sometimes moshing and stage diving, this was the first time I had ever been truly injured. I wanted to confront him after the show, but I knew it wouldn’t lead to anything productive. So I didn’t. But I reminded myself that you get what you put out in this world.&lt;/p&gt;

&lt;h4 class=&quot;text-center text-light-dark&quot;&gt;* * *&lt;/h4&gt;

&lt;p&gt;Flash forward to last night. My black eye is healed. I was at a hardcore show in Oakland. There was great energy in the crowd. Kids were dancing — respectfully — and having fun. The pit was aggressive, but no one was trying to hurt people. They kept it tight and safe for those who wanted to opt-out. There was no toxic bullshit. And then, I saw the guy that gave me a black eye weeks earlier. He, of course, had no idea who I was. I watched him start dancing, again excessively aggressive like before. It was obvious to everyone in the room that this guy was acting like an asshole. He shifted the entire vibe from safety and fun to guarded and concerned.&lt;/p&gt;

&lt;p&gt;After a few songs, I suddenly saw this bro leave the pit, urgently walking through the crowd toward the back. His eye was totally busted, blood was pouring down his face. The weakness of his fragile ego manifested in his expression of disbelief. We glanced at each other as he passed me, still having no clue who I was. And I smiled with pure delight as I basked in the sweet taste of retribution. The show continued, and in his absence the positive energy returned like the flick of a light switch. And no one else got hurt, only him.&lt;/p&gt;

&lt;p&gt;Karma is a bitch, isn’t it.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/04/02/hardcore-and-karma/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/03/23/improve-multiplatform-swiftui-code/</id>
        <link href="https://www.jessesquires.com/blog/2023/03/23/improve-multiplatform-swiftui-code/" />
        <title>Improving multiplatform SwiftUI code</title>
        <published>2023-03-23T09:02:42-07:00</published>
        <updated>2023-03-23T09:02:42-07:00</updated>

        <category term="software-dev" />
        <category term="ios" /><category term="macos" /><category term="watchos" /><category term="swiftui" />
        <summary type="html">&lt;p&gt;For multiplatform projects where I’m using &lt;a href=&quot;https://developer.apple.com/xcode/swiftui/&quot;&gt;SwiftUI&lt;/a&gt;, it certainly makes developing for multiple platforms at once significantly faster. However, each of Apple’s platforms are different enough that eventually your codebase will be littered with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#if os()&lt;/code&gt; checks.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;For multiplatform projects where I’m using &lt;a href=&quot;https://developer.apple.com/xcode/swiftui/&quot;&gt;SwiftUI&lt;/a&gt;, it certainly makes developing for multiple platforms at once significantly faster. However, each of Apple’s platforms are different enough that eventually your codebase will be littered with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#if os()&lt;/code&gt; checks.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;I previously &lt;a href=&quot;/blog/2022/08/19/sharing-code-in-swiftui-apps/&quot;&gt;wrote about&lt;/a&gt; sharing cross-platform code in SwiftUI apps where you need to bridge the differences between UIKit and AppKit for an app that runs on both iOS and macOS. I used the minor differences between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIPasteboard&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSPasteboard&lt;/code&gt; as an example. But API differences between platforms do not address all scenarios when you might need to make platform-specific changes. For example, UIKit is (partially) available on both watchOS and tvOS. And, SwiftUI is (obviously) available on all platforms.&lt;/p&gt;

&lt;p&gt;One of the best examples of platform-specific differences is padding values for UI layout code. David Smith wrote last week &lt;a href=&quot;https://www.david-smith.org/blog/2023/03/16/design-notes-32/&quot;&gt;about “pixel perfect” design&lt;/a&gt; for one of his watch apps. While he was adjusting a UI layout for each watch device size rather than different platforms, the core issues are the same: UI layout code, even when adaptive, cannot always be universally applied.&lt;/p&gt;

&lt;p&gt;What you end up with is &lt;em&gt;a lot&lt;/em&gt; of code that looks like this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;MyCustomView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#if os(iOS)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#elseif os(watchOS)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#else // macOS&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is difficult to read, increases cognitive load, and Xcode’s default formatting for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#if os()&lt;/code&gt; is terribly ugly. We can avoid having to write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#if os()&lt;/code&gt; everywhere and make this code much easier to read at the same time with a simple extension.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;watchOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;macOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;#if os(iOS)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iOS&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;#elseif os(watchOS)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchOS&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;#else // macOS&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;macOS&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then our layout code simplifies to the following:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;MyCustomView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;watchOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;macOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It immediately becomes clear that we &lt;em&gt;always&lt;/em&gt; want some padding on this view and that the values are platform-specific. If you prefer, you could also extend this pattern directly to view modifiers. If we did this for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.padding()&lt;/code&gt;, the resulting code would simplify further to:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;MyCustomView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;watchOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;macOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We obviously can’t use this pattern in &lt;em&gt;every scenario&lt;/em&gt; where there are platform differences, but it does improve many situations. I’ve found this to be a great way to reduce using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#if os()&lt;/code&gt; when platforms share the majority of UI code for a particular view. However, you should never hesitate to build entirely unique views for a specific platform when that’s necessary. In those situations, you can extract the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#if os()&lt;/code&gt; check and platform differences into a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyPlatformSpecificView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#if os(iOS)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body_iOS&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#else // macOS&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body_macOS&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body_iOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// the body for iOS only&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body_macOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// the body for macOS only&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;MyPlatformSpecificView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are writing a lot of multiplatform SwiftUI code, I hope these small improvements can make a difference in your codebase too.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/03/23/improve-multiplatform-swiftui-code/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/03/22/xcode-tip-filter-modified-files/</id>
        <link href="https://www.jessesquires.com/blog/2023/03/22/xcode-tip-filter-modified-files/" />
        <title>Xcode Tip: filter to show modified files only</title>
        <published>2023-03-22T15:12:50-07:00</published>
        <updated>2023-03-22T15:12:50-07:00</updated>

        <category term="software-dev" />
        <category term="xcode" /><category term="xcode-tips" /><category term="ios" /><category term="macos" />
        <summary type="html">&lt;p&gt;Large Xcode projects can be difficult to navigate, especially when you are making a large change across a large number of files. Depending on how your project is configured, modified files will be spread across multiple nested directories and multiple targets.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;Large Xcode projects can be difficult to navigate, especially when you are making a large change across a large number of files. Depending on how your project is configured, modified files will be spread across multiple nested directories and multiple targets.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Before I commit my changes and submit a pull request, I like to take one last pass at the code I’ve written. This is when I make formatting fixes and optimizations where needed, and generally clean things up. Especially when I’m implementing a large change that is spread across multiple files, the navigation experience in Xcode can be clunky. I often use Quick Open (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd-shift-O&lt;/code&gt;) to search for and open a file — but in a massive project, I can’t remember all the file names. Xcode helpfully shows an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M&lt;/code&gt; next to modified files and an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; next to added files. But when there are &lt;em&gt;thousands&lt;/em&gt; of files in the sidebar, it is difficult to see what’s going on with your specific change. It can be overwhelming.&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;d-flex justify-content-center col-12 &quot;&gt;
        &lt;figure&gt;
            &lt;img class=&quot;img-thumbnail img-fluid&quot; src=&quot;/img/blog/xcode-tip-filter-1.jpg&quot; title=&quot;Xcode: unfiltered sidebar showing all files&quot; alt=&quot;Xcode: unfiltered sidebar showing all files&quot; /&gt;
            &lt;div class=&quot;row&quot;&gt;
                &lt;div class=&quot;col-12 d-flex justify-content-center&quot;&gt;
                
                    &lt;figcaption&gt;
                        &lt;p&gt;&lt;small class=&quot;text-muted text-center&quot;&gt;
                            Xcode: unfiltered sidebar showing all files 
                        &lt;/small&gt;&lt;/p&gt;
                    &lt;/figcaption&gt;
                
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I usually use &lt;a href=&quot;https://www.git-tower.com/mac&quot;&gt;Git Tower&lt;/a&gt; to review and commit my changes, but you can’t edit files in Git Tower, which means switching back-and-forth between Xcode if you need to make additional modifications. Xcode provides a nice commit interface that allows editing, but it isn’t always easy to use for editing — the side-by-side view forces lines to wrap and sometimes scrolling is wonky. File selection in this view is often glitchy, too.&lt;/p&gt;

&lt;p&gt;Luckily, there’s an easier way. Instead of trying to use Git Tower or Xcode’s commit UI, you can filter the files in the sidebar to show only ones that have been modified! It’s a very subtle button in the bottom right corner with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+/-&lt;/code&gt; icon. Click that and Xcode will hide all the files you haven’t touched. I’ve found this to be helpful for focusing specifically on the changes I’m making and removing all the clutter in large projects.&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;d-flex justify-content-center col-12 &quot;&gt;
        &lt;figure&gt;
            &lt;img class=&quot;img-thumbnail img-fluid&quot; src=&quot;/img/blog/xcode-tip-filter-2.jpg&quot; title=&quot;Xcode: filter sidebar to show modified files only&quot; alt=&quot;Xcode: filter sidebar to show modified files only&quot; /&gt;
            &lt;div class=&quot;row&quot;&gt;
                &lt;div class=&quot;col-12 d-flex justify-content-center&quot;&gt;
                
                    &lt;figcaption&gt;
                        &lt;p&gt;&lt;small class=&quot;text-muted text-center&quot;&gt;
                            Xcode: filter sidebar to show modified files only 
                        &lt;/small&gt;&lt;/p&gt;
                    &lt;/figcaption&gt;
                
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/03/22/xcode-tip-filter-modified-files/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/03/02/xcode-tip-filter-console/</id>
        <link href="https://www.jessesquires.com/blog/2023/03/02/xcode-tip-filter-console/" />
        <title>Xcode Tip: filtering debugger output</title>
        <published>2023-03-02T10:59:35-08:00</published>
        <updated>2023-03-02T10:59:35-08:00</updated>

        <category term="software-dev" />
        <category term="xcode" /><category term="debugging" /><category term="ios" /><category term="macos" /><category term="xcode-tips" />
        <summary type="html">&lt;p&gt;When debugging a large project in Xcode that a large team works on, the console can get quite busy. Logs are everywhere! It can be difficult to sift through the noise, particularly when you have a number of breakpoints configured to log messages, execute debugger commands, and continue after evaluating rather than pause.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;When debugging a large project in Xcode that a large team works on, the console can get quite busy. Logs are everywhere! It can be difficult to sift through the noise, particularly when you have a number of breakpoints configured to log messages, execute debugger commands, and continue after evaluating rather than pause.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;You can find a good example of this from &lt;a href=&quot;/blog/2023/02/20/ios-view-controller-loading/&quot;&gt;my previous post&lt;/a&gt;, where I showed how to debug view controller loading with symbolic breakpoints. Wouldn’t it be nice if you could hide all the other logs happening in the console to focus solely on debugging? You can! In Xcode’s debug console, you can select the “Debugger Output” option in the menu on the bottom left. When selected, the only thing you will see in the console are the logs and output from your breakpoints and any debugger commands that you execute manually.&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;d-flex justify-content-center col-12 &quot;&gt;
        &lt;figure&gt;
            &lt;img class=&quot;img-thumbnail img-fluid&quot; src=&quot;/img/blog/xcode-debug-filter.jpg&quot; title=&quot;Filtering debugger output in Xcode&quot; alt=&quot;Filtering debugger output in Xcode&quot; /&gt;
            &lt;div class=&quot;row&quot;&gt;
                &lt;div class=&quot;col-12 d-flex justify-content-center&quot;&gt;
                
                    &lt;figcaption&gt;
                        &lt;p&gt;&lt;small class=&quot;text-muted text-center&quot;&gt;
                            Filtering debugger output in Xcode 
                        &lt;/small&gt;&lt;/p&gt;
                    &lt;/figcaption&gt;
                
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/03/02/xcode-tip-filter-console/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/03/02/icloud-tabs-bug/</id>
        <link href="https://www.jessesquires.com/blog/2023/03/02/icloud-tabs-bug/" />
        <title>How to fix iCloud Safari tabs syncing bug</title>
        <published>2023-03-02T10:25:26-08:00</published>
        <updated>2023-03-02T10:25:26-08:00</updated>

        <category term="software-dev" />
        <category term="icloud" /><category term="macos" /><category term="ios" /><category term="safari" /><category term="apple" /><category term="bugs" />
        <summary type="html">&lt;p&gt;Since iOS 15 and and macOS 12, or whenever Apple launched the new “Start Page” for Safari, I’ve had various issues getting tabs to sync across my devices. It seems to be &lt;a href=&quot;https://discussions.apple.com/thread/252782200&quot;&gt;a common problem&lt;/a&gt;.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;Since iOS 15 and and macOS 12, or whenever Apple launched the new “Start Page” for Safari, I’ve had various issues getting tabs to sync across my devices. It seems to be &lt;a href=&quot;https://discussions.apple.com/thread/252782200&quot;&gt;a common problem&lt;/a&gt;.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Aside from tabs not syncing, the biggest problem I’ve had is that tabs from my Mac get “stuck” on my iPhone and iPad. These “ghost tabs” are ones that have been closed on my Mac — often for weeks or months — yet they continue to appear as open tabs on my iOS devices. Most recently, a tab appeared on my iPhone that was supposedly open on my Mac for a project on GitHub that I haven’t worked on for over a year! I’ve tried deleting/closing these ghost tabs on my iPhone, but they always reappear.&lt;/p&gt;

&lt;p&gt;I finally decided to try to fix it. Most online forums suggest signing out of iCloud completely on all devices — but that is too destructive and risky for me. I decided to try another approach and it looks like it worked. If you have the same issue, here’s what you can do:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;On your Mac, backup your Safari data — bookmarks, etc. Just in case.&lt;/li&gt;
  &lt;li&gt;Completely quit Safari on all devices.&lt;/li&gt;
  &lt;li&gt;Disable Safari syncing in iCloud settings on all devices. Choose the option to delete the data from the device on iOS, but keep the data on your Mac.&lt;/li&gt;
  &lt;li&gt;Launch Safari on all devices. Bookmarks, etc. should be gone on iOS.&lt;/li&gt;
  &lt;li&gt;Completely quit Safari on all devices, again.&lt;/li&gt;
  &lt;li&gt;Reboot all devices.&lt;/li&gt;
  &lt;li&gt;Re-enable Safari syncing in iCloud settings on all devices.&lt;/li&gt;
  &lt;li&gt;Launch Safari on your Mac, so it can sync the initial data.&lt;/li&gt;
  &lt;li&gt;Launch Safari on all iOS devices.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After doing this, the issue should be fixed!&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/03/02/icloud-tabs-bug/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/02/22/terminal-tip-say/</id>
        <link href="https://www.jessesquires.com/blog/2023/02/22/terminal-tip-say/" />
        <title>Make your terminal tell you when it&apos;s done</title>
        <published>2023-02-22T09:33:22-08:00</published>
        <updated>2023-02-22T09:33:22-08:00</updated>

        <category term="software-dev" />
        <category term="terminal" /><category term="macos" /><category term="ios" /><category term="productivity" /><category term="automation" />
        <summary type="html">&lt;p&gt;When working on large iOS apps, all the tasks you need to perform &lt;em&gt;before&lt;/em&gt; you even get started writing code can begin to consume a lot of time. I’m talking about all the preparation that happens in your terminal — pulling the latest changes, bootstrapping the project, etc. During this wait, I usually take a moment to follow-up on emails or Slack messages. But the problem with that is I inevitably end up getting pulled deeper into those tasks and forget to return to the terminal, open Xcode, and start working.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;When working on large iOS apps, all the tasks you need to perform &lt;em&gt;before&lt;/em&gt; you even get started writing code can begin to consume a lot of time. I’m talking about all the preparation that happens in your terminal — pulling the latest changes, bootstrapping the project, etc. During this wait, I usually take a moment to follow-up on emails or Slack messages. But the problem with that is I inevitably end up getting pulled deeper into those tasks and forget to return to the terminal, open Xcode, and start working.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Often pulling the latest changes from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; in git and bootstrapping the project can take a lot of time for large iOS apps — multiple minutes, or longer. Git can start to slowdown not only as the repo grows, but especially as your team grows. If dozens or hundreds of pull requests merge daily, then every &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; will download a ton of changes. Another common setup for large iOS projects is to automate all the various project bootstrapping tasks using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Makefile&lt;/code&gt;. Running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make&lt;/code&gt; will run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; (for CocoaPods, Fastlane, etc.), run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod install&lt;/code&gt;, generate the Xcode project, and more.&lt;/p&gt;

&lt;p&gt;I usually run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull &amp;amp;&amp;amp; make&lt;/code&gt; to do everything in one go. I don’t like to sit there doing nothing and stare at my terminal, but if I start checking emails and Slack I’ll get sidetracked then forget to stop and return to writing code. What I want is for terminal to notify me after all the tasks are complete. Then I can open Xcode and get started.&lt;/p&gt;

&lt;p&gt;Good news — there is an easy way to make terminal tell you when it’s done with a little known (and very underrated, in my opinion) command, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;say&lt;/code&gt;. Running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;say&lt;/code&gt; invokes the speech synthesis manager on macOS to convert text to audible speech. Just run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;say hello&lt;/code&gt; in your terminal right now to try it out. Neat!&lt;/p&gt;

&lt;p&gt;So how can you use this? Instead of running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull &amp;amp;&amp;amp; make&lt;/code&gt;, you can run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull &amp;amp;&amp;amp; make &amp;amp;&amp;amp; say done&lt;/code&gt;. You can pass any text you want to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;say&lt;/code&gt; and you don’t even need to wrap it in quotes. You could run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;say time to work!&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;say xcode time, baby!&lt;/code&gt;. And then, you’ll know when it’s time to close email and Slack and open up Xcode.&lt;/p&gt;

&lt;p&gt;Because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;say&lt;/code&gt; is like any other command, you can incorporate it into any scripts as well. Also, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;say&lt;/code&gt; is a great tool for pranking your friends and coworkers who leave their laptops unlocked and unattended. I’ll leave that as an exercise for the reader.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/02/22/terminal-tip-say/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/02/21/xcode-tip-sharing-breakpoints/</id>
        <link href="https://www.jessesquires.com/blog/2023/02/21/xcode-tip-sharing-breakpoints/" />
        <title>Xcode tip: sharing breakpoints across projects</title>
        <published>2023-02-21T09:46:37-08:00</published>
        <updated>2023-02-21T09:46:37-08:00</updated>

        <category term="software-dev" />
        <category term="xcode" /><category term="debugging" /><category term="ios" /><category term="macos" /><category term="xcode-tips" />
        <summary type="html">&lt;p&gt;In my &lt;a href=&quot;/blog/2023/02/20/ios-view-controller-loading/&quot;&gt;previous post&lt;/a&gt;, I explained how to use symbolic breakpoints to discover when view controllers load their views into memory. Often breakpoints are specific to a project. You’ll create one for a specific class that only exists for that particular app. However, what I discussed in that post would be useful in &lt;em&gt;any&lt;/em&gt; project. Unlike regular breakpoints, symbolic breakpoints (at least when set on system frameworks) are more or less universal.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;In my &lt;a href=&quot;/blog/2023/02/20/ios-view-controller-loading/&quot;&gt;previous post&lt;/a&gt;, I explained how to use symbolic breakpoints to discover when view controllers load their views into memory. Often breakpoints are specific to a project. You’ll create one for a specific class that only exists for that particular app. However, what I discussed in that post would be useful in &lt;em&gt;any&lt;/em&gt; project. Unlike regular breakpoints, symbolic breakpoints (at least when set on system frameworks) are more or less universal.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;There are many different types of breakpoints that are “generic”, or not specific to a particular codebase — symbolic breakpoints, error breakpoints, exception breakpoints. Most of these can be shared. I’m sure many of you are like me and work with &lt;em&gt;multiple&lt;/em&gt; Xcode projects every week — for work, side projects, open source libraries, etc. It would be tedious to create the exact same breakpoints for every single project you work on.&lt;/p&gt;

&lt;p&gt;Luckily, Xcode has a solution to this — User Breakpoints! After creating any breakpoint, you can right-click and select: “Move Breakpoint To” &amp;gt; “User” to move it &lt;em&gt;from&lt;/em&gt; your project or workspace &lt;em&gt;to&lt;/em&gt; user space. After this, you’ll see a shared list of User Breakpoints in every Xcode project you open.&lt;/p&gt;

&lt;p&gt;As you can see in this screenshot below, I’ve collected a few over the years. I added many of these User Breakpoints after learning about them in a blog post just like this one! Having these shared breakpoints has been a great way for me to remember various debugging tips and reuse them across all of my projects.&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;d-flex justify-content-center col-12  col-sm-8 col-md-6 &quot;&gt;
        &lt;figure&gt;
            &lt;img class=&quot;img-thumbnail img-fluid&quot; src=&quot;/img/blog/xcode-shared-breakpoints.jpg&quot; title=&quot;User Breakpoints in Xcode&quot; alt=&quot;User Breakpoints in Xcode&quot; /&gt;
            &lt;div class=&quot;row&quot;&gt;
                &lt;div class=&quot;col-12 d-flex justify-content-center&quot;&gt;
                
                    &lt;figcaption&gt;
                        &lt;p&gt;&lt;small class=&quot;text-muted text-center&quot;&gt;
                            User Breakpoints in Xcode 
                        &lt;/small&gt;&lt;/p&gt;
                    &lt;/figcaption&gt;
                
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/02/21/xcode-tip-sharing-breakpoints/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
    
    <entry xml:lang="en">
        
        
        
        

        

        
        

        <id>https://www.jessesquires.com/blog/2023/02/20/ios-view-controller-loading/</id>
        <link href="https://www.jessesquires.com/blog/2023/02/20/ios-view-controller-loading/" />
        <title>How to find and fix premature view controller loading on iOS</title>
        <published>2023-02-20T09:27:59-08:00</published>
        <updated>2023-02-20T09:27:59-08:00</updated>

        <category term="software-dev" />
        <category term="ios" /><category term="xcode" /><category term="debugging" /><category term="uikit" />
        <summary type="html">&lt;p&gt;While working on a very large iOS client project, I was investigating the causes for our slow app launch time. We had a hypothesis that &lt;em&gt;part&lt;/em&gt; of the problem was that too many view controllers were getting loaded in memory, in particular, ones that were not even being presented to the user during app startup. What could cause view controllers to load too early? How might you discover this happening? And how do you fix it? Let’s find out.&lt;/p&gt;

</summary>

        <content type="html" xml:base="https://www.jessesquires.com" xml:lang="en">
            &lt;p&gt;While working on a very large iOS client project, I was investigating the causes for our slow app launch time. We had a hypothesis that &lt;em&gt;part&lt;/em&gt; of the problem was that too many view controllers were getting loaded in memory, in particular, ones that were not even being presented to the user during app startup. What could cause view controllers to load too early? How might you discover this happening? And how do you fix it? Let’s find out.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;the-view-controller-lifecycle&quot;&gt;The view controller lifecycle&lt;/h3&gt;

&lt;p&gt;A &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt;&lt;/a&gt; is a fundamental component of iOS development (&lt;a href=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/index.html#//apple_ref/doc/uid/TP40007457-CH2-SW1&quot;&gt;doc archive&lt;/a&gt;). In order to debug our problem, we need to understand the view controller lifecycle. If you unintentionally (or deliberately) interfere with it, bad things™ can happen.&lt;/p&gt;

&lt;p&gt;The (simplified) sequence of events and state transitions is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init()&lt;/code&gt; — Initializes the view controller.&lt;/li&gt;
  &lt;li&gt;The initialized view controller gets presented via one of the presentation methods, like &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller/1621380-present&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;present(_:animated:completion:)&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loadView()&lt;/code&gt; — The view gets created and loaded into memory.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewDidLoad()&lt;/code&gt; — Called after the view is loaded.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewWillAppear(_:)&lt;/code&gt; — Called before the view appears.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewDidAppear(_:)&lt;/code&gt; — Called after the view is presented.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewWillDisappear(_:)&lt;/code&gt; — Called before the view disappears.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewDidDisappear(_:)&lt;/code&gt; — Called after the view is dismissed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you have ever worked on an iOS app, you have implemented most of these methods. And you probably have a good idea about what types of tasks should or shouldn’t go in each one.&lt;/p&gt;

&lt;p&gt;It is important to emphasize that the view owned by the view controller (i.e., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.view&lt;/code&gt;) is &lt;strong&gt;not&lt;/strong&gt; loaded until &lt;strong&gt;after&lt;/strong&gt; a presentation is initiated. At least, that is how it is &lt;em&gt;supposed&lt;/em&gt; to work. Unfortunately, there is one tiny mistake you could make that changes the sequence of events above: accessing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.view&lt;/code&gt; from within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init()&lt;/code&gt;. Doing this prematurely begins the view lifecycle events. The &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller/1621460-view&quot;&gt;documentation&lt;/a&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.view&lt;/code&gt; reads:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you access this property when its value is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt;, the view controller automatically calls the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loadView()&lt;/code&gt; method and returns the resulting view.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When finished, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loadView()&lt;/code&gt; then triggers a call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewDidLoad()&lt;/code&gt;. Note that the remaining appearance methods &lt;em&gt;will not&lt;/em&gt; be called early as well, but only when the actual presentation occurs. The result is that immediately after initialization &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loadView()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewDidLoad()&lt;/code&gt; will be called — &lt;strong&gt;before&lt;/strong&gt; a presentation is ever initiated.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init()&lt;/code&gt; (accessing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.view&lt;/code&gt; by mistake)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loadView()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewDidLoad()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;At a later time, presentation occurs via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;present(_:animated:completion:)&lt;/code&gt;, etc.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewWillAppear(_:)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewDidAppear(_:)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;….&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;the-problem-with-early-view-loading&quot;&gt;The problem with early view loading&lt;/h3&gt;

&lt;p&gt;Accessing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.view&lt;/code&gt; from within a view controller &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init()&lt;/code&gt; is a mistake because it will initiate the view lifecycle too early, calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loadView()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewDidLoad()&lt;/code&gt;. This can be terrible for performance, because now the main thread is busy building an entire view hierarchy for something that is not even on screen. Because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewDidLoad()&lt;/code&gt; is typically the place to initiate various important tasks, like subscribing to notifications or sending network requests or loading data from disk, performance can degrade even further. Depending on the complexity of your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewDidLoad()&lt;/code&gt; implementation, this could be quite detrimental.&lt;/p&gt;

&lt;p&gt;You might be wondering why this matters at all if we are about to present the view controller anyway. Well, that is not always the case! There are many situations in which you might initialize — &lt;em&gt;but not immediately present&lt;/em&gt; — a collection of view controllers. The most common cases are when using container view controllers like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UITabBarController&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt;. With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UITabBarController&lt;/code&gt;, for example, all view controllers are initialized but only the controller in first selected tab has its view &lt;em&gt;presented&lt;/em&gt;. The remaining view controllers get presented for the first time when the user first navigates to those tabs. Until then, their views are not loaded. The same goes for a navigation stack, where you might be configuring a stack of view controllers for deep-linking. Only the top-most view controller will have its view loaded.&lt;/p&gt;

&lt;p&gt;If you access &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.view&lt;/code&gt; via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init()&lt;/code&gt; in all of the view controllers owned by a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UITabBarController&lt;/code&gt; or a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt;, then all of them will load their views during initialization, triggering &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewDidLoad()&lt;/code&gt; and thus potentially triggering responses to notifications, sending network requests, loading data from disk, etc. As a result, you might see some strange and unexpected behavior as those network requests finish or those subscriptions start firing — because you’ll be responding to these events and updating a view that isn’t even on screen. This creates unnecessary work, consumes valuable resources, and wastes precious time on the main thread.&lt;/p&gt;

&lt;p&gt;In large, complex codebases small issues like this grow over time and multiply. Accidentally loading a single view controller too early will probably go unnoticed. But what if you have a dozen or more?&lt;/p&gt;

&lt;h3 id=&quot;finding-and-fixing-the-bug&quot;&gt;Finding and fixing the bug&lt;/h3&gt;

&lt;p&gt;Manually checking every view controller in your codebase is not feasible. There are likely hundreds, if not thousands, depending on the size of your app. This is a perfect use case for symbolic breakpoints. We can create a symbolic breakpoint on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-[UIViewController viewDidLoad]&lt;/code&gt;. Then we need to add a couple of actions so that we can see what’s happening — a “Log Message” action with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%B&lt;/code&gt; to print the breakpoint name, and a “Debugger Command” action with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;po $arg1&lt;/code&gt; which will print the instance of the view controller. Finally, we need to tell the debugger to continue after evaluating the actions.&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;d-flex justify-content-center col-12  col-sm-8 col-md-6 &quot;&gt;
        &lt;figure&gt;
            &lt;img class=&quot;img-thumbnail img-fluid&quot; src=&quot;/img/blog/viewdidload-breakpoint.jpg&quot; title=&quot;Symbolic breakpoint on viewDidLoad()&quot; alt=&quot;Symbolic breakpoint on viewDidLoad()&quot; /&gt;
            &lt;div class=&quot;row&quot;&gt;
                &lt;div class=&quot;col-12 d-flex justify-content-center&quot;&gt;
                
                    &lt;figcaption&gt;
                        &lt;p&gt;&lt;small class=&quot;text-muted text-center&quot;&gt;
                            Symbolic breakpoint on viewDidLoad() 
                        &lt;/small&gt;&lt;/p&gt;
                    &lt;/figcaption&gt;
                
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now we can build and run our app. Do not interact with the app at all, only allow it to fully launch. The console logs will look something like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-[UIViewController viewDidLoad]
&amp;lt;MyFirstViewController: 0x7f9d52886c00&amp;gt;

-[UIViewController viewDidLoad]
&amp;lt;MySecondViewController: 0x7f9d42858800&amp;gt;

-[UIViewController viewDidLoad]
&amp;lt;MyThirdViewController: 0x7f9d43095740&amp;gt;

-[UIViewController viewDidLoad]
&amp;lt;MyFourthViewController: 0x7f9d431de9d0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What this is showing is every single view controller that gets loaded during our app launch. We have a list of every view controller whose &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewDidLoad()&lt;/code&gt; was called during app startup — how convenient! All that is left to do is to check each of these view controllers and verify whether or not they should be loaded. Are they being presented and visible to the user? Or are they prematurely accessing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.view&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;What I discovered in this project was many instances of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.view.backgroundColor = UIColor.customColor&lt;/code&gt; happening during &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init()&lt;/code&gt;. Moving this line to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewDidLoad()&lt;/code&gt; solved the problem. Unfortunately, there were also much more complicated situations that were triggering &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewDidLoad()&lt;/code&gt; too early. In some cases, another component was accessing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;view&lt;/code&gt; property of the view controller. In others, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.view&lt;/code&gt; was being accessed through a chain of function calls that began within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init()&lt;/code&gt;. So, beware that solving these bugs may not always be obvious.&lt;/p&gt;
&lt;br/&gt;
&lt;hr&gt;

&lt;p&gt;
    &lt;i&gt;Originally published on &lt;a href=&quot;https://www.jessesquires.com/blog/2023/02/20/ios-view-controller-loading/&quot;&gt;jessesquires.com&lt;/a&gt;.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/hire-me/&quot;&gt;Hire me&lt;/a&gt;&lt;/b&gt; for iOS freelance and contracting work.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.hexedbits.com&quot;&gt;Buy&lt;/a&gt;&lt;/b&gt; my apps.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;&lt;b&gt;&lt;a href=&quot;https://www.jessesquires.com/sponsor/&quot;&gt;Sponsor&lt;/a&gt;&lt;/b&gt; my blog and open source projects.&lt;br/&gt;&lt;/i&gt;
&lt;/p&gt;

        </content>
    </entry>
    
     
</feed>
