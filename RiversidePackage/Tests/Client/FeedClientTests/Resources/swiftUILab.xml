<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>The SwiftUI Lab</title>
	<atom:link href="https://swiftui-lab.com/feed/" rel="self" type="application/rss+xml" />
	<link>https://swiftui-lab.com/</link>
	<description>When the documentation is missing, we experiment.</description>
	<lastBuildDate>Mon, 30 Oct 2023 15:41:57 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.2</generator>
	<item>
		<title>Advanced SwiftUI Animations – Part 7: PhaseAnimator</title>
		<link>https://swiftui-lab.com/swiftui-animations-part7/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=swiftui-animations-part7</link>
					<comments>https://swiftui-lab.com/swiftui-animations-part7/#respond</comments>
		
		<dc:creator><![CDATA[javier]]></dc:creator>
		<pubDate>Mon, 30 Oct 2023 15:41:54 +0000</pubDate>
				<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">https://swiftui-lab.com/?p=4427</guid>

					<description><![CDATA[<p>In part 6 of the Advanced SwiftUI Animations series, I covered the CustomAnimation protocol, one of the many new additions introduced at WWDC &#8217;23. But the fun does not end there. Now it is time to look at a new view: PhaseAnimator. If you have been playing around with this new toy, you may have ... <a title="Advanced SwiftUI Animations – Part 7: PhaseAnimator" class="read-more" href="https://swiftui-lab.com/swiftui-animations-part7/" aria-label="More on Advanced SwiftUI Animations – Part 7: PhaseAnimator">Read more</a></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/swiftui-animations-part7/">Advanced SwiftUI Animations – Part 7: PhaseAnimator</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>In <a href="https://swiftui-lab.com/swiftui-animations-part6/" target="_blank" rel="noreferrer noopener">part 6 </a>of the Advanced SwiftUI Animations series, I covered the <code>CustomAnimation</code> protocol, one of the many new additions introduced at WWDC &#8217;23. But the fun does not end there. Now it is time to look at a new view: <code>PhaseAnimator</code>.</p>



<p>If you have been playing around with this new toy, you may have notice there is also a <code>phaseAnimator()</code> modifier. This is just a convenient way of using the view, with a small restriction. We&#8217;ll see an example of how to use the modifier at the end of the article.</p>


<hr class="ub_divider" id="ub_divider_c10ba1a8-1a0d-4423-9560-e2f1c2a9fd12"></hr>


<h2 class="wp-block-heading"><strong>PhaseAnimator</strong></h2>



<p>The <code>PhaseAnimator</code> view let us animate a view through a series of phases. Phases are specified with types that adopt the <code>Sequence</code> protocol. But do not worry, a common Swift array will do.</p>



<h3 class="wp-block-heading"><strong>Endless Animation</strong></h3>



<p>In its simplest form, the view will animate indefinitely, with a default spring animation for each phase. Here are two examples. One has true and false as its phases, the other iterates through numbers 10, 20, 30, 40. These are just some examples, but you could use other types. For example, a collection of <strong>enum</strong> values. I&#8217;ll show such an example later on.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img fetchpriority="high" decoding="async" width="338" height="192" src="https://swiftui-lab.com/wp-content/uploads/2023/10/anim7-example1.gif" alt="" class="wp-image-4432"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    var body: some View {
        HStack(spacing: 30) {

            PhaseAnimator([true, false]) { phase in
                RoundedRectangle(cornerRadius: phase ? 10 : 30)
                    .fill(.green)
                    .frame(width: 120, height: 120)
                    .overlay{ Text(phase ? &quot;true&quot; : &quot;false&quot;) }
            }
            
            PhaseAnimator([10, 20, 30, 40]) { phase in
                RoundedRectangle(cornerRadius: phase)
                    .fill(.blue)
                    .frame(width: 120, height: 120)
                    .overlay { Text(&quot;\(Int(phase))&quot;) }
            }
        }
        .font(.largeTitle).fontWeight(.bold).foregroundColor(.white)
    }
}</code></pre>



<h3 class="wp-block-heading"><strong>Triggered Animation</strong></h3>



<p>If you only need the animator to complete a single cycle (i.e., go through each phase only once), you can add the <code>trigger</code> parameter. This will make the <code>PhaseAnimator</code> start a cycle when the <code>trigger</code> value changes, but it will not repeat until the <code>trigger</code> value is modified again.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img decoding="async" width="152" height="206" src="https://swiftui-lab.com/wp-content/uploads/2023/10/anim7-phase-example2.gif" alt="" class="wp-image-4439"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    @State var animate = false
    
    var body: some View {
        VStack {
            PhaseAnimator([10, 20, 30, 40, 50, 60], trigger: animate) { phase in
                RoundedRectangle(cornerRadius: phase)
                    .fill(.yellow)
                    .frame(width: 120, height: 120)
                    .overlay { Text(&quot;\(Int(phase))&quot;) }
            }
            .font(.largeTitle).fontWeight(.bold).foregroundColor(.white)

            Button(&quot;Animate&quot;) {
                animate.toggle()
            }
        }
    }
}</code></pre>



<p>Note that the animator starts with a phase value of 10 and ends when the phase loops back to 10 again.</p>



<p><strong>Animation Types</strong></p>



<p>By default, all phases use the <code>.spring</code> animation, but you can add a closure that returns which animation to apply at each phase change. In this example, each phase change uses easeInOut, but with a different duration: 5/phase. With this expression, the higher the phase value, the shorter the animation will be. In this example, it goes from 5/10 = 0.5 seconds for phase 10 to 5/60 = 0.08333 seconds for phase 60.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img decoding="async" width="152" height="152" src="https://swiftui-lab.com/wp-content/uploads/2023/10/anim7-phase-example3.gif" alt="" class="wp-image-4442"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    var body: some View {
        PhaseAnimator([10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60]) { phase in
            RoundedRectangle(cornerRadius: phase)
                .fill(.blue)
                .frame(width: 120, height: 120)
                .overlay { Text(&quot;\(Int(phase))&quot;) }
        } animation: { phase in
            return Animation.easeInOut(duration: 5/phase)
        }
        .font(.largeTitle).fontWeight(.bold).foregroundColor(.white)
    }
}</code></pre>



<p>To save you a headache, please note that the first animation to actually be executed, is the one for phase 20 (not 10). This is because the view appears with the first phase (10) and then animates towards the second phase (20). At the end, the view will animate towards the first phase. This could be a little confusing at first, so bear it in mind. </p>



<p>Suppose we simplify the example to have less phases: 10, 20, 30, 40, 50, 60 and an easeInOut animation with 10/phase. The graphic shows how the animation will occur. The arrow numbers indicate the duration of the animation (10/phase):</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="430" height="234" src="https://swiftui-lab.com/wp-content/uploads/2023/10/anim7-image1.png" alt="" class="wp-image-4447" srcset="https://swiftui-lab.com/wp-content/uploads/2023/10/anim7-image1.png 430w, https://swiftui-lab.com/wp-content/uploads/2023/10/anim7-image1-300x163.png 300w" sizes="(max-width: 430px) 100vw, 430px" /></figure></div>


<p>If you want to test this out, use the example from the <strong>Triggered Animation</strong> section above and add the following animation closure to the <code>PhaseAnimator</code>:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">animation: { phase in

    let _ = print(&quot;phase = \(phase)&quot;)

    return Animation.easeInOut(duration: 10/phase)
}</code></pre>



<p>This will print to the console the phase values the closure gets. You will see the following values, in this order: 20, 30, 40, 50, 60, 10. That is, it starts with 20 and ends with 10!</p>



<h3 class="wp-block-heading"><strong>A Little Trouble Ahead</strong></h3>



<p>Consider this simple example:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="152" height="152" src="https://swiftui-lab.com/wp-content/uploads/2023/10/anim7-phase-example4.gif" alt="" class="wp-image-4451"/></figure></div>


<p>Unfortunately, the following code will not produce the above animation. It will require a small tweak:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    let moonPhases = &quot;<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f315.png" alt="🌕" class="wp-smiley" style="height: 1em; max-height: 1em;" /><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f316.png" alt="🌖" class="wp-smiley" style="height: 1em; max-height: 1em;" /><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f317.png" alt="🌗" class="wp-smiley" style="height: 1em; max-height: 1em;" /><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f318.png" alt="🌘" class="wp-smiley" style="height: 1em; max-height: 1em;" /><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f311.png" alt="🌑" class="wp-smiley" style="height: 1em; max-height: 1em;" /><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f312.png" alt="🌒" class="wp-smiley" style="height: 1em; max-height: 1em;" /><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f313.png" alt="🌓" class="wp-smiley" style="height: 1em; max-height: 1em;" /><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f314.png" alt="🌔" class="wp-smiley" style="height: 1em; max-height: 1em;" />&quot;.map { String($0) }
    
    var body: some View {
        PhaseAnimator(moonPhases) { phase in
            Text(phase)            
        } animation: { _ in
          .easeInOut(duration: 1.0)
        }
        .font(.system(size: 120))
    }
}</code></pre>



<p>The Text view does not animate when the string changes value. I&#8217;m almost certain this is a bug in the framework, but in any case, it has multiple workarounds:</p>



<p>One way to solve it is using the <code>id()</code> modifier:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">Text(phase).id(phase)</code></pre>



<p>By changing the id in each phase of the animation, we are destroying and recreating the Text view, forcing SwiftUI to produce a transition animation. Because the default transition is <code>.opacity</code>, we will obtain the desired result. But if you want to have some fun, you can change the transition to something else:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="152" height="152" src="https://swiftui-lab.com/wp-content/uploads/2023/10/anim7-phase-example5.gif" alt="" class="wp-image-4455"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">Text(phase).id(phase).transition(.scale)</code></pre>



<p>If you want to learn more about the effects of using <code>.id()</code>, check my old post <a href="https://swiftui-lab.com/swiftui-id/" target="_blank" rel="noreferrer noopener">Identifying SwiftUI views</a>.</p>



<p>Destroying and recreating the view for each phase may be a bit too much, but there are other ways to force SwiftUI to animate the Text view without destroying. We can add a visual effect that is small enough to be noticeable. SwiftUI will be forced to redraw the view (and animate it), but the effect will not produce any evident output (apart from the animation). In this example we will change the opacity of the view by a very small amount. Odd and even phases will have an opacity of 0.99 and 1.0 respectively. Because opacity is different in each phase change, the view will animate. Now we are no longer animating a transition, but the actual text change.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">Text(phase)
    .opacity(moonPhases.firstIndex(of: phase)! % 2 == 0 ? 1.0 : 0.99)</code></pre>



<p>I have only seen this problem with Text views, but be aware, in case you come across the same problem in other scenarios. Fortunately, the cases when you will need to implement a workaround are very few.</p>



<h3 class="wp-block-heading"><strong>Using .phaseAnimator()</strong></h3>



<p>For convenience, you may also use the <code>phaseAnimator()</code> method. It receives the same parameters as <code>PhaseAnimator</code>, but the <code>@ViewBuilder</code> closure has an additional parameter with the view to modify. </p>



<p>Some animations can be equally achieved with both options, but the modifier is more limited. It allows you to use the phase value to modify a view, but it does not allow you to change its calling parameters, as is the case in the first examples where the <code>cornerRadius</code> parameter is set according to the phase.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="152" height="152" src="https://swiftui-lab.com/wp-content/uploads/2023/10/anim7-phases-example6.gif" alt="" class="wp-image-4470"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">enum CardinalPoint: Double, CaseIterable {
    case north = 0
    case east = 90
    case south = 180
    case west = 270
    case north_360 = 360
    
    // SF Symbol (<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2197.png" alt="↗" class="wp-smiley" style="height: 1em; max-height: 1em;" />) is 45 degrees rotated, so we substract it to compensate
    var angle: Angle { .degrees(self.rawValue - 45.0) }
}

struct ExampleView: View {

    var body: some View {
        
        Image(systemName: &quot;location.circle.fill&quot;)
            .symbolRenderingMode(.palette)
            .foregroundStyle(.yellow, .pink)
            .font(.system(size: 120))
            .phaseAnimator(CardinalPoint.allCases) { content, phase in

                content
                    .rotationEffect(phase.angle)
                
            } animation: { phase in
                if phase == .north {
                    .linear(duration: 0)
                } else {
                    .bouncy(extraBounce: 0.2)
                }
            }
    }
}</code></pre>



<p>This example also shows how you can use <strong>enum</strong> cases as your animator&#8217;s phases.</p>


<hr class="ub_divider" id="ub_divider_a0e17334-007c-4931-8f9b-23acdf4f9674"></hr>


<h2 class="wp-block-heading"><strong>Continuing the Journey</strong></h2>



<p>In this new part 7 of the series (the second this year), we have seen how to work with <code>PhaseAnimator</code>. In the next installment, we&#8217;ll dive deep into the world of <code>KeyframeAnimator</code>, unlocking even more exciting possibilities for your SwiftUI animations.</p>



<p>To ensure you don&#8217;t miss out on the latest updates and articles, follow me on 𝕏 (<a href="https://x.com/@SwiftUILab">@</a><a href="https://x.com/@SwiftUILab" target="_blank" rel="noreferrer noopener">SwiftUILab</a>), where I will be posting notifications when new articles are available. Happy Coding!</p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/swiftui-animations-part7/">Advanced SwiftUI Animations – Part 7: PhaseAnimator</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://swiftui-lab.com/swiftui-animations-part7/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Advanced SwiftUI Animations &#8211; Part 6: CustomAnimation</title>
		<link>https://swiftui-lab.com/swiftui-animations-part6/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=swiftui-animations-part6</link>
					<comments>https://swiftui-lab.com/swiftui-animations-part6/#comments</comments>
		
		<dc:creator><![CDATA[javier]]></dc:creator>
		<pubDate>Wed, 04 Oct 2023 15:09:21 +0000</pubDate>
				<category><![CDATA[Animations]]></category>
		<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">https://swiftui-lab.com/?p=4180</guid>

					<description><![CDATA[<p>Welcome to a new installment of the Advanced SwiftUI Animations series. I initiated this collection of articles back in 2019. Since then, Apple has been enhancing the framework and introducing new features. This year is no exception, with exciting additions that expand the possibilities of SwiftUI animations. As always, my goal is to explore every ... <a title="Advanced SwiftUI Animations &#8211; Part 6: CustomAnimation" class="read-more" href="https://swiftui-lab.com/swiftui-animations-part6/" aria-label="More on Advanced SwiftUI Animations &#8211; Part 6: CustomAnimation">Read more</a></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/swiftui-animations-part6/">Advanced SwiftUI Animations &#8211; Part 6: CustomAnimation</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>Welcome to a new installment of the <a href="https://swiftui-lab.com/swiftui-animations-part1/" target="_blank" rel="noreferrer noopener">Advanced SwiftUI Animations series</a>. I initiated this collection of articles back in 2019. Since then, Apple has been enhancing the framework and introducing new features. This year is no exception, with exciting additions that expand the possibilities of SwiftUI animations.</p>



<p>As always, my goal is to explore every aspect of the framework, and that means I won&#8217;t be able to cover everything in a single post. As in previous installments, the new additions for this year will also be presented in multiple parts.</p>



<p>Throughout the new posts, we will discuss topics such as the <code>Animation</code> type and the <code>CustomAnimation</code> protocol, new ways to work with <code>Transactions</code>, and new options to specify animations. We will also discuss the new <code>PhaseAnimator</code> and <code>KeyframeAnimator</code> views and methods.</p>



<p>Along the way, I will also provide debugging tips for situations where your animations don&#8217;t behave as expected. Let&#8217;s get started!</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading"><strong>Introduction</strong></h2>



<p>This part of the series will explore the new CustomAnimation protocol. In the past, once an animation got started, there was little that could be done besides interrupting it. This year, with custom animations, it is possible to interact during the animation. Bellow is an example of a custom <code>.variableSpeed</code> animation I created. Although it is a linear, it will let you alter its speed during its run:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="322" height="262" src="https://swiftui-lab.com/wp-content/uploads/2023/10/anim6-variableSpeed.gif" alt="" class="wp-image-4389"/></figure></div>


<p>All examples, including the <code>variableSpeed</code> animation, are available in a single <a href="https://gist.github.com/43faecbec695511d907111237e7b9595.git" target="_blank" rel="noreferrer noopener">gist file</a> that you can copy/paste directly into Xcode.</p>



<p>Note that the examples in this post are not very flashy, they are as plain and simple as possible. This is intentional and aims to focus on one concept at a time.</p>



<p>For more on this topic, I recommend you also check Apple&#8217;s WWDC&#8217;23 video <a href="https://developer.apple.com/wwdc23/10156" target="_blank" rel="noreferrer noopener">Explore SwiftUI Animation</a>.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading"><strong>The Animation type</strong></h2>



<p>The <code>withAnimation()</code> and <code>animation()</code> methods you already know, receive an <code>Animation</code> value as a parameter. But what is the purpose of an <code>Animation</code>? In simple words, the <code>Animation</code> type value tells SwiftUI how long the animation runs and also indicates how to interpolate the animatable property of the view from its original to its changed value.</p>



<p>For example, a <strong>linear</strong> Animation produces even changes from the beginning to the end, while an <strong>easeIn</strong> Animation will progressively accelerate the amount of change at the beginning and then stabilize into almost linear changes.</p>



<p>We have been using this extensively over the years. For example, in the following code:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">withAnimation(.easeInOut) { ... }

withAnimation(.easeInOut(duration: 2.0)) { ... }</code></pre>



<p>If you look closely at the SwiftUI declaration file you will find:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">extension Animation { 
    static var easeInOut: Animation { get }

    static func easeInOut(duration: TimeInterval) -&gt; Animation
}</code></pre>



<p>This makes it possible to write <code>.easeInOut</code>, instead of <code>Animation.easeInOut</code>, because the compiler is already expecting an <code>Animation</code> and knows that the dot syntax has to refer to a static variable (or static function).</p>



<p>Until now, we&#8217;ve been limited to using one of the pre-built animations (.linear, .spring, .interactiveSpring, .easeIn, .easeOut, .easeInOut, .bouncy, and more). They are usually available as static variables with pre-configured values or as static functions with parameters that let you customize them.</p>



<p>Starting in 2023, we can add to this pool of pre-built animations. This is what this part of the series is all about.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading"><strong>Using Custom Animations</strong></h2>



<p>New this year, is the possibility of creating our own custom animations. To do so, we just create a type that adopts the <strong>CustomAnimation</strong> protocol. Then you use such animation like this:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">withAnimation(Animation(MyCustomAnimation())) { ... }</code></pre>



<p>And to follow the pre-built animation style, you can create your own <strong>Animation</strong> extension:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">extension Animation {
    var myAnimation: Animation { Animation(MyCustomAnimation()) }
}</code></pre>



<p>Because we extended Animation, our code will be simplify to:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">withAnimation(.myAnimation) { ... }</code></pre>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading"><strong>VectorArithmetic Protocol</strong></h2>



<p>Because in the next sections we will extensively use types that need to conform to <strong>VectorArithmetic</strong>, it is worth spending some time refreshing what it is and why it is useful. You may already be familiar with it, especially if you read the first part of this blog post series, so feel free to skip this part if you already know what a <strong>VectorArithmetic</strong> type is.</p>



<p>We use <strong>VectorArithmetic</strong> for types that can represent a vector. In this context (SwiftUI animations), think of a vector as an n-tuple of values that can be animated. These values are advanced through the animation, by scaling or interpolating them. Conveniently, the protocol has functions that let you both scale an interpolate.</p>



<p>Examples of types that already adopt <strong>VectorArithmetic</strong> are <code>Double</code> and <code>CGFloat</code>. You can also make your own types conform to this protocol. For an example, check<a href="https://swiftui-lab.com/swiftui-animations-part1/" target="_blank" rel="noreferrer noopener"> <a href="https://swiftui-lab.com/swiftui-animations-part1/" target="_blank" rel="noreferrer noopener">Advanced SwiftUI Animations: Part 1</a></a> and look for section <strong>Making Your Own Type Animatable</strong>.</p>



<p><code>Double</code> and <code>CGFloat</code> by themselves are each a 1-tuple, but we need to be able to handle n-tuples. That is, vectors with any number of values. For this purpose, there is a type called <strong>AnimatablePair</strong>. This type also conforms to <strong>VectorArithmetic</strong> but essentially encapsulates two <strong>VectorArithmetic</strong> values. So now, we can handle 2-tuples. Fortunately, because one of those values can also be an <strong>AnimatablePair</strong>, we get a 3-tuple, if both values are <strong>AnimatablePair</strong>, you get a 4-tuple, and so on. That way you can specify any number of components for your vector. To illustrate this, consider a vector that needs to hold a scale (CGFloat), an opacity value (Double) and a rotation angle (Double). Our 3-tuple vector would be defined as:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">let v: AnimatablePair&lt;AnimatablePair&lt;CGFloat, Double&gt;, Double&gt;
                
v = AnimatablePair(AnimatablePair(10.0, 0.2), 90.0)</code></pre>



<p>For more detailed examples, please refer to <a href="https://swiftui-lab.com/swiftui-animations-part1/" target="_blank" rel="noreferrer noopener">Advanced SwiftUI Animations: Part 1</a> and look for the sections titled <strong>Animating More Than One Parameter</strong> and <strong>Going Beyond Two Animatable Parameters</strong>.</p>



<p>Fortunately, in order to implement your custom animation, you don&#8217;t need to know how many components the vector has. This is because we operate on the vector as a whole. Any interpolation or scaling we perform on it, will be done on all its components automatically, whether it&#8217;s a 1-tuple, 5-tuple, or any n-tuple the system is using behind the scenes.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading"><strong>CustomAnimation</strong>: func animate()</h2>



<p>To create a custom animation, there is only one required method: <code>animate()</code>, and two optional methods: <code>shouldMerge()</code> and <code>velocity()</code>. We&#8217;ll deal with the optional methods later, so let&#8217;s focus on the most important:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">func animate&lt;V&gt;(value: V, time: TimeInterval, context: inout AnimationContext&lt;V&gt;) -&gt; V? where V : VectorArithmetic</code></pre>



<p>The purpose of your implementation is to determine how the animatable values will change during the animation. This function is called repeatedly by the system, and our job is to return the updated animatable values. This continues until we return <code>nil</code> to end the animation. The system will stop calling <code>animate()</code> after that.</p>



<p>The first parameter is our vector (which contains all animatable values), the second parameter is how much time has elapsed since the animation began, and the last parameter is an <code>inout</code> animation context. This context can be used to persist data between calls to the function and also allows us to read the environment of the animated view.</p>



<p>The beauty of this is that our code will be agnostic to the actual value(s) being animated. It can be a 1-tuple with opacity, or a 3-tuple with opacity, scale, and rotation, or whatever combination of animatable values the user of our CustomAnimation is changing. Most of the time, we are also that user, but we can design a custom animation without knowing what is going to be animated.</p>



<p>To make our job easier, we will not be animating from the initial value to its final value, but rather the delta between them. In other words, if we are animating opacity from 0.5 to 0.8, in reality, we will be animating from 0.0 to 0.3.</p>



<p>In most scenarios (although not necessarily), we usually return <code>value.scaled(by: 0.0)</code> at the beginning of the animation and <code>value.scaled(by: 1.0)</code> at the end. What you do in the middle will determine the curve of your animation.</p>



<p>But let&#8217;s begin coding our first custom animation, implementing the most basic: a linear animation.</p>



<h3 class="wp-block-heading"><strong>Linear Animation</strong> (Example #1)</h3>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct MyLinearAnimation: CustomAnimation {
    let duration: TimeInterval
    
    func animate&lt;V&gt;(value: V, time: TimeInterval, context: inout AnimationContext&lt;V&gt;) -&gt; V? where V : VectorArithmetic {
        guard time &lt; duration else { return nil }
        
        return value.scaled(by: time/duration)
    }
}

// For convenience and code readability, we extend Animation
extension Animation {
    static func myLinear(duration: TimeInterval) -&gt; Animation { Animation(MyLinearAnimation(duration: duration)) }
    
    static var myLinear: Animation { Animation(MyLinearAnimation(duration: 2.0)) }
}</code></pre>



<p>Then we can use our custom animation as we would with any other built-in animation. In this case, we are also adding a <code>delay()</code> and a <code>repeatForever()</code> method (which are part of the <code>Animation</code> type that contains our <code>CustomAnimation</code>). No extra work is needed for that to function!</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="118" height="118" src="https://swiftui-lab.com/wp-content/uploads/2023/09/anim6-example1-1.gif" alt="" class="wp-image-4259"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    @State var animate: Bool = false
    
    var body: some View {
                        
        Text(&quot;<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f635-200d-1f4ab.png" alt="😵‍💫" class="wp-smiley" style="height: 1em; max-height: 1em;" />&quot;)
            .font(.system(size: 100))
            .rotationEffect(.degrees(animate ? 360 : 0))
            .task {
                withAnimation(.myLinear.delay(1).repeatForever(autoreverses: false)) {
                    animate.toggle()
                }
            }
    }
}</code></pre>



<p>The following table shows the values in several calls to the <strong>animate()</strong> function as time progresses:</p>



<figure class="wp-block-table aligncenter is-style-stripes"><table><thead><tr><th class="has-text-align-center" data-align="center">time</th><th class="has-text-align-center" data-align="center">time/duration</th><th class="has-text-align-center" data-align="center">value.scaled(by: time/duration)</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center">0.0</td><td class="has-text-align-center" data-align="center">0.0</td><td class="has-text-align-center" data-align="center">0</td></tr><tr><td class="has-text-align-center" data-align="center">0.2</td><td class="has-text-align-center" data-align="center">0.1</td><td class="has-text-align-center" data-align="center">36</td></tr><tr><td class="has-text-align-center" data-align="center">0.4</td><td class="has-text-align-center" data-align="center">0.2</td><td class="has-text-align-center" data-align="center">72</td></tr><tr><td class="has-text-align-center" data-align="center">0.6</td><td class="has-text-align-center" data-align="center">0.3</td><td class="has-text-align-center" data-align="center">108</td></tr><tr><td class="has-text-align-center" data-align="center">0.8</td><td class="has-text-align-center" data-align="center">0.4</td><td class="has-text-align-center" data-align="center">144</td></tr><tr><td class="has-text-align-center" data-align="center">1.0</td><td class="has-text-align-center" data-align="center">0.5</td><td class="has-text-align-center" data-align="center">180</td></tr><tr><td class="has-text-align-center" data-align="center">1.2</td><td class="has-text-align-center" data-align="center">0.6</td><td class="has-text-align-center" data-align="center">216</td></tr><tr><td class="has-text-align-center" data-align="center">1.4</td><td class="has-text-align-center" data-align="center">0.7</td><td class="has-text-align-center" data-align="center">252</td></tr><tr><td class="has-text-align-center" data-align="center">1.6</td><td class="has-text-align-center" data-align="center">0.8</td><td class="has-text-align-center" data-align="center">288</td></tr><tr><td class="has-text-align-center" data-align="center">1.8</td><td class="has-text-align-center" data-align="center">0.9</td><td class="has-text-align-center" data-align="center">324</td></tr><tr><td class="has-text-align-center" data-align="center">2.0</td><td class="has-text-align-center" data-align="center">1.0</td><td class="has-text-align-center" data-align="center">360</td></tr><tr><td class="has-text-align-center" data-align="center">&gt; 2.0</td><td class="has-text-align-center" data-align="center">&#8211;</td><td class="has-text-align-center" data-align="center"><strong>nil</strong></td></tr></tbody></table></figure>



<p>Also, note that animation duration is not a concept SwiftUI is aware of. It is up to the <code>animate()</code> function to determine when to stop. In this case, we conveniently define a <code>duration</code> property, and we end the animation when the time is no longer lower than <code>duration</code>. SwiftUI knows the animation is over because we return <code>nil</code>; otherwise, it would keep calling <code>animate()</code>.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading"><strong>CustomAnimation&#8217;s AnimationContext</strong></h2>



<p>In the previous example, we used the <code>value</code> and <code>time</code> parameters, but <code>context</code> was not necessary. Next, let&#8217;s see an example where it is.</p>



<p>The <code>context</code> parameter in the <code>animate()</code> function has multiple uses. It may be used to read the view&#8217;s environment, but you can also use it to store information that needs to persist across calls to the <code>CustomAnimation</code> methods. We will explore both cases.</p>



<h3 class="wp-block-heading"><strong>AnimationContext: Environment Use Case</strong> (Example #2)</h3>



<p>Consider the following example. This new custom animation is called <code>.random</code>, and as you may have already guessed, it scales the value randomly. In this case, however, we are not defining a duration, so the animation never ends.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="196" height="205" src="https://swiftui-lab.com/wp-content/uploads/2023/09/anim6-example2.gif" alt="" class="wp-image-4271"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    @State var animate = false

    var body: some View {
        Text(&quot;<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f62c.png" alt="😬" class="wp-smiley" style="height: 1em; max-height: 1em;" />&quot;)
            .font(.system(size: 100))
            .offset(x: animate ? -3 : 3, y: animate ? -3 : 3)
            .animation(.random, value: animate)
            .task {
                animate.toggle()
            }
    }
}

extension Animation {
    static var random: Animation { Animation(RandomAnimation()) }
}

struct RandomAnimation: CustomAnimation {
    func animate&lt;V&gt;(value: V, time: TimeInterval, context: inout AnimationContext&lt;V&gt;) -&gt; V? where V : VectorArithmetic {
        return value.scaled(by: Double.random(in: 0...1))
    }
}</code></pre>



<p>Now let&#8217;s see how we can communicate with the <strong>animate()</strong> function from the view, in order to make it stop by the press of a button.</p>



<p>To be able to communicate with an ongoing animation, we do so through the view&#8217;s environment. Our custom implementation can read the view&#8217;s environment at any time through the <code>context</code> parameter. You can access any of the existing environment values, but that would not help here. In our case, we will create a custom <code>EnvironmentValue</code> specific to our needs. Note that this is not new; we&#8217;ve been able to create custom <code>EnvironmentValue</code> items since SwiftUI was introduced. If you want to learn more about it, check <a href="https://developer.apple.com/documentation/swiftui/environmentkey" target="_blank" rel="noreferrer noopener">EnvironmentKey</a>.</p>



<p>Our custom environment value will be a boolean, with a <strong>false</strong> value as default, and we will call it <strong>stopAnimation</strong>:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">extension EnvironmentValues {
    var stopRandom: Bool {
        get { return self[StopRandomAnimationKey.self] }
        set { self[StopRandomAnimationKey.self] = newValue }
    }
}

public struct StopRandomAnimationKey: EnvironmentKey {
    public static let defaultValue: Bool = false
}</code></pre>



<p>Now we can add a button to change the environment value:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="196" height="239" src="https://swiftui-lab.com/wp-content/uploads/2023/09/anim6-example3.gif" alt="" class="wp-image-4284"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    @State var animate = false
    @State var stop = false

    var body: some View {
        VStack {
            Text(&quot;<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f62c.png" alt="😬" class="wp-smiley" style="height: 1em; max-height: 1em;" />&quot;)
                .font(.system(size: 100))
                .offset(x: animate ? -3 : 3, y: animate ? -3 : 3)
                .animation(.random, value: animate)
                .task {
                    animate.toggle()
                }
                .environment(\.stopRandom, stop)

            Button(&quot;Chill Man&quot;) {
                stop.toggle()
            }
        }
    }
}
</code></pre>



<p>Then it is up to our <strong>animate()</strong> function to check for the <code>stopAnimation</code> environment value at every call. We simply return <code>nil</code> when <code>stopAnimation</code> is <code>true</code>.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">extension Animation {
    static var random: Animation { Animation(RandomAnimation()) }
}

struct RandomAnimation: CustomAnimation {
    func animate&lt;V&gt;(value: V, time: TimeInterval, context: inout AnimationContext&lt;V&gt;) -&gt; V? where V : VectorArithmetic {

        guard !context.environment.stopRandom else { return nil }
        
        return value.scaled(by: Double.random(in: 0...1))
    }
}</code></pre>



<p>As you can see, the environment in the <code>context</code> is not a snapshot at the time the animation starts, but rather a live instance of the view&#8217;s environment at the time it is being accessed.</p>



<p>The ability to alter the behavior of an ongoing animation opens a world of opportunities!</p>



<h3 class="wp-block-heading"><strong>AnimationContext: Data Persistence Use Case</strong> (Example #3)</h3>



<p>Now, to explore the data persistence use case, we will expand on the same example.</p>



<p>When the user stops the animation, the effect is abrupt. However, now we want to make our jittery character to cool down slowly:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="196" height="239" src="https://swiftui-lab.com/wp-content/uploads/2023/09/anim6-example4.gif" alt="" class="wp-image-4306"/></figure></div>


<p>In addition to indicating when to stop, we need a way for the animation to progressively fade the effect across an arbitrary amount of time.</p>



<p>To add our own data to the context, we need to define an <a href="https://developer.apple.com/documentation/swiftui/animationstatekey" target="_blank" rel="noreferrer noopener">AnimationStateKey</a>. This process is very similar of how you define new <code>EnvironmentValue</code> keys:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">private struct RandomAnimationState&lt;Value: VectorArithmetic&gt;: AnimationStateKey {
    var stopRequest: TimeInterval? = nil

    static var defaultValue: Self { RandomAnimationState() }
}

extension AnimationContext {
    fileprivate var randomState: RandomAnimationState&lt;Value&gt; {
        get { state[RandomAnimationState&lt;Value&gt;.self] }
        set { state[RandomAnimationState&lt;Value&gt;.self] = newValue }
    }
}</code></pre>



<p>The data we want to persist is the time of the animation when the stop request was performed. With this value and the time parameter of the <code>animate()</code> function, we can now determine how much time has elapsed since the user requested to stop. As time goes by, we decrease the randomness of the animation more and more until we eventually end it by returning <code>nil</code>.</p>



<p>We will also add a custom parameter to our animation (fadeTime) that will let us customize how long it will take for the animation to end after the user requested it through the environment.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">extension Animation {
    static func random(fade: Double = 1.0) -&gt; Animation { Animation(RandomAnimationWithFade(fadeTime: fade)) }
}

struct RandomAnimationWithFade: CustomAnimation {
    // time to fade randomness since stop starts to end of animation
    let fadeTime: Double

    func animate&lt;V&gt;(value: V, time: TimeInterval, context: inout AnimationContext&lt;V&gt;) -&gt; V? where V : VectorArithmetic {
        
        if context.environment.stopRandom { // animation stop requested
            if context.randomState.stopRequest == nil {
                context.randomState.stopRequest = time
            }
            
            let randomIntensity = (time - context.randomState.stopRequest!) / fadeTime
            
            if randomIntensity &gt; 1 { return nil }
            
            return value.scaled(by: Double.random(in: randomIntensity...1))
        } else {
            return value.scaled(by: Double.random(in: 0...1))
        }
    }
}
</code></pre>



<p>Now our view code will slightly change to specify the fade time (2.0 seconds):</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    @State var animate = false
    @State var stop = false

    var body: some View {
        VStack(spacing: 10) {
            Text(&quot;<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f62c.png" alt="😬" class="wp-smiley" style="height: 1em; max-height: 1em;" />&quot;)
                .font(.system(size: 100))
                .offset(x: animate ? 0 : 6, y: animate ? 0 : 6)
                .animation(.random(fade: 2.0), value: animate)
                .task {
                    animate.toggle()
                }
                .environment(\.stopRandom, stop)

            Button(&quot;Chill Man!&quot;) {
                stop.toggle()
            }
        }
    }
}</code></pre>



<h3 class="wp-block-heading"><strong>Restarting the Animation</strong></h3>



<p>In the above examples, if you press the button again, you will notice the animation won&#8217;t resume. That is because when you stopped it, the <code>animate()</code> function returned <code>nil</code>. When this happens, SwiftUI removes the animation, and it no longer exists. To restart it, you need to create a new animation by triggering it again:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">Button(&quot;Chill Man!&quot;) {
    stop.toggle()
                
    if !stop { animate.toggle() }
}
</code></pre>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading"><strong>CustomAnimation</strong>: func shouldMerge()</h2>



<p>When creating a new animation, SwiftUI will determine if there is already a running animation for the same view property. If so, it will ask the new animation how it wants to handle that. This is decided in the implementation of the interrupting animation&#8217;s <code>shouldMerge()</code> method.</p>



<p>Your implementation returns a boolean value. If you return <strong>false</strong> (this is the default if left unimplemented), both animations (old and new) will run their course, and their results will be combined by the system.</p>



<p>However, if you return true, this indicates that you want the new animation to merge with the previous one. The system will remove the original animation and continue with your new animation. To properly merge, the <code>shouldMerge</code> method receives some useful information that can be later used by your <code>animate()</code> implementation:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">func shouldMerge(previous: Animation, value: V, time: TimeInterval, context: inout AnimationContext&lt;V&gt;) -&gt; Bool</code></pre>



<p>The <code>previous</code> parameter provides the original animation to merge with. We also receive the <code>value</code> to animate towards, the elapsed <code>time</code> so far, and the animation <code>context</code>.</p>



<p>This is better understood with an example.</p>



<h3 class="wp-block-heading"><strong>Merging Animations</strong> (Example #4)</h3>



<p>Consider the system&#8217;s <code>.linear</code> animation. This animation&#8217;s <code>shouldMerge()</code> method returns false and allows the system to combine both animations. In the following example, a linear animation is interrupted by another linear animation. You will notice that this results in a deceleration and acceleration of the overall animation.</p>



<p>To test it, simply click twice on the animate button:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="307" height="170" src="https://swiftui-lab.com/wp-content/uploads/2023/10/anim6-merging1.gif" alt="" class="wp-image-4322"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    @State var offset: CGFloat = -100.0

    var body: some View {
        VStack(spacing: 20) {
            RoundedRectangle(cornerRadius: 20)
                .fill(.green)
                .frame(width: 70, height: 70)
                .offset(x: offset)
    
            Button(&quot;Animate&quot;) {
                withAnimation(.linear(duration: 1.5)) {
                    offset = (offset == 100 ? -100 : 100)
                }
            }
        }
    }
}</code></pre>



<p>Returning false (or leaving the function without implementation) is the easiest route, but sometimes the results may not be what we want. For those cases, let&#8217;s explore how we can take advantage of <code>shouldMerge()</code>.</p>



<p>We are going to work with the <code>myLinear</code> animation from the first example, but instead of letting SwiftUI combine animations, we want to avoid the deceleration/acceleration that results from combining. For our example, we want our animation to be linear at all times, even when an interruption occurs.</p>



<p>Returning true in <code>shouldMerge()</code> is not enough; we need to add some logic for this to work. The <code>animate()</code> method needs some extra information to keep it linear. In addition to using <code>shouldMerge()</code> to tell SwiftUI to merge, we are going to take the opportunity to save some data from the original animation that is going to be needed in the new one. We are going to use the <code>context</code> to persist this information. Unlike the previous example where the <code>context</code> was saving a single value (TimeInterval), we are now going to create a custom type (<code>MyLinearState</code>), which will store the time of the interruption and the value at the time it was interrupted.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct MyLinearState&lt;Value: VectorArithmetic&gt;: AnimationStateKey {
    var from: Value? = nil
    var interruption: TimeInterval? = nil
    
    static var defaultValue: Self { MyLinearState() }
}

extension AnimationContext {
    var myLinearState: MyLinearState&lt;Value&gt; {
        get { state[MyLinearState&lt;Value&gt;.self] }
        set { state[MyLinearState&lt;Value&gt;.self] = newValue }
    }
}
</code></pre>



<p>Note that in our <code>shouldMerge()</code>, we will use the <code>previous</code> parameter to query the original animation for its value at the time of the interruption:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">    func shouldMerge&lt;V&gt;(previous: Animation, value: V, time: TimeInterval, context: inout AnimationContext&lt;V&gt;) -&gt; Bool where V : VectorArithmetic {
        
        context.myLinearState.from = previous.base.animate(value: value, time: time, context: &amp;context)
        context.myLinearState.interruption = time
 
        return true
    }
</code></pre>



<p>Now our animate() implementation will use this information to properly animate when replacing an interrupted animation:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">func animate&lt;V&gt;(value: V, time: TimeInterval, context: inout AnimationContext&lt;V&gt;) -&gt; V? where V : VectorArithmetic {

        guard time &lt; duration + (context.myLinearState.interruption ?? 0) else { return nil }

        if let v = context.myLinearState.from {
            return v.interpolated(towards: value, amount: (time-context.myLinearState.interruption!)/duration)
        } else {
            return value.scaled(by: time/duration)
        }
    }
</code></pre>



<p>The following image compares the system <strong>.linear</strong> animation, and our custom animation both returning false and true for <strong>shouldMerge()</strong>. Check <strong>Example4()</strong> in the gist file for the full code:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="609" height="336" src="https://swiftui-lab.com/wp-content/uploads/2023/10/anim6-merging2.gif" alt="" class="wp-image-4329"/></figure></div>


<p>Notice how in our new merging implementation (yellow), movement is linear at all times, and we managed to keep the overall time of the animation the same in all cases.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading"><strong>CustomAnimation</strong>: func velocity()</h2>



<p>When animations merge, to achieve a smooth transition, the new animation may request the original animation&#8217;s velocity at the moment of the merge. In our previous example, we didn&#8217;t need to check for velocity because we were seeking an abrupt change. We wanted all changes to occur strictly linearly.</p>



<p>Your view of the <code>velocity()</code> method will be different if you are writing the code for the original animation, the interrupting animation, or both. When you are writing the interrupted (original) animation, your implementation of <code>velocity()</code> will be called (usually by the <code>shouldMerge()</code> method of the interrupting (new) animation). On the contrary, if you are writing the code for the interrupting animation and your implementation of <code>shouldMerge()</code> returns true, you will probably want to call the interrupted animation&#8217;s <code>velocity()</code> method to integrate it into your calculations. In general, you have to pay attention to both cases, as animations can often be both: interrupted and interrupting.</p>



<p>It is worth pausing here for a moment to contemplate what <a href="https://en.wikipedia.org/wiki/Velocity" target="_blank" rel="noreferrer noopener">velocity</a> is. Velocity encompasses both the speed and the direction of an object&#8217;s motion. Now, let&#8217;s delve into the definition of speed: we can define it as the magnitude of change within a specified amount of time. It&#8217;s important not to confuse speed with acceleration. The concept of direction is self-explanatory, but we will later explore its specific implications in the context of SwiftUI animations.</p>



<p>For a linear animation, the velocity function should be:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">func velocity&lt;V&gt;(value: V, time: TimeInterval, context: AnimationContext&lt;V&gt;) -&gt; V? where V : VectorArithmetic {
        return value.scaled(by: 1.0/duration)
}</code></pre>



<p>Remember that <code>scaled(by: 0.0)</code> typically represents the initial value of the animation, indicating when nothing has changed yet. On the other end, <code>scaled(by: 1.0)</code> represents the entirety of the change produced when the animation has concluded. In a linear animation, the speed remains constant throughout, so the function should consistently return the same value: <code>scaled(by: 1.0/duration)</code>. In other words, it indicates how much the animation scales per second. For example, if the animation lasts for 4.0 seconds, in one second, it would have scaled by <code>1.0/4.0 = 0.25</code>.</p>



<p>Now, let&#8217;s consider the concept of <strong>direction</strong>. As previously mentioned, <strong>velocity</strong> encompasses both <strong>speed</strong> and <strong>direction</strong>. In this context, whether the scaling is positive or negative can be seen as indicating the direction in which the change is produced.</p>



<h3 class="wp-block-heading"><strong>Velocity Values</strong> (Example #5)</h3>



<p>To visually illustrate velocity, we will have our custom linear animation interrupted by a Spring animation. It&#8217;s a known fact that SwiftUI spring animations utilize the velocity of the interrupted animation to incorporate it into their changes. Therefore, in this case, the spring&#8217;s <code>shouldMerge</code> function will call our custom animation&#8217;s <code>velocity</code> method.</p>



<p>In the following example, we will compare our linear animation with three different velocity values. In the middle of the linear animation we will interrupt with a spring and see the results.</p>



<p>The first example is the right velocity (1.0/duration), and the other two will be greatly exaggerated values (-5.0 and 5.0):</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">return value.scaled(by: 1.0/duration)

return value.scaled(by: 5.0)

return value.scaled(by: -5.0)</code></pre>



<p>The following capture shows how the linear animation is interrupted by the spring animation:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="522" height="425" src="https://swiftui-lab.com/wp-content/uploads/2023/10/anim6-velocity.gif" alt="" class="wp-image-4338"/></figure></div>


<p>For the full code, check for Example5 in the gist file reference at the beginning of this article.</p>



<h2 class="wp-block-heading"><strong>Debugging Custom Animations Tips</strong></h2>



<p>If you encounter difficulties achieving your desired animations, here are some tips that can assist you in figuring out why.</p>



<h3 class="wp-block-heading"><strong>Tip #1</strong></h3>



<p>I previously mentioned that your custom animation should be agnostic to the actual value being animated. However, during development, you might want to log the values you receive and the values you return. Even though you may not know the specific type behind the VectorArithmetic value, you can still access its value. The simplest approach is to print the value to the console.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">func animate&lt;V&gt;(value: V, time: TimeInterval, context: inout AnimationContext&lt;V&gt;) -&gt; V? where V : VectorArithmetic {
   guard time &lt; duration else { return nil }
        
   let r = value.scaled(by: time/duration)
        
   print(&quot;TIME: \(time)\nVALUE: \(value)\nRETURN: \(r)&quot;)
        
   return r
}</code></pre>



<p>The output for one of the last calls to <code>animate()</code> will be something like this:</p>



<pre class="wp-block-code"><code>TIME: 1.9891413750010543
VALUE: AnimatablePair&lt;AnimatablePair&lt;CGFloat, CGFloat&gt;, AnimatablePair&lt;CGFloat, CGFloat&gt;&gt;(first: SwiftUI.AnimatablePair&lt;CoreGraphics.CGFloat, CoreGraphics.CGFloat&gt;(first: -100.0, second: 0.0), second: SwiftUI.AnimatablePair&lt;CoreGraphics.CGFloat, CoreGraphics.CGFloat&gt;(first: 0.0, second: 0.0))
RETURN: AnimatablePair&lt;AnimatablePair&lt;CGFloat, CGFloat&gt;, AnimatablePair&lt;CGFloat, CGFloat&gt;&gt;(first: SwiftUI.AnimatablePair&lt;CoreGraphics.CGFloat, CoreGraphics.CGFloat&gt;(first: -99.45706875005271, second: 0.0), second: SwiftUI.AnimatablePair&lt;CoreGraphics.CGFloat, CoreGraphics.CGFloat&gt;(first: 0.0, second: 0.0))</code></pre>



<p>After you clean it up, you can see the vector has 4 components, all <code>CGFloat</code>, with the following values:</p>



<pre class="wp-block-code"><code>TIME: 1.9891413750010543
VALUE: -100.0, 0.0, 0.0, 0.0
RESULT: -99.45706875005271, 0.0, 0.0, 0.0</code></pre>



<h3 class="wp-block-heading"><strong>Tip #2</strong></h3>



<p>If you want to be more sophisticated and wish for a more legible output, instead of printing it straight, you could use <a href="https://developer.apple.com/documentation/swift/debugging-and-reflection" target="_blank" rel="noreferrer noopener">Reflection</a> (Mirror) to extract the data you need. There is already plenty of information on how to use Mirror, so I will not cover it here.</p>



<h2 class="wp-block-heading"><strong>Summing It Up</strong></h2>



<p>This year&#8217;s addition to the series of animation articles is presented as a multipart series. In this initial installment (part 6 overall), we explored the creation and utilization of the <code>CustomAnimation</code> protocol.</p>



<p>I hope you found this blog post helpful, but the journey doesn&#8217;t end here. In upcoming posts, I will be covering other interesting animation features brought by WWDC &#8217;23.</p>



<p>To stay updated and not miss out on the latest updates, follow me on 𝕏 (<a href="https://x.com/@SwiftUILab">@</a><a href="https://x.com/@SwiftUILab" target="_blank" rel="noreferrer noopener">SwiftUILab</a>), where I will be posting notifications when new articles are available.</p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/swiftui-animations-part6/">Advanced SwiftUI Animations &#8211; Part 6: CustomAnimation</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://swiftui-lab.com/swiftui-animations-part6/feed/</wfw:commentRss>
			<slash:comments>8</slash:comments>
		
		
			</item>
		<item>
		<title>The SwiftUI Layout Protocol &#8211; Part 2</title>
		<link>https://swiftui-lab.com/layout-protocol-part-2/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=layout-protocol-part-2</link>
					<comments>https://swiftui-lab.com/layout-protocol-part-2/#respond</comments>
		
		<dc:creator><![CDATA[javier]]></dc:creator>
		<pubDate>Mon, 12 Sep 2022 13:43:47 +0000</pubDate>
				<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">https://swiftui-lab.com/?p=3960</guid>

					<description><![CDATA[<p>And the Fun Begins! In the first part of this post we explored the basics of the Layout protocol in order to build a strong foundation of how Layout works. Now it&#8217;s time to dive into the less commented features and how to use them in our benefit. Part 1 &#8211; The Basics: Introduction What ... <a title="The SwiftUI Layout Protocol &#8211; Part 2" class="read-more" href="https://swiftui-lab.com/layout-protocol-part-2/" aria-label="More on The SwiftUI Layout Protocol &#8211; Part 2">Read more</a></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/layout-protocol-part-2/">The SwiftUI Layout Protocol &#8211; Part 2</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></description>
										<content:encoded><![CDATA[<hr class="ub_divider" id="ub_divider_29ba8657-81c4-4ab6-87da-9c202e6746b5"></hr>


<h3 class="wp-block-heading" id="intro"><strong>And the Fun Begins</strong>!</h3>



<p>In the <a href="https://swiftui-lab.com/layout-protocol-part-1">first part</a> of this post we explored the basics of the <code>Layout</code> protocol in order to build a strong foundation of how <code>Layout</code> works. Now it&#8217;s time to dive into the less commented features and how to use them in our benefit.</p>



<p><strong>Part 1 &#8211; The Basics:</strong></p>



<ul><li><a href="https://swiftui-lab.com/layout-protocol-part-1/#intro">Introduction</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-1/#whatis"><a href="https://swiftui-lab.com/layout-protocol-part-1/#whatis">What is the Layout Protocol?</a></a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-1/#family-dynamics">Family Dynamics of the View Hierarchy</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-1/#first-layout">Our First Layout Implementation</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-1/#container-alignment">Container Alignment</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-1/#custom-values">Custom Values: LayoutValueKey</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-1/#default-spacing">Default Spacing</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-1/#layout-properties">Layout Properties and Spacer()</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-1/#layout-cache">Layout Cache</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-1/#great-pretenders">Great Pretenders</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-1/#switching-layouts">Switching Layouts with AnyLayout</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-1/#conclusion">Part 1 Conclusion</a></li></ul>



<p><strong>Part 2 &#8211; Advanced Layouts:</strong></p>



<ul><li><a href="https://swiftui-lab.com/layout-protocol-part-2/#custom-animations">Custom Animations</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-2/#bidirectional">Bi-directional Custom Values</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-2/#avoid-loops">Avoiding Layout Loops and Crashes</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-2/#recursive">Recursive Layouts</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-2/#composition">Layout Composition</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-2/#interpolation">Another Composition Example: Interpolating Two Layouts</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-2/#binding">Using Binding Parameters</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-2/#tool">A Helpful Debugging Tool</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-2/#final">Final Thoughts</a></li></ul>


<hr class="ub_divider" id="ub_divider_d026efb5-b8c4-4e25-9ac5-42de91c7bfec"></hr>


<h3 class="wp-block-heading" id="custom-animations"><strong>Custom Animations</strong></h3>



<p>Let&#8217;s begin writing a container that places our views in a circular layout. We will call it <code>WheelLayout</code>:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full is-resized"><img loading="lazy" decoding="async" src="https://swiftui-lab.com/wp-content/uploads/2022/08/layout-2-1.png" alt="" class="wp-image-3966" width="360" height="360" srcset="https://swiftui-lab.com/wp-content/uploads/2022/08/layout-2-1.png 720w, https://swiftui-lab.com/wp-content/uploads/2022/08/layout-2-1-300x300.png 300w, https://swiftui-lab.com/wp-content/uploads/2022/08/layout-2-1-150x150.png 150w" sizes="(max-width: 360px) 100vw, 360px" /></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    let colors: [Color] = [.yellow, .orange, .red, .pink, .purple, .blue, .cyan, .green]
    
    var body: some View {
        WheelLayout(radius: 130.0, rotation: .zero) {
            ForEach(0..&lt;8) { idx in
                RoundedRectangle(cornerRadius: 8)
                    .fill(colors[idx%colors.count].opacity(0.7))
                    .frame(width: 70, height: 70)
                    .overlay { Text(&quot;\(idx+1)&quot;) }
            }
        }
    }
}

struct WheelLayout: Layout {
    var radius: CGFloat
    var rotation: Angle
    
    func sizeThatFits(proposal: ProposedViewSize, subviews: Subviews, cache: inout ()) -&gt; CGSize {
        
        let maxSize = subviews.map { $0.sizeThatFits(proposal) }.reduce(CGSize.zero) {
            
            return CGSize(width: max($0.width, $1.width), height: max($0.height, $1.height))
            
        }
        
        return CGSize(width: (maxSize.width / 2 + radius) * 2,
                      height: (maxSize.height / 2 + radius) * 2)
    }
    
    func placeSubviews(in bounds: CGRect, proposal: ProposedViewSize, subviews: Subviews, cache: inout ()) 
    {
        let angleStep = (Angle.degrees(360).radians / Double(subviews.count))

        for (index, subview) in subviews.enumerated() {
            let angle = angleStep * CGFloat(index) + rotation.radians
            
            // Find a vector with an appropriate size and rotation.
            var point = CGPoint(x: 0, y: -radius).applying(CGAffineTransform(rotationAngle: angle))
            
            // Shift the vector to the middle of the region.
            point.x += bounds.midX
            point.y += bounds.midY
            
            // Place the subview.
            subview.place(at: point, anchor: .center, proposal: .unspecified)
        }
    }
}
</code></pre>



<p>SwiftUI provides built-in support for animating view positions when a layout changes. So if we change the rotation value of the wheel to 90 degrees, we will see how all views gradually move to their new position:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="360" height="360" src="https://swiftui-lab.com/wp-content/uploads/2022/08/layout-2-wheel-1.gif" alt="" class="wp-image-3971"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">WheelLayout(radius: radius, rotation: angle) {
// ...
}

Button(&quot;Rotate&quot;) {
    withAnimation(.easeInOut(duration: 2.0)) {
        angle = (angle == .zero ? .degrees(90) : .zero)
    }
}</code></pre>



<p>This is very nice and I could end the animation section here. However, you already know that in this blog we don&#8217;t like to swim on the surface. So let&#8217;s dive deeper and see in detail what&#8217;s happening.</p>



<p>When we change the angle in an animation block, SwiftUI calculates the initial and final position of each view, and then interpolates their locations during the animation, going from point A to B in a straight line. At first it doesn&#8217;t seem to be doing that, but check the following animation, and concentrate on a single view. See how they all follows the straight dashed line?</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="360" height="360" src="https://swiftui-lab.com/wp-content/uploads/2022/08/layout-2-wheel-2.gif" alt="" class="wp-image-3973"/></figure></div>


<p>And have you stop to think what would happen if we animate the angle from 0° to 360°? I&#8217;ll give you a second&#8230; That&#8217;s right!&#8230; nothing would happen. The starting and ending position are the same, so as far as SwiftUI is concern, there is nothing to animate.</p>



<p>If this is what you were looking for, then great, but since we are placing the views around a circle, wouldn&#8217;t it make more sense if the views move following that imaginary circle? Well, as it turns out, doing so is ridiculously easy!</p>



<p>The answer to our problems is that fortunately, the layout protocol adopts the <code>Animatable</code> protocol! If you don&#8217;t know or remember what that is, I recommend you check my <a href="https://swiftui-lab.com/swiftui-animations-part1/">Advanced SwiftUI </a><a href="https://swiftui-lab.com/swiftui-animations-part1/" target="_blank" rel="noreferrer noopener">animations</a><a href="https://swiftui-lab.com/swiftui-animations-part1/"> &#8211; Part 1</a> post, and scroll down to <strong>Animating Shape Paths</strong>.</p>



<p>In a nutshell, by adding the <code>animatableData</code> property to our Layout, we are asking SwiftUI to recalculate the layout in each frame of the animation. However, in each layout pass, the angle will receive an interpolated value. Now SwiftUI does not interpolate the positions for us. Instead it interpolates the angle value. Our layout code will do the rest.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="360" height="360" src="https://swiftui-lab.com/wp-content/uploads/2022/08/layout-2-wheel-3.gif" alt="" class="wp-image-3974"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct Wheel: Layout {
    // ...

    var animatableData: CGFloat {
        get { rotation.radians }
        set { rotation = .radians(newValue) }
    }

    // ...
}</code></pre>



<p>Adding the <code>animatableData</code> property is enough to make our views properly follow the circle. However, since we are here&#8230; why don&#8217;t we also make the radius animatable? If your are familiar with <code>AnimatablePair</code>, check the section &#8220;Animating More Than One Parameter&#8221; in the aforementioned post.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">var animatableData: AnimatablePair&lt;CGFloat, CGFloat&gt; {
    get { AnimatablePair(rotation.radians, radius) }
    set {
        rotation = Angle.radians(newValue.first)
        radius = newValue.second
    }
}</code></pre>


<hr class="ub_divider" id="ub_divider_1b9599a7-f0eb-4ad1-af8c-ec32a9b83562"></hr>


<h3 class="wp-block-heading" id="bidirectional"><strong>Bi-directional Custom Layout Values</strong></h3>



<p>In the <a href="https://swiftui-lab.com/layout-protocol-part-1">first part</a> of this post we learnt how to use <code>LayoutValues</code> to attach information to your views, so that their proxies can expose that information in the <code>placeSubviews</code> and <code>sizeThatFits</code> methods. The idea is that information flows from the view, to the layout. We&#8217;ll see in a minute, how that can be reversed.</p>



<p><strong>The ideas explained in this section should be used carefully to avoid layout loops and cpu spikes. In the next section I will explain why and how to avoid it. But do not worry, it is not that complicated. You only need to follow some guidelines.</strong></p>



<p>Let&#8217;s go back to our Wheel example. Suppose we want our views to be rotated, so that they point to the center.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full is-resized"><img loading="lazy" decoding="async" src="https://swiftui-lab.com/wp-content/uploads/2022/08/layout-2-2.png" alt="" class="wp-image-3981" width="425" height="425" srcset="https://swiftui-lab.com/wp-content/uploads/2022/08/layout-2-2.png 850w, https://swiftui-lab.com/wp-content/uploads/2022/08/layout-2-2-300x300.png 300w, https://swiftui-lab.com/wp-content/uploads/2022/08/layout-2-2-150x150.png 150w, https://swiftui-lab.com/wp-content/uploads/2022/08/layout-2-2-768x768.png 768w" sizes="(max-width: 425px) 100vw, 425px" /></figure></div>


<p>The Layout protocol can only determine the position of our views and their proposed sizes, but it cannot apply a style, rotation, or any other effect. If we want to do that, then the layout should have a way of communicating that back to the view. That&#8217;s when layout values become important. So far we&#8217;ve used them to pass information to the layout, but with a little creativity we can use them backwards.</p>



<p>I mentioned previously that <code>LayoutValues</code> were not restricted to passing <code>CGFloats</code>. You can use it for everything, and that includes <code>Binding</code>. In this particular case, we will use <code>Binding&lt;Angle&gt;</code>:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct Rotation: LayoutValueKey {
    static let defaultValue: Binding&lt;Angle&gt;? = nil
}</code></pre>



<p><strong>Note</strong>: I call this bi-directional custom layout values, because information can flow both ways. However, this is not official <strong>SwiftUI</strong> terminology, just a term I use to explain the idea more clearly.</p>



<p>So, in the layout&#8217;s <code>placeSubview</code> method, we set the angle of each subview:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct WheelLayout: Layout {

    // ...

    func placeSubviews(in bounds: CGRect, proposal: ProposedViewSize, subviews: Subviews, cache: inout ()) 
    {
        let angleStep = (Angle.degrees(360).radians / Double(subviews.count))

        for (index, subview) in subviews.enumerated() {
            let angle = angleStep * CGFloat(index) + rotation.radians
            
            // ...
            
            DispatchQueue.main.async {
                subview[Rotation.self]?.wrappedValue = .radians(angle)
            }
        }
    }
}</code></pre>



<p>And back in our view, we can retrieve the value, and use it to rotate the view:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {

    // ...

    @State var rotations: [Angle] = Array&lt;Angle&gt;(repeating: .zero, count: 16)
    
    var body: some View {
        
        WheelLayout(radius: radius, rotation: angle) {
            ForEach(0..&lt;16) { idx in
                RoundedRectangle(cornerRadius: 8)
                    .fill(colors[idx%colors.count].opacity(0.7))
                    .frame(width: 70, height: 70)
                    .overlay { Text(&quot;\(idx+1)&quot;) }
                    .rotationEffect(rotations[idx])
                    .layoutValue(key: Rotation.self, value: $rotations[idx])
            }
        }
 
        // ...
}</code></pre>



<p>This code will make sure all views are pointing to the center of the circle, but we can be make it much more elegant. The solution I provided requires to set an array of rotations, set them as layout values and then use those values to rotate the view. Wouldn&#8217;t it be nice if we can hide that complexity from the layout user? Here&#8217;s a rewrite that does that.</p>



<p>First we create a wrapper view, called <code>WheelComponent</code>:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct WheelComponent&lt;V: View&gt;: View {
    @ViewBuilder let content: () -&gt; V
    @State private var rotation: Angle = .zero
    
    var body: some View {
        content()
            .rotationEffect(rotation)
            .layoutValue(key: Rotation.self, value: $rotation)
    }
}</code></pre>



<p>Then we get rid of the rotations array (we don&#8217;t need it anymore!) and wrap every view inside a <code>WheelComponent</code> view.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">WheelLayout(radius: radius, rotation: angle) {
    ForEach(0..&lt;16) { idx in

        WheelComponent {
            RoundedRectangle(cornerRadius: 8)
                .fill(colors[idx%colors.count].opacity(0.7))
                .frame(width: 70, height: 70)
                .overlay { Text(&quot;\(idx+1)&quot;) }
        }

    }
}</code></pre>



<p>And that&#8217;s it. The user of our container only needs to remember to wrap the views inside a WheelComponent. They do not need to worry about layout values, bindings, rotations, etc. Also, not wrapping the view won&#8217;t break anything, the view will simply not rotate to point to the center.</p>



<p>There is one more improvement that we can add, and that is an animation for the view rotation. Below you can observe a comparison of three wheels: One does not rotate the views. The other two rotate the view to point to the center, but one doesn&#8217;t use an animation and the other does. The full code is available in this <a href="https://gist.github.com/swiftui-lab/3482055332763035e603b22e9c5754fb" target="_blank" rel="noreferrer noopener">gist</a>.</p>



<figure class="wp-block-video"><video autoplay controls loop src="https://swiftui-lab.com/wp-content/uploads/2022/08/wheel-comparison.mp4"></video></figure>


<hr class="ub_divider" id="ub_divider_d1a4f9dd-d595-4258-8674-3e4350c8d083"></hr>


<h3 class="wp-block-heading" id="avoid-loops"><strong>Avoiding Layout Loops and Crashes</strong></h3>



<p>It is a well known fact that we must not update a view&#8217;s state during layout. That is something that leads to unpredictable results and most likely a CPU spike. We&#8217;ve seen this before in situations when maybe it wasn&#8217;t too obvious that the closure was running during layout. However now, there&#8217;s no doubt at all. <code>sizeThatFits</code> and <code>placeSubviews</code> are part of the layout process. So if we are going to &#8220;cheat&#8221; with the technique described in the previous section, we must enqueue the update with DispatchQueue, as in the example above:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">DispatchQueue.main.async {
    subview[Rotation.self]?.wrappedValue = .radians(angle)
}</code></pre>



<p>The other potential issue of using bi-directional custom layout values, is that your views must use that value in ways that do not affect the layout. Otherwise you will  incur into a layout loop.</p>



<p>For example, if the bindings set by <code>placeSubviews</code> change the color of our view, there&#8217;s no danger there. In the example, it may seem that rotation affects layout, but it does not. When you rotate a view, its surroundings are never affected, as its bounds remain the same. Same thing happens if you apply an offset, or any other transformation matrix. But in any case, I advise you to monitor the CPU to detect any potential issue with your layout. If CPU goes wild, maybe add a print statement to your <code>placeSubviews</code> and see if it is being called endlessly. Note that animations can increase CPU. If you want to test your containers for loops, do not check the CPU while animating.</p>



<p>Note that this is not new. In the past we&#8217;ve ran into this problem when we used <code>GeometryReader</code> to get the size of a view and passed that value to a parent view. Then that parent view used that information to change the layout which made the <code>GeometryReader</code> to change again, and we ended up in a layout loop. The problem is so old, that I wrote about it back when SwiftUI was starting, in the article <a href="https://swiftui-lab.com/state-changes/">Safely Updating the View State</a>. Check it out for more info.</p>



<p>I would also like to mention a potential crash. This is not related to bi-directional custom layout values. It is something you have to consider when writing any layout. We mention that SwiftUI may call <code>sizeThatFits</code> multiple times to test the flexibility of your view. Across these calls, your returned values should make sense. For example, the following code crashes:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    var body: some View {
        CrashLayout {
            Text(&quot;Hello, World!&quot;)
        }
    }
}

struct CrashLayout: Layout {
    func sizeThatFits(proposal: ProposedViewSize, subviews: Subviews, cache: inout ()) -&gt; CGSize {
        if proposal.width == 0 {
            return CGSize(width: CGFloat.infinity, height: CGFloat.infinity)
        } else if proposal.width == .infinity {
            return CGSize(width: 0, height: 0)
        }
        
        return CGSize(width: 0, height: 0)
    }
    
    func placeSubviews(in bounds: CGRect, proposal: ProposedViewSize, subviews: Subviews, cache: inout ()) 
    {
    }
}</code></pre>



<p>In this case <code>sizeThatFits</code> returns <strong>.infinity</strong> as the minimum size, and <strong>.zero</strong> as the maximum size. That makes no sense, the minimum size cannot be bigger than the maximum!</p>


<hr class="ub_divider" id="ub_divider_bdc8921f-7bb0-483d-8ba2-332b016b6beb"></hr>


<h3 class="wp-block-heading" id="recursive"><strong>Recursive Layouts</strong></h3>



<p>In the following example we are going to explore recursive layouts. We will convert our previous <code>WheelLayout</code> view into a <code>RecursiveWheel</code>. Our new layout will place up to 12 views in the circle. The following 12 views will be scaled down and placed in an inner circle, and so on until there aren&#8217;t any more views to place. Scaling and rotation of views is again achieved thanks to bi-directional layout values.</p>



<p>In this example there are 44 views in the container, so our new container will place them in rings of 12, 12, 12 and 8 views respectively.</p>



<p>Note how this example uses the cache to communicate information down to the sub-layout. This is possible because cache is an inout parameter and we can update it in the <code>placeSubviews</code> method.</p>



<figure class="wp-block-video aligncenter retina_media"><video autoplay controls loop src="https://swiftui-lab.com/wp-content/uploads/2022/08/recursive-wheel.mp4"></video></figure>



<p>The placeSubviews method iterates and places the first 12 subviews:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">for (index, subview) in subviews[0..&lt;12].enumerated() {
  // ...
}</code></pre>



<p>and then calls placeSubviews recursively, but only with the remaining views. This happens until there are no more views to place.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">placeSubviews(in: bounds,
              proposal: proposal,
              subviews: subviews[12..&lt;subviews.count],
              cache: &amp;cache)</code></pre>



<p>You may find the full code for this example in this <a href="https://gist.github.com/swiftui-lab/b226c46552d39d1e4129cd5091fb3d87" target="_blank" rel="noreferrer noopener">gist</a>.</p>


<hr class="ub_divider" id="ub_divider_eac5967c-7718-4d20-87dc-72f3bd9b65b2"></hr>


<h3 class="wp-block-heading" id="composition"><strong>Layout Composition</strong></h3>



<p>In the previous example we are using the same layout recursively. However, we can also compose different layouts into a single container. In the next example we are going to place our first 3 views horizontally on top of the view, and the last 3 views also horizontally at the bottom. The rest of the views will be placed in the middle, arranged vertically.</p>


<div class="wp-block-image clip-corners">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="500" height="528" src="https://swiftui-lab.com/wp-content/uploads/2022/08/layout-composed.gif" alt="" class="wp-image-4009"/></figure></div>


<p>We don&#8217;t need to write the logic for spacing views horizontally or vertically, because SwiftUI already has layouts that do that: <code>HStackLayout</code> and <code>VStackLayout</code>.</p>



<p>There is just a little problem, with an easy fix. For some reason, the system layouts have implemented the <code>sizeThatFits</code> and <code>placeSubviews</code> method privately. This means they are not available for us to call them. However, the type-erased layout does expose all its methods. So instead of doing:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">HStackLayout(spacing: 0).sizeThatFits(...) // not possible</code></pre>



<p>we can do:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">AnyLayout(HStackLayout(spacing: 0)).sizeThatFits(...) // it is possible!</code></pre>



<p>Also, when we are working with other layouts, we kind of play the role of SwiftUI. Any cache creation and update for the sub-layouts falls into our responsibility. Fortunately again, that&#8217;s easy to handle. We simply need to add the sub-layouts caches to our own.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ComposedLayout: Layout {
    private let hStack = AnyLayout(HStackLayout(spacing: 0))
    private let vStack = AnyLayout(VStackLayout(spacing: 0))

    struct Caches {
        var topCache: AnyLayout.Cache
        var centerCache: AnyLayout.Cache
        var bottomCache: AnyLayout.Cache
    }

    func makeCache(subviews: Subviews) -&gt; Caches {
        Caches(topCache: hStack.makeCache(subviews: topViews(subviews: subviews)),
               centerCache: vStack.makeCache(subviews: centerViews(subviews: subviews)),
               bottomCache: hStack.makeCache(subviews: bottomViews(subviews: subviews)))
    }

    // ...
}</code></pre>



<p>You can check the full code in this <a href="https://gist.github.com/swiftui-lab/a695ceb5977e32346df095fd16cf3f55" target="_blank" rel="noreferrer noopener">gist</a>.</p>


<hr class="ub_divider" id="ub_divider_beef608d-e2d3-4648-adfd-545e097eea2f"></hr>


<h3 class="wp-block-heading" id="interpolation"><strong>Another Composition Example</strong>: Interpolating Two Layouts</h3>



<p>The next example will create a layout that shows views in a wheel, or in a wave form. It also provides a <code>pct</code> parameter that goes from 0.0 to 1.0. When <code>pct == 0.0</code>, views are shown in the wheel, when <code>pct == 1.0</code> views are shown in a sine wave form. Values in the middle interpolate the position of both.</p>



<p>Before we can create the composed layout, let me introduce <code>WaveLayout</code>. This layout has several parameter that let you change the amplitude, frequency and phase of the sine wave. Full code available in this <a href="https://gist.github.com/swiftui-lab/e9b34a9a791f68ac1103a6d2889356f2" target="_blank" rel="noreferrer noopener">gist</a>.</p>



<figure class="wp-block-video clip-corners"><video autoplay controls loop src="https://swiftui-lab.com/wp-content/uploads/2022/09/wave-layout.mp4"></video></figure>



<p><code>InterpolatedLayout</code> will calculate the size and position for both layouts (wave and wheel) and then it will interpolate those value for a final positioning. Note that in the <code>placeSubviews</code> method, if a subview is positioned multiple times, the last call to <code>place()</code> is the one that will take effect.</p>



<p>Interpolation of values is performed with the formula:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">(wheelValue * pct) + (waveValue * (1-pct))</code></pre>



<p>We need a way for the <code>WaveLayout</code> and <code>WheelLayout</code> to communicate each view&#8217;s position and rotation back to the <code>InterpolatedLayout</code>. The way to do that, is by using the cache. Again we see that performance improvement is not the only purpose of the cache.</p>



<p>We also need for  <code>WaveLayout</code> and <code>WheelLayout</code> to detect if they are being used by the <code>InterpolatedLayout</code>, so they can update the cache accordingly. These views can easily detect that condition, thanks to the <code>standalone</code> cache value that will only be false if the cached was created by <code>InterpolatedLayout</code>.</p>



<p>The full code (including the modified <code>WaveLayout</code> and <code>WheelLayout</code> types) is included in this <a href="https://gist.github.com/swiftui-lab/5da9264f955354e4ea2261c458d29a4e" target="_blank" rel="noreferrer noopener">gist</a>.</p>



<figure class="wp-block-video"><video autoplay controls loop src="https://swiftui-lab.com/wp-content/uploads/2022/09/layout-interpolated.mp4"></video></figure>


<hr class="ub_divider" id="ub_divider_f4402f9d-07e7-46d5-91d2-46fb970c6bd5"></hr>


<h3 class="wp-block-heading" id="binding"><strong>Using Binding Parameters</strong></h3>



<p>There was an interesting <a href="https://www.swiftui-lab.com/digital-lounges-2022#layout-9">question</a> in the SwiftUI Lounges this year, asking if it was possible to use the new Layout protocol to create a hierarchical tree, connected with lines. The challenge here, is not the tree positioning of the views, but how we can draw connecting lines.</p>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="397" src="https://swiftui-lab.com/wp-content/uploads/2022/09/tree-layout-1024x397.png" alt="" class="wp-image-4124" srcset="https://swiftui-lab.com/wp-content/uploads/2022/09/tree-layout-1024x397.png 1024w, https://swiftui-lab.com/wp-content/uploads/2022/09/tree-layout-300x116.png 300w, https://swiftui-lab.com/wp-content/uploads/2022/09/tree-layout-768x298.png 768w, https://swiftui-lab.com/wp-content/uploads/2022/09/tree-layout.png 1067w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>There are other ways to achieve this, for example, using the <a href="https://swiftui-lab.com/swiftui-animations-part5/">Canvas</a> view. But since this post is all about the <code>Layout</code> protocol, let&#8217;s see how we can solve the connecting lines problem.</p>



<p>We already know by now, that lines cannot be drawn by a Layout. What we need instead, is a way for our layout to tell the view how to draw those lines. The initial thought (and what the Apple engineer suggested in that question, see the <a href="http://swiftui-lab.com/digital-lounges-2022#layout-9">link</a>), is to use layout values. This is what we&#8217;ve been doing in the previous examples, with the bi-directional custom values. However, after thinking about it a little more, there is a much easier way.</p>



<p>Instead of using layout values to separately communicate the final position of each node of the tree, it is much easier to create the whole path in layout code. Then, we just communicate the path back to the view, which will be responsible for displaying it. This is easily done, by adding a binding Layout parameter:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct TreeLayout {

    @Binding var linesPath: Path

    // ...
}</code></pre>



<p>After we finish placing our views, we know their locations and use those coordinates to create the path. Again, we must be very careful to avoid layout loops. I found that updating the path does create a loop, even when that path is drawn as a background view that won&#8217;t affect the layout. So to avoid such loop, we make sure that path actually changes, and only then, we update the binding. That successfully breaks the loop.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">let newPath = ...

if newPath.description != linesPath.description {

    DispatchQueue.main.async {
        linesPath = newPath
    }

}</code></pre>



<p>The other interesting part of this challenge, is to tell the layout how these views connect hierarchically. For this example, I created two UUID layout values.  One identifies the view, and the other is the id of the parent view.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    @State var path: Path = Path()
    
    var body: some View {
        let dash = StrokeStyle(lineWidth: 2, dash: [3, 3], dashPhase: 0)

        TreeLayout(linesPath: $path) {
            ForEach(tree.flattenNodes) { node in
                Text(node.name)
                    .padding(20)
                    .background {
                        RoundedRectangle(cornerRadius: 15)
                            .fill(node.color.gradient)
                            .shadow(radius: 3.0)
                    }
                    .node(node.id, parentId: node.parentId)
            }
        }
        .background {
            // Connecting lines
            path.stroke(.gray, style: dash)
        }
    }
}

extension View {
    func node(_ id: UUID, parentId: UUID?) -&gt; some View {
        self
            .layoutValue(key: NodeId.self, value: id)
            .layoutValue(key: ParentNodeId.self, value: parentId)
    }
}</code></pre>



<p>There are some considerations to take when using this code. There should only be one node with a <strong>nil</strong> parent id (the root node) and you should be careful to avoid a reference loop (e.g., two nodes being parent of each other).</p>



<p>Also note that this is a great candidate to place it inside a <code>ScrollView</code> with both vertical and horizontal scrolling.</p>



<p>Note that this is a basic implementation and only intended to illustrate how this can be accomplished. There are many potential optimizations, but the key elements required to make a Tree layout are there. The full gist is available <a href="https://gist.github.com/swiftui-lab/5ba3b0041c64d9d48399f6dae18bae03" target="_blank" rel="noreferrer noopener">here</a>.</p>


<hr class="ub_divider" id="ub_divider_44ddd7c2-5b4c-4449-ab6e-42a6759c8e05"></hr>


<h3 class="wp-block-heading" id="tool"><strong>A Helpful Debugging Tool</strong></h3>



<p>Back when <strong>SwiftUI</strong> was brand new and I was trying to understand how layout worked, I wished I had a tool like the one I&#8217;m introducing here. Up until now, the best tool we had so far, was adding a border around the view to visually see the limits of the view. That was our best ally.</p>



<p>Using borders is still a great debugging tool, but we can add a new one. Thanks to the new <code>Layout</code> protocol I created a modifier that&#8217;s very useful when trying to understand why a view is not doing what you think it should. Code is available in this <a href="https://gist.github.com/swiftui-lab/283d72e55124d9c7148113710bad46c4" target="_blank" rel="noreferrer noopener">gist</a> and the modifier is:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">func showSizes(_ proposals: [MeasureLayout.SizeRequest] = [.minimum, .ideal, .maximum]) -&gt; some View</code></pre>



<p>You apply it on any view, and an overlay will float on top of the topTrailing corner of the view, showing the size for a given set of proposals. If you leave the proposals unspecified, the minimum, ideal and maximum sizes are overlayed.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">MyView()
    .showSizes()</code></pre>



<p>Some usage examples:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">showSizes() // minimum, ideal and maximum

showSizes([.current, .ideal]) // the current size of the view and the ideal size

showSizes([.minimum, .maximum]) // the minimum and maximum

showSizes([.proposal(size: ProposedViewSize(width: 30, height: .infinity))]) // a specific proposal</code></pre>



<p>Here are more examples:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="669" height="224" src="https://swiftui-lab.com/wp-content/uploads/2022/09/layout-debugging.png" alt="" class="wp-image-4052" srcset="https://swiftui-lab.com/wp-content/uploads/2022/09/layout-debugging.png 669w, https://swiftui-lab.com/wp-content/uploads/2022/09/layout-debugging-300x100.png 300w" sizes="(max-width: 669px) 100vw, 669px" /></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">ScrollView {
    Text(&quot;Hello world!&quot;)
}
.showSizes([.current, .maximum])

Rectangle()
    .fill(.yellow)
    .showSizes()

Text(&quot;Hello world&quot;)
    .showSizes()

Image(&quot;clouds&quot;)
    .showSizes()

Image(&quot;clouds&quot;)
    .resizable()
    .aspectRatio(contentMode: .fit)
    .showSizes([.minimum, .ideal, .maximum, .current])</code></pre>



<p>Suddenly all makes sense. For example, check the <code>Image</code> sizes with and without <code>resizable()</code>. Isn&#8217;t it oddly satisfying to finally be able to see those numbers?</p>


<hr class="ub_divider" id="ub_divider_e46ea25e-3535-44c5-a5da-7a6fcfab0634"></hr>


<h3 class="wp-block-heading" id="final"><strong>Final Thoughts</strong></h3>



<p>Even if you do not intend to write your own <code>Layout</code> container, understanding how it works will help you understand how layout in general works in SwiftUI.</p>



<p>Personally, diving into the <code>Layout</code> protocol has given me a newfound appreciation for the team that wrote the code for containers like <code>HStack</code> or <code>VStack</code>. I often took these views for granted and thought of them as simple and uncomplicated containers. Well, try to write your own version to replicate an <code>HStack</code> in every scenario, with multiple types of views and layout priorities competing for the same space&#8230; that&#8217;s a nice challenge!</p>



<p>Feel free to follow me on twitter if you want to be notified of new articles. Until next time!</p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/layout-protocol-part-2/">The SwiftUI Layout Protocol &#8211; Part 2</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://swiftui-lab.com/layout-protocol-part-2/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		<enclosure url="https://swiftui-lab.com/wp-content/uploads/2022/08/wheel-comparison.mp4" length="1350093" type="video/mp4" />
<enclosure url="https://swiftui-lab.com/wp-content/uploads/2022/08/recursive-wheel.mp4" length="338326" type="video/mp4" />
<enclosure url="https://swiftui-lab.com/wp-content/uploads/2022/09/wave-layout.mp4" length="310238" type="video/mp4" />
<enclosure url="https://swiftui-lab.com/wp-content/uploads/2022/09/layout-interpolated.mp4" length="565170" type="video/mp4" />

			</item>
		<item>
		<title>The SwiftUI Layout Protocol &#8211; Part 1</title>
		<link>https://swiftui-lab.com/layout-protocol-part-1/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=layout-protocol-part-1</link>
					<comments>https://swiftui-lab.com/layout-protocol-part-1/#respond</comments>
		
		<dc:creator><![CDATA[javier]]></dc:creator>
		<pubDate>Tue, 06 Sep 2022 14:01:27 +0000</pubDate>
				<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">https://swiftui-lab.com/?p=3857</guid>

					<description><![CDATA[<p>Introduction One of the best SwiftUI additions this year has to be the Layout protocol. Not only we finally get our hands in the layout process, but it is also a great opportunity to better understand how layout works in SwiftUI. Back in 2019 I wrote an article about Frame Behaviors with SwiftUI. In it, ... <a title="The SwiftUI Layout Protocol &#8211; Part 1" class="read-more" href="https://swiftui-lab.com/layout-protocol-part-1/" aria-label="More on The SwiftUI Layout Protocol &#8211; Part 1">Read more</a></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/layout-protocol-part-1/">The SwiftUI Layout Protocol &#8211; Part 1</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading" id="intro"><strong>Introduction</strong></h2>



<p>One of the best SwiftUI additions this year has to be the <code>Layout</code> protocol. Not only we finally get our hands in the layout process, but it is also a great opportunity to better understand how layout works in SwiftUI.</p>



<p>Back in 2019 I wrote an article about <a href="https://swiftui-lab.com/frame-behaviors/">Frame Behaviors with SwiftUI</a>. In it, I described how parents and children negotiate the final size of a view. Many of the things described there had to be guessed by observing the result of various tests. The whole process felt like discovering an exoplanet, where astronomers detect a tiny reduction of a sun&#8217;s luminosity and then infer that a planet must be transiting through (see <a href="https://exoplanets.nasa.gov/faq/31" target="_blank" rel="noreferrer noopener">planetary transit</a> if you are interested).</p>



<p>Now, with the <code>Layout</code> protocol, it is like travelling to that distant solar system and seeing it with our own eyes. It is very exciting. </p>



<p>Creating a basic layout is not hard, we just need to implement two methods. Nevertheless, there are a lot of options we can play with to achieve more complex containers. We will explore beyond the typical <code>Layout</code> examples. There are some interesting topics  I haven&#8217;t seen explained anywhere yet, so I will present them here. However, before we can dive into these areas, we need to begin by building a strong foundation.</p>



<p>There&#8217;s a lot to cover, so I&#8217;ll break this post up in two parts:</p>



<p><strong>Part 1 &#8211; The Basics:</strong></p>



<ul><li><a href="https://swiftui-lab.com/layout-protocol-part-1/#whatis">What is the Layout Protocol?</a></li><li><a href="#family-dynamics">Family Dynamics of the View Hierarchy</a></li><li><a href="#first-layout">Our First Layout Implementation</a></li><li><a href="#container-alignment">Container Alignment</a></li><li><a href="#custom-values">Custom Values: LayoutValueKey</a></li><li><a href="#default-spacing">Default Spacing</a></li><li><a href="#layout-properties">Layout Properties and Spacer()</a></li><li><a href="#layout-cache">Layout Cache</a></li><li><a href="#great-pretenders">Great Pretenders</a></li><li><a href="#switching-layouts">Switching Layouts with AnyLayout</a></li><li><a href="#conclusion">Part 1 Conclusion</a></li></ul>



<p><strong>Part 2 &#8211; Advanced Layouts:</strong></p>



<ul><li><a href="https://swiftui-lab.com/layout-protocol-part-2/#intro">And The Fun Begins!</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-2/#custom-animations">Custom Animations</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-2/#bidirectional">Bi-directional Custom Values</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-2/#avoid-loops">Avoiding Layout Loops and Crashes</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-2/#recursive">Recursive Layouts</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-2/#composition">Layout Composition</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-2/#interpolation">Another Composition Example: Interpolating Two Layouts</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-2/#binding">Using Binding Parameters</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-2/#tool">A Helpful Debugging Tool</a></li><li><a href="https://swiftui-lab.com/layout-protocol-part-2/#final">Final Thoughts</a></li></ul>



<p>If you are already familiar with the <code>Layout</code> protocol, you may want to skip to <a href="https://swiftui-lab.com/layout-protocol-part-2/">part 2</a>. That is alright, although I still recommend you check the first part, at least superficially. That will make sure we are both in the same page when we start exploring the more advanced features described in part 2.</p>



<p>If at any point reading this post, you decide that the Layout protocol is not for you (at least for the moment), I still recommend you check the section: A Helpful Debugging Tool (in part 2). The tool can help you with SwiftUI in general and does not require that you understand the <code>Layout</code> protocol to use it. There&#8217;s a reason I put it at the very end of the second part. It is because the tool is built using the knowledge from this post. Nevertheless, you can just copy the code and use it as is.</p>


<hr class="ub_divider" id="ub_divider_ba4dd907-d3ca-4ef5-9e1d-63bff74a4ab2"></hr>


<h3 class="wp-block-heading" id="whatis"><strong>What is the Layout Protocol?</strong></h3>



<p>The mission of the types that adopt the <code>Layout</code> protocol, is to tell SwiftUI how to place a set of views, and how much space it needs to do so. These types are used as view containers. Although the <code>Layout</code> protocol is new this year (at least publicly), we&#8217;ve been using this since day 1 of SwiftUI, every time with place views inside an <code>HStack</code> or <code>VStack</code>.</p>



<p>Note that at least for the time being, the <code>Layout</code> protocol cannot be used to create lazy containers, like <code>LazyHStack</code>, or <code>LazyVStack</code>. Lazy containers are those that only render views when they scroll in and stop rendering them when they scroll out.</p>



<p>It&#8217;s important to know that a <code>Layout</code> type is not a <code>View</code>. For example, they don&#8217;t have a body property as views have. But do not worry, for the time being you can think of them as if they were Views and use them as such. The framework uses some nice swift language tricks to make your <code>Layout</code> transparently produce a <code>View</code> when you insert them in your SwiftUI code. I&#8217;ll explain all that later in the section <strong>Great Pretenders</strong>.</p>


<hr class="ub_divider" id="ub_divider_59a6b360-b87c-43dc-9f96-ca6b1e62db44"></hr>


<h3 class="wp-block-heading" id="family-dynamics"><strong>Family Dynamics of the View Hierarchy</strong></h3>



<p>Before we start coding layouts, let&#8217;s refresh a pillar of the SwiftUI framework. As I described in my old post <a href="https://swiftui-lab.com/frame-behaviors/">Frame Behaviors with SwiftUI</a>, during layout, parents propose a size to their children, but it is ultimately up to the children to decide how to draw itself. It then communicates that to the parent, so it can act accordingly. There are three possible scenarios. We will concentrate on the horizontal axis (width), but the same is true for the vertical axis (height):</p>



<p><strong>Scenario 1: If the child takes less than what&#8217;s been offered:</strong></p>



<p>For this example consider a Text view that&#8217;s been offered more space than what&#8217;s needed to draw the text:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full is-resized"><img loading="lazy" decoding="async" src="https://swiftui-lab.com/wp-content/uploads/2022/08/layout-1.png" alt="" class="wp-image-3869" width="424" height="104" srcset="https://swiftui-lab.com/wp-content/uploads/2022/08/layout-1.png 848w, https://swiftui-lab.com/wp-content/uploads/2022/08/layout-1-300x74.png 300w, https://swiftui-lab.com/wp-content/uploads/2022/08/layout-1-768x188.png 768w" sizes="(max-width: 424px) 100vw, 424px" /></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    var body: some View {
        HStack(spacing: 0) {

            Rectangle().fill(.green)

            Text(&quot;Hello World!&quot;)

            Rectangle().fill(.green)

        }
        .padding(20)
    }
}</code></pre>



<p>In this example, the window is 400 pt wide. So the text has been offered a third of the HStack&#8217;s width ((400 &#8211; 40) / 3 =  120). Of those 120 pt, Text only needs 74.0 and communicates that to the parent (the HStack). The parent can now take those extra 46 pt and use them with the other children. Because the other children are shapes, these take everything that&#8217;s given to them. In this case 120 + 46 / 2 =  143.</p>



<p><strong>Scenario 2: If the child takes exactly what&#8217;s been offered:</strong></p>



<p>Shapes are an example of views that take whatever is offered to them. In the previous example, those green rectangles take everything offered, but not a pixel more.</p>



<p><strong>Scenario 3: If the child takes more than what&#8217;s been offered:</strong></p>



<p>Consider the following example. Image views (unless they&#8217;ve been modified with the <code>resizable</code> method) are relentless. They take as much space as they need. In the example below, the <code>Image</code> is 300&#215;300 and that is how much it uses to draw itself. However, by calling <code>frame(width:100)</code>, the child is being offered only 100 pt. Is the parent helpless and should do what the child says? Not exactly. The child will use 300 pt to draw, however the parent will layout the other views as if the child were only 100 pt wide. As a result, we have a child that overflows it boundaries, but the surrounding views are not affected by the extra space use by the Image. In the example below, the black border shows the space offered to the image.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="538" height="443" src="https://swiftui-lab.com/wp-content/uploads/2022/08/layout-2.png" alt="" class="wp-image-3872" srcset="https://swiftui-lab.com/wp-content/uploads/2022/08/layout-2.png 538w, https://swiftui-lab.com/wp-content/uploads/2022/08/layout-2-300x247.png 300w" sizes="(max-width: 538px) 100vw, 538px" /></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    var body: some View {
        HStack(spacing: 0) {

            Rectangle().fill(.yellow)

            Image(&quot;peach&quot;)
                .frame(width: 100)
                .border(.black, width: 3)
                .zIndex(1)

            Rectangle().fill(.yellow)

        }
        .padding(20)
    }
}
</code></pre>



<p>There&#8217;s a lot of diversity in how views act. For example, we&#8217;ve seen how Text takes less than offered when it doesn&#8217;t need it. However,  if it needs more than offered, several things can happen, depending on how you configure your view. For example, it may truncate the text to stay in the offered size, or it may grow vertically to show the text in the offered width. Or it can even overflow as the Image did in the example if you used the <code>fixedSize</code> modifier. Remember that <code>fixedSize</code> tells a view to use its ideal size, no matter how little they&#8217;ve been offered.</p>



<p>If you want to learn more about these behaviors and how to alter them, check my old post <a href="https://swiftui-lab.com/frame-behaviors/">Frame Behaviors with SwiftUI</a>.</p>


<hr class="ub_divider" id="ub_divider_af485d02-8eeb-410c-b226-90e24dcc5bdf"></hr>


<h3 class="wp-block-heading" id="first-layout"><strong>Our First Layout Implementation</strong></h3>



<p>Creating a Layout type requires that we implement at least two methods: <code>sizeThatFits</code> and <code>placeSubviews</code>. These methods receive some new types as parameters: <strong>ProposedViewSize</strong> and <strong>LayoutSubview</strong>. Before we start writing our methods, lets see what these parameters look like:</p>



<p><strong>ProposedViewSize</strong></p>



<p>The <code>ProposedViewSize</code> is used by the parent to tell the child how to compute its own size. The type is simple, but powerful. It is just a pair of optional <code>CGFloats</code> for proposed width and height. However, it is how we interpret these values what makes them interesting.</p>



<p>These properties can have concrete values (e.g, 35.0, 74.0, etc), but there&#8217;s also special meaning when these values are <strong>0.0</strong>, <strong>nil</strong>, or <strong>.infinity</strong>:</p>



<ul><li>For a concrete width, for example 45.0, the parent is offering exactly 45.0 pt, and the view should determine its own size for that offered width.</li><li>For a <strong>0.0</strong> width, the child should respond with its minimum size.</li><li>For an <strong>.infinity</strong> width, the child should respond with its maximum size.</li><li>For a <strong>nil</strong> value, the child should respond with its ideal size.</li></ul>



<p><code>ProposedViewSize</code> also has some predefined values:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">ProposedViewSize.zero = ProposedViewSize(width: 0, height: 0)
ProposedViewSize.infinity = ProposedViewSize(width: .infinity, height: .infinity)
ProposedViewSize.unspecified = ProposedViewSize(width: nil, height: nil)</code></pre>



<p><strong>LayoutSubview</strong></p>



<p>The <code>sizeTheFits</code>  and <code>placeSubviews</code> methods also receives a <code>Layout.Subviews</code> parameter, which is a collection of <code>LayoutSubview</code> elements. One for each view that is a direct descendant of the parent. In spite of its name, the type is not a view, but a proxy to one. We can query these proxies to learn layout information of the individual views we are laying out. For example, for the first time since SwiftUI&#8217;s introduction, we can directly query the minimum, ideal or maximum size of a view, or we can also get the layout priority of each view, among other interesting values.</p>



<p><strong>Writing the sizeThatFits Method</strong></p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">func sizeThatFits(proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -&gt; CGSize
</code></pre>



<p>SwiftUI will call our <code>sizeThatFits</code> method to determine the size of a container using our layout. When writing this method we should think of ourselves us being both a parent and a child: We are a parent asking our child views for their sizes. But we are also a child telling our parent what our size will be, based on our children replies.</p>



<p>The method receives a size proposal, a collection of subview proxies and a cache. This last parameter may be used to improve the performance of our layout and some other advanced applications, but for the time being we will not use it. We&#8217;ll go back to it a bit ahead.</p>



<p>When the <code>sizeThatFits</code> method is proposed <strong>nil</strong> in a given dimension (i.e., <strong>width</strong> or <strong>height</strong>), we should return the ideal size of the container for that dimension. When the proposal is <strong>0.0 </strong>for a given dimension, we should return the minimum size of the container in that dimension. And when the proposal is <strong>.infinity</strong> for a given dimension, we should return the maximum size for the container in that dimension.</p>



<p>Note that <code>sizeThatFits</code> may be called multiple times with different proposals to test the flexibility of the container. Proposals can be any combination of the above cases for each dimension. For example, you may get a call with <code>ProposedViewSize(width: 0.0, height: .infinity)</code></p>



<p>With the information we have so far, let&#8217;s begin with our first layout. We will start by creating a basic <code>HStack</code>. We&#8217;ll call it <code>SimpleHStack</code>. In order to compare them both, we will create a view to place a standard <code>HStack</code> (blue) on top of the <code>SimpleHStack</code> (green). In our first try we will implement sizeThatFits, but we will leave the other required method (<code>placeSubviews</code>) empty for the time being.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full is-resized"><img loading="lazy" decoding="async" src="https://swiftui-lab.com/wp-content/uploads/2022/08/layout-3.png" alt="" class="wp-image-3884" width="248" height="120" srcset="https://swiftui-lab.com/wp-content/uploads/2022/08/layout-3.png 496w, https://swiftui-lab.com/wp-content/uploads/2022/08/layout-3-300x145.png 300w" sizes="(max-width: 248px) 100vw, 248px" /></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    var body: some View {
        VStack(spacing: 20) {
            
            HStack(spacing: 5)  { 
                contents() 
            }
            .border(.blue)
            
            SimpleHStack(spacing: 5) {
                contents() 
            }
            .border(.blue)

        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .background(.white)
    }
    
    @ViewBuilder func contents() -&gt; some View {
        Image(systemName: &quot;globe.americas.fill&quot;)
        
        Text(&quot;Hello, World!&quot;)

        Image(systemName: &quot;globe.europe.africa.fill&quot;)
    }

}

struct SimpleHStack: Layout {
    let spacing: CGFloat
    
    func sizeThatFits(proposal: ProposedViewSize, subviews: Subviews, cache: inout ()) -&gt; CGSize {
        let idealViewSizes = subviews.map { $0.sizeThatFits(.unspecified) }
        
        let spacing = spacing * CGFloat(subviews.count - 1)
        let width = spacing + idealViewSizes.reduce(0) { $0 + $1.width }
        let height = idealViewSizes.reduce(0) { max($0, $1.height) }
        
        return CGSize(width: width, height: height)
    }
    
    func placeSubviews(in bounds: CGRect, proposal: ProposedViewSize, subviews: Subviews, cache: inout ()) 
    {
        // ...
    }
}</code></pre>



<p>As you can observe, the size of both stacks is identical. However, because we haven&#8217;t written any code in the <code>placeSubviews</code> method, all views are placed in the middle of our container. This is the default if you do not explicitly place a view.</p>



<p>In our <code>sizeThatFits</code> method, we first compute all ideal sizes for every view. We can easily achieve that because the subview proxies we received have a method that return the size of the subview for a given proposal.</p>



<p>Once we have all ideal sizes computed, we calculate the container size by adding all subviews widths and the spacing in between those views. For the height, our stack will be as tall as the tallest subview.</p>



<p>You may have observed that we are completely ignoring the size we&#8217;ve been offered. We&#8217;ll go back to that in a minute. For now, let&#8217;s now implement placeSubviews.</p>



<p><strong>Writing the placeSubviews Method</strong></p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">func placeSubviews(in bounds: CGRect, proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache)</code></pre>



<p>After SwiftUI has tested our container view for several proposals, by calling <code>sizeThatFits</code> repeatedly with different proposal values, it will eventually call our <code>placeSubviews </code>method. Our goal here is to iterate through the subviews, determine their positions and place them there. </p>



<p>In addition to the same parameters <code>sizeThatFits</code> receives, <code>placeSubviews</code> also gets a <code>CGRect</code> parameter (bounds). The bounds rect has the size we asked for in the sizeThatFits method. Typically, the origin of the rect is (0,0), but you should not assume that. The origin may have a different value if we are composing layouts, as we will see later on.</p>



<p>Placing views is simple, thanks to the subview proxies, which have a <code>place</code> method. We must provide the coordinates for the view, the anchor point (center if left unspecified), and the proposal so the child can draw itself accordingly.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct SimpleHStack: Layout {
    
    // ...
    
    
    func placeSubviews(in bounds: CGRect, proposal: ProposedViewSize, subviews: Subviews, cache: inout ()) 
    {
        var pt = CGPoint(x: bounds.minX, y: bounds.minY)
        
        for v in subviews {
            v.place(at: pt, anchor: .topLeading, proposal: .unspecified)
            
            pt.x += v.sizeThatFits(.unspecified).width + spacing
        }
    }
}</code></pre>



<p>Now, remember that I mentioned we ignored the proposal we received from the container&#8217;s parent? This means that our <code>SimpleHStack</code> container will always have the same size. No matter what has been offered, the container computes sizes and placement using <strong>.unspecified</strong>, which means the container will always have an ideal size. In this case the ideal size of the container is the size that let it place all its subviews with their own ideal sizes. Look what happens if we alter the offered size. In this animation the offered width is represented by the red border:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="365" height="183" src="https://swiftui-lab.com/wp-content/uploads/2022/08/layout-4.gif" alt="" class="wp-image-3899"/></figure></div>


<p>Observe how the our SimpleHStack will ignore the offered size and it always draws with its ideal size, the one that fits all its subviews with their own ideal sizes.</p>


<hr class="ub_divider" id="ub_divider_5b55cb8a-dbce-4735-9455-95502771d790"></hr>


<h3 class="wp-block-heading" id="container-alignment"><strong>Container Alignment</strong></h3>



<p>The Layout protocol let us also define alignment guides for the container. Note that this indicates how the container as a whole, aligns with the rest of the views. It has no effect on the views inside the container.</p>



<p>In the following example, we make our <code>SimpleHStack</code> container to align with the second view, but only if the container is aligned with <code>leading</code> (if you change the <code>VStack</code> alignment to <code>trailing</code>, you won&#8217;t see any special alignment).</p>



<p>The view with the red border is a <code>SimpleHStack</code>, the black border views are standard <code>HStack</code> containers. The green border denotes the enclosing <code>VStack</code>.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full is-resized"><img loading="lazy" decoding="async" src="https://swiftui-lab.com/wp-content/uploads/2022/09/layout-alignment.png" alt="" class="wp-image-4054" width="262" height="168" srcset="https://swiftui-lab.com/wp-content/uploads/2022/09/layout-alignment.png 524w, https://swiftui-lab.com/wp-content/uploads/2022/09/layout-alignment-300x192.png 300w" sizes="(max-width: 262px) 100vw, 262px" /></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    var body: some View {
        VStack(alignment: .leading, spacing: 5) {
            HStack(spacing: 5) {
                contents()
            }
            .border(.black)

            SimpleHStack(spacing: 5) {
                contents()
            }
            .border(.red)
            
            HStack(spacing: 5) {
                contents()
            }
            .border(.black)
            
        }
        .background { Rectangle().stroke(.green) }
        .padding()
        .font(.largeTitle)
            
    }
    
    @ViewBuilder func contents() -&gt; some View {
        Image(systemName: &quot;globe&quot;)
            .imageScale(.large)
            .foregroundColor(.accentColor)
        Text(&quot;Hello, world!&quot;)
    }
}</code></pre>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct SimpleHStack: Layout {
    
    // ...

    func explicitAlignment(of guide: HorizontalAlignment, in bounds: CGRect, proposal: ProposedViewSize, subviews: Subviews, cache: inout ()) -&gt; CGFloat? {
        if guide == .leading {
            return subviews[0].sizeThatFits(proposal).width + spacing
        } else {
            return nil
        }
    }
}</code></pre>


<hr class="ub_divider" id="ub_divider_dfe48bfc-ff80-4f07-9404-82fc7aaace29"></hr>


<h3 class="wp-block-heading" id="layout-priorities"><strong>Layout Priorities</strong></h3>



<p>When using the HStack, we know that all views compete equally for width, unless they have different layout priorities. By default, all views have a layout priority of 0.0. However, you can change the layout priority of a view by calling the <code>layoutPriority()</code> modifier.</p>



<p>Enforcing the layout priority is the responsibility of the container&#8217;s layout. So if we create a new layout, if relevant, we should add some logic to take into account the view&#8217;s layout priority. How we do that, is up to us. Although there are better ways (we&#8217;ll address them in a minute), you can use the layout priority value of a view and give it any meaning. For example, in the previous example, we will place the views from left to right, according to the views&#8217; layout priority values.</p>



<p>To achieve that, instead of iterating the subviews collection as it came, we simply sort it by their priorities:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct SimpleHStack: Layout {
    
    // ...

    func placeSubviews(in bounds: CGRect, proposal: ProposedViewSize, subviews: Subviews, cache: inout ()) 
    {
        var pt = CGPoint(x: bounds.minX, y: bounds.minY)
        
        for v in subviews.sorted(by: { $0.priority &gt; $1.priority }) {
            v.place(at: pt, anchor: .topLeading, proposal: .unspecified)
            
            pt.x += v.sizeThatFits(.unspecified).width + spacing
        }
    }
}</code></pre>



<p>In the example below, the blue circle will appear first, because it has a higher priority than the rest.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full is-resized"><img loading="lazy" decoding="async" src="https://swiftui-lab.com/wp-content/uploads/2022/08/layout-5.png" alt="" class="wp-image-3906" width="120" height="49"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">SimpleHStack(spacing: 5) {
    Circle().fill(.yellow)
         .frame(width: 30, height: 30)
                        
    Circle().fill(.green)
        .frame(width: 30, height: 30)

    Circle().fill(.blue)
        .frame(width: 30, height: 30)
        .layoutPriority(1)
}</code></pre>


<hr class="ub_divider" id="ub_divider_12f94367-3f19-4815-baba-ac79d9dcc025"></hr>


<h3 class="wp-block-heading" id="custom-values"><strong>Custom Values: LayoutValueKey</strong></h3>



<p>Using the layout priority for something other than priority is not recommended. It can confuse other users of your container, or even a future you. Fortunately, we have another mechanism to add new values to the view. And this values are not limited to <code>CGFloat</code>, they can have any type (as we will see in other examples later).</p>



<p>We will rewrite the previous example, using a new value we will call <code>PreferredPosition</code>. The first thing to do, is to create a type that conforms with <code>LayoutValueKey</code>. We only need a struct with a static <code>defaultValue</code>. This default values are used when none is explicitly specified.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct PreferredPosition: LayoutValueKey {
    static let defaultValue: CGFloat = 0.0
}</code></pre>



<p>And that&#8217;s it, we have a new property in our views. To set the value, we use the <code>layoutValue() </code>modifier. To read the value, we use the <code>LayoutValueKey</code> type as a subscript of the view proxy:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">SimpleHStack(spacing: 5) {
    Circle().fill(.yellow)
         .frame(width: 30, height: 30)
                        
    Circle().fill(.green)
        .frame(width: 30, height: 30)

    Circle().fill(.blue)
        .frame(width: 30, height: 30)
        .layoutValue(key: PreferredPosition.self, value: 1.0)
}</code></pre>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct SimpleHStack: Layout {
    // ...

    func placeSubviews(in bounds: CGRect, proposal: ProposedViewSize, subviews: Subviews, cache: inout ()) 
    {
        var pt = CGPoint(x: bounds.minX, y: bounds.minY)
        
        let sortedViews = subviews.sorted { v1, v2 in
            v1[PreferredPosition.self] &gt; v2[PreferredPosition.self]
        }
        
        for v in sortedViews {
            v.place(at: pt, anchor: .topLeading, proposal: .unspecified)
            
            pt.x += v.sizeThatFits(.unspecified).width + spacing
        }
    }
}
</code></pre>



<p>This code doesn&#8217;t look as clean as the one we wrote with <code>layoutPriority</code>, but that can be easily fixed with these two extensions:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">extension View {
    func preferredPosition(_ order: CGFloat) -&gt; some View {
        self.layoutValue(key: PreferredPosition.self, value: order)
    }
}

extension LayoutSubview {
    var preferredPosition: CGFloat {
        self[PreferredPosition.self]
    }
}</code></pre>



<p>Now we can rewrite our code like this:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">SimpleHStack(spacing: 5) {
    Circle().fill(.yellow)
         .frame(width: 30, height: 30)
                        
    Circle().fill(.green)
        .frame(width: 30, height: 30)

    Circle().fill(.blue)
        .frame(width: 30, height: 30)
        .preferredPosition(1)
}</code></pre>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct SimpleHStack: Layout {
    // ...

    func placeSubviews(in bounds: CGRect, proposal: ProposedViewSize, subviews: Subviews, cache: inout ()) 
    {
        var pt = CGPoint(x: bounds.minX, y: bounds.minY)
        
        for v in subviews.sorted(by: { $0.preferredPosition &gt; $1.preferredPosition }) {
            v.place(at: pt, anchor: .topLeading, proposal: .unspecified)
            
            pt.x += v.sizeThatFits(.unspecified).width + spacing
        }
    }

}</code></pre>


<hr class="ub_divider" id="ub_divider_460f8b21-db60-41b9-89c2-e9cdd0d49ffd"></hr>


<h3 class="wp-block-heading" id="default-spacing"><strong>Default Spacing</strong></h3>



<p>So far our <code>SimpleHStack</code> has been using a spacing value we provide when initializing our layout. However, if you&#8217;ve been using <code>HStack</code> for a while, you know that if no spacing is specified, the stack will provide a default spacing that will vary according to the platform and context the view is in. A view can have a spacing if it is next to a Text view and a different spacing if it is next to an image. Additionally, each edge has its own preference.</p>



<p>So how can we replicate the same behavior with our <code>SimpleHStack</code>? Well, I mentioned before that these subview proxies are a wealth of layout knowledge&#8230; and they don&#8217;t disappoint. They also have a way of querying them for space preferences.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct SimpleHStack: Layout {
    
    var spacing: CGFloat? = nil
    
    func sizeThatFits(proposal: ProposedViewSize, subviews: Subviews, cache: inout ()) -&gt; CGSize {
        let idealViewSizes = subviews.map { $0.sizeThatFits(.unspecified) }
        let accumulatedWidths = idealViewSizes.reduce(0) { $0 + $1.width }
        let maxHeight = idealViewSizes.reduce(0) { max($0, $1.height) }

        let spaces = computeSpaces(subviews: subviews)
        let accumulatedSpaces = spaces.reduce(0) { $0 + $1 }
        
        return CGSize(width: accumulatedSpaces + accumulatedWidths,
                      height: maxHeight)
    }
    
    func placeSubviews(in bounds: CGRect, proposal: ProposedViewSize, subviews: Subviews, cache: inout ()) 
    {
        var pt = CGPoint(x: bounds.minX, y: bounds.minY)
        let spaces = computeSpaces(subviews: subviews)

        for idx in subviews.indices {
            subviews[idx].place(at: pt, anchor: .topLeading, proposal: .unspecified)
            
            if idx &lt; subviews.count - 1 {
                pt.x += subviews[idx].sizeThatFits(.unspecified).width + spaces[idx]
            }
        }
    }
    
    func computeSpaces(subviews: LayoutSubviews) -&gt; [CGFloat] {
        if let spacing {
            return Array&lt;CGFloat&gt;(repeating: spacing, count: subviews.count - 1)
        } else {
            return subviews.indices.map { idx in
                guard idx &lt; subviews.count - 1 else { return CGFloat(0) }
                
                return subviews[idx].spacing.distance(to: subviews[idx+1].spacing, along: .horizontal)
            }
        }

    }
}</code></pre>



<p>Note that in addition to using space preferences, you can also tell the system what the space preferences of the container view are. That way SwiftUI will know how to space it with its surrounding views. For that, you need to implement the Layout method <a href="https://developer.apple.com/documentation/swiftui/layout/spacing(subviews:cache:)-86z2e" target="_blank" rel="noreferrer noopener">spacing(subviews:cache:)</a>.</p>


<hr class="ub_divider" id="ub_divider_34a21980-3297-4278-9f53-6e90301754ef"></hr>


<h3 class="wp-block-heading" id="layout-properties"><strong>Layout Properties and Spacer()</strong></h3>



<p>The <code>Layout</code> protocol has a static property you can implement called <code>layoutProperties</code>. According to the documentation, the <code>LayoutProperties</code> contains the layout-specific properties of a layout container. At the time of this writing, there is only one property defined: <code>stackOrientation</code>.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct MyLayout: Layout {
    
    static var layoutProperties: LayoutProperties {
        var properties = LayoutProperties()
        
        properties.stackOrientation = .vertical
        
        return properties
    }

    // ...
}</code></pre>



<p>The <code>stackOrientation</code> is what tells a view like <code>Spacer</code> if it should expand in its horizontal or vertical axis. For example, if you check the minimum, ideal and maximum size of a <code>Spacer</code> view&#8217;s proxy, this is what it returns in different containers, each with a different <code>stackOrientation</code>:</p>



<figure class="wp-block-table is-style-regular allcentered-table"><table class="has-fixed-layout"><thead><tr><th>stackOrientation</th><th>minimum</th><th>ideal</th><th>maximum</th></tr></thead><tbody><tr><td>.horizontal</td><td>8.0 × 0.0</td><td>8.0 × 0.0</td><td>.infinity × 0.0</td></tr><tr><td>.vertical</td><td>0.0 × 8.0</td><td>0.0 × 8.0</td><td>0.0 × .infinity</td></tr><tr><td>.none or nil</td><td>8.0 × 8.0</td><td>8.0 × 8.0</td><td>.infinity × .infinity</td></tr></tbody></table></figure>


<hr class="ub_divider" id="ub_divider_9ce945ed-bf92-4f50-a86e-58296898eb2e"></hr>


<h3 class="wp-block-heading" id="layout-cache"><strong>Layout Cache</strong></h3>



<p>The Layout&#8217;s cache is often view as a way of improving the performance of our layout. However, it has other uses. Just think of it as a place to store data we need to persist across <code>sizeThatFits</code> and <code>placeSubviews</code> calls. The first application that comes to mind is performance improvement. However, it is also very useful for sharing information with other sub-layouts. We will explore this when we reach the layout composition examples, but let&#8217;s begin by learning how we can use the cache to improve performance.</p>



<p>The <code>sizeThatFits</code> and <code>placeSubviews</code> methods are called multiple times by SwiftUI during the layout process. The framework tests our containers for its flexibility to determine the final layout of the entire view hierarchy. To improve the performance of our <code>Layout</code> containers, SwiftUI let us implement a cache that is updated only when at least one view inside our container changes. Because sizeThatFits and placeSubviews can be called many times for a single view change, it makes sense to keep a cache of the data that doesn&#8217;t need to be recomputed for every call.</p>



<p>Using a cache is not compulsory. In fact, more often than not, you won&#8217;t need one. In any case, it is probably easier to code our layout without a cache, and add it later if we find we need it. SwiftUI already does some caching. For example, values obtained from the subview proxies are stored in a cache automatically. Repeated calls with the same parameters will use the cached results. There&#8217;s a good discussion of the reasons why you may want to implement your own cache in the <a href="https://developer.apple.com/documentation/swiftui/layout/makecache(subviews:)-23agy" target="_blank" rel="noreferrer noopener">makeCache(subviews:)</a> documentation page.</p>



<p>Also note that the <code>cache</code> parameter in <code>sizeThatFits</code> and <code>placeSubviews</code> is an <code>inout</code> parameter. This means you can update the cache storage in those functions too. We will see how that is especially helpful in the <code>RecursiveWheel</code> example.</p>



<p>As an example, here&#8217;s the <code>SimpleHStack</code> updated with the cache. Here&#8217;s what we need to do:</p>



<ul><li>Create a type that will have our cache data. In this example, I called it <code>CacheData</code> and it will have the calculation of the maxHeight and spaces in between the views.</li><li>Implement the <a href="https://developer.apple.com/documentation/swiftui/layout/makecache(subviews:)-23agy" target="_blank" rel="noreferrer noopener">makeCache(subviews:)</a> to create the cache.</li><li>Optionally implement the <a href="https://developer.apple.com/documentation/swiftui/layout/updatecache(_:subviews:)-9hkj9" target="_blank" rel="noreferrer noopener">updateCache(subviews:)</a>. This method is called when changes are detected. A default implementation is provided that basically recreates the cache by calling makeCache.</li><li>Remember to update the type of the cache parameter in <code>sizeThatFits</code> and <code>placeSubviews</code>.</li></ul>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct SimpleHStack: Layout {
    struct CacheData {
        var maxHeight: CGFloat
        var spaces: [CGFloat]
    }
    
    var spacing: CGFloat? = nil
    
    func makeCache(subviews: Subviews) -&gt; CacheData {
        return CacheData(maxHeight: computeMaxHeight(subviews: subviews),
                         spaces: computeSpaces(subviews: subviews))
    }
    
    func updateCache(_ cache: inout CacheData, subviews: Subviews) {
        cache.maxHeight = computeMaxHeight(subviews: subviews)
        cache.spaces = computeSpaces(subviews: subviews)
    }
    
    func sizeThatFits(proposal: ProposedViewSize, subviews: Subviews, cache: inout CacheData) -&gt; CGSize {
        let idealViewSizes = subviews.map { $0.sizeThatFits(.unspecified) }
        let accumulatedWidths = idealViewSizes.reduce(0) { $0 + $1.width }
        let accumulatedSpaces = cache.spaces.reduce(0) { $0 + $1 }
        
        return CGSize(width: accumulatedSpaces + accumulatedWidths,
                      height: cache.maxHeight)
    }
    
    func placeSubviews(in bounds: CGRect, proposal: ProposedViewSize, subviews: Subviews, cache: inout CacheData) {
        var pt = CGPoint(x: bounds.minX, y: bounds.minY)

        for idx in subviews.indices {
            subviews[idx].place(at: pt, anchor: .topLeading, proposal: .unspecified)
            
            if idx &lt; subviews.count - 1 {
                pt.x += subviews[idx].sizeThatFits(.unspecified).width + cache.spaces[idx]
            }
        }
    }
    
    func computeSpaces(subviews: LayoutSubviews) -&gt; [CGFloat] {
        if let spacing {
            return Array&lt;CGFloat&gt;(repeating: spacing, count: subviews.count - 1)
        } else {
            return subviews.indices.map { idx in
                guard idx &lt; subviews.count - 1 else { return CGFloat(0) }
                
                return subviews[idx].spacing.distance(to: subviews[idx+1].spacing, along: .horizontal)
            }
        }
    }
    
    func computeMaxHeight(subviews: LayoutSubviews) -&gt; CGFloat {
        return subviews.map { $0.sizeThatFits(.unspecified) }.reduce(0) { max($0, $1.height) }
    }
}</code></pre>



<p>If we print out a message every time one of the layout functions is called, see below the result we obtain. As you can see, the cache is calculated twice, but the other methods are called 25 times!</p>



<pre class="wp-block-code"><code>makeCache called &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
sizeThatFits called
sizeThatFits called
sizeThatFits called
sizeThatFits called
placeSubiews called
placeSubiews called
updateCache called &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
sizeThatFits called
sizeThatFits called
sizeThatFits called
sizeThatFits called
placeSubiews called
placeSubiews called
sizeThatFits called
sizeThatFits called
placeSubiews called
sizeThatFits called
placeSubiews called
placeSubiews called
sizeThatFits called
placeSubiews called
placeSubiews called
sizeThatFits called
sizeThatFits called
sizeThatFits called
placeSubiews called</code></pre>



<p>Note that in addition to using the cache parameter for performance improvement, there is also another use for it. We will go back to it in the <code>RecursiveWheel</code> example, in the second part of this post.</p>


<hr class="ub_divider" id="ub_divider_b59da30a-875b-4a86-adfd-99992b051588"></hr>


<h3 class="wp-block-heading" id="great-pretenders"><strong>Great Pretenders</strong></h3>



<p>As I already mentioned, the <code>Layout</code> protocol does not adopt the <code>View</code> protocol. So how come we&#8217;ve been using layout containers in our <code>ViewBuilder</code> closures as if they were views? It turns out <code>Layout</code> has a function the system calls to produce a view when you place your layout in code. And what is that function called? You may have guessed it already:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">func callAsFunction&lt;V&gt;(@ViewBuilder _ content: () -&gt; V) -&gt; some View where V : View</code></pre>



<p>Thanks to the language addition (described and explained in <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0253-callable.md" target="_blank" rel="noreferrer noopener">SE-0253</a>), methods that are named <code>callAsFunction</code> are special. These methods are called when we use a type instance as if it were a function. In this case it may be confusing cause it seems we are just initializing the type, when in reality, we are doing more than that. We are initializing the type and then calling its <code>callAsFunction</code> method. And because the returned value of this <code>callAsFunction</code> method is a <code>View</code>, we can place it in our SwiftUI code.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">SimpleHStack(spacing: 10).callAsFunction({
    Text(&quot;Hello World!&quot;)
})

// Thanks to SE-0253 we can abbreviate it by removing the .callAsFunction
SimpleHStack(spacing: 10)({
    Text(&quot;Hello World!&quot;)
})

// And thanks to trailing closures, we end up with:
SimpleHStack(spacing: 10) {
    Text(&quot;Hello World!&quot;)
}</code></pre>



<p>If our layout does not have an initializer parameter, the code simplifies even more:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">SimpleHStack().callAsFunction({
    Text(&quot;Hello World!&quot;)
})

// Thanks to SE-0253 we can abbreviate it by removing the .callAsFunction
SimpleHStack()({
    Text(&quot;Hello World!&quot;)
})

// And thanks to single trailing closures, we end up with:
SimpleHStack {
    Text(&quot;Hello World!&quot;)
}</code></pre>



<p>So there you have it, layout types are not views, but they do produce one when you place them in your SwiftUI code. This swift trick (<code>callAsFunction</code>) also makes it possible to switch to a different layout, while maintaining view identities, as described in the following section.</p>


<hr class="ub_divider" id="ub_divider_0b802e1c-c0fe-4dee-a403-2080ccc45235"></hr>


<h3 class="wp-block-heading" id="switching-layouts"><strong>Switching Layouts with AnyLayout</strong></h3>



<p>Another interesting aspect of <code>Layout</code> containers, is that we can change the layout of a container, and SwiftUI will nicely animate between the two. No extra code needed! <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f973.png" alt="🥳" class="wp-smiley" style="height: 1em; max-height: 1em;" /> This is because the identity of the view is maintained. SwiftUI sees this as a view change, and not as two separate views.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="255" height="142" src="https://swiftui-lab.com/wp-content/uploads/2022/08/layout-6.gif" alt="" class="wp-image-3953"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    @State var isVertical = false
    
    var body: some View {
        let layout = isVertical ? AnyLayout(VStackLayout(spacing: 5)) : AnyLayout(HStackLayout(spacing: 10))
        
        layout {
            Group {
                Image(systemName: &quot;globe&quot;)
                
                Text(&quot;Hello World!&quot;)
            }
            .font(.largeTitle)
        }
        
        Button(&quot;Toggle Stack&quot;) {
            withAnimation(.easeInOut(duration: 1.0)) {                
                isVertical.toggle()
            }
        }
    }
}</code></pre>



<p>The <strong>ternary operator</strong> (condition ? result1 : result2) requires that both return expressions use the same type. <code>AnyLayout</code> (a type-erased layout) comes to the rescue here.</p>



<p><strong>NOTE: </strong>If you watch the <a href="https://developer.apple.com/videos/play/wwdc2022/10056/" target="_blank" rel="noreferrer noopener">2022 WWDC Layout session</a> or read the <a href="https://www.swiftui-lab.com/digital-lounges-2022#layout-2" target="_blank" rel="noreferrer noopener">SwiftUI lounge questions</a>, you may have seen that Apple engineers use a similar example, but with <code>VStack</code> instead of <code>VStackLayout</code> and <code>HStack</code> instead of <code>HStackLayout</code>. That is outdated. After beta 3, <code>HStack</code> and <code>VStack</code> no longer adopt the <code>Layout</code> protocol and they added the <code>VStackLayout</code> and <code>HStackLayout</code> layouts (which are used by the <code>VStack</code> and <code>HStack</code> views respectively). They also added <code>ZStackLayout</code> and <code>GridLayout</code>.</p>


<hr class="ub_divider" id="ub_divider_27f211a8-d526-4142-b5f9-a827794f53b0"></hr>


<h3 class="wp-block-heading" id="conclusion"><strong>Conclusion</strong></h3>



<p>The prospect of writing a <code>Layout</code> container can be overwhelming if we stop to consider every possible scenario. There are views that use as much space as offered, others try to accommodate, other will use less, etc. There&#8217;s also the layout priority, which makes things harder when multiple views are competing for the same space. However, the task may not be as daunting as it seems. It is possible that we will be the users of our own layout and we may know in advanced what type of views our container will have. For example, if you plan to use your container only with square images, or text views, or if you know that your container will have a specific size, or if you know for sure that all your views will have the same priority, etc. This information can simplify your task greatly. And even if you cannot have that luxury to make this assumptions, it may be a good place to start coding. Make your layout work in some scenarios and then start adding code for more complex cases.</p>



<p>In the <a href="https://swiftui-lab.com/layout-protocol-part-2/">second part </a>of this post we will start exploring some very interesting topics, like custom animations, bidirectional custom values, recursive layouts or layout composition. I will also introduce a very helpful debugging tool that you can use, even if you are not creating your own layouts.</p>



<p>Feel free to&nbsp;follow me on twitter, if you want to be notified when new articles are published. Until then! </p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/layout-protocol-part-1/">The SwiftUI Layout Protocol &#8211; Part 1</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://swiftui-lab.com/layout-protocol-part-1/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Eager Grids with SwiftUI</title>
		<link>https://swiftui-lab.com/eager-grids/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=eager-grids</link>
					<comments>https://swiftui-lab.com/eager-grids/#comments</comments>
		
		<dc:creator><![CDATA[javier]]></dc:creator>
		<pubDate>Thu, 28 Jul 2022 13:30:00 +0000</pubDate>
				<category><![CDATA[Layout]]></category>
		<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">https://swiftui-lab.com/?p=3679</guid>

					<description><![CDATA[<p>Introduction Back in 2020 we got new views to draw grids in SwiftUI (LazyVGrid and LazyHGrid). Two years later, we are getting yet another view to display views in a grid (Grid). However, these new addition is very different, not only in the way you use it, but also how it behaves internally. The views ... <a title="Eager Grids with SwiftUI" class="read-more" href="https://swiftui-lab.com/eager-grids/" aria-label="More on Eager Grids with SwiftUI">Read more</a></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/eager-grids/">Eager Grids with SwiftUI</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading"><strong>Introduction</strong></h2>



<p>Back in 2020 we got new views to draw grids in SwiftUI (<code>LazyVGrid</code> and <code>LazyHGrid</code>). Two years later, we are getting yet another view to display views in a grid (<code>Grid</code>). However, these new addition is very different, not only in the way you use it, but also how it behaves internally. The views from 2020, were lazy. These new ones are eager.</p>



<p>Lazy grids do not render or even instantiate views that are off-screen. The cell views are created only when they are scrolled in, and stopped being computed as soon as they scroll out. For more details check my 2020 article: <a href="https://swiftui-lab.com/impossible-grids/">Impossible Grids with SwiftUI</a>.</p>



<p>Eager grids, the topic of this post, are the opposite. SwiftUI does not care if they are on or off screen. All views are treated the same. This may present a performance problem with a very large number of cells. However, how much is a very large number is an impossible question to answer. That will depend on the complexity of your cell views.</p>



<p>So if lazy grids perform better, it begs the question, why would I use eager grids? The truth is eager grids have their benefits over lazy grids and viceversa. For example, eager grids support column spanning, and lazy grids do not. Bottom line, performance is not the only factor to account for. In this article we will explore these new grids so you can make a good informed decision when choosing one over the other.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading"><strong>A Word on Container Views</strong></h2>



<p>Before we start exploring the <code>Grid</code> view, let me talk about container views in general. That is, views that receive a view builder and present its contents in a specific way (<code>HStack</code>, <code>VStack</code>, <code>ZStack</code>, <code>Lazy*Grid</code>, <code>Group</code>, <code>List</code>, <code>ForEach</code>, etc.). Bear with me, this will be helpful later.</p>



<p>There are two types of container views. I don&#8217;t think these types have an official name. I will just call them &#8220;Containers with layout&#8221; and &#8220;Containers without Layout&#8221;. This is better explained with a few examples:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="171" height="55" src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-group.png" alt="" class="wp-image-3684"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    var body: some View {
        
        HStack {
            Group {
                Text(&quot;Hello&quot;)
                Text(&quot;World&quot;)
                Image(systemName: &quot;network&quot;)
            }
            .padding(10)
            .border(.red)
        }
    }
}</code></pre>



<p>This is equivalent to writing:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    var body: some View {
        
        HStack {
            Text(&quot;Hello&quot;)
                .padding(10)
                .border(.red)
            
            Text(&quot;World&quot;)
                .padding(10)
                .border(.red)
            
            Image(systemName: &quot;network&quot;)
                .padding(10)
                .border(.red)
        }
    }
}</code></pre>



<p>As you can see from the example, the <code>Group</code> modifiers are applied to each contained view separately. Also, the Group view by itself did not provide any layout nor does it have any geometry of its own. All layout is performed by its parent: the <code>HStack</code>.</p>



<p>Modifiers on a container with layout (such as HStack) however, are applied on the container, which does have its own geometry:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="133" height="51" src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-hstack.png" alt="" class="wp-image-3689"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    var body: some View {
        
        HStack {
            Text(&quot;Hello&quot;)
            Text(&quot;World&quot;)
            Image(systemName: &quot;network&quot;)
        }
        .padding(10)
        .border(.red)
    }
}</code></pre>



<p>You may ask, what happens when the <code>Group</code> has no parent. That&#8217;s not a problem. When no layout container is present, SwiftUI implicitly uses a <code>VStack</code>. That&#8217;s why this also works:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="60" height="60" src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-nocontainer.png" alt="" class="wp-image-3695"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    var body: some View {        
        Text(&quot;Hello&quot;)
        Text(&quot;World&quot;)
        Image(systemName: &quot;network&quot;)
    }
}</code></pre>



<p>Another example of a container without layout is <code>ForEach</code>:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="174" height="61" src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-foreach.png" alt="" class="wp-image-3685"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    var body: some View {
        
        HStack {
            ForEach(0..&lt;5) { idx in
                Text(&quot;\(idx)&quot;)
            }
            .padding(10)
            .border(.blue)
        }
    }
}</code></pre>



<p>What does this have to do with grids? We&#8217;ll find out in the next section.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading"><strong>Our First Grid</strong></h2>



<p>Let&#8217;s build our first grid. The syntax is very straight forward. You use a  <code>Grid</code> container view, and then you define its rows by grouping the cell views inside a <code>GridRow</code> container.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="200" height="147" src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-first-grid.png" alt="" class="wp-image-3700"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    var body: some View {
        Grid {
            GridRow {
                Text(&quot;Cell #1&quot;)
                    .padding(20)
                    .border(.red)

                Text(&quot;Cell #2&quot;)
                    .padding(20)
                    .border(.red)
            }

            GridRow {
                Text(&quot;Cell #3&quot;)
                    .padding(20)
                    .border(.green)

                Text(&quot;Cell #4&quot;)
                    .padding(20)
                    .border(.green)
            }
        }
        .padding(10)
        .border(.blue)
    }
}</code></pre>



<p>Here is where our talk about containers comes into play. What if I tell you that Grid is a container with layout, but GridRow is not. This means we can rewrite our code and obtain the same result:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    var body: some View {
        Grid {
            GridRow {
                Text(&quot;Cell #1&quot;)

                Text(&quot;Cell #2&quot;)
            }
            .padding(20)
            .border(.red)

            GridRow {
                Text(&quot;Cell #3&quot;)

                Text(&quot;Cell #4&quot;)
            }
            .padding(20)
            .border(.green)
        }
        .padding(10)
        .border(.blue)
    }
}</code></pre>



<p>Note that it is <strong>NOT</strong> a requirement that all rows have the same amount of cells. Although most examples here do, each row can have as many cells as you want.</p>


<hr class="ub_divider" id="ub_divider_9d51e0ea-8c2a-4d4e-92dd-273ca0522091"></hr>


<h2 class="wp-block-heading"><strong>Exploring Grid Options</strong></h2>



<p>In the following sections we will explore the different Grid sizing, alignment, and spanning options. But to make things easier, I have created a small app called <strong>Grid Trainer</strong>. The app let you play with all these grid parameters interactively. As you change the grid, the app will also show you the code that produces the grids you created.</p>



<p>The whole app is in a single swift file, so it only takes a few seconds to set it up. Just create a new Xcode project, replace your ContentView.swift file with the one in this <a href="https://gist.github.com/swiftui-lab/723eb1277d59d9ae092455ac8196b8ba" target="_blank" rel="noreferrer noopener">gist file</a> and you&#8217;re good to go. Note that although I mainly designed the app with macOS in mind, the app works smoothly on iPad too. No changes needed.</p>



<figure class="wp-block-video"><video controls src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergridtrainer-demo-raw.mov"></video></figure>



<p>As you read the following sections, it is a good idea to run the <strong>Grid Trainer</strong> app and test your understanding of grids. Try to see if you can predict what the grid will do as you change parameters. Every time you get a different result of what you expect, you&#8217;ll learn something new about the grids. And if you get what you expect, you will reaffirm what you already know.</p>



<h3 class="wp-block-heading"><strong>Spacing</strong></h3>



<p>Similar to HStack and VStack, the Grid container has a vertical and horizontal parameter for spacing. If left unspecified, a system default will be used instead.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="237" height="136" src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-spacing.png" alt="" class="wp-image-3728"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">Grid(horizontalSpacing: 5.0, verticalSpacing: 15.0) {
    GridRow {
        Rectangle().fill(Color(white: 0.20).gradient)

        Rectangle().fill(Color(white: 0.40).gradient)

        Rectangle().fill(Color(white: 0.60).gradient)

        Rectangle().fill(Color(white: 0.80).gradient)

    }
    .frame(width: 50.0, height: 50.0)
    
    GridRow {
        Rectangle().fill(Color(white: 0.80).gradient)

        Rectangle().fill(Color(white: 0.60).gradient)

        Rectangle().fill(Color(white: 0.40).gradient)

        Rectangle().fill(Color(white: 0.20).gradient)
    }
    .frame(width: 50.0, height: 50.0)
}
</code></pre>



<h3 class="wp-block-heading"><strong>Column Width, Row Height</strong></h3>



<p>The cells in a grid are views, and views adapt to the size a parent offers. In this case the parent, is the grid. In general, columns are as wide as the widest cell in it. In the example below, the orange column width is determined by the cell in the second row, which is the widest. The same happens for height. In the example, the second row is as high as the purple cell, which is the highest in the row.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="422" height="250" src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-widths.png" alt="" class="wp-image-3709" srcset="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-widths.png 422w, https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-widths-300x178.png 300w" sizes="(max-width: 422px) 100vw, 422px" /></figure></div>


<h3 class="wp-block-heading"><strong>Unsized Cells</strong></h3>



<p>By default, the grid will offer as much space as possible to cells. So what would happen if a grid is made of a a <code>Rectangle()</code> view? As you know, shapes without a frame modifier like to grow to fill all the space offered by the parent. In such case, the grid will grow to fill all the space offered by its own parent.</p>



<p>In the example below, the green cell is not bound in its horizontal dimension, so it uses all available space. The grid grows as much as possible and the green cell fills the space. The blue cell however, is limited with a frame modifier to a 50.0 pt width. The dashed line shows the grid borders.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="284" height="175" src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-parent.png" alt="" class="wp-image-3717"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    let dash = StrokeStyle(lineWidth: 1.0, lineCap: .round, lineJoin: .miter, dash: [5, 5], dashPhase: 0)

    var body: some View {

        HStack(spacing: 0) {
            Circle().fill(.yellow).frame(width: 30, height: 30)
            
            Grid(horizontalSpacing: 0) {
                GridRow {
                    RoundedRectangle(cornerRadius: 15.0)
                        .fill(.green.gradient)
                        .frame(height: 50)
                    
                    RoundedRectangle(cornerRadius: 15.0)
                        .fill(.blue.gradient)
                        .frame(width: 50, height: 50)
                }
            }
            .overlay { Rectangle().stroke(style: dash) }

            Circle().fill(.yellow).frame(width: 30, height: 30)
        }
    }
}</code></pre>



<p>So far, nothing too surprising. This is the same behavior we&#8217;ve seen since day one with <code>HStack</code> containers. However, <code>Grids</code> offer us an option here. We can make the cell to refrain from making the grid grow for extra space. For example, for the horizontal dimension, the cell will only grow to take as much space as the widest cell in its column. Such cell will have no role in determining the column&#8217;s width. This is accomplished with the <code>gridCellUnsizedAxes()</code> modifier applied to the cell in question. It receives an Axis.Set value. It can be <code>.horizontal</code>, <code>.vertical</code> or a combination of both: <code>[.horizontal, .vertical]</code>. This tells the grid which dimension a given cell chooses to opt out of asking for additional space.</p>



<p>If you haven&#8217;t already, this is a good time to start playing with the Grid Trainer app and challenge your knowledge so far.</p>



<p>In the following example the red cell is unsized in the horizontal axis, making it grow only as large as the green cell. Even if the parent is offering more, the red cell will not take it.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="270" height="187" src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-unsized.png" alt="" class="wp-image-3723"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">Grid {
  GridRow {
    RoundedRectangle(cornerRadius: 5.0)
      .fill(.green.gradient)
      .frame(width: 160.0, height: 80.0)

    RoundedRectangle(cornerRadius: 5.0)
      .fill(.blue.gradient)
      .frame(width: 80.0, height: 80.0)
  }

  GridRow {
    RoundedRectangle(cornerRadius: 5.0)
      .fill(.red.gradient)
      .frame(height: 80.0)
      .gridCellUnsizedAxes(.horizontal)

    RoundedRectangle(cornerRadius: 5.0)
      .fill(.yellow.gradient)
      .frame(width: 80.0, height: 80.0)
  }
}</code></pre>



<h3 class="wp-block-heading"><strong>Alignment</strong>s</h3>



<h4 class="wp-block-heading"><strong>Grid Alignment</strong></h4>



<p>When a view for a cell is smaller than the available space, the alignment will depend on several parameters. The first parameter to consider, is the <code>Grid(alignment: Alignment)</code>. It affects all cells in the grid, unless overridden by one of the next parameters. If left unspecified, it defaults to <code>.center</code>.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="282" height="268" src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-grid-alignment.gif" alt="" class="wp-image-3731"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">Grid(alignment: .topLeading) {
    GridRow {
        Rectangle().fill(.yellow.gradient)
            .frame(width: 50.0, height: 50.0)
        
        Rectangle().fill(.green.gradient)
            .frame(width: 100.0, height: 100.0)

    }
    
    GridRow {
        Rectangle().fill(.orange.gradient)
            .frame(width: 100.0, height: 100.0)

        Rectangle().fill(.red.gradient)
            .frame(width: 50.0, height: 50.0)
    }
}</code></pre>



<h4 class="wp-block-heading"><strong>Row Vertical Alignment</strong></h4>



<p>You may also specify a row alignment with <code>GridRow(alignment: VerticalAlignment)</code>. Note that in this case, the alignment is only vertical. Cells in this row, will combine the Grid parameter, with the GridRow parameter. The row&#8217;s vertical alignment will have priority, over the grid&#8217;s vertical component of the alignment. In the example below, a grid with a <code>.topTrailing</code> value, combined with a<code> .bottom</code> vertical row value, results in a <code>.bottomTrailing</code> alignment for the cells in the second row. The other rows, will use the grids alignment (i.e., <code>.topTrailing</code>).</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="390" height="336" src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-row-alignment-1.png" alt="" class="wp-image-3740" srcset="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-row-alignment-1.png 390w, https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-row-alignment-1-300x258.png 300w" sizes="(max-width: 390px) 100vw, 390px" /></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">Grid(alignment: .topTrailing) {
    GridRow {
        Rectangle().fill(Color(white: 0.25).gradient)
            .frame(width: 120.0, height: 100.0)

        Rectangle().fill(Color(white: 0.50).gradient)
            .frame(width: 50.0, height: 50.0)

        Rectangle().fill(Color(white: 0.50).gradient)
            .frame(width: 120.0, height: 100.0)
    }
    
    GridRow(alignment: .bottom) {
        Rectangle().fill(Color(white: 0.25).gradient)
            .frame(width: 120.0, height: 100.0)

        Rectangle().fill(Color(white: 0.50).gradient)
            .frame(width: 50.0, height: 50.0)

        Rectangle().fill(Color(white: 0.50).gradient)
            .frame(width: 50.0, height: 50.0)
    }
    
    GridRow {
        Rectangle().fill(Color(white: 0.25).gradient)
            .frame(width: 120.0, height: 100.0)

        Rectangle().fill(Color(white: 0.50).gradient)
            .frame(width: 120.0, height: 100.0)

        Rectangle().fill(Color(white: 0.50).gradient)
            .frame(width: 50.0, height: 50.0)
    }
}
</code></pre>



<h4 class="wp-block-heading"><strong>Column Horizontal Alignment</strong></h4>



<p>In addition to specifying a vertical row alignment, you may also specify a column horizontal alignment. As in the case of row alignments, this value will merge with the row vertical value and the grid&#8217;s alignment value. You indicate the column&#8217;s alignment with the modifier <code>gridColumnAlignment()</code></p>



<p><strong>NOTE</strong>: The documentation is very clear. gridColumnAlignment should only be used in one cell per column. Otherwise the behavior is undefined.</p>



<p>In the following example, you can see all alignments combined:</p>



<ul><li>Cell (1,1): Aligned <code>topLeading</code>. (Grid alignment)</li><li>Cell (1, 2): Aligned <code>topTrailing</code>. (Grid alignment + column alignment)</li><li>Cell (2,1): Aligned <code>bottomLeading</code> (Grid alignment + row alignment)</li><li>Cell (2,2): Aligned <code>bottomTrailing</code> (Grid alignment + row alignment + column alignment)</li></ul>


<div class="wp-block-image">
<figure class="aligncenter size-full is-resized"><img loading="lazy" decoding="async" src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-column-alignment.png" alt="" class="wp-image-3850" width="259" height="260" srcset="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-column-alignment.png 345w, https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-column-alignment-300x300.png 300w, https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-column-alignment-150x150.png 150w" sizes="(max-width: 259px) 100vw, 259px" /></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    var body: some View {
        Grid(alignment: .topLeading, horizontalSpacing: 5.0, verticalSpacing: 5.0) {
            GridRow {
                CellView(color: .green, width: 80, height: 80)

                CellView(color: .yellow, width: 80, height: 80)
                    .gridColumnAlignment(.trailing)

                CellView(color: .orange, width: 80, height: 120)
            }
            
            GridRow(alignment: .bottom) {
                CellView(color: .green, width: 80, height: 80)

                CellView(color: .yellow, width: 80, height: 80)

                CellView(color: .orange, width: 80, height: 120)
            }
            
            GridRow {
                CellView(color: .green, width: 120, height: 80)

                CellView(color: .yellow, width: 120, height: 80)

                CellView(color: .orange, width: 80, height: 80)
            }
        }
    }
    
    struct CellView: View {
        let color: Color
        let width: CGFloat
        let height: CGFloat
        
        var body: some View {
            RoundedRectangle(cornerRadius: 5.0)
                .fill(color.gradient)
                .frame(width: width, height: height)
        }
    }

}</code></pre>



<h4 class="wp-block-heading"><strong>Cell Alignment</strong></h4>



<p>Finally, you may also specify an individual alignment for a cell using the <code>.gridCellAnchor(_: anchor: UnitPoint)</code> modifier. This alignment will override any grid, column and row alignment for the given cell. Note that the parameter type is not <code>Alignment</code>, but <code>UnitPoint</code>. This means that in addition to using the predefined points .topLeading, .center, etc, you may also create arbitrary points, like <code>UnitPoint(x: 0.25, y: 0.75)</code>:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="262" height="225" src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-cell-alignment.png" alt="" class="wp-image-3743"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">Grid(alignment: .topTrailing) {
    GridRow {
        Rectangle().fill(.green.gradient)
            .frame(width: 120.0, height: 100.0)

        Rectangle().fill(.blue.gradient)
            .frame(width: 50.0, height: 50.0)
            .gridCellAnchor(UnitPoint(x: 0.25, y: 0.75))
    }
    
    GridRow {
        Rectangle().fill(.blue.gradient)
            .frame(width: 50.0, height: 50.0)

        Rectangle().fill(.green.gradient)
            .frame(width: 120.0, height: 100.0)

    }
}</code></pre>



<h3 class="wp-block-heading"><strong>Text BaseLine Alignment</strong></h3>



<p>In addition to the common alignments, remember you may also use text baseline alignments. Both for Grid and GridRow:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="188" height="79" src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-text-alignment.png" alt="" class="wp-image-3745"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">Grid(alignment: .centerFirstTextBaseline) {
    GridRow {
        Text(&quot;Align&quot;)
        
        Rectangle()
            .fill(.green.gradient.opacity(0.7))
            .frame(width: 50, height: 50)
    }
}
.font(.system(size: 36))</code></pre>



<h3 class="wp-block-heading"><strong>Rows without GridRow</strong></h3>



<p>If a <code>Grid</code> has a view outside of a <code>GridRow</code> container, it is used as a single cell row that spans all columns. A common use for this type of cell, is to create separators. For example, you could use a <code>Divider() </code>view, or something more complex as in the example below. Note that we usually do not want the divider to make the grid grow to its maximum, so we make the view unsized on the horizontal axis. This will make the divider as wide as the widest row, but not wider.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="176" height="130" src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-divider.png" alt="" class="wp-image-3753"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">Grid(horizontalSpacing: 5.0, verticalSpacing: 5.0) {
    GridRow {
        RoundedRectangle(cornerRadius: 5.0).fill(.green.gradient)
        
        RoundedRectangle(cornerRadius: 5.0).fill(.purple.gradient)
        
        RoundedRectangle(cornerRadius: 5.0).fill(.blue.gradient)
    }
    .frame(width: 50.0, height: 50.0)

    Rectangle()
        .fill(LinearGradient(colors: [.gray, .clear, .gray], startPoint: .leading, endPoint: .trailing))
        .frame(height: 2.0)
        .gridCellUnsizedAxes(.horizontal)
    
    
    GridRow {
        RoundedRectangle(cornerRadius: 5.0).fill(.green.gradient)
        
        RoundedRectangle(cornerRadius: 5.0).fill(.purple.gradient)
        
        RoundedRectangle(cornerRadius: 5.0).fill(.blue.gradient)
    }
    .frame(width: 50.0, height: 50.0)
}</code></pre>



<h3 class="wp-block-heading"><strong>Column Spanning</strong></h3>



<p>One of the advantages of eager grids over lazy grids, is that all cell geometries are always known. This makes it possible to have a cell that spans multiple columns. To configure a cell to span, use the <code>.gridCellColumns(_ count: Int)</code></p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="307" height="132" src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-spanning.png" alt="" class="wp-image-3749" srcset="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-spanning.png 307w, https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-spanning-300x129.png 300w" sizes="(max-width: 307px) 100vw, 307px" /></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">Grid {
    GridRow {
        RoundedRectangle(cornerRadius: 5.0).fill(.green.gradient)
            .frame(width: 50.0, height: 50.0)
        
        RoundedRectangle(cornerRadius: 5.0).fill(.yellow.gradient)
            .frame(height: 50.0)
            .gridCellColumns(3)
            .gridCellUnsizedAxes(.horizontal)
        
        RoundedRectangle(cornerRadius: 5.0).fill(.purple.gradient)
            .frame(width: 50.0, height: 50.0)
    }
    
    GridRow {
        RoundedRectangle(cornerRadius: 5.0).fill(.green.gradient)
            .frame(width: 50.0, height: 50.0)
        
        RoundedRectangle(cornerRadius: 5.0).fill(.yellow.gradient)
            .frame(width: 50.0, height: 50.0)
        
        RoundedRectangle(cornerRadius: 5.0).fill(.orange.gradient)
            .frame(width: 50.0, height: 50.0)
        
        RoundedRectangle(cornerRadius: 5.0).fill(.red.gradient)
            .frame(width: 50.0, height: 50.0)
        
        RoundedRectangle(cornerRadius: 5.0).fill(.purple.gradient)
            .frame(width: 50.0, height: 50.0)
    }
}</code></pre>



<h4 class="wp-block-heading"><strong>Watch Out for Ambiguity</strong></h4>



<p>Consider the following example. We have 4 cells per row. Each cell is 50.0 pt wide, except for the second cell from the first row, and the third cell in the second row. These will grow as much as possible (without enlarging the grid). These two cells also span two columns each.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    var body: some View {
        Grid(horizontalSpacing: 20.0, verticalSpacing: 20.0) {
            GridRow {
                CellView(width: 50.0, color: .green)

                CellView(color: .purple)
                    .gridCellColumns(2)
                
                CellView(width: 50.0, color: .blue)
                
                CellView(width: 50.0, color: .yellow)
            }
            .gridCellUnsizedAxes([.horizontal, .vertical])

            GridRow {
                CellView(width: 50.0, color: .green)

                CellView(width: 50.0, color: .purple)
                
                CellView(color: .blue)
                    .gridCellColumns(2)

                CellView(width: 50.0, color: .yellow)
            }
            .gridCellUnsizedAxes([.horizontal, .vertical])
        }
    }
    
    struct CellView: View {
        var width: CGFloat? = nil
        let color: Color
        
        var body: some View {
            RoundedRectangle(cornerRadius: 5.0)
                .fill(color.gradient)
                .frame(width: width, height: 50.0)
        }
    }
}</code></pre>



<p>What do you think should happen? If you look at it carefully, this is &#8220;the chicken or the egg problem&#8221;.  If you look at the second cell in the first row, it should span to the following column. But the following column in the second row should expand to the third column. So what is it? We can satisfy one condition, or the other, but not both. This is because the first row looks at the second row to determine the next column, while the second row looks at the first to do the same. SwiftUI needs to resolve this somehow, and if you run the code, this is the result you will get:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="307" height="149" src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-ambiguity1.png" alt="" class="wp-image-3759" srcset="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-ambiguity1.png 307w, https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-ambiguity1-300x146.png 300w" sizes="(max-width: 307px) 100vw, 307px" /></figure></div>


<p>To break the tie, an easy solution is to add a third row:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">GridRow {
    CellView(width: 50, color: .green)

    CellView(width: 50, color: .purple)

    CellView(width: 50, color: .blue)

    CellView(width: 50, color: .yellow)
}</code></pre>



<p>With a third row breaking the tie, this is how it looks:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="370" height="229" src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-ambiguity2.png" alt="" class="wp-image-3761" srcset="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-ambiguity2.png 370w, https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-ambiguity2-300x186.png 300w" sizes="(max-width: 370px) 100vw, 370px" /></figure></div>


<p>If you don&#8217;t need a third row, you can add one anyway, but with zero height. You may still need to deal with the spacing though. Fortunately, this is not a common occurrence, but I though I mention in case you run into this situation.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading"><strong>HoneyComb Revisited</strong></h2>



<p>In the article <a href="https://swiftui-lab.com/impossible-grids/">Impossible Grids</a>, were we explored lazy grids, I wrote an example of how to use those grids to present the cells in a honeycomb. Creating such a grid is a good way to test the limits of what is possible with the grid, so I thought I would repeat the exercise, but this time using eager grids.</p>



<figure class="wp-block-video aligncenter video-500"><video autoplay controls loop src="https://swiftui-lab.com/wp-content/uploads/2022/07/eager-honeycomb.mp4"></video></figure>



<p>The full working grid is available in this <a href="https://gist.github.com/swiftui-lab/d38440a2281b2e069f81a94baa741073" target="_blank" rel="noreferrer noopener">gist file</a>. If you need pictures to test the code, you can visit <a href="https://this-person-does-not-exist.com" target="_blank" rel="noreferrer noopener">https://this-person-does-not-exist.com</a>. You may download square pictures with random faces of people that do not exist! They are AI generated. Spooky, I know! <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f632.png" alt="😲" class="wp-smiley" style="height: 1em; max-height: 1em;" /> The images used in the video are from that website.</p>


<hr class="ub_divider" id="ub_divider_e013968f-5919-4da5-9d6c-efd8fbce3452"></hr>


<h3 class="wp-block-heading"><strong>Steps from Square to Hexagon</strong></h3>



<p>We have to start somewhere, so we will create a grid of square images and then gradually add code to transform our simple grid into a honeycomb.</p>



<p>By now, you should have all the knowledge necessary to achieve the transformation. I will provide you with a starting point and a series of steps you need to perform, in order to successfully achieve the transformation. However, if you don&#8217;t have the time, or if you get stuck, you can check the code in the gist file indicated above. The code has comments indicating where each steps it performed.</p>



<p>Note that the flipping of the cells is not really part of the exercise, but I included it in the gist too.</p>



<p>The following video shows the starting point and how it morphs into the honeycomb:</p>



<ul><li><strong>Step #1</strong>: We start with a grid of square pictures.</li><li><strong>Step #2</strong>: Hexagons do not have a 1:1 size ratio. Its <code>height</code> equals <code>width * cos(.pi/6)</code>. If you want to know why, check <a href="https://swiftui-lab.com/impossible-grids/">Impossible Grids</a>, where I explain why.</li><li><strong>Step #3</strong>: Clip the image with the provided hexagon shape.</li><li><strong>Step #4</strong>: Shift even and odd rows to opposite sides. The amount to offset is half of the hexagon width + grid horizontal spacing.</li><li><strong>Step #5</strong>: Rows need to overlap, so you need to reduce the row height to three quarters (3/4). Why 3/4?, again check <a href="https://swiftui-lab.com/impossible-grids/">Impossible Grids</a>, where I explain why.</li><li><strong>Step #6</strong>: To remove empty spaces, clip the grid borders (or put it inside a ScrollView, which does the clipping for you).</li><li><strong>Step #7</strong>: If you make the vertical spacing equal to the horizontal spacing, the cells will space evenly.</li></ul>



<figure class="wp-block-video aligncenter video-590"><video controls src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-honeycomb-steps.mp4"></video></figure>



<h3 class="wp-block-heading"><strong>Starting Point</strong></h3>



<p>In order to get you started, here&#8217;s some code. First, we need some data:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct Person {
    let name: String
    let image: String
    var color: Color = .accentColor
    var flipped: Bool = false
}

class DataModel: ObservableObject {
    static let people: [Person] = [
        Person(name: &quot;Peter&quot;, image: &quot;image-1&quot;),
        Person(name: &quot;Carlos&quot;, image: &quot;image-2&quot;),
        Person(name: &quot;Jennifer&quot;, image: &quot;image-3&quot;),
        Person(name: &quot;Paul&quot;, image: &quot;image-4&quot;),
        Person(name: &quot;Charlotte&quot;, image: &quot;image-5&quot;),
        Person(name: &quot;Thomas&quot;, image: &quot;image-6&quot;),
        Person(name: &quot;Sophia&quot;, image: &quot;image-7&quot;),
        Person(name: &quot;Isabella&quot;, image: &quot;image-8&quot;),
        Person(name: &quot;Ivan&quot;, image: &quot;image-9&quot;),
        Person(name: &quot;Laura&quot;, image: &quot;image-10&quot;),
        Person(name: &quot;Scott&quot;, image: &quot;image-11&quot;),
        Person(name: &quot;Henry&quot;, image: &quot;image-12&quot;),
        Person(name: &quot;Laura&quot;, image: &quot;image-13&quot;),
        Person(name: &quot;Abigail&quot;, image: &quot;image-14&quot;),
        Person(name: &quot;James&quot;, image: &quot;image-15&quot;),
        Person(name: &quot;Amelia&quot;, image: &quot;image-16&quot;),
    ]
    
    static let colors: [Color] = [.yellow, .orange, .red, .purple, .blue, .pink, .green, .indigo]

    @Published var rows: [[Person]] = DataModel.buildDemoCells()
    
    var columns: Int { rows.first?.count ?? 0 }    
    var colCount: CGFloat { CGFloat(columns) }
    var rowCount: CGFloat { CGFloat(rows.count) }

    static func buildDemoCells() -&gt; [[Person]] {
        var array = [[Person]]()

        // Add 7 rows
        for r in 0..&lt;7 {
            var a = [Person]()

            // Add 6 cells per row
            for c in 0..&lt;6 {
                let idx = (r*6 + c)
                var person = people[idx % people.count]
                person.color = colors[idx % colors.count]
                a.append(person)
            }

            array.append(a)
        }

        return array
    }
}</code></pre>



<p>You will also need an hexagon shape:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full is-resized"><img loading="lazy" decoding="async" src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-hexagon.png" alt="" class="wp-image-3809" width="435" height="440"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct HexagonShape: Shape {
    func path(in rect: CGRect) -&gt; Path {
        Path { path in
        
            let height = rect.height
            let width = rect.height * cos(.pi/6)
            
            let h = height / 4
            let w = width / 2
            
            let pt1 = CGPoint(x: rect.midX, y: rect.minY)
            let pt2 = CGPoint(x: rect.midX + w, y: h + rect.minY)
            let pt3 = CGPoint(x: rect.midX + w, y: h * 3 + rect.minY)
            let pt4 = CGPoint(x: rect.midX, y: rect.maxY)
            let pt5 = CGPoint(x: rect.midX - w, y: h * 3 + rect.minY)
            let pt6 = CGPoint(x: rect.midX - w, y: h + rect.minY)
            
            path.addLines([pt1, pt2, pt3, pt4, pt5, pt6])
            
            path.closeSubpath()
        }
    }
}</code></pre>



<p>And finally, your starting grid:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    @StateObject private var model = DataModel()
    
    private let cellWidth: CGFloat = 100
    private let cellHeight: CGFloat = 100
    
    var body: some View {
        VStack {
            Grid(alignment: .center, horizontalSpacing: 2, verticalSpacing: 2) {
                ForEach(model.rows.indices, id: \.self) { rowIdx in
                    GridRow {
                        ForEach(model.rows[rowIdx].indices, id: \.self) { personIdx in
                            
                            let person = model.rows[rowIdx][personIdx]
                            
                            Image(person.image)
                                .resizable()
                                .frame(width: cellWidth, height: cellHeight)
                        }
                    }
                }
            }
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .background(Color.white)
    }
}
</code></pre>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading"><strong>Summary</strong></h2>



<p>The <code>Grid</code> view added this year is very simple to use, and adds to the existing layout container views we already had. This year, however, also introduced a new <code>Layout</code> protocol that provides even more options when it comes to placing our views on screen. We will explore that in a future article. In the meantime, I hope you enjoy this post and the Grid trainer app.</p>



<p>Please feel free to comment below, and follow me on twitter if you would like to be notified when new articles come out. Until next time!</p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/eager-grids/">Eager Grids with SwiftUI</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://swiftui-lab.com/eager-grids/feed/</wfw:commentRss>
			<slash:comments>4</slash:comments>
		
		<enclosure url="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergridtrainer-demo-raw.mov" length="7192352" type="video/quicktime" />
<enclosure url="https://swiftui-lab.com/wp-content/uploads/2022/07/eager-honeycomb.mp4" length="6469760" type="video/mp4" />
<enclosure url="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-honeycomb-steps.mp4" length="1316799" type="video/mp4" />

			</item>
		<item>
		<title>SwiftUI Renderers and Their Tricks</title>
		<link>https://swiftui-lab.com/swiftui-renders/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=swiftui-renders</link>
					<comments>https://swiftui-lab.com/swiftui-renders/#respond</comments>
		
		<dc:creator><![CDATA[javier]]></dc:creator>
		<pubDate>Tue, 28 Jun 2022 14:03:13 +0000</pubDate>
				<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">https://swiftui-lab.com/?p=3583</guid>

					<description><![CDATA[<p>In Xcode beta 3, ChartRenderer has been removed from the SDK. It seems we now should start using ImageRenderer instead to render charts. I had a feedback raised due to the ChartRenderer working monochrome, and with beta 3, I got a reply saying &#8220;ChartRenderer was removed. We suggest you use ImageRenderer instead&#8221;. This statement seems ... <a title="SwiftUI Renderers and Their Tricks" class="read-more" href="https://swiftui-lab.com/swiftui-renders/" aria-label="More on SwiftUI Renderers and Their Tricks">Read more</a></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/swiftui-renders/">SwiftUI Renderers and Their Tricks</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p class="has-white-color has-luminous-vivid-amber-background-color has-text-color has-background">In Xcode beta 3, ChartRenderer has been removed from the SDK. It seems we now should start using <strong>ImageRenderer</strong> instead to render charts. I had a feedback raised due to the ChartRenderer working monochrome, and with beta 3, I got a reply saying &#8220;ChartRenderer was removed. We suggest you use ImageRenderer instead&#8221;. This statement seems final and I am assuming ChartRenderer will not be back in a future release. I need to update this article, but in the meantime, you have been warned <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f601.png" alt="😁" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>



<p>WWDC &#8217;22 brought us a couple of new ways to capture SwiftUI views. There is <code>ImageRenderer</code> and <code>ChartRenderer</code>. In general we use the first one to generate images of our views, and ChartRenderer specifically for <code>Chart</code> views. In this article we will explore both renderers, its tricks, quirks and limitations.</p>



<p>In the past, if we wanted to convert a SwiftUI view into an image we would wrap the view in a representable, and then use UIKit/AppKit to build our image. With the new renderers that is not longer necessary, but the approach is totally different and there is a whole set of considerations we need to make in order to be successful.</p>



<h2 class="wp-block-heading"><strong>ImageRenderer</strong></h2>



<p><code>ImageRenderer</code> is promising, but it comes with limitations that we will discover ahead. But let us begin with a simple example.</p>



<p>Here we have an <code>AvatarView</code> that clips an image in a circle, adds a border, and decorates it with a shadow. We can change the avatar name to use a different photo. Finally, we have a button to save the <code>AvatarView</code> into our photo library. Note that this example calls <code>UIImageWriteToSavedPhotosAlbum</code>, so in order to work, your <code>Info.plist</code> needs to have the <code>NSPhotoLibraryAddUsageDescription</code> key with a string describing the reason to grant access to the Photo Library.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large is-resized"><img loading="lazy" decoding="async" src="https://swiftui-lab.com/wp-content/uploads/2022/06/imagerenderer-post-1-1024x474.png" alt="" class="wp-image-3596" width="768" height="356" srcset="https://swiftui-lab.com/wp-content/uploads/2022/06/imagerenderer-post-1-1024x474.png 1024w, https://swiftui-lab.com/wp-content/uploads/2022/06/imagerenderer-post-1-300x139.png 300w, https://swiftui-lab.com/wp-content/uploads/2022/06/imagerenderer-post-1-768x356.png 768w, https://swiftui-lab.com/wp-content/uploads/2022/06/imagerenderer-post-1.png 1520w" sizes="(max-width: 768px) 100vw, 768px" /></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">@main
struct TestApp: App {
    var body: some Scene {
        WindowGroup {
            ContentView()
                .tint(.orange)
        }
    }
}

struct ContentView: View {
    @State var avatarName = &quot;dog&quot;

    var body: some View {
        
        let avatarView = AvatarView(imageName: avatarName)

        Form {
            Picker(&quot;Pick your avatar&quot;, selection: $avatarName) {
                Text(&quot;Cat&quot;).tag(&quot;cat&quot;)
                Text(&quot;Dog&quot;).tag(&quot;dog&quot;)
            }
            
            LabeledContent(&quot;Photo&quot;) {
                avatarView
            }

            Button(&quot;Save avatar&quot;, action: { saveAvatar(avatarView) })

        }
    }
    
    @MainActor func saveAvatar(_ view: AvatarView) {
        let renderer = ImageRenderer(content: view)
        
        if let image = renderer.uiImage {
            UIImageWriteToSavedPhotosAlbum(image, nil, nil, nil)
        }
    }
}

struct AvatarView: View {
    let imageName: String
    
    var body: some View {
        Image(imageName)
            .resizable()
            .aspectRatio(contentMode: .fit)
            .frame(height: 160)
            .clipShape(Circle())
            .overlay(Circle().stroke(.tint, lineWidth: 2))
            .padding(2)
            .overlay(Circle().strokeBorder(Color.black.opacity(0.1)))
            .shadow(radius: 3)
            .padding(4)
    }
}
</code></pre>



<p>If you are unfamiliar with the <code>LabeledContent</code> view, it is a new addition this year. It associates a label with some content (in this case the <code>AvatarView</code>). This helps containers like the Form view to place the label in the first column and its content in the second column, both with proper alignment.</p>



<p>But back to the issue. The important code is the <code>saveAvatar()</code> method. It is worth mentioning the need for the <code>@MainActor</code> attribute. Also note that the renderer may fail to generate the image, so we must check for non-nil.</p>



<p>Depending on the platform, you may use the <code>nsImage</code>, <code>cgImage</code> or <code>uiImage</code> property of the <code>ImageRenderer</code>, in order to render the image. There is also a <code>render()</code> method we could use to generate the image, but we will talk about it later and why it could be useful.</p>



<p>If you inspect the generated image, you will notice that the resolution may be a little low. Specially when dealing with retina displays, we should remember to also set the scale to solve this problem:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">@MainActor func saveAvatar(_ view: AvatarView) {
    let renderer = ImageRenderer(content: view)
    renderer.scale = 3.0
        
    if let image = renderer.uiImage {
        UIImageWriteToSavedPhotosAlbum(image, nil, nil, nil)
    }
}</code></pre>



<h3 class="wp-block-heading">Dealing with Transparency</h3>



<p>The <code>ImageRenderer</code> has an <code>isOpaque</code> property. As you may guess, if this boolean is <code>false</code>, the renderer will handle image transparency accordingly. That is, all the non-drawing parts of the view will be transparent in the resulting image. However, if you let the code as it is, the image saved to the photo library will not be transparent around the circle. This is because the image is saved as JPG, which does not support an alpha channel. To solve this, we modify the <code>saveAvatar()</code> method slightly:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">@MainActor func saveAvatar(_ view: AvatarView) {
    let renderer = ImageRenderer(content: view)
    renderer.scale = 3.0
    renderer.isOpaque = false // you may avoid this line, false is the default
    
    if let image = renderer.uiImage {
        if let data = image.pngData(), let pngImage = UIImage(data: data) {
            UIImageWriteToSavedPhotosAlbum(pngImage, nil, nil, nil)
        }
    }
}</code></pre>



<p>Using <code>isOpaque = true</code> may improve performance. If you know your image does not use transparency, then you may set <code>isOpaque</code> to <code>true</code>. Otherwise go with <code>false</code>.</p>



<p>In addition to the opaque setting, the renderer also let you set its <code>colorMode</code>.</p>



<h2 class="wp-block-heading">Be respectful with the Environment <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /></h2>



<p>If you look at the code, I deliberately included the app scene. The intention is to show you that right at the top of the view hierarchy, I set the environment&#8217;s tint color to orange. This is the color used by the <code>AvatarView</code> to tint the border of the clipping circle.</p>



<p>Now, if you open the saved photo from the library, you will find that the border is not orange, it is blue.  The lesson here is to remember that the environment of you app will not be the same environment used by the renderer. When the <code>ImageRenderer</code> renders the image, it will do so with a &#8220;default&#8221; environment. If you want the avatar to have an orange border, remember to set it in the renderer&#8217;s view:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">@MainActor func saveAvatar(_ view: AvatarView) {
    let renderer = ImageRenderer(content: view.tint(.orange))
    renderer.scale = 3.0
    renderer.isOpaque = false // you may avoid this line, false is the default
    
    if let image = renderer.uiImage {
        if let data = image.pngData(), let pngImage = UIImage(data: data) {
            UIImageWriteToSavedPhotosAlbum(pngImage, nil, nil, nil)
        }
    }
}</code></pre>



<p>This may have all sorts of unexpected results if foreground color, fonts, boldness, color scheme, styles and other environment properties were set higher in the hierarchy. Be mindful of that if you encounter differences between the view on the screen and the rendered image.</p>



<h2 class="wp-block-heading">ImageRenderer and Its Cryptic Talents</h2>



<p>For this section, I recommend you run the examples on Xcode, as you continue to read. Seeing it in action will better help you with the concepts described here.</p>



<p>Up to this point, we explored the most common uses for the image renderer. They are pretty straight forward. However, it can do more. But to be successful, we really need to understand what is going on under the hood, or we will end up often hearing ourselves saying: &#8220;wait, what?&#8221; <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f914.png" alt="🤔" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>



<p>Unlike most types in SwiftUI, <code>ImageRenderer</code> is not a struct, it is a class. And not just any class, it is an <code>ObservableObject</code>. That means it has a publisher you can subscribe to. All published events by the renderer, mean that the image changed.</p>



<p>Let&#8217;s start by introducing the view we are going to render:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct MyView: View {
    static let colors: [Color] = [.red, .green, .purple, .yellow, .blue, .orange, .teal]
    
    @State var color = Self.colors[0]
    @State var counter = 0
    
    let timer = Timer.publish(every: 1, on: .main, in: .common).autoconnect()
    
    var body: some View {
        Circle()
            .fill(color)
            .frame(width: 50, height: 50)
            .shadow(radius: 3)
            .overlay {
                Text(&quot;\(counter)&quot;)
            }
            .padding(20)
            .onReceive(timer) { tm in
                guard counter + 1 &lt; Self.colors.count else {
                    timer.upstream.connect().cancel()
                    return
                }
                
                counter += 1
                color = Self.colors[counter]
            }
    }
}</code></pre>



<p>This view draws a circle with a counter. Every second, it changes color and increments the counter, until it reaches the last color, and then stops changing.</p>



<p>Now lets see how we can observe the ImageRenderer:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="199" height="131" src="https://swiftui-lab.com/wp-content/uploads/2022/06/imagerenderer-post-2.gif" alt="" class="wp-image-3600"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    @StateObject var renderer = ImageRenderer(content: MyView())
    
    var body: some View {
        
        HStack {
            // Left circle
            renderer.content
            
            // Right circle
            Image(uiImage: renderer.uiImage ?? UIImage())
        }
        .onReceive(renderer.objectWillChange) {
            print(&quot;\(Date()): Rendered image changed&quot;)
        }
    }
}
</code></pre>



<p>The circle from the right, is a raster image of the view on the left. There are two things going on with the renderer here. First, SwiftUI is observing a change in the renderer&#8217;s image. Every time the view changes, the renderer publishes an event, and <code>renderer.uiImage</code> updates.</p>



<p>The second thing is that because the renderer is an <code>ObservableObject</code>, we can subscribe to <code>renderer.objectWillChange</code>. In this case we use <code>onReceive()</code> to subscribe to it and print the time of the event. But you can use it to save each image to a different file. Every time an event is published, it means the image has changed.</p>



<p><strong><em>Now, it&#8217;s important to understand that the renderer will only publish an event, if the view changed and the last image it created became out of date</em></strong>. This may sound strange, but consider this:</p>



<p>Let&#8217;s remove the Image(&#8230;) line and see what happens:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    @StateObject var renderer = ImageRenderer(content: MyView())
    
    var body: some View {
        
        HStack {
            renderer.content            
        }
        .onReceive(renderer.objectWillChange) {
            print(&quot;\(Date()): Rendered image changed&quot;)
        }
    }
}
</code></pre>



<p>First thing we notice, is that we get only one counting circle. That&#8217;s to be expected. What is less intuitive, is that although the renderer has been setup with the view, <code>onReceive()</code> will not receive a single event (you may confirm that by checking the log). Because the renderer never created an image, there isn&#8217;t an image that changed (only the view did).</p>



<p>Now, if we add the following <code>onAppear</code> closure:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    @StateObject var renderer = ImageRenderer(content: MyView())
    
    var body: some View {
        
        HStack {
            renderer.content            
        }
        .onReceive(renderer.objectWillChange) {
            print(&quot;\(Date()): Rendered image changed&quot;)
        }
        .onAppear {
          _ = renderer.uiImage
        }
    }
}
</code></pre>



<p>We are creating an image when the view appears. So when the view changes to counter == 1, the image changes and the <code>onReceive</code> closure is called. But only once. Because we are not creating a new image, <code>onReceive</code> won&#8217;t be called again, even if the view keeps changing.</p>



<p>Now, if we add one more line (in the <code>onReceive</code> closure), it is all back to working normally.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    @StateObject var renderer = ImageRenderer(content: MyView())
    
    var body: some View {
        
        HStack {
            renderer.content            
        }
        .onReceive(renderer.objectWillChange) {
            _ = renderer.uiImage

            print(&quot;\(Date()): Rendered image changed&quot;)
        }
        .onAppear {
            _ = renderer.uiImage
        }
    }
}
</code></pre>



<p>Note that this is a conclusion I reached by observation. It is not documented anywhere&#8230; This means, that although unlikely, it might change in the future.</p>



<h2 class="wp-block-heading">We Render <strong>A</strong> View, Not <strong>The</strong> View</h2>



<p>One would assume that the rasterized image will look exactly the same as the view we are displaying. But not necessarily. Consider the following changes. We are going to change MyView&#8217;s implementation slightly. Instead of showing the counter, we will show a random integer. Also, for this example we don&#8217;t need the <code>onReceive</code> closure anymore, so we will remove it from the code:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="199" height="131" src="https://swiftui-lab.com/wp-content/uploads/2022/06/imagerenderer-post-3.gif" alt="" class="wp-image-3604"/></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    @StateObject var renderer = ImageRenderer(content: MyView())
    
    var body: some View {
        
        HStack {
            renderer.content
            
            Image(uiImage: renderer.uiImage ?? UIImage())
        }
    }
}

struct MyView: View {
    static let colors: [Color] = [.red, .green, .purple, .yellow, .blue, .orange, .teal]
    
    @State var color = Self.colors[0]
    @State var counter = 0
    
    let timer = Timer.publish(every: 1, on: .main, in: .common).autoconnect()
    
    var body: some View {
        Circle()
            .fill(color)
            .frame(width: 50, height: 50)
            .shadow(radius: 3)
            .overlay {
                Text(&quot;\(Int.random(in: 0...100))&quot;)
            }
            .padding(20)
            .onReceive(timer) { tm in
                guard counter + 1 &lt; Self.colors.count else {
                    timer.upstream.connect().cancel()
                    return
                }
                
                counter += 1
                color = Self.colors[counter]
            }
    }
}</code></pre>



<p>As you can see by this example, the view on the left shows a different number than the view on the right. Why is that? Because the view body() is computed by SwiftUI to display the view, but the renderer also calls the body() of the view to render the image. In each call, a different random number is created. Sounds obvious now that we say it out loud, but it caught me off guard the first time I saw it. However, we&#8217;ve already witness another effect of this fact, when we saw how the view renders with a different environment. It is obvious that the renderer is computing the view separately. In fact, you may render an image from a view that is never displayed on screen (as you will see in the example where we create a pdf for a chart).</p>



<h2 class="wp-block-heading">Creating a PDF with Scalable and Searchable Graphics</h2>



<p>The pdf examples I am posting here were tested with macOS. But they should also work on iOS. If your app is sandboxed, remember to add write access to the Downloads directory from your Xcode project&#8217;s capabilities section.</p>



<p><code>ImageRenderer</code> (and <code>ChartRenderer</code>) may be used to draw into a pdf file. This has the advantage of preserving the vector nature of the images we produce, which means they will maintain their resolution when we scale them (except for images, which are already bitmap in nature). Also text will be searchable. Let&#8217;s see an example. We will change the <code>AvatarView</code> slightly to add some text:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct AvatarView: View {
    let imageName: String
    
    var body: some View {
        VStack {
            Image(imageName)
                .resizable()
                .aspectRatio(contentMode: .fit)
                .frame(height: 160)
                .clipShape(Circle())
                .overlay(Circle().stroke(Color.white, lineWidth: 2))
                .padding(2)
                .overlay(Circle().strokeBorder(Color.black.opacity(0.1)))
                .shadow(radius: 3)
                .padding(4)

            Text(&quot;Your Avatar&quot;)
        }
    }
}</code></pre>



<p>And here is the code to draw the avatar view centered in a pdf page. The text &#8220;Your Avatar&#8221; can be found with a pdf search. You may also zoom as many times as you want and you will observe how the text keeps its definition and the circle around the image does not pixelate, as it preserves its vector nature. Here&#8217;s a link to the resulting <a href="https://swiftui-lab.com/wp-content/uploads/2022/06/avatar.pdf" target="_blank" rel="noreferrer noopener">avatar.pdf</a>.</p>



<p>To draw into our PDF, instead of using <code>renderer.nsImage</code>, we use the render method <code>renderer.render(...)</code>. The parameter of this function, is a closure that receives two parameters: size and a rendering function. In addition to the closure, the render method has an optional parameter <code>rasterizationScale</code> that defaults to <code>1.0</code></p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    var body: some View {
        
        let avatarView = AvatarView(imageName: &quot;cat&quot;)
        
        VStack {
            avatarView
            
            Button(&quot;Save PDF&quot;) { exportPDF(avatarView) }
            
        }
    }
    
    @MainActor func exportPDF(_ view: AvatarView) {
        let renderer = ImageRenderer(content: view)

        // Build URL
        guard let downloadsDirectory = FileManager.default.urls(for: .downloadsDirectory, in: .userDomainMask).first else { return }
        let url = downloadsDirectory.appending(path: &quot;avatar.pdf&quot;)
        
        // PDF media box rect (A4)
        var mediaBox:CGRect = CGRect(x: 0, y: 0, width: 793, height: 1123)
                        
        if let dataConsumer = CGDataConsumer(url: url as CFURL) {
            if let pdfContext = CGContext(consumer: dataConsumer, mediaBox: &amp;mediaBox, nil) {

                // Begin PDF page
                let options: [CFString: Any] = [kCGPDFContextMediaBox: mediaBox]

                pdfContext.beginPDFPage(options as CFDictionary)

                // Render the avatar
                renderer.render { size, renderFunction in
                    
                    // Center avatar in page
                    pdfContext.translateBy(x: (mediaBox.width - size.width) / 2.0,
                                           y: (mediaBox.height - size.height) / 2.0)

                    // Draw avatar
                    renderFunction(pdfContext)
                }

                // End PDF page
                pdfContext.endPDFPage()
                
                // Remember to close PDF!
                pdfContext.closePDF()
            }
        }
        
        print(&quot;PDF saved to \(url.path)&quot;)
    }
}</code></pre>



<p>This example draws a single element into the PDF, but we can draw as many elements as we want. We will see some examples next, with the <code>ChartRenderer</code> where we will mix charts and other views in the same pdf.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading"><strong>ChartRenderer</strong> (No Longer Exists, check note at the beginning of the article)</h2>



<p class="has-white-color has-vivid-purple-background-color has-text-color has-background"><strong>BUG WARNING:</strong> In Xcode 14 beta 1, ChartRenderer used to render the chart in color, but in beta 2 it is rendered in grayscale. This is probably a bug (FB10491144). If you know a way of  changing it, please let me know and I will update the article.</p>



<p><code>Chart</code> views are rendered with <code>ChartRenderer</code>, instead of <code>ImageRenderer</code>. You may wonder why the difference. Aren&#8217;t charts SwiftUI views as well? Yes they are, but I suspect ChartRenderer is better equipped for handling charts. For example, when drawing a chart in a pdf file it may have more (or less) space than its screen counterpart, which may produce text labels that truncate differently. Internally there may be other reasons. Fortunately, the process of creating a pdf remains the same. And you can even have a pdf with mixed content: charts and other views in the same file.</p>



<h3 class="wp-block-heading">Creating a PDF with SwiftUI Charts</h3>



<p>First let&#8217;s build us a chart to play with. It will be a simple chart, as this article is not about composing charts. First we need some data:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">import SwiftUI
import Charts

struct ContinentArea: Identifiable {
    let continent: String
    let area: Double // in million square kilometers
    
    var id: String { continent }
}

let data = [
    ContinentArea(continent: &quot;Asia&quot;, area: 31),
    ContinentArea(continent: &quot;Africa&quot;, area: 29),
    ContinentArea(continent: &quot;Europe&quot;, area: 22),
    ContinentArea(continent: &quot;North America&quot;, area: 21),
    ContinentArea(continent: &quot;South America&quot;, area: 17),
    ContinentArea(continent: &quot;Oceania&quot;, area: 8),
    ContinentArea(continent: &quot;Antartica&quot;, area: 13),
]</code></pre>



<p>Our <code>ContentView</code> will look like the picture below. I added the green border deliberately, to show a bug (FB10491051), where the text in the Y-axis goes outside its bounding box. This is a minor bug, but if you place the chart at the top of the pdf page you may see the &#8220;40&#8221; text truncated and wonder why that happens. Now you know.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large is-resized"><img loading="lazy" decoding="async" src="https://swiftui-lab.com/wp-content/uploads/2022/06/chartrenderer-post-1-1024x689.png" alt="" class="wp-image-3626" width="768" height="517" srcset="https://swiftui-lab.com/wp-content/uploads/2022/06/chartrenderer-post-1-1024x689.png 1024w, https://swiftui-lab.com/wp-content/uploads/2022/06/chartrenderer-post-1-300x202.png 300w, https://swiftui-lab.com/wp-content/uploads/2022/06/chartrenderer-post-1-768x517.png 768w, https://swiftui-lab.com/wp-content/uploads/2022/06/chartrenderer-post-1.png 1102w" sizes="(max-width: 768px) 100vw, 768px" /></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    func chartView() -&gt; some ChartView {
        Chart(data) { val in
            BarMark(x: .value(&quot;x&quot;, val.continent), y: .value(&quot;y&quot;, val.area))
        }
    }

    var body: some View {
        let chartView = chartView()

        VStack {
            chartView
                .frame(width: 500, height: 300)
                .border(Color.green)
            
            Button(&quot;Export PDF&quot;) {
                exportPDF(chartView)
            }
        }
    }
    
    @MainActor func exportPDF&lt;CV: ChartView&gt;(_ chartView: CV) {
       ...
    }
}</code></pre>



<p>The pdf we create will have not only the chart, but some additional text. To render the text, we will use ImageRenderer:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">@MainActor func exportPDF&lt;CV: ChartView&gt;(_ chartView: CV) {
    // Create URL
    guard let downloadsDirectory = FileManager.default.urls(for: .downloadsDirectory, in: .userDomainMask).first else { return }
    let url = downloadsDirectory.appending(path: &quot;chart.pdf&quot;)
    
    // Media box (A4 size)
    var mediaBox:CGRect = CGRect(x: 0, y: 0, width: 793, height: 1123)
    
    let chartSize = CGSize(width: 500, height: 300)
    
    if let dataConsumer = CGDataConsumer(url: url as CFURL) {
        if let pdfContext = CGContext(consumer: dataConsumer, mediaBox: &amp;mediaBox, nil) {
            
            // PAGE #1
            pdfContext.beginPage(mediaBox: nil)
            
            // Draw title
            let titleView = Text(&quot;Continent Surface Area (in km2)&quot;)
                .font(.largeTitle)
                .bold()
                .foregroundColor(.green)
                .padding(15)
                .overlay { RoundedRectangle(cornerRadius: 10).stroke(.gray) }
                .padding(20)
                .frame(width: mediaBox.width)

            let imageRenderer = ImageRenderer(content: AnyView(titleView))
            
            imageRenderer.render { size, renderFunction in
                pdfContext.translateBy(x: 0, y: mediaBox.height - size.height)
                renderFunction(pdfContext)
            }
            
            // Draw Chart
            let chartRenderer = ChartRenderer(content: chartView)

            // Charts are drawn upside down, so we need to flip it
            pdfContext.scaleBy(x: 1, y: -1)

            chartRenderer.render(to: pdfContext, in: CGRect(origin: CGPoint(x: (mediaBox.width - chartSize.width) / 2, y: 0), size: chartSize))

            pdfContext.endPage()

            // PAGE #2
            pdfContext.beginPage(mediaBox: nil)

            // Draw text &quot;End of Document&quot; in the 2nd and last page
            imageRenderer.content = AnyView(Text(&quot;End of Document&quot;).frame(width: mediaBox.width))
            
            imageRenderer.render { size, renderFunction in
                pdfContext.translateBy(x: 0, y: (mediaBox.height - size.height) / 2)
                renderFunction(pdfContext)
            }
            
            pdfContext.endPage()

            // REMEBER TO CLOSE PDF!
            pdfContext.closePDF()
        }
    }
}</code></pre>



<p>The code is self-explanatory, but let&#8217;s point out a few elements. Unlike the other example, this pdf is multipage. The text we place in the pdf is using an ImageRenderer. In order to reuse the same renderer with the two views, we use <code>AnyView</code>, because both views do not have the same type and we need to type-erase them. The other option is two use two separate ImageRenderer objects.</p>



<p>Finally, notice the line below. CoreGraphics draws the graph upside down, so we need to flip it:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">pdfContext.scaleBy(x: 1, y: -1)</code></pre>



<h3 class="wp-block-heading">Drawing a Chart in a Canvas</h3>



<p>In addition to using <code>ChartRenderer</code> to create a pdf file, you may also use it to draw in a <code>Canvas</code> view. There is another version of the render() method, and the only difference is that it receives <code>GraphicsContext</code> instead of <code>CGContext</code> as its first parameter .</p>



<p>Here&#8217;s a quick example that shows how to render the chart inside the Canvas:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContinentArea: Identifiable {
    let continent: String
    let area: Double // in million square kilometers
    
    var id: String { continent }
}

let data = [
    ContinentArea(continent: &quot;Asia&quot;, area: 31),
    ContinentArea(continent: &quot;Africa&quot;, area: 29),
    ContinentArea(continent: &quot;Europe&quot;, area: 22),
    ContinentArea(continent: &quot;North America&quot;, area: 21),
    ContinentArea(continent: &quot;South America&quot;, area: 17),
    ContinentArea(continent: &quot;Oceania&quot;, area: 8),
    ContinentArea(continent: &quot;Antartica&quot;, area: 13),
]

struct ContentView: View {

    func chartView() -&gt; some ChartView {
        Chart(data) { val in
            BarMark(x: .value(&quot;x&quot;, val.continent), y: .value(&quot;y&quot;, val.area))
        }
    }

    var body: some View {
        let chartView = chartView()

        VStack {
            chartView
                .frame(width: 500, height: 300)
                .border(Color.green)
            
            
            Canvas { context, size in
                let cr = ChartRenderer(content: chartView)
                
                cr.render(to: context, in: CGRect(origin: .zero, size: size))
            }
            .frame(width: 250, height:150)
        }
    }
}</code></pre>



<p>If you&#8217;re not familiar with the Canvas view, check <a href="https://swiftui-lab.com/swiftui-animations-part5/">Advanced SwiftUI Animations Part 5 &#8211; Canvas</a></p>



<p>ChartRenderer has a few other options (e.g., edge insets, setting the environment, etc.). I encourage to read the <a href="https://developer.apple.com/documentation/charts/chartrenderer" target="_blank" rel="noreferrer noopener">documentation</a> for all the details.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading"><strong>Renderer Limitations</strong></h2>



<p>In addition to the bugs described so far, some behaviors may be considered limiting or advantages. For example, as mention, renders are drawn separately from the screen counterparts. Depending on what you are trying to do, this may be annoying, or welcomed. But this section is about issues that are limiting only.</p>



<p><strong>Animations are a No-No:</strong> If you&#8217;re view is animating and you render it mid-animation, you will get an image of the view as it is at the end of the animation. This makes sense, knowing all we know about the screen version of the view vs. its render version. But still, it is an unfortunate effect.</p>



<p><strong>Certain Views are not Renderer Friendly</strong>: I haven&#8217;t tested all views, but some will just not render and produce puzzling results. This seems to be the case of control views (e.g., TextView, Toggle, etc.). Again, this makes kind of sense, so be mindful of that.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<h2 class="wp-block-heading"><strong><strong>Summary</strong></strong></h2>



<p>When I first started investigating renderers, I thought they would be a straight-forward topic. One example, and that&#8217;s it. It turned out to be a deeper topic though. I hope this article will save you from puzzling results. Or if you do encounter them, you will now know why.</p>



<p>Feel free to&nbsp;follow me on twitter, if you want to be notified when new articles are published. Until then!</p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/swiftui-renders/">SwiftUI Renderers and Their Tricks</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://swiftui-lab.com/swiftui-renders/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>WWDC 2022: Lessons from the SwiftUI Digital Lounges</title>
		<link>https://swiftui-lab.com/digital-lounges-2022/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=digital-lounges-2022</link>
					<comments>https://swiftui-lab.com/digital-lounges-2022/#comments</comments>
		
		<dc:creator><![CDATA[javier]]></dc:creator>
		<pubDate>Fri, 17 Jun 2022 14:51:50 +0000</pubDate>
				<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">https://swiftui-lab.com/?p=3338</guid>

					<description><![CDATA[<p>This has been the second year of WWDC Digital Lounges. They gave us a good opportunity to try getting our questions directly answered by the makers of SwiftUI (and other frameworks). Not everyone has been able to attend, probably due to other commitments, lack of time, failure to register, unfortunate timezones, etc. However, again this ... <a title="WWDC 2022: Lessons from the SwiftUI Digital Lounges" class="read-more" href="https://swiftui-lab.com/digital-lounges-2022/" aria-label="More on WWDC 2022: Lessons from the SwiftUI Digital Lounges">Read more</a></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/digital-lounges-2022/">WWDC 2022: Lessons from the SwiftUI Digital Lounges</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>This has been the second year of WWDC Digital Lounges. They gave us a good opportunity to try getting our questions directly answered by the makers of SwiftUI (and other frameworks).</p>



<p>Not everyone has been able to attend, probably due to other commitments, lack of time, failure to register, unfortunate timezones, etc. However, again this year, I took my notes before the channel is taken down (at the moment it&#8217;s still available). I asked permission to share these with you, and fortunately they had no issue with it.</p>



<p>I have categorized, curated, and in some cases commented the SwiftUI Digital Lounge questions. For better and faster browsing, I simplified many of the questions to one (or two) lines. Still, the original text can be found inside. I have also removed all names, just in case someone is uncomfortable with it.</p>



<p><strong>If you want to share a question, you may use the hash button at the bottom of each question. It will copy a link to the clipboard. Using this link will load the page, scroll to the question, and expand it.</strong></p>



<p>In some of the questions, I added my own comments, by either expanding on the topic, or appending an example of what is discussed. These questions are marked with <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" />.</p>



<p>When a question is related to a new feature introduced in WWDC &#8217;22, I flagged it with a <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> symbol.</p>



<p>I also put a <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /> mark, on those questions that I found particularly interesting. Some of the reasons why a question gets the star are:</p>



<ol><li>The answer provides a brand new piece of information.</li><li>The answer from Apple confirms something we suspected for a long time, but wasn&#8217;t documented anywhere.</li><li>The answer from Apple confirms a pattern we&#8217;ve adopted in the community, but not seen used by Apple until now.</li><li>The question discusses a topic rarely treated and deserves some attention.</li><li>The answer provides some insight into the inner workings of the framework.</li><li>The answer provides design/coding recommendations.</li><li>Or just any other question that made me stop to think <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f914.png" alt="🤔" class="wp-smiley" style="height: 1em; max-height: 1em;" /></li></ol>



<p>In some cases, Apple engineers have provided tips that are not related to any specific questions. These have been marked with the <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4a1.png" alt="💡" class="wp-smiley" style="height: 1em; max-height: 1em;" /> symbol.</p>



<p>After the WWDC, with new betas, some of the answers in here are no longer valid. The cases I detected are marked with <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/26a0.png" alt="⚠" class="wp-smiley" style="height: 1em; max-height: 1em;" /> and I provide additional comments.</p>



<p>This is not a full transcript of the lounges. Not all questions made it to this page, although a very large number did. Some of them were just too specific to a user&#8217;s project, or simply addressed a very well documented and repeatedly discussed topic, others questions I may have filtered because they were either vague or their answer was vague. The lounges are a great part of the WWDC, but because its scopes everything, sometimes things can get lost in there. The idea was to make this page easy to read and reduce as much noise as possible.</p>



<p>If you are looking for last year&#8217;s digital lounges questions, you can find them <a href="https://swiftui-lab.com/random-lessons/">here</a>.</p>



<h2 class="wp-block-heading">Backwards Compatibility</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-a090ba1e-c6d9-45b7-b22f-2b5553ce5053" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="back-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-a090ba1e-c6d9-45b7-b22f-2b5553ce5053" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a090ba1e-c6d9-45b7-b22f-2b5553ce5053">Are any of this year&#8217;s changes backward compatible? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-a090ba1e-c6d9-45b7-b22f-2b5553ce5053">

<p><strong>Full Question: </strong>Are any of these changes back-deployable to previous OSes (e.g., like the new Section initialisers were last year).</p>
<p><strong>Answer:</strong> Not this year! Last year we had some nice syntactic refinements that we were able to back deploy, but many of the features this year require fundamental new support in the OS.</p>

</div></div>

<div id="back-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-a090ba1e-c6d9-45b7-b22f-2b5553ce5053" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a090ba1e-c6d9-45b7-b22f-2b5553ce5053">Is it possible to use SwiftUI Navigation for iOS 15? How can we transition to it on the existing project? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-a090ba1e-c6d9-45b7-b22f-2b5553ce5053">

<p>To learn how to transition your existing projects to the new navigation types, see this handy migration guide: <a href="https://developer.apple.com/documentation/swiftui/migrating-to-new-navigation-types" target="_blank" rel="noreferrer noopener">https://developer.apple.com/documentation/swiftui/migrating-to-new-navigation-types</a></p>

</div></div>

<div id="back-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-a090ba1e-c6d9-45b7-b22f-2b5553ce5053" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a090ba1e-c6d9-45b7-b22f-2b5553ce5053">Are there macOS cases that you would recommend using AppKit rather than SwiftUI? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-a090ba1e-c6d9-45b7-b22f-2b5553ce5053">

<p><strong>Full Question:</strong> </p>



<p>Are there any types of macOS apps or interfaces where you would still recommend using appkit rather than SwiftUI?</p>



<p>I&#8217;m yet to invest the considerable amount of time learning SwiftUI and I keep reading mentions of people saying it&#8217;s still a mixed bag for macOS development, so I don&#8217;t want to potentially waste time. Thanks!</p>



<p><strong>Answer:</strong> </p>



<p>Good question! Across all platforms, we’d recommend comparing your needs to what SwiftUI provides (so no hard rules/recommendations) — and keeping in mind that you can adopt SwiftUI incrementally.</p>



<p>Within Apple’s own apps on macOS, we’re ourselves using the full spectrum of approaches. From just a specific view/views in an app, e.g. in Mail, iWork, Keychain Access; to an entire portion of the UI or a new feature, e.g. in Notes, Photos, Xcode; and all the way to the majority of an application, e.g. Control Center, Font Book, System Settings.</p>



<p>But in the end, I’d recommend starting with a part you’re comfortable with and building up from there! You should look at SwiftUI as another tool in your toolset in enabling you to build the best apps you can.</p>

</div></div>

<div id="back-4" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-3-a090ba1e-c6d9-45b7-b22f-2b5553ce5053" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a090ba1e-c6d9-45b7-b22f-2b5553ce5053">What is the recommended way to conditionalize code for view modifiers that are only available on newer versions of iOS? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-3-a090ba1e-c6d9-45b7-b22f-2b5553ce5053">

<p>We recommend factoring out the common parts and then using&nbsp;<code>if #available</code>&nbsp;checks to use the relevant modifier. Something like this:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">let common = commonViewParts

if #available(iOS 16.0, macOS 13.0, *) {
    return common.newModifier()
} else {
    return common.oldModifier()
}</code></pre>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<p><strong>SwiftUI-Lab Comment:</strong> If it helps for code readability or reusability, you can also put those modifiers inside another modifier:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {    
    var body: some View {
        Text(&quot;Section #1&quot;)
            .modifier(SectionTitleModifier())
    }
}

struct SectionTitleModifier: ViewModifier {
    func body(content: Content) -&gt; some View {
        if #available(iOS 16.0, macOS 13.0, *) {
            return content.underline()
        } else {
            return content.font(.largeTitle)
        }
    }
}
</code></pre>

</div></div>
</div>


<h2 class="wp-block-heading">Charts</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-43b1f8ec-9344-4e2f-9662-6ca7015f0c55" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="charts-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-43b1f8ec-9344-4e2f-9662-6ca7015f0c55" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">Are doughnut and pie charts also supported? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">

<p><strong>Engineer #1:</strong> That&#8217;s an interesting question about Pie charts specifically. The data visualization academic community right now has mixed feelings generally about pie charts. They aren&#8217;t supported in Swift Charts. I&#8217;m not data-vis expert though.</p>
<p><strong>Engineer #2:</strong> Swift Charts does not support radial layouts so no pie charts or donut charts. However, you can usually show the same data as a bar chart, which may actually be easier to read and is more accessible to e.g. Voice Over users (linear layout is closer to the navigation order in other interface elements).</p>

</div></div>

<div id="charts-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-43b1f8ec-9344-4e2f-9662-6ca7015f0c55" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">Can it be used to show realtime (e.g., sensor) data? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">

<p>yes, you can use it with realtime data</p>

</div></div>

<div id="charts-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-43b1f8ec-9344-4e2f-9662-6ca7015f0c55" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">Any hierarchy tree type charts? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">

<p>There is no native support for hierarchical layouts in Swift Charts. You could use it to render the output of a tree layout algorithm (e.g., Treemap) with the rectangle mark but I don’t think you get that much benefit from Swift Charts over SwiftUI in that case.</p>

</div></div>

<div id="charts-4" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-3-43b1f8ec-9344-4e2f-9662-6ca7015f0c55" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">Any support for rendering this to a scalable PDF beyond embedding as an image? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-3-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">

<p>To create a PDF, you can use the&nbsp;<code>ChartRenderer</code>&nbsp;API to render a chart into a&nbsp;<code>CGPDFContext</code>.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<p><strong>SwiftUI-Lab Comment:</strong> Check my post about <a href="https://swiftui-lab.com/swiftui-renders/" target="_blank" rel="noreferrer noopener">SwiftUI renderers</a> for an example.</p>

</div></div>

<div id="charts-5" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-4-43b1f8ec-9344-4e2f-9662-6ca7015f0c55" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">Do we get the Audio Charts for free when using native charts? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-4-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">

<p><strong>Full Question:</strong> Do we get the Audio Charts for free when using native charts or do we still have to provide a chart descriptor?</p>



<p><strong>Answer:</strong> Yes, you get Audio Graph support automatically. However, the framework can only infer so much automatically so you may still want to override the default to get the best experience for your VoiceOver users.</p>

</div></div>

<div id="charts-6" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-5-43b1f8ec-9344-4e2f-9662-6ca7015f0c55" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">Custom Grids vs Swift Charts. Which one is better in this case? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-5-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">

<p><strong>Full Answer:</strong> To create a chart-like layout like this, do you recommend using the new Chart library or building it custom with Grids? Are there any performance benefits for one or the other approach?</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="500" height="348" src="https://swiftui-lab.com/wp-content/uploads/2022/06/chart-vs-grid.jpg" alt="" class="wp-image-3341" srcset="https://swiftui-lab.com/wp-content/uploads/2022/06/chart-vs-grid.jpg 500w, https://swiftui-lab.com/wp-content/uploads/2022/06/chart-vs-grid-300x209.jpg 300w" sizes="(max-width: 500px) 100vw, 500px" /></figure></div>


<p><strong>Answer:</strong> You can use Swift Charts. You will get the axes and color scale for free and also better performance (I think but would need to try).</p>

</div></div>

<div id="charts-7" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-6-43b1f8ec-9344-4e2f-9662-6ca7015f0c55" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">Are charts interactive? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-6-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">

<p><strong>Full Question:</strong> Concerning interactions: is there any&nbsp;<code>onTap</code> handler (available/planned) where we can react to a users tap and show (more) info of the mark below? (in particular not overlaying a GeometryReady and find out the position/mark on our own).</p>
<p><strong>Answer: </strong>There is a chart reader that you can use for interactions. Check out the “Swift Charts: Raise the Bar” talk.<strong><br></strong></p>

</div></div>

<div id="charts-8" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-7-43b1f8ec-9344-4e2f-9662-6ca7015f0c55" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">Is it be possible to add a gradient color filling the area underneath the line in a line chart? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-7-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">

<p>It is! I made one like this while putting the talk together, I can&#8217;t remember exactly how I did it. I may have used an&nbsp;<code>AreaMark</code> that fills the area under the line, and they also stack to make some really cool area charts.</p>
<p>When you&#8217;re making those kinds of charts, using <code>Color.clear</code> as a part of your gradient makes the Chart look a lot neater in light and dark appearances IMO.</p>

</div></div>

<div id="charts-9" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-8-43b1f8ec-9344-4e2f-9662-6ca7015f0c55" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">Can the new Charts API allow for scrolling? Similar to the health app&#8217;s charts. <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-8-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">

<p>Yes, charts should behave just like any other view in this regard. though you may have to set explicit frames on the chart to specify how big (wide? tall?) you want it to be.</p>

</div></div>

<div id="charts-10" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-9-43b1f8ec-9344-4e2f-9662-6ca7015f0c55" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">Could we utilize a scrollview and a chart to display a live chart? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-9-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">

<p><strong>Full Question:</strong> Forgive me if this question has the same answer as the scrolling chart question, but could we utilize a scrollview and a chart to display a live chart? So new data added is always visible to the user, instead of having to manually scroll it into view.</p>



<p><strong>Answer:</strong> Yes, this should work, but will extra work. You may have to observe the data and manually keep the scroll view positioned at the very end.</p>



<p>It sounds like you want to use to be able to scroll backwards through an otherwise-live feed, but if that isn&#8217;t the case, the data plotted in your chart could always be just the last 7 elements of an array or something conceptually similar.</p>



<p><strong>User Reply:</strong> Yeah, basically keep a horizontal scrollview fixed to the end and allow the user to scroll back to the left (start) of the view. Is there a modifier or additional context to manually position the location of the scrollbar in a scrollview?</p>



<p><strong>Answer:</strong> Have you seen&nbsp;<a href="https://developer.apple.com/documentation/swiftui/scrollviewreader" target="_blank" rel="noreferrer noopener">ScrollViewReader</a>s?</p>

</div></div>

<div id="charts-11" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-10-43b1f8ec-9344-4e2f-9662-6ca7015f0c55" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">How would one go about creating a Bubble Chart with Swift Charts? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-10-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">

<p>You can use the&nbsp;<code>symbolSize(by:)</code>&nbsp;modifier (<a href="https://developer.apple.com/documentation/charts/chartcontent/symbolsize(by:)" target="_blank" rel="noreferrer noopener">https://developer.apple.com/documentation/charts/chartcontent/symbolsize(by:)</a>) to size the points by data.</p>



<p>To make the points look like bubbles, you can use&nbsp;<code>.symbol(Circle().strokeBorder(lineWidth: 1))</code>&nbsp;so the symbols are drawn as stroked circles.</p>



<p>Here is an example:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">Chart(data) {
    PointMark(
        x: .value(&quot;Wing Length&quot;, $0.wingLength),
        y: .value(&quot;Wing Width&quot;, $0.wingWidth)
    )
    .symbolSize(by: .value(&quot;Weight&quot;, $0.weight))
    .symbol(Circle().strokeBorder(lineWidth: 1))
}</code></pre>

</div></div>

<div id="charts-12" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-11-43b1f8ec-9344-4e2f-9662-6ca7015f0c55" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">How to balance large data sets and performance <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-11-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">

<p><strong>Full Question:</strong> I currently have a large data set (over 10k datapoints) that I&#8217;m working with. Are there any tips on how to improve the graph performance when working with creating line graphs from data sets of that size or larger?</p>



<p>Context is cycling related data in a macOS app that is presenting 6 or more in a LazyVGrid. </p>



<p><strong>Engineer:</strong> We recommend simplifying the data before rendering it. For your example, you could simplify the line or summarize the data points in small intervals (let’s say you have data for a year, you summarize the data for a day). The added advantage is that you can summarize using mean, min and max and show the full range within the small interval.</p>



<p><strong>User #2</strong>: an Apple resource I found helpful with this kind of thing is using antialiasing filters to resample the data.&nbsp;<a href="https://developer.apple.com/documentation/accelerate/resampling_a_signal_with_decimation" target="_blank" rel="noreferrer noopener">https://developer.apple.com/documentation/accelerate/resampling_a_signal_with_decimation</a></p>



<p><strong>Engineer</strong>: Another useful resource are the number and date bins we released this year:&nbsp;<a href="https://developer.apple.com/documentation/charts/datebins" target="_blank" rel="noreferrer noopener">https://developer.apple.com/documentation/charts/datebins</a>&nbsp;and&nbsp;<a href="https://developer.apple.com/documentation/charts/numberbins" target="_blank" rel="noreferrer noopener">https://developer.apple.com/documentation/charts/numberbins</a>.</p>

</div></div>

<div id="charts-13" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-12-43b1f8ec-9344-4e2f-9662-6ca7015f0c55" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">Can Swift Charts be adapted for non-discrete data, like curves, etc? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-12-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">

<p>You can render curves by sampling data points along the function and then rendering that. You can add interpolation to make the line look smooth. Swift Charts cannot directly render functions.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<p><strong>SwiftUI-Lab Comment:</strong> To add a curved interpolation, use the <code>interpolationMethod()</code>:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">LineMark(x: .value(&quot;Label&quot;, dt.label), y: .value(&quot;Value&quot;, dt.value))
  .foregroundStyle(.yellow)
  .interpolationMethod(.catmullRom)
</code></pre>

</div></div>

<div id="charts-14" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-13-43b1f8ec-9344-4e2f-9662-6ca7015f0c55" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">Is there any sample code or documentation on how to display vector fields with Swift Charts? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-13-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">

<p><strong>Answer:</strong> Like this?</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="535" height="338" src="https://swiftui-lab.com/wp-content/uploads/2022/06/slack-vector-chart.jpg" alt="" class="wp-image-3456" srcset="https://swiftui-lab.com/wp-content/uploads/2022/06/slack-vector-chart.jpg 535w, https://swiftui-lab.com/wp-content/uploads/2022/06/slack-vector-chart-300x190.jpg 300w" sizes="(max-width: 535px) 100vw, 535px" /></figure></div>


<p>This screenshot is from the Hello Swift Charts talk. You can use a custom symbol (<code>Arrow</code>&nbsp;).</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">        Chart(data, id: \.x) {
            PointMark(x: .value(&quot;x&quot;, $0.x), y: .value(&quot;y&quot;, $0.y))
                .symbol(Arrow(angle: CGFloat(angle))
                .foregroundStyle(by: .value(&quot;angle&quot;, angle))
                .opacity(0.7)
        }

...

    struct Arrow: ChartSymbolShape {
        let angle: CGFloat
        let size: CGFloat

        func path(in rect: CGRect) -&gt; Path {
            let w = rect.width * size * 0.05 + 0.6
            var path = Path()
            path.move(to: CGPoint(x: 0, y: 1))
            path.addLine(to: CGPoint(x: -0.2, y: -0.5))
            path.addLine(to: CGPoint(x: 0.2, y: -0.5))
            path.closeSubpath()
            return path.applying(.init(rotationAngle: angle))
                .applying(.init(scaleX: w, y: w))
                .applying(.init(translationX: rect.midX, y: rect.midY))
        }

        var perceptualUnitRect: CGRect {
            return CGRect(x: 0, y: 0, width: 1, height: 1)
        }
    }</code></pre>



<p>This is not the complete code but should give you enough to make the example.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<p><strong>SwiftUI-Lab Comment</strong>: Remember to include <code>chartForegoundStyleScale()</code> to have multiple colors, otherwise the chart would look monochromatic:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">Chart { 
   ...
}.chartForegroundStyleScale(range: Gradient(colors: [.green, .yellow, .red]))</code></pre>



<p>In the example of the answer, the color is reflecting the angle of the vector, but since the angle is already shown by the symbol, you may want to use the color to depict the vector&#8217;s magnitude instead. You may do so, changing the <code>.foregroundStyle(by:)</code> call accordingly.</p>

</div></div>

<div id="charts-15" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-14-43b1f8ec-9344-4e2f-9662-6ca7015f0c55" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">How easy is it to support interactions like pan-to-move and pinch-to-zoom? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-14-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">

<p><strong>Answer:</strong> For pan-to-move, you can use a SwiftUI gesture in conjunction with&nbsp;<code>ChartProxy</code>. From the gesture, you get the the pan distance, and then you can use&nbsp;<code>ChartProxy</code>&nbsp;to figure out the pan distance in the data domain. Then, you can set the domain for the X scale with&nbsp;<code>.chartXScale(domain: start + offset...end + offset)</code>&nbsp;, where you can adjust the offset to pan the chart.</p>



<p><strong>User#2 Reply</strong>: Can a similar strategy be used for pinch-to-zoom?</p>



<p><strong>Answer:</strong> Yes, you can use a pinch to zoom gesture (or any other gesture) and hook up the events in a similar way.</p>



<p><strong>OP:</strong> Without location information (like the new <code>SpatialTapGesture</code>) it would be a bit unnatural as we wouldn&#8217;t know where to center the zoom, right? <code>MagnificationGesture</code> doesn&#8217;t provide location information, unless I&#8217;ve missed something.</p>



<p><strong>Answer:</strong> Feel free to file a feedback to SwiftUI for providing location information to gestures.</p>



<p>For now I think you can try implement a&nbsp;<code>UIView</code>&nbsp;with&nbsp;<code>UIPinchGestureRecognizer</code>&nbsp;and then wrap the view with&nbsp;<code>UIViewRepresentable</code>&nbsp;so it can be used in SwiftUI.</p>

</div></div>

<div id="charts-16" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-15-43b1f8ec-9344-4e2f-9662-6ca7015f0c55" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">Is there multiple axis support? Logarithmic axis support? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-15-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">

<p>A Swift Charts chart can only have one axis per x and y. Swift Charts supports logarithmic scales. For example, you can specify a log scale on x with <code>.chartXScale(type: .log)</code></p>



<p>You can however, have multiple sets of labels / ticks / grid lines by adding multiple&nbsp;<code>AxisMarks</code>. They will share the same scale, but might be useful for things like displaying both&nbsp;<code>C</code>&nbsp;and&nbsp;<code>F</code>&nbsp;on the same chart</p>

</div></div>

<div id="charts-17" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-16-43b1f8ec-9344-4e2f-9662-6ca7015f0c55" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">Is there a way to have multiple scales per chart? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-16-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">

<p><strong>Full Question:</strong> Is there a way to have multiple scales per chart? Let&#8217;s say I&#8217;m doing weather and I want one line with cloud cover (a 0-100% scale) and rainfall per hour (in, say, mm). The x axis on both of those would be time, but the y axes are different.</p>



<p><strong>Answer:</strong> An axis always has one scale. So x and y have one scale. You can have multiple axes to display e.g. temperature in C and F. If you want to show multiple measures, I would recommend multiple charts with aligned x-axes. You can even hide the axis of the upper chart to create a more compact view.</p>

</div></div>

<div id="charts-18" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-17-43b1f8ec-9344-4e2f-9662-6ca7015f0c55" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">Is there a method to modify or specify the label style of a chart? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-17-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">

<p><strong>Full Question:</strong> Is there a method to modify or specify the label style of a chart? For instance, my chart includes price averages for home heating oil. I want to clearly display on the label that the Double is in dollar format on the Y axis. </p>



<p>At this time, when I attempted a brief demo app it simply made the Y axis label as an Int. </p>



<p><strong>Answer:</strong> Yes, there are a few options here. You can use&nbsp;<code>AxisMarks(format: FormatStyle)</code>&nbsp;or&nbsp;<code>AxisValueLabel(format: FormatStyle)</code>&nbsp;or&nbsp;<code>AxisValueLabel { Text(\(..., format: ...)) }</code></p>



<p>If your units are more verbose, a design alternative is to clarify them in the title or headline of your chart, to save horizontal space on the y axis.</p>

</div></div>

<div id="charts-19" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-18-43b1f8ec-9344-4e2f-9662-6ca7015f0c55" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">Does Charts support polar coordinates?<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-18-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">

<p>It does not, but feedback is appreciated!!</p>

</div></div>

<div id="charts-20" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-19-43b1f8ec-9344-4e2f-9662-6ca7015f0c55" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">How can I add a text or SF Symbol at the top of a vertical BarMark? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-19-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">

<p>You can use the&nbsp;<code>annotation</code>&nbsp;modifier to add an annotation on top of the bar, where the content of the annotation is a SF Symbol image. Here&#8217;s an example:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">BarMark(...)
.annotation(position: .top) {
    Image(systemName: &quot;sfsymbol_name&quot;)
}</code></pre>



<p>Note that you can also use&nbsp;<code>Text</code>&nbsp;or other views as the content of the annotation.</p>

</div></div>

<div id="charts-21" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-20-43b1f8ec-9344-4e2f-9662-6ca7015f0c55" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">Can we transform a mark when the user presses and releases it? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-20-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">

<p><strong>Full Question:</strong> Can we transform a mark when the user presses and releases it, like we could do with a <code>ButtonStyle</code>. If not, we can probably use an overlay, but can we change the size of marks without changing their values (for example with a scale effect)?</p>



<p><strong>Answer:</strong> Currently we don&#8217;t have a&nbsp;<code>scaleEffect</code>&nbsp;modifier. You can use something like&nbsp;<code>width: .fixed(hovering ? 100 : 80)</code>&nbsp;in&nbsp;<code>BarMark</code>&nbsp;constructor. This will make the bar wider when&nbsp;<code>hovering</code>&nbsp;is true.</p>

</div></div>

<div id="charts-22" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-21-43b1f8ec-9344-4e2f-9662-6ca7015f0c55" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">What&#8217;s the best way to that we can use Swift Charts in a predominately UIKit app? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-21-43b1f8ec-9344-4e2f-9662-6ca7015f0c55">

<p>Sara has a session on this where she adds a Swift Chart to a UIKit app: <a href="https://developer.apple.com/videos/play/wwdc2022/10072/">Use SwiftUI wit</a><a href="https://developer.apple.com/videos/play/wwdc2022/10072/" target="_blank" rel="noreferrer noopener">h UIKit</a></p>

</div></div>
</div>


<h2 class="wp-block-heading">Controls</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-02c8e238-a5c0-44d1-a70a-1506aaa613a6" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="controls-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-02c8e238-a5c0-44d1-a70a-1506aaa613a6" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-02c8e238-a5c0-44d1-a70a-1506aaa613a6">Is it possible to provide custom form styles? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-02c8e238-a5c0-44d1-a70a-1506aaa613a6">

<p>There is a new&nbsp;<code>FormStyle</code>&nbsp;protocol you can conform to to create your own styles. Please file feedbacks if you find anything you’d like to do with it, but can’t.</p>

</div></div>

<div id="controls-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-02c8e238-a5c0-44d1-a70a-1506aaa613a6" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-02c8e238-a5c0-44d1-a70a-1506aaa613a6">Does the grouped formStyle work in Mac Catalyst SwiftUI? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-02c8e238-a5c0-44d1-a70a-1506aaa613a6">

<p>That style is available in Catalyst, like iOS — but the design hasn’t changed in Catalyst and looks the same as it does previously on iOS.</p>

</div></div>

<div id="controls-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-02c8e238-a5c0-44d1-a70a-1506aaa613a6" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-02c8e238-a5c0-44d1-a70a-1506aaa613a6">Tip: Accessibility Quick Actions on watchOS <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4a1.png" alt="💡" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-02c8e238-a5c0-44d1-a70a-1506aaa613a6">

<p>Accessibility Quick Actions on watchOS is&nbsp;super cool. Instead of having AssistiveTouch on all the time, you can have it on just to do quick things in your app with a gesture.</p>



<p>For example, you can enable QuickActions to answer a phone call with just one hand &#8212; clench your fist, and it performs the action.</p>



<p>Using .accessibilityQuickAction is an easy way to add that functionality to your app.</p>

</div></div>

<div id="controls-4" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-3-02c8e238-a5c0-44d1-a70a-1506aaa613a6" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-02c8e238-a5c0-44d1-a70a-1506aaa613a6">Tip: Avoiding tap gestures with button-like elements. <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4a1.png" alt="💡" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-3-02c8e238-a5c0-44d1-a70a-1506aaa613a6">

<p>Avoid using tap gestures for button-like things. Custom button styles will provide a better user experience, both in interaction handling and accessibility.</p>



<p>Same goes for toggles! If you’re using a tap gesture to mutate some boolean state back and forth, consider a toggle style!</p>

</div></div>

<div id="controls-5" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-4-02c8e238-a5c0-44d1-a70a-1506aaa613a6" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-02c8e238-a5c0-44d1-a70a-1506aaa613a6">Is there any difference in terms of performance about using Table instead of List on iOS? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-4-02c8e238-a5c0-44d1-a70a-1506aaa613a6">

<p>There shouldn’t be. Tables default to plain lists on iPhone.</p>

</div></div>

<div id="controls-6" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-5-02c8e238-a5c0-44d1-a70a-1506aaa613a6" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-02c8e238-a5c0-44d1-a70a-1506aaa613a6">Is it possible to set default focus on TextField when it appeared first time? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-5-02c8e238-a5c0-44d1-a70a-1506aaa613a6">

<p>Yeah, checkout the new&nbsp;<a href="https://developer.apple.com/documentation/swiftui/view/defaultfocus(_:_:priority:)" target="_blank" rel="noreferrer noopener">defaultFocus()</a>&nbsp;modifier! <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f604.png" alt="😄" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>

</div></div>

<div id="controls-7" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-6-02c8e238-a5c0-44d1-a70a-1506aaa613a6" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-02c8e238-a5c0-44d1-a70a-1506aaa613a6">What is the best way to resign (text field) focus from some distant view in the view hierarchy? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-6-02c8e238-a5c0-44d1-a70a-1506aaa613a6">

<p><strong>Full Question:</strong> What is the best way to resign (text field) focus from some distant view in the view hierarchy. <code>scrollDismissesKeyboard</code> is a great step in the direction I need, but I&#8217;d like to programmatically trigger that same behavior, for example, on some button tap.</p>



<p>For example, looking at ways to replace this code:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">UIApplication.shared
       .sendAction(#selector(UIResponder.resignFirstResponder),
                        to: nil, from: nil, for: nil)

// as an action to perform on a view:

extension View {
    func resignFocus() {
        UIApplication.shared.sendAction(...)
    }
}</code></pre>



<p><strong>Answer:</strong> </p>



<p>You can do this with the Focus State API: <a href="https://developer.apple.com/documentation/swiftui/focusstate" target="_blank" rel="noreferrer noopener">https://developer.apple.com/documentation/swiftui/focusstate</a></p>



<p>You want to bind a focus state property to your text field using <code>View.focused(_:equals:)</code>, and then set the binding&#8217;s value to <code>nil</code>/<code>false</code> from your button action as a way to programmatically resign focus and dismiss the keyboard when the bound text field has focus.</p>



<p>Making the action available to distant views is a matter of arranging your app&#8217;s data flow appropriately. There&#8217;s no single answer, but for example, you could declare your focus state property on your scene&#8217;s root view and pass a reset action down to any descendant views that need it. Or if the action is created by a leaf view, you can use the preferences system to make the action available to ancestors.</p>

</div></div>

<div id="controls-8" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-7-02c8e238-a5c0-44d1-a70a-1506aaa613a6" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-02c8e238-a5c0-44d1-a70a-1506aaa613a6">Can the new multiple date picker be used to choose date ranges? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-7-02c8e238-a5c0-44d1-a70a-1506aaa613a6">

<p><strong>Full Question:</strong> Hello! Talking about the Date Picker with multiple dates, can they allow to choose date ranges (like when you book a flight), so with just two dates possible and the highlight spanning over all of the days in between?</p>



<p><strong>Answer:</strong> Currently, <code>MultiDatePicker</code> only supports non-contiguous date selection. So range selection is not supported at the moment.</p>

</div></div>

<div id="controls-9" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-8-02c8e238-a5c0-44d1-a70a-1506aaa613a6" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-02c8e238-a5c0-44d1-a70a-1506aaa613a6">Is there a way to use a capacity `Gauge` outside of the lock screen? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-8-02c8e238-a5c0-44d1-a70a-1506aaa613a6">

<p>Yes!&nbsp;Gauge&nbsp;is&nbsp;usable&nbsp;outside&nbsp;of&nbsp;the&nbsp;LockScreen,&nbsp;and&nbsp;also&nbsp;has&nbsp;a&nbsp;whole&nbsp;host&nbsp;of&nbsp;new&nbsp;styles!</p>



<p>I&nbsp;would&nbsp;take&nbsp;a&nbsp;look&nbsp;at&nbsp;the&nbsp;<code>linearCapacity</code>,&nbsp;<code>accessoryLinearCapacity</code>,&nbsp;and&nbsp;<code>accessoryCircularCapacity</code>&nbsp;styles.&nbsp;Please&nbsp;note&nbsp;though&nbsp;that&nbsp;gauge&nbsp;styles&nbsp;prefixed&nbsp;with&nbsp;“accessory”&nbsp;are&nbsp;really&nbsp;intended&nbsp;to&nbsp;appear&nbsp;in&nbsp;contexts like&nbsp;the&nbsp;Lock Screen&nbsp;/&nbsp;widgets,&nbsp;or&nbsp;some&nbsp;similar&nbsp;design context&nbsp;within&nbsp;your&nbsp;app&nbsp;proper,&nbsp;so&nbsp;please&nbsp;give&nbsp;careful&nbsp;consideration&nbsp;to&nbsp;where&nbsp;you&nbsp;use&nbsp;them.</p>

</div></div>

<div id="controls-10" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-9-02c8e238-a5c0-44d1-a70a-1506aaa613a6" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-02c8e238-a5c0-44d1-a70a-1506aaa613a6">Advantages of .buttonStyle(MyCustomStyle()) vs. MyCustomButton(&#8230;) <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-9-02c8e238-a5c0-44d1-a70a-1506aaa613a6">

<p><strong>Full Question:</strong>Using <code>.buttonStyle(MyCustonStyle())</code> instead of <code>MyCustomButton(...)</code> is more SwiftUI-y. But why should I prefer one over the other (considering <code>MyCustomButton</code> uses <code>MyCustonStyle</code> under the hood)? </p>



<p><strong>Answer:</strong> We strongly recommend separating semantic controls and styles as it provides a lot more flexibility.<br>For example, using the button style modifier will apply to the whole hierarchy, so if you decide you want specific parts of your app to use a different button style, you can just apply it to that specific hierarchy without changing the control itself.</p>



<p>With this approach you also get multi-platform behaviors for free.</p>

</div></div>

<div id="controls-11" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-10-02c8e238-a5c0-44d1-a70a-1506aaa613a6" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-02c8e238-a5c0-44d1-a70a-1506aaa613a6">How can I control how the focus moves around the controls of my view when I press &#8220;tab&#8221;? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-10-02c8e238-a5c0-44d1-a70a-1506aaa613a6">

<p><strong>Full Question:</strong> SwiftUI macOS: How can I control how the focus moves around the controls of my view when I press &#8220;tab&#8221;? Currently it jumps from top left to right, then down. But I have two columns in my window and would prefer it go down first on the left side and then again up to the right. Is there some functionality to pre-define the order of the controls?</p>



<p><strong>Answer:</strong> You can use&nbsp;<code>View.focusSection()</code>&nbsp;for this, which is newly available on macOS 13.0. Marking a view as a focus section causes the Tab loop to cycle through all of the section&#8217;s focusable content as a group before moving on to the next thing in layout order. So, something like this should get you the sort of column-wise navigation you&#8217;re after:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    var body: some View {
        HStack {
            VStack {
                FocusableView()
                FocusableView()
            }
            .focusSection()

            VStack {
                FocusableView()
                FocusableView()
            }
            .focusSection()
        }
    }
}</code></pre>



<p>Also, a plug for my colleague Tanu&#8217;s WWDC21 talk: <a href="https://developer.apple.com/videos/play/wwdc2021/10023/" target="_blank" rel="noreferrer noopener">Direct and reflect focus in SwiftUI</a></p>

</div></div>

<div id="controls-12" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-11-02c8e238-a5c0-44d1-a70a-1506aaa613a6" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-02c8e238-a5c0-44d1-a70a-1506aaa613a6">Is it possible to make Form controls look more native on a macOS app made with Catalyst? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-11-02c8e238-a5c0-44d1-a70a-1506aaa613a6">

<p><strong>Full Question:</strong> Hi, is there any recommended way of making controls inside a SwiftUI’s <code>Form</code> look more native on macOS in an app made with Catalyst? Would I have to have an AppKit bundle/plugin that renders those SwiftUI views?</p>



<p><strong>Answer:</strong> To enable macOS-native UI in your Catalyst app, go to your target&#8217;s settings: General → Deployment Info → Mac Catalyst Interface, and switch from &#8220;Scaled to Match iPad&#8221; to &#8220;Optimize for Mac&#8221;.</p>



<p>Controls in SwiftUI will automatically adapt to be more Mac-like in that mode. Also check out the new Form styles, to have the controls arranged in a traditional Mac columnar layout.</p>



<p><strong>User Reply:</strong> From what I understand, this will put Mac controls into the iOS style Form &#8211; it will not enable the macOS style Form. Unless this is changing this year, there’s no way to get native macOS SwiftUI in Catalyst.</p>



<p><strong>Answer:</strong> This year, there is the new&nbsp;<code>FormStyle</code>&nbsp;support, with&nbsp;<code>FormStyle.columns</code>&nbsp;available on all platforms, including Catalyst. That creates a Form layout like the default on native macOS with trailing aligned labels next to the leading aligned controls</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">Form {
    Picker(&quot;Notify Me About:&quot;, selection: $notifyMeAbout) {
        Text(&quot;Direct Messages&quot;).tag(NotifyMeAboutType.directMessages)
        Text(&quot;Mentions&quot;).tag(NotifyMeAboutType.mentions)
        Text(&quot;Anything&quot;).tag(NotifyMeAboutType.anything)
    }
    Toggle(&quot;Play notification sounds&quot;, isOn: $playNotificationSounds)
    Toggle(&quot;Send read receipts&quot;, isOn: $sendReadReceipts)

    Picker(&quot;Profile Image Size:&quot;, selection: $profileImageSize) {
        Text(&quot;Large&quot;).tag(ProfileImageSize.large)
        Text(&quot;Medium&quot;).tag(ProfileImageSize.medium)
        Text(&quot;Small&quot;).tag(ProfileImageSize.small)
    }
    .pickerStyle(.inline)
}
.formStyle(.columns)</code></pre>



<p><a href="https://developer.apple.com/documentation/swiftui/formstyle/columns" target="_blank" rel="noreferrer noopener">https://developer.apple.com/documentation/swiftui/formstyle/columns</a></p>

</div></div>
</div>


<h2 class="wp-block-heading">Data Modeling</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-fe9d0cb8-8a65-4092-b304-ef9db230bb7c" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="data-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-fe9d0cb8-8a65-4092-b304-ef9db230bb7c" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">How to implement invalidation when conforming to DynamicProperty? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">

<p><strong>Full Question:</strong> What is the correct way to implement invalidation when conforming some type to <code>DynamicProperty</code>? Should hosting another builtin <code>DynamicProperty</code> enough? Are these wrapped properties like <code>@State</code> or <code>@ObservedObject</code> guaranteed to work as expected in <code>DynamicProperty</code>?</p>
<p><strong>Answer:</strong> Dynamic properties are fully composable, so any other dynamic properties you use inside of their declarations will be picked up on and invalidated properly. That means supporting invalidation as you would expect is often just a matter of utilizing the support already built into other dynamic properties, like&nbsp;<code>@State</code></p>

</div></div>

<div id="data-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-fe9d0cb8-8a65-4092-b304-ef9db230bb7c" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">Is it possible to prevent DynamicProperty invalidation? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">

<p><strong>Full Question:</strong> Is there a better way to prevent <code>DynamicProperty</code> from invalidating a view’s body based on different criteria? I am currently doing this with a private <code>ObservableObject</code> backing that manages its <code>objectWillSend</code> calls, which seems to works well but also feels like I am doing some backflips (the context is being able to scope in on specific changes on an <code>ObservableObject</code> model for performance reasons).</p>



<p><strong>Answer</strong>: There is no direct way to prevent DynamicProperty from updating.</p>



<p>What you are doing is a way to do it. If the purpose is to manage&nbsp;<code>ObservableObject</code>&nbsp;invalidation I would suggest consider refactoring your model into multiple model.</p>



<p>Keep in mind that you can also implement your own <code>objectWillChange</code> Publisher. </p>

</div></div>

<div id="data-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-fe9d0cb8-8a65-4092-b304-ef9db230bb7c" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">What is the use of DynamicProperty&#8217;s update method?  <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">

<p><strong>Full Question:</strong> What&#8217;s the intended use for <code>DynamicProperty</code>&#8216;s <code>update()</code> method? It seems most of the time the <code>DynamicProperty</code>&#8216;s members are <code>@State</code>ful objects managing their own state and using <code>update()</code> with them requires a dispatch async (to the next runloop cycle).</p>



<p><strong>Answer:</strong> You’re definitely correct that the state management dynamic properties do is usually handled using their own sub-dynamic properties, and custom logic! The update method is called directly before the corresponding view’s&nbsp;<code>body</code>&nbsp;is called, and is more a place for any logic that needs to happen before body runs to occur.</p>



<p><strong>User Reply:</strong> So, for things that I assume are not stateful in nature, just derivates of the state?</p>



<p><strong>Answer:</strong> That tends to be the case. That said, there may be some examples of property wrappers that use information about when the view is rendered to drive stateful systems. When debugging, I’ll sometimes use a <code>DynamicProperty</code> with an Int <code>wrappedValue</code> that increments whenever the surrounding view’s body is drawn, for example.</p>

</div></div>

<div id="data-4" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-3-fe9d0cb8-8a65-4092-b304-ef9db230bb7c" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">Extending @State and @Environment <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-3-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">

<p><strong>Full Question:</strong> Using <code>@State</code> and <code>@Environment</code> works e.g. in <code>ButtonStyle</code> even though it’s not a <code>View</code>. I’m looking to implement a similar API technique in my framework to let users style my custom components. However, I can’t get <code>@State</code> and <code>@Environment</code> to automatically work in my custom style structs. What is the recommended way to replicate this behavior so that I can provide such natural-feeling styling API for my custom framework components?</p>



<p><strong>Apple Engineer:</strong> We don’t currently support extending our property wrapper APIs like&nbsp;<code>@State</code>&nbsp;and&nbsp;<code>@Environment</code>&nbsp;outside of how they are used in SwiftUI.</p>



<p><strong>User #1:</strong> I have a child view which has a @StateObject var MyModel but the initialiser to MyModel accepts a parameter passed from the parent view. How do I create MyModel in the initialiser of the child view or is there an alternate way?</p>



<p><strong>User #2:</strong> My memory on this is poor but does SwiftUI synthetize an init to pass in stateObject params from the parent?</p>



<p><strong>User #3:</strong> To the original poster: not an Apple engineer, but I’ve build something similar in the past by making the&nbsp;<code>struct</code>&nbsp;conform to&nbsp;<code>DynamicProperty</code>&nbsp;. SwiftUI will pass through all&nbsp;<code>DynamicProperty</code>&nbsp;members recursively and inject dependencies (i.e.&nbsp;<code>@Environment</code>&nbsp; and&nbsp;<code>@State</code>&nbsp;) before calling&nbsp;<code>body</code>&nbsp;.</p>



<p><strong>OP:</strong> I’m working on a closed-source framework (PSPDFKit) that aims to provide SwiftUI (and UIKit) APIs that feel like first-class citizens, and the “view style” technique that SwiftUI utilizes would be&nbsp;<em>extremely</em>&nbsp;valuable for me to let the users of our framework customize specific parts of components, much like e.g. using&nbsp;<code>ToogleStyle</code>. </p>



<p><strong>Apple Engineer</strong>: @User#3&nbsp;note that custom types conforming to&nbsp;<code>DynamicProperty</code>&nbsp;will only work if values of those types are stored within views or other SwiftUI types that generally support dynamic properties like&nbsp;<code>@State</code>&nbsp;and&nbsp;<code>@Environment</code>.</p>



<p><strong>User #3:</strong> Ah, yes of course, I assumed that was given, outside of it would make little sense. Sorry for bringing a bit of confusion to the table!&nbsp;<img decoding="async" src="https://a.slack-edge.com/production-standard-emoji-assets/13.0/apple-medium/1f605.png" alt=":sweat_smile:"></p>



<p><strong>User #4:</strong> @OP, I&#8217;ve done something similar for other closed source things. The technique I am using revolves around creating a protocol/configuration (similar to what you&#8217;d find in&nbsp;<code>ButtonStyle</code>&nbsp;definition) and then injecting it into the&nbsp;<code>EnvironmentValues</code>&nbsp;via a custom value type conforming to&nbsp;<code>EnvironmentKey</code>. Then the component (e.g.&nbsp;<code>Button</code>&nbsp;for the purposes of this description) would internally grab the environment set (via&nbsp;<code>@Environment(\.buttonStyle)private var buttonStyle</code>)</p>



<p>You&#8217;d then just pass the configuration you build into the&nbsp;<code>make*</code>&nbsp;functions you create as needed.</p>



<p>Hope that makes sense. I&#8217;ve really enjoyed this technique in the components I&#8217;ve built.</p>



<p><strong>User #1:</strong> Since&nbsp;<code>StateObject(wrappedValue:)</code>&nbsp; is not supposed to be called directly, the workaround i have found is every time my&nbsp;<code>StateObject</code>&nbsp;tends to depend on some parameter from parent view, I have used an&nbsp;<code>ObservedObject</code>&nbsp;(instead of a&nbsp;<code>StateObject</code>) and passed the&nbsp;<code>ObservedObject</code>&nbsp;from the parent view&nbsp;(edited)&nbsp;</p>



<p><strong>Apple Engineer:</strong> @User#4&#8217;s technique is an effective way to implement a similar pattern.</p>



<p><strong>OP:</strong> @User3 I got more or less as far as you described but I had troubles nesting&nbsp;<code>DynamicProperty</code>&nbsp;and controlling&nbsp;<em>where exactly</em>&nbsp;do they inherit the Environment from. @User4, thanks for sharing this! I have a similar infrastructure in place but my question was about using dynamic properties like&nbsp;<code>@State</code>&nbsp;directly in the structs conforming to&nbsp;<code>MyCustomStyle</code>&nbsp;protocol.</p>



<p><strong>User #4:</strong> and to dive a little more down for the State/Environment part of it, I would just pass those through the configuration struct if a style would need it (do this for passing things like isEnabled down).</p>



<p>similar to how&nbsp;<code>ButtonStyleConfiguration</code>&nbsp;has&nbsp;<code>isPressed</code>&nbsp;as a value.</p>



<p><strong>OP:</strong> Yes, this would come in the Configuration parameter of a <code>makeBody(configuration:) -&gt; some View</code> function.</p>

</div></div>

<div id="data-5" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-4-fe9d0cb8-8a65-4092-b304-ef9db230bb7c" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">What are best practices to avoid state changes affecting unnecessary views?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-4-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">

<p><strong>Full Question:</strong> FWIK it&#8217;s a good practice to have state changes the deeper in the view hierarchy as you can get, in order to avoid redundant redraws. Are there any best practices to achieve that besides breaking views down to tiny elements and composing them together?</p>



<p><strong>Engineer #1:</strong> The right way to structure your state varies by app. I’m interested in understanding your specific use case. Are you asking this when using&nbsp;<code>@State</code>&nbsp;or&nbsp;<code>ObservableObject</code>?</p>



<p><strong>OP:</strong> Both actually. My use case involves a ViewModel which has <code>@Published</code> variables, together with diff element which is kind of a half drawer that involves <code>@State</code> for it&#8217;s open/closed state.</p>



<p><strong>Engineer #1</strong>: For State, I would generally recommend defining it at the level where you are going to use it.</p>



<p>For your ViewModel it could be useful to break your model into multiple&nbsp;<code>ObservableObject</code>&nbsp;that are specific to a specific functionality (like a cell, or a single screen).</p>



<p>But I would avoid prematurely breaking you model into very small pieces.</p>



<p>SwiftUI does diff your view and will only re-render if it detects that something has changed.</p>



<p><strong>Engineer #2:</strong> Everything suggested in the <a href="https://developer.apple.com/videos/play/wwdc2021/10022/" target="_blank" rel="noreferrer noopener">Demystify SwiftUI Session</a> from a year or two back is definitely useful.</p>



<p>Keeping&nbsp;<code>Identifier</code>s separate from values is recommended generally (but not a hard and fast rule), especially in Navigation APIs.</p>

</div></div>

<div id="data-6" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-5-fe9d0cb8-8a65-4092-b304-ef9db230bb7c" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">Why would anyone use observable object instead of state object?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-5-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">

<p>You might want to use&nbsp;<code>@ObservedObject</code>&nbsp;if the lifecycle of your model is not owned by your view.</p>



<p>An example is if you are using&nbsp;<code>UIHostingConfiguration</code>&nbsp;and you have your model owned by UIKit in a&nbsp;<code>UIViewController</code>&nbsp;and just passed to a SwiftUI cell.</p>



<p>Also, in general you want to use&nbsp;<code>@StateObject</code>&nbsp;in a parent view, and if you pass the same&nbsp;<code>ObservableObject</code>&nbsp;instance to child views you can use just&nbsp;<code>@ObservedObject</code>.</p>

</div></div>

<div id="data-7" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-6-fe9d0cb8-8a65-4092-b304-ef9db230bb7c" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">Are there any changes to Core Data/SwiftUI integration this year? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-6-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">

<p><strong>Full Question:</strong> Curious if there are any changes to Core Data/SwiftUI integration this year. Using ManagedObjects with SwiftUI seems to results in View that know a lot about Models or Models that have a mix of business logic and view logic which can be confusing. Any suggested best practices for using Managed Objects with SwiftUI? I tried writing value type wrappers to do MVVM but that breaks down with relationships.</p>



<p><strong>Answer:</strong> Great question. There were no additions to SwiftUI in regards to Core Data. However, we do have our CoreData <a href="https://developer.apple.com/documentation/coredata/loading_and_displaying_a_large_data_feed" target="_blank" rel="noreferrer noopener">Earthquakes sample</a> app and <a href="https://github.com/orgs/apple/repositories?q=sample-cloudkit&amp;type=all&amp;language=&amp;sort=" target="_blank" rel="noreferrer noopener">CloudKit sample apps</a> all showing best practices with SwiftUI and background contexts.</p>



<p>The former performs batch inserts and merges changes on a background thread, then publishes the changes to SwiftUI on the main thread.</p>



<p>This notion of edit propagation is described in the&nbsp;<a href="https://developer.apple.com/tutorials/swiftui/working-with-ui-controls" target="_blank" rel="noreferrer noopener">Landmarks app</a>&nbsp;in the SwiftUI Tutorials</p>

</div></div>

<div id="data-8" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-7-fe9d0cb8-8a65-4092-b304-ef9db230bb7c" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">SceneStorage not working on simulator <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-7-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">

<p><strong>Full Question:</strong> I watched Curt’s Cooking/Recipe section and am trying to understand state restoration. I thought Curt said adding <code>SceneStorage</code> and the <code>Task</code> to check if <code>navigationDetail</code> was nil would do it but it doesn’t seem to work. Do you still need to use the <code>onContinueUserActivity</code> and then have each view in the stack hierarchy have a <code>.userActivity</code> to create/describe a <code>NSUserActivity</code> for that view?</p>



<p><strong>Answer:</strong> What I shared in the talk and in the Copy Code associated with it should work. Or check out the sample project here: <a href="https://developer.apple.com/documentation/swiftui/bringing_robust_navigation_structure_to_your_swiftui_app" target="_blank" rel="noreferrer noopener">https://developer.apple.com/documentation/swiftui/bringing_robust_navigation_structure_to_your_swiftui_app</a></p>



<p>You shouldn’t need to use user activity directly at all for this.</p>



<p><strong>User Reply:</strong> Hmm. I tried running it in simulator. I select Apple Pie, select Fruit Pie Filling, press Shift-Cmd-H. Press the stop button in Xcode, and then relaunch the app and it starts at the initial Categories screen. Am I not testing it correctly?</p>



<p><strong>Answer:</strong> Ah! Yeah, Xcode kills background storage unless you hold it “just right”. The pattern when working with Xcode, is to (1) background the app in the simulator or on device, (2) wait 10 seconds for the system to do its backgrounding work, (3) kill the app using the Stop button in Xcode. Then when you run the app again, it should use the saved value.</p>

</div></div>

<div id="data-9" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-8-fe9d0cb8-8a65-4092-b304-ef9db230bb7c" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">How does objectWillChange coordinates with view updates? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-8-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">

<p><strong>Full Question:</strong> My question is about some code in the SwiftUI Cookbook for Navigation session. Around 23 minutes in, Curt uses the <code>task</code> modifier to run an async <code>for</code> loop over the model&#8217;s <code>objectWillChange</code> publisher. In the loop, he then accesses an <code>@Published</code> property of the model. But a <code>@Published</code> property fires the <code>objectWillChange</code> property <em>before</em> it updates its <code>wrappedValue</code>. Doesn&#8217;t that mean that when the code accesses <code>navModel.jsonData</code>, it will get the out-of-date model values? Or is there some async magic that guarantees the loop body will not run until later after the <code>objectWillChange</code> publisher has finished publishing and the <code>@Published</code> property has updated its <code>wrappedValue</code>?</p>



<p><strong>Answer:</strong> Great question! Task schedules its body on the main actor, which is also where the view update happens. So <code>objectWillChange</code> enqueues the body of the for loop, but it’s enqueued behind the update of the data model.</p>

</div></div>

<div id="data-10" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-9-fe9d0cb8-8a65-4092-b304-ef9db230bb7c" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">is there any way to get my offscreen nested StateObjects to not be deallocated when scrolled offscreen within a Lazy*Stack? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-9-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">

<p><strong>Full Question:</strong> Hi there, is there any way to get my offscreen nested StateObjects to not be deallocated when scrolled offscreen within a Lazy<em>Stack? The only solution I&#8217;ve found is to &#8220;hoist&#8221; them to the top level of the Lazy</em>Stack, e.g. within the Content of a ForEach, but that feels kinda clunky to have to do in every scenario—wondering if there&#8217;s another option.</p>



<p><strong>Answer:</strong> I think &#8220;hoisting&#8221; your state into an ancestor is your best bet here. As an aside, <code>StateObject</code> is more commonly used with model objects and you generally don&#8217;t want to tie your model object&#8217;s lifecycle to the view.</p>



<p>In the case of a model object it might make sense for an ancestor model object to be maintaining references to these children model objects.</p>

</div></div>

<div id="data-11" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-10-fe9d0cb8-8a65-4092-b304-ef9db230bb7c" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">Clearing up controversy on ObservedObject(wrappedValue:) <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-10-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">

<p><strong>Full Question:</strong> There has been a lot of controversy regarding the ObservedObject(wrappedValue: ) initializer. Is it safe (and encouraged) to use it, or do we have an alternative for it this year?</p>



<p><strong>Engineer:</strong> This initializer is fine to use! In fact, the&nbsp;<code>ObservedObject(wrappedValue:)</code>&nbsp;initializer is invoked every time you construct an&nbsp;<code>ObservedObject</code>&nbsp;, even if you don’t explicitly write it yourself. When you write:&nbsp;<code>@ObservedObject var myObservedObject = myModel</code>, The Swift compiler converts that standard property wrapper syntax to a call that looks something like:&nbsp;<code>var _myObservedObject = ObservedObject(wrappedValue: myModel)</code>.</p>



<p>The controversy I think you’re referring to is using that initializer explicitly in the initializer for one of your views. Typically, we see people doing this to allow observed objects to be instantiated with specific information. That is also something which we think is fine to do. We recognize that the ergonomics of that case is not ideal (since you have to access the de-sugared property wrapped (in the example I gave,&nbsp;<code>_myObservedObject</code>), but it’s not at all harmful.</p>



<p><strong>User #2 Reply:</strong> What about the State initializer?</p>



<p><strong>Engineer:</strong> The state initializer worries me a bit more. Not because it’s dangerous — it’s totally fine to use it yourself (as I mentioned, the normal syntax is just sugar for the fully spelled out case) — but because I can’t think of as many cases where you need that syntax for @State that aren’t dangerous.</p>



<p>Remember that&nbsp;<code>@State</code>&nbsp;is initialized once per lifetime of the whole view,&nbsp;<strong>not</strong>&nbsp;once per time a view’s initializer is called The views representation will be recreated on demand. That means that if you’re re-initializing the state every time the views init is called, you’re going to be clobbering your own state.</p>



<p>So that’s fine to do, but make sure that you’re only using it to set the initial value of a state, and that you’re not resetting your state depending on some initializer value.</p>



<p><strong>User #3:</strong> I believe same applies for @Binding and co. too?</p>



<p><strong>Engineer:</strong> Yup!</p>



<p><strong>User #3:</strong> But for <code>@Binding</code> is it still harmful? Because source of truth is already on a parent view or somewhere up there?</p>



<p><strong>Engineer:</strong> Yeah, binding is also one of the cases that would sound alarm bells for me <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/26a0.png" alt="⚠" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>



<p><strong>User #4:</strong> I think the confusion comes from this comment:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">/// Don&#039;t call this initializer directly. Instead, declare a property
/// with the ``State`` attribute, and provide an initial value:</code></pre>



<p><strong>Engineer:</strong> As a final note: regarding the “don’t call this initializer directly,” that’s mostly because as I mentioned, the cases where you “need” the underlying initializer (for&nbsp;<code>@State</code>&nbsp;and&nbsp;<code>@Binding</code>&nbsp;especially) are few and far between. Most of the time, you’d want to be using the standard property wrapper syntax, so we want to make sure people reading the docs look there first.</p>

</div></div>

<div id="data-12" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-11-fe9d0cb8-8a65-4092-b304-ef9db230bb7c" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">Is using @EnvironmentObject for dependency injection of entities not directly related to the view state, considered bad practice? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-11-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">

<p><strong>Full Question:</strong> Is using <code>@EnvironmentObject</code> for dependency injection of entities not directly related to the view state, like a Service (to fetch values from network) or a telemetry logger, considered bad practice? Thinking on a MVVM architecture context.</p>



<p><strong>Answer:</strong> I wouldn&#8217;t consider it a bad practice. Be mindful when using plain&nbsp;<code>@Environment</code>, that if you&#8217;re passing a struct, any change in value will invalidate any views reading that value from the environment. But if you&#8217;re using&nbsp;<code>@EnvironmentObject</code>&nbsp;with a class that&#8217;s effectively immutable that shouldn&#8217;t be a problem.</p>

</div></div>

<div id="data-13" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-12-fe9d0cb8-8a65-4092-b304-ef9db230bb7c" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">With the new &#8220;any&#8221; keyboard, will be still need AnyView? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-12-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">

<p><strong>Full Question:</strong> with the new <code>any</code> keyword, will we still need <code>AnyView</code> to type erase views, or can we declare a collection with <code>any View</code> now? will this also have the same performance implications of using type erased views?</p>



<p><strong>Answer:</strong> Ideally you should not use&nbsp;&nbsp;<code>AnyView</code>&nbsp;and over the year&nbsp;<code>ViewBuilder</code>&nbsp;has improved enough that you should be able to eliminate most, if not all, its usage.</p>



<p>That said, yes you will still need to use&nbsp;<code>AnyView</code>&nbsp;because you need to actually instantiate that type, and not just use&nbsp;<code>View</code>&nbsp;as a type.&nbsp;<code>any View</code>&nbsp;is just defining an (existential container) box.</p>



<p><strong>User Reply:</strong> is it possible to use view builders as function params or property types without Generics? We are using <code>AnyView</code> to present content. there are different types of content each represented by an <code>enum</code> with associated value. This forced us to use <code>AnyView</code> to have concrete types. What would be your suggestion to move away from <code>AnyView</code> in this use case?</p>



<p><strong>Answer:</strong> If you have finite number of views you are displaying described by an enum could you switch over that enum in&nbsp;<code>body</code>&nbsp;of a view?&nbsp;<code>ViewBuilder</code>&nbsp;does support&nbsp;<code>switch</code>&nbsp;statements.</p>



<p>It really depends on your use case. But most of the time, if you&#8217;re in the situation where you think you need&nbsp;<code>[AnyView]</code>&nbsp;or&nbsp;<code>[any View]</code>, what you should likely do is invert the view dependency flow and have&nbsp;<code>[AnyDataModel</code>&nbsp;or&nbsp;<code>[any DataModel]</code>&nbsp; instead, then create your views based on the type of data provided at runtime.</p>



<p><strong>User #2 Reply:</strong> I have similar use case. Sometimes I would like to not couple the view which other views it present, but instead use other&nbsp;<em>Flow/Factory</em>&nbsp;logic that shows whats needed depending on the business logic. It forces me to use&nbsp;<code>AnyView</code>&nbsp;. E.g.:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct MainView: View {
    @ObservedObject var viewModel: MainViewModel
    var channelsViewFactory: (Int?) -&gt; AnyView

    var body: some View {
        Text(&quot;ABC&quot;)
        channelsViewFactory(viewModel.selectedId)
    }
}
...
extension AppDependencies: MainViewFactory {
    func makeMainView() -&gt; MainView {
        return MainView(
            channelsViewFactory: { id in
              if loggedIn {
                self.makeChannelsView(for: id)
              } else {
                self.makeSignInView()
              }
         }
     }
}</code></pre>



<p><strong>Answer:</strong> In this case, you could introduce generics into MainView (e.g., MainView: View) and then create a container view above MainView to encapsulate the generic constraint(s). </p>

</div></div>

<div id="data-14" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-13-fe9d0cb8-8a65-4092-b304-ef9db230bb7c" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">What&#8217;s the recommended way to repeatedly fetch data in a SwiftUI app? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-13-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">

<p><strong>Full Question:</strong> Hi there! What&#8217;s the recommended way to repeatedly fetch data in a SwiftUI app, (so that we don&#8217;t push updates from a different thread)?</p>



<p><strong>Answer:</strong> In general, I would suggest to factor out the logic that fetches the data into its own type. You always want to execute this kind of side effect not on the main thread and the hop back onto the main thread to set the data on the model.</p>



<p>Swift’s actors are a great tool to encapsulate this kind of logic. So for example you could the model that is offered to the view be an&nbsp;<code>ObservableObject</code>&nbsp;that is bound to the main actor, and have a separate actor (hence running on a separate thread) that takes care of the fetching and report back new data to your observable object.</p>

</div></div>

<div id="data-15" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-14-fe9d0cb8-8a65-4092-b304-ef9db230bb7c" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">How can I tune performance, if my whole app state is in the state object of my app struct? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-14-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">

<p><strong>Full Question:</strong> Assume that I keep the whole app state in the state object in my app struct? This way I can make sure that all the views are in a consistent state and have a single source of truth. How can I tune performance because in this case, SwiftUI starts diffing the whole app view hierarchy on every single change of the app state?</p>



<p><strong>Answer:</strong> You’re completely right that with a single observable object, you’ll end up invalidating large parts of your view hierarchy whenever a change occurs. Invalidating even large amounts of the SwiftUI view hierarchy should be an inexpensive operation, as view descriptions are rather lightweight, but if you are running into performance issues here, there are a few things you can do to help. The first recommendation I have is to split out some of the values which are only relevant to a certain subset of views into their own observable object. This is likely going to get you the most performance win of any of these suggestions, but if you don’t want to make that architectural change, there are still some things you can do:</p>



<ul><li>Avoid marking non-published values of your&nbsp;<code>ObservableObject</code>&nbsp;published</li><li>(Assuming you’re using&nbsp;<code>EnvironmentObject</code>&nbsp;to make sure your single&nbsp;<code>StateObject</code>&nbsp;can be accessed throughout your view hierarchy) ensuring you only declare dependencies on the&nbsp;<code>EnvironmentObject</code>&nbsp;in places it’s needed</li><li>And if you still need to optimize further, writing a custom&nbsp;<code>objectWillChange</code>&nbsp;implementation for your&nbsp;<code>StateObject</code>s which only does invalidation when changes that should actually affect the UI occur (in cases, for example, where published values have multiple different representations that should display in the same manner).</li></ul>

</div></div>

<div id="data-16" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-15-fe9d0cb8-8a65-4092-b304-ef9db230bb7c" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">Do ids in a ForEach just need to be unique within that ForEach or globally? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-15-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">

<p><strong>Full Question:</strong> Do ids in a <code>ForEach</code> just need to be unique within that <code>ForEach</code> or globally? For instance using the new Charts, all my data is keyed by date and there are several places where I have adjacent ForEaches that include mostly the same dates.</p>



<p><strong>Answer:</strong> The IDs must be unique within the container, so for example if you have a List with two ForEach&#8217;s inside it, they must generate unique IDs within that List.&nbsp;(edited)&nbsp;</p>

</div></div>

<div id="data-17" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-16-fe9d0cb8-8a65-4092-b304-ef9db230bb7c" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">Making sense of _printChanges() output <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-16-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">

<p><strong>Full Question:</strong> When using Self._printChanges() in the body of Views, what should we pay close attention to? Is @Self printed often harmful? What are the numbers @44 we see when using FetchRequest in the View.</p>



<p><strong>Answer:</strong> <code>@Self</code>&nbsp;self is not inherently harmful. The purpose of&nbsp;<code>Self._printChanges()</code>&nbsp;is not to indicate that something is wrong but rather as a tool to match your expectation with what is happening at runtime.What you want to be on the look out for is that you don’t do unnecessary invalidation which might cause performance issue.If you see&nbsp;<code>@</code>&nbsp;followed by any number it means that we couldn’t find the field (property) name, so printed the byte offset of the swift view struct field instead.</p>

</div></div>

<div id="data-18" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-17-fe9d0cb8-8a65-4092-b304-ef9db230bb7c" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">Concurrency and SwiftUI <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-17-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">

<p><strong>Full Question:</strong> When it comes to concurrency and SwiftUI, how are you managing creation/injections of your actor objects/business layer so that your views have access to them or do you have any specific recommendations based on the newer Swift concurrency model. I&#8217;ve been reviewing through some of the 2021 videos in conjunction with the new discussions this year and I tend to see <code>.shared</code> in the sample code, which would mean a singleton which I&#8217;d frankly rather avoid. We been injecting interactors through the @Environment or @Environment object but this has issues because using @StateObjects we don&#8217;t necessarily have access to the @Environment object during init when we&#8217;ve been trying to binding subscriptions to our @Published vars. If we use .task {} would we have access to @Enviroment at the time the task closure is run? In this way we could probably set access to our common actors through the @Environment or @EnvironmentObject and then set up flows that just bind to @State via an async Sequence. Is there a way to know when @Environment is actual set for a view so we can respond to in within a @StateObject to set up subscription bindings either through publishers or async sequences?</p>



<p><strong>Answer:</strong> For pretty much any property wrapper in SwiftUI its value become available just before the body of the view is called. If you have ever implemented a custom&nbsp;<code>DynamicProperty</code>&nbsp;that is exactly when&nbsp;<code>update()</code>&nbsp;is called.</p>



<p>Yes, by the time the&nbsp;<code>.task</code>&nbsp;closure run your environment is available and you can capture its value.</p>



<p>I just want to remind you that you should not conform an actor to&nbsp;<code>ObservableObject</code>&nbsp;because the expectation is that all the&nbsp;<code>ObservableObject</code>&nbsp;instance are isolated to the main thread.</p>



<p><strong>User Reply:</strong> Yah, of course the ObservableObject would not be an actor. The actor is that business layer object that we need to call in to perform operations and that’s what I’m trying to figure out how the best way for a view to reach out to them would be. I don’t like making actors singletons as I’d rather have them injected or passed to the View so we can have a test version, etc.</p>



<p>I’ve found that because there is some unknown amount of time between init() of a view or especially the init() of the @StateObject of view and when the environment is set that it’s hard to know when to run configuration code related to this injection.</p>



<p><strong>Answer:</strong> It’s only safe to access any of the property wrapper from within body.</p>

</div></div>

<div id="data-19" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-18-fe9d0cb8-8a65-4092-b304-ef9db230bb7c" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">Is it bad to break down views? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-18-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">

<p><strong>Full Question:</strong> For complex views, I often define subviews inside computed vars to keep my <code>body</code> block more readable. Especially for components that don&#8217;t need to be reused elsewhere in the app, so they don&#8217;t seem to warrant a reusable struct. Example:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct MyView: View {
    var body: some View {
        someText
        someButton
    }
    private var someText: some View {
        Text(&quot;Hello&quot;)
    }
    private var someButton: some View {
        Button(&quot;Press&quot;) {}
    }
}</code></pre>



<p>I&#8217;ve heard that this can be bad for performance &#8211; is that true? And does using @ViewBuilder on some computed vars have any impact?</p>



<p><strong>Answer:</strong> SwiftUI’s traversal of your view tree isn’t impacted at all by whether you chose to use new structs, or computed properties, for small pieces of views, etc. So this is totally reasonable. Using @ViewBuilder here also shouldn’t have a performance impact. I would highly recommend doing so!</p>



<p>The only thing that you should pay attention to is your mechanisms for invalidating your views will be a bit less fine-grained, as you’re making a larger part of your view hierarchy dependent on the sources of truth specified by&nbsp;<code>MyView</code>&nbsp;. Make sure you’re paying attention to what pieces of your view depend on which pieces of data, and when you see computed properties that have completely disparate dependencies from the rest of the view, you consider breaking those out.</p>

</div></div>

<div id="data-20" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-19-fe9d0cb8-8a65-4092-b304-ef9db230bb7c" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">What is the difference between onChange() and onReceive? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-19-fe9d0cb8-8a65-4092-b304-ef9db230bb7c">

<p><strong>Full Question:</strong> What is the difference between <code>.onChange</code> and <code>.onReceive</code> modifier.? <code>.onReceive</code> is like a combination of <code>.onAppear</code> and <code>.onChange</code>, is this the complete and accurate picture?</p>



<p><strong>Answer: </strong><code>onReceive</code>&nbsp;is specifically to subscribe to Combine’s&nbsp;Publisher&nbsp;types and produce a side effect. <code>onChange</code> is used to produce a side effect when a property of your view changes. For example you can use that to produce a side effect when the scene phase in the environment changes.</p>



<p><strong>User Reply:</strong> Okay, thank you for the explanation! If I use both .onReceive and .onChange on a Published property, will there be a difference in behaviour and is one recommended over the other in this case?</p>



<p><strong>Answer:</strong> It really depends on your use case: Is the value equatable? Is it a lightweight event? Does your view have constraints to adhere to, such as de-duping, debouncing, exponential backoff, etc.</p>

</div></div>
</div>


<h2 class="wp-block-heading">Graphics and Animations</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-0922519e-9fde-4591-9874-dc0d0cadf3da" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="graphs-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-0922519e-9fde-4591-9874-dc0d0cadf3da" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-0922519e-9fde-4591-9874-dc0d0cadf3da">Tip: Power of shadows <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4a1.png" alt="💡" class="wp-smiley" style="height: 1em; max-height: 1em;" /><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-0922519e-9fde-4591-9874-dc0d0cadf3da">

<p>Something we couldn&#8217;t talk about in the talk (for brevity) was how complex these new shadows are. Not only do they composite on top of each other as you&#8217;d expect, but if you apply a shadow on a translucent shape, the shadow will not show through the translucency.</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<p><strong>SwiftUI-Lab Comment</strong>: Here&#8217;s a small example of combined shadows. This example uses two shadows, but you can combine more.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full is-resized"><img loading="lazy" decoding="async" src="https://swiftui-lab.com/wp-content/uploads/2022/06/wwdc-shadows-1.png" alt="" class="wp-image-3545" width="156" height="163" srcset="https://swiftui-lab.com/wp-content/uploads/2022/06/wwdc-shadows-1.png 312w, https://swiftui-lab.com/wp-content/uploads/2022/06/wwdc-shadows-1-287x300.png 287w" sizes="(max-width: 156px) 100vw, 156px" /></figure></div>


<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    
    var body: some View {
        let s1 = ShadowStyle.drop(color: .black, radius: 3, x: 3, y: 3)
        let s2 = ShadowStyle.inner(color: .red, radius: 15, x: 0, y: 0)
        
        Circle()
            .stroke(lineWidth: 30)
            .foregroundStyle(.shadow(s1).shadow(s2))
            .foregroundColor(.yellow)
            .frame(width: 100, height: 100)
     }
}
</code></pre>

</div></div>

<div id="graphs-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-0922519e-9fde-4591-9874-dc0d0cadf3da" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-0922519e-9fde-4591-9874-dc0d0cadf3da">What elements of font animations interpolate? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-0922519e-9fde-4591-9874-dc0d0cadf3da">

<p><strong>Full Question:</strong> Terrific updates all around! When animating the <code>Font</code> on a <code>Text</code>, when can we expect the font to smoothly interpolate instead of crossfade?</p>
<p><strong>Answer:</strong> Generally changing weights and sizes of the same font will interpolate, but not changing fonts <span style="font-size: inherit; background-color: initial;">or going from one font family to another. For example, italic to non-italic will not animate.</span></p>

</div></div>

<div id="graphs-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-0922519e-9fde-4591-9874-dc0d0cadf3da" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-0922519e-9fde-4591-9874-dc0d0cadf3da">What is best? Storing a View or a closure? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-0922519e-9fde-4591-9874-dc0d0cadf3da">

<p><strong>Full Question:</strong> Not sure if this was already asked before since it&#8217;s such a common question. But, what&#8217;s the recommended way to use a <code>@ViewBuilder</code> for custom components: calling it right away in the <code>init()</code> and storing the view, or calling it later inside the <code>body</code> and storing the view builder itself?</p>



<p><strong>Engineer #1:</strong> We’d generally recommend resolving it right away and storing the view.</p>



<p><strong>Engineer #2:</strong> Storing the view will have better performance than storing a closure (potentially avoiding allocations).</p>



<p>Of course, if you need to dynamically resolve a view from a closure (such as if it takes parameters), then storing the closure is also fine!</p>



<p>You can attach&nbsp;<code>@ViewBuilder</code>&nbsp;to properties! You can actually support it on both view and closure properties, depending on whichever you need:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct MyView&lt;Content: View&gt;: View {

  @ViewBuilder var content: Content

  // or

  @ViewBuilder var content: (Int) -&gt; Content

}</code></pre>



<p><strong>User Reply:</strong> Is this the same for Layout? The example code for AnyLayout shows creating a layout in the body instead of in the View.</p>



<p><strong>Engineer #2:</strong> Apologies, not sure I fully understand the question. Just in case: creating views in body is fine, we’re specifically talking about stored properties, and storing views versus closures for creating views.</p>

</div></div>

<div id="graphs-4" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-3-0922519e-9fde-4591-9874-dc0d0cadf3da" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-0922519e-9fde-4591-9874-dc0d0cadf3da">How do I actually apply Variable Color to an SF Symbol along with the percentage I want highlighted vs dimmed?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-3-0922519e-9fde-4591-9874-dc0d0cadf3da">

<p>You can make a variable color symbol with:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">Image(systemName: &quot;wifi&quot;, variableValue: signalStrength)</code></pre>



<p>It’s part of initializing the image, not a separate modifier you apply.</p>

</div></div>

<div id="graphs-5" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-4-0922519e-9fde-4591-9874-dc0d0cadf3da" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-0922519e-9fde-4591-9874-dc0d0cadf3da">What is the advantage of using custom Symbols rather than SVG with `template` rendering mode? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-4-0922519e-9fde-4591-9874-dc0d0cadf3da">

<p>In addition to the great color support, using a custom symbol also helps it better fit with text by growing with fonts, respecting bold text, and matching baselines.</p>

</div></div>

<div id="graphs-6" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-5-0922519e-9fde-4591-9874-dc0d0cadf3da" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-0922519e-9fde-4591-9874-dc0d0cadf3da">Is it possible to create an infinite page collection view? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-5-0922519e-9fde-4591-9874-dc0d0cadf3da">

<p><strong>Full Question:</strong> Would it be possible to create an “infinite” paged collection view in SwiftUI? Similar to the week view in the calendar app where you can swipe through weeks endlessly. Thanks!</p>



<p><strong>Answer:</strong> On way to achieve that would be to have&nbsp;<code>onAppear</code>&nbsp;on a the individual views that the&nbsp;<code>List</code>&nbsp;is scrolling over and use that load in more data.</p>



<p><strong>User Reply:</strong> What if you want the <code>@State</code> data to not grow as the user continues to page? Removing items from the array would offset the data and causes a jarring affect.</p>



<p><strong>Answer:</strong> One way you can solve the problem is by keeping only identifiers in the&nbsp;<code>@State</code>&nbsp;so that the storage doesn’t grow too much, and load on the demand the actual data as view are coming on screen.</p>

</div></div>

<div id="graphs-7" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-6-0922519e-9fde-4591-9874-dc0d0cadf3da" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-0922519e-9fde-4591-9874-dc0d0cadf3da">Will .foregroundColor(.white.shadow(…))  work with custom PNGs/SVGs as well? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-6-0922519e-9fde-4591-9874-dc0d0cadf3da">

<p><code>foregroundStyle</code>s apply only to shapes, image masks, and text. If the&nbsp;<code>Image</code>&nbsp;is configured as a template, then foreground styles should be applied. If the image is non-template, they won&#8217;t.</p>

</div></div>

<div id="graphs-8" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-7-0922519e-9fde-4591-9874-dc0d0cadf3da" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-0922519e-9fde-4591-9874-dc0d0cadf3da">Is there a way of disabling scrolling on a List? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-7-0922519e-9fde-4591-9874-dc0d0cadf3da">

<p>Use the new&nbsp;<code>scrollDisabled</code>&nbsp;modifier.&nbsp;<a href="https://developer.apple.com/documentation/swiftui/menu/scrolldisabled(_:)" target="_blank" rel="noreferrer noopener">https://developer.apple.com/documentation/swiftui/menu/scrolldisabled(_:)</a></p>

</div></div>
</div>


<h2 class="wp-block-heading">Navigation: Split Views</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-cecea354-ed71-47d6-9505-36eea59c391b" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="split-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-cecea354-ed71-47d6-9505-36eea59c391b" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cecea354-ed71-47d6-9505-36eea59c391b">Is NavigationView deprecated? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-cecea354-ed71-47d6-9505-36eea59c391b">

<p class="p1">Soft-deprecated. We recommend against it in new code, but it would&nbsp;<i>not</i>&nbsp;be a compile time warning.</p>

</div></div>

<div id="split-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-cecea354-ed71-47d6-9505-36eea59c391b" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cecea354-ed71-47d6-9505-36eea59c391b">Can an object class (such as an NSManagedObject) be used for the navigation destination data? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-cecea354-ed71-47d6-9505-36eea59c391b">

<p><strong>Full Question:</strong> Am I understanding right that the navigation destination data cannot be a class object (such as an NSManagedObject) and I would need to use something like a string to represent the object?</p>



<p><strong>Answer</strong>: Object instances should work fine.</p>

</div></div>

<div id="split-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-cecea354-ed71-47d6-9505-36eea59c391b" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cecea354-ed71-47d6-9505-36eea59c391b">Can a NavigationLink activation be detected without access to the stack path? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-cecea354-ed71-47d6-9505-36eea59c391b">

<p><strong>Full Question:</strong> Is there a way to detect that a&nbsp;NavigationLink&nbsp; was activated by the user without having access to the stack path? It was formerly possible by observing the&nbsp;Binding, but I’m not seeing how to do this right now.</p>



<p><strong>Answer:</strong> Check out the <a href="https://developer.apple.com/wwdc22/10054" target="_blank" rel="noreferrer noopener">SwiftUI Navigation Cookbook talk</a>, there is a lot of flexibility that you can get from having full control cover the path.</p>
<p>The <code>path</code> of a <code>NavigationStack</code> doesn&#8217;t necessarily have to live in the same <code>View</code> as the stack — it can be higher up in your app&#8217;s architecture.</p>
<p>One approach is to bind a <code>path</code> to the surrounding <code>NavigationStack</code>. Then use an <code>onChange</code> modifier to observe the path.</p>
<p><strong>User reply: </strong>My concern was to work in a leaf view without any path knowledge, while still being able to locally perform logic when some <code>NavigationLink</code> is activated. The objective is to avoid leaking the parent model into the child, but still have some logic around navigation being performed by the child.</p>
<p><strong>Answer:</strong> Alternatively, you could have a button that appends to the path. To get the data separation you’re looking for, you might need to pass an action in the environment or as a parameter that would do the appending.</p>
<p><strong>User reply:</strong> My concern with <code>NavigationLink</code> with value is that the values are eagerly evaluated.</p>
<p><strong>Answer:</strong> Only for links that are on-screen or in an eager container.</p>

</div></div>

<div id="split-4" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-3-cecea354-ed71-47d6-9505-36eea59c391b" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cecea354-ed71-47d6-9505-36eea59c391b">Can NavigationStack work with custom matchedGeometryEffect animations? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-3-cecea354-ed71-47d6-9505-36eea59c391b">

<p><strong>Full Question:</strong> I’m just wondering whether <code>matchedGeometryEffect</code> can work when navigating between views using the <code>NavigationStack</code>? So, for example, imagine tapping on a card on a <code>ScrollView</code> to open a fullscreen view of the card (i.e. like the App Store) using <code>NavigationStack</code>/<code>matchedGeometryEffect</code>?</p>
<p><strong>Answer:</strong> <code>NavigationStack</code> uses the system-standard push-pop animations. You might try creating a custom overlay for this use case, so the card would not be part of the path.</p>

</div></div>

<div id="split-5" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-4-cecea354-ed71-47d6-9505-36eea59c391b" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cecea354-ed71-47d6-9505-36eea59c391b">Is it possible enumerate a NavigationPath or replace certain elements? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-4-cecea354-ed71-47d6-9505-36eea59c391b">

<p><strong>Answer:</strong> It’s not currently possible to enumerate a <code>NavigationPath</code>. Because it’s type-erased, the elements could only be exposed as&nbsp;any <code>Hashable</code> so aren’t directly useful.</p>
<p class="p1">Generally, if the set of things that can be added to a path form a closed set, which would be the case if you can usefully enumerate it, I’d recommend wrapping your presented values in an enum with associated types.</p>
<p><strong>User Reply:</strong> I’m wondering if having a mutable collection of enum values might be generally more useful than using a NavigationPath.</p>
<p><strong>Answer:</strong> Then use an array of that enum instead of NavigationPath.</p>

</div></div>

<div id="split-6" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-5-cecea354-ed71-47d6-9505-36eea59c391b" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cecea354-ed71-47d6-9505-36eea59c391b">How to hide the disclosure indicator of a NavigationLink</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-5-cecea354-ed71-47d6-9505-36eea59c391b">

<p><strong>Full Question:</strong> How can I hide the disclosure indicator for a <code>NavigationLink</code> within a <code>List</code>? For example, if I was wanting to implement the built-in Reminders app with the grid icons in the List header.</p>
<p><strong>Answer:</strong> The disclosure indicator isn’t currently customizable. With the new <code>NavigationStack</code> and path binding, you can use a regular <code>Button</code> and append your value directly to the path.</p>

</div></div>

<div id="split-7" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-6-cecea354-ed71-47d6-9505-36eea59c391b" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cecea354-ed71-47d6-9505-36eea59c391b">Can we set the NavigationPath from onContinueUserActivity and onOpenURL? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-6-cecea354-ed71-47d6-9505-36eea59c391b">

<p>Hi &#8211; great question! This is certainly something you can do, and is a good example of how you can support something like deep linking, for example, by parsing the URL provided to <code>onOpenURL</code> and using it to construct your navigation path.</p>

</div></div>

<div id="split-8" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-7-cecea354-ed71-47d6-9505-36eea59c391b" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cecea354-ed71-47d6-9505-36eea59c391b">Is there a way to show a preview of a view when the user taps and holds on a NavigationLink? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-7-cecea354-ed71-47d6-9505-36eea59c391b">

<p><strong>Full Question:</strong> Is there a way to show a preview of a view when the user taps and holds on a <code>NavigationLink</code> (similar to how a website is previewed when holding on a link in Safari)? I tried using the <code>contextMenu</code> modifier, but it only seems to render <code>Button</code> views.</p>



<p><strong>Answer:</strong> Yes, use the new contextMenu overload that accepts a preview view.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">NavigationLink( ... )
    .contextMenu {
        Button { ... }
    } preview: {
        ViewIWantToPreview()
    }</code></pre>



<p>Here’s some more detail on that new modifier:&nbsp;<a href="https://developer.apple.com/documentation/swiftui/view/contextmenu(menuitems:preview:)" target="_blank" rel="noreferrer noopener">https://developer.apple.com/documentation/swiftui/view/contextmenu(menuitems:preview:)</a></p>



<p><strong>User Reply:</strong> Can I have the user tap the preview to open another view (the “full” view) as well? I&#8217;m playing around with it in Xcode previews and it seems like tapping the preview just closes the context menu.</p>



<p><strong>Answer:</strong> No, it&#8217;s not currently supported— please file a feedback request.</p>

</div></div>

<div id="split-9" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-8-cecea354-ed71-47d6-9505-36eea59c391b" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cecea354-ed71-47d6-9505-36eea59c391b">Is it possible to navigate from SwiftUI view to UIViewController? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-8-cecea354-ed71-47d6-9505-36eea59c391b">

<p><strong>Full Question:</strong> I am curious is it possible to navigate from SwiftUI view to <code>UIViewController</code>. Is it possible to pop out from the SwiftUI view back to <code>UIViewController</code>?</p>



<p><strong>Answer:</strong> You can push a&nbsp;<code>UIViewRepresentable</code>&nbsp;onto a&nbsp;<code>NavigationStack</code>, and use that to wrap a&nbsp;<code>UIView</code>.</p>



<p>That works with the view-destination&nbsp;<code>NavigationLink</code>s inside a&nbsp;<code>NavigationView</code>&nbsp;as well for previous releases.</p>

</div></div>

<div id="split-10" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-9-cecea354-ed71-47d6-9505-36eea59c391b" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cecea354-ed71-47d6-9505-36eea59c391b">Are deep links possible? Do they work well? Are there limitations compared to what is possible with UIKit? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-9-cecea354-ed71-47d6-9505-36eea59c391b">

<p>Check out the&nbsp;<a href="https://developer.apple.com/wwdc22/10054" target="_blank" rel="noreferrer noopener"><em>SwiftUI Cookbook for Navigation&nbsp;</em>session</a> and the&nbsp;<em>What&#8217;s New in SwiftUI</em>&nbsp;session for 2 examples of deep links.</p>



<p>They are indeed possible, and we think they work pretty well&nbsp;<img decoding="async" src="https://a.slack-edge.com/production-standard-emoji-assets/13.0/apple-medium/1f609.png" alt=":wink:">&nbsp;Of course, there&#8217;s a lot of routing to consider with any app — for instance if your deep link is behind some authentication token, you&#8217;ll need to do the extra work there.</p>



<p>The general idea is that a deep link is certain destinations presented — in order — on a navigation stack, and with this years&#8217; new APIs you can have full control over what is on the navigation stack.</p>

</div></div>

<div id="split-11" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-10-cecea354-ed71-47d6-9505-36eea59c391b" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cecea354-ed71-47d6-9505-36eea59c391b">When using NavigationView, is there a way to start the app with a the sidebar already collapsed (or do it programmatically)? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-10-cecea354-ed71-47d6-9505-36eea59c391b">

<p>Hi &#8211; thanks for your question. The new&nbsp;<code>NavigationSplitView</code>&nbsp;API provides an initializer which takes a binding indicating the visibility of the columns. This can be used on macOS to indicate that the sidebar should be initially collapsed.</p>



<p>There is an example in the documentation here:<br><a target="_blank" href="https://developer.apple.com/documentation/swiftui/navigationsplitview/" rel="noreferrer noopener">https://developer.apple.com/documentation/swiftui/navigationsplitview/</a></p>

</div></div>
</div>


<h2 class="wp-block-heading">Navigation: Stack Views</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="stacks-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0">Can split view panels have different priorities? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0">

<p><b>Full Question: </b>Can split views have priorities set for each panel? For example in a 3 panel configuration, I want the middle view to expand when you resize a window?</p>
<p><strong>Answer:</strong> Check out the <a href="https://developer.apple.com/documentation/swiftui/view/navigationsplitviewcolumnwidth(_:)" target="_blank" rel="noopener"><code>.navigationSplitViewColumnWidth</code></a> modifier.</p>

</div></div>

<div id="stacks-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0">Does NavigationSplitView support the sidebar on the right? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0">

<p>Right-hand sidebars are not supported by NavigationSplitView. I’d love Feedback with specifics for right-hand sidebar use cases.</p>

</div></div>

<div id="stacks-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0">NavigationView issues when switching from split style to stack style. Does the new API fix it? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0">

<p><strong>Full Question:</strong> I remember before from the&nbsp;NavigationView&nbsp;API, that when SwiftUI automatically switches from a split navigation style to the stack navigation style, for example when switching from portrait to landscape on iPhone 12 Pro Max, the selection state wasn’t preserved and some UI glitches happen. Was that all solved with the new APIs?</p>
<p><strong>Answer: </strong>It should be easier with the new API, but it’s also possible that the selection issues were caused by how the app modeled the data. I guess I’m saying it’s still possible to write bugs <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" />.</p>

</div></div>

<div id="stacks-4" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-3-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0">Preserving state when switching to a new destination <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-3-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0">

<p><strong>Full Question:</strong> Does the new NavigationSplitView preserve state when we switch to a new navigation destination like tab bar in UIKit, or do we need to roll our state restoration, like what we had to deal with using the old TabView?</p>



<p><strong>Answer:</strong> If you want to switch to a <code>TabView</code> in narrow size classes, you’ll want to design a navigation model type that provides selection information for the <code>NavigationSplitView</code> in regular size classes and a different projection of the same information to a <code>TabView</code> that’s shown in narrow size classes. I’d love Feedback with specific use cases. I’m very interested in making this easier.</p>

</div></div>

<div id="stacks-5" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-4-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0">Is there anything different visually, to the user, between a NavigationView and a NavigationStack? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-4-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0">

<p>They’re both structural components, but they do behave a bit differently. <code>NavigationView</code> renders differently depending on how many views you pass to it and what <code>navigationViewStyle</code> you set on it. <code>NavigationStack</code> takes a single root view and always renders as a stack.</p>

</div></div>

<div id="stacks-6" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-5-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0">Is it possible to switch between two-column and three column layout depending on sidebar selection? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-5-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0">

<p><strong>Full Question:</strong> On iPadOS in a <code>NavigationView</code>, Is it possible to switch between two column and three column layout depending on what is selected in my sidebar?</p>



<p><strong>Answer:</strong> It isn’t possible to do that directly. Often those style of UIs can be built by swapping the view in the detail area between a single root view and an HStack with two-elements. That is, instead of conceiving of it as a two or three column <code>NavigationSplitView</code>, think of it as a two-column one, where the detail column itself has one or two columns.</p>

</div></div>

<div id="stacks-7" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-6-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0">Is there a modifier to prevent a ForEach list collapsing? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> </p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-6-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0">

<p><strong>Full Question:</strong> Previously in <code>NavigationView</code> on iPad, the detail view would be displayed with the <code>ForEach</code> list being collapsed in a sidebar. With the new <code>NavigationSplitView</code>, can I use a modifier to not collapse the <code>ForEach</code> list?</p>



<p><strong>Answer</strong>: Thanks for the question. <code>NavigationSplitView</code> takes a <code>columnVisibility</code> binding. You can set it to <code>.all</code> to reveal all the columns programmatically!</p>

</div></div>

<div id="stacks-8" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-7-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0">What is recommended way to style navigation bar in SwiftUI? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-7-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0">

<p><strong>Answer:</strong> Check out the&nbsp;<code>.toolbarBackground</code>&nbsp;modifier, new in iOS 16 and aligned releases.</p>



<p><strong>User Reply:</strong> Does&nbsp;<code>.toolbarBackground</code>&nbsp;apply to only that view or any view pushed into navigation stack as well?</p>



<p><strong>Answer:</strong> I believe it applies to the current view, so you can change the behavior at different levels of the hierarchy.</p>



<p>There’s also&nbsp;<code>toolbarColorScheme</code>&nbsp;if you need to control the text appearance.</p>



<p>Finally, you can use a toolbar item in the&nbsp;<code>principal</code>&nbsp;placement to replace the default navigation bar title with an arbitrary SwiftUI view.</p>

</div></div>

<div id="stacks-9" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-8-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0">Is it ok to pass NavigationPath down to child views as a @Binding or @EnvironmentObject? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-8-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0">

<p><strong>Full Question:</strong> With <code>NavigationPath</code>, I&#8217;ve already felt the need to pass it down to child views as a <code>@Binding</code> or <code>@EnvironmentObject</code> so that they can influence the stack programatically. Is that a reasonable approach or am I overlooking something?</p>



<p><strong>Answer:</strong> Passing the binding or passing a navigation model as an environment object are both reasonable approaches with the API we have available today.</p>



<p>I hope we can make this more ergonomic. I’d love a Feedback with your use case!</p>



<p>I personally like the navigation model approach, since I can easily do other work when the navigation state changes without putting that code in my Views. But either approach works fine.</p>



<p><strong>User Reply:</strong> So, a ViewModel (probably observableobject) that dictates navigation?</p>



<p><strong>Answer</strong>: Yeah. That works for the way I think about navigation.</p>

</div></div>

<div id="stacks-10" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-9-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0">Is it possible with SwiftUIs new NavigationStack to hide the tab bar of a TabView when the destination view appears? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-9-5738908b-5a60-4d3c-9c72-8d9cb66e9aa0">

<p>Take a look at the new toolbar visibility accepting modifier. This is new in SwiftUI and allows configuring the hiding or showing of different bars like the navigation bar, or the tab bar.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">ContentView()
 .toolbar(.hidden, in: .tabBar)</code></pre>



<p>See&nbsp;<a href="https://developer.apple.com/documentation/swiftui/presentedwindowcontent/toolbar(_:in:)" target="_blank" rel="noreferrer noopener">https://developer.apple.com/documentation/swiftui/presentedwindowcontent/toolbar(_:in:)</a></p>

</div></div>
</div>


<h2 class="wp-block-heading">New Grids</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-3feca2ee-619c-4b3d-8d46-a7da478f1b8d" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="grids-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-3feca2ee-619c-4b3d-8d46-a7da478f1b8d" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-3feca2ee-619c-4b3d-8d46-a7da478f1b8d">Can Grid cells span rows and columns? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-3feca2ee-619c-4b3d-8d46-a7da478f1b8d">

<p class="p1">They can span columns. See&nbsp;<a href="https://developer.apple.com/documentation/swiftui/view/gridcellcolumns(_:)" target="_blank" rel="noopener"><span class="s1">.gridCellColumns(_:)</span></a></p>

</div></div>

<div id="grids-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-3feca2ee-619c-4b3d-8d46-a7da478f1b8d" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-3feca2ee-619c-4b3d-8d46-a7da478f1b8d">Does Grid replace LazyVGrid? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-3feca2ee-619c-4b3d-8d46-a7da478f1b8d">

<p><code>LazyVGrid</code>&nbsp;and&nbsp;<code>LazyHGrid</code>&nbsp;arrange their children lazily and so are great fits for large amounts of content within a scroll view.</p>



<p><code>Grid</code>&nbsp;requires all of its children be loaded up front and because of that has some powerful features that the lazy grids do not.</p>

</div></div>

<div id="grids-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-3feca2ee-619c-4b3d-8d46-a7da478f1b8d" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-3feca2ee-619c-4b3d-8d46-a7da478f1b8d">Are there any special considerations needed when putting a Grid inside a ScrollView? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-3feca2ee-619c-4b3d-8d46-a7da478f1b8d">

<p><strong>Grid</strong> is eager, so putting it in a <strong>ScrollView</strong> can create performance issues, unless you’re certain the number of items is small.</p>

</div></div>

<div id="grids-4" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-3-3feca2ee-619c-4b3d-8d46-a7da478f1b8d" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-3feca2ee-619c-4b3d-8d46-a7da478f1b8d">Can a cell span partial columns in a Grid? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-3-3feca2ee-619c-4b3d-8d46-a7da478f1b8d">

<p><strong>Full Question:</strong> Can a column span partial columns in <code>Grid</code>? i.e. If I have 8 items in a three column <code>Grid</code>, I want the last row to have two cells that are 1½ columns each.</p>



<p><strong>Answer:</strong> The column spanning uses an integer, but you could try doubling the number of columns you&#8217;re using</p>

</div></div>
</div>


<h2 class="wp-block-heading">New Layout Protocol</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-cb115e5c-d945-4733-81b4-3680bffa5bc2" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="layout-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-cb115e5c-d945-4733-81b4-3680bffa5bc2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cb115e5c-d945-4733-81b4-3680bffa5bc2">When should we use custom layouts vs native elements. When to use each? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-cb115e5c-d945-4733-81b4-3680bffa5bc2">

<p><strong>Full Question:</strong> With graphics and custom layouts being added, when should we use native elements vs custom styling? How far should custom designs go?</p>
<p><strong>Answer:</strong> It entirely depends on your use case! We ultimately trust your sense of design on this one since only you know what’s right for your app. To give some general guidance though: Take native elements as far as you can, and if you find you need further customization beyond that to finely polish the experience, then don’t be afraid to use it!</p>
<p>One quick disclaimer: It can be easy to drop to custom layouts prematurely. Stacks and Grids are incredibly powerful already, so be sure you can’t get what you need with them before you use the new layout protocol.</p>

</div></div>

<div id="layout-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-cb115e5c-d945-4733-81b4-3680bffa5bc2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cb115e5c-d945-4733-81b4-3680bffa5bc2">Does the new Layout protocol animate between VStack and HStack? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/26a0.png" alt="⚠" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-cb115e5c-d945-4733-81b4-3680bffa5bc2">

<p><strong>Full Question:</strong> I saw that <code>VStack</code> and <code>HStack</code> conform to Layout. Does that mean using an if-else to switch between the two with the same content will now animate the change?</p>



<p><strong>Answer</strong>: Yes. To animate between layouts you&#8217;ll need to switch between the layouts using&nbsp;<code>AnyLayout</code>, for example:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">let layout = isVertical ? AnyLayout(VStack()) : AnyLayout(HStack())

layout {
    Text(&quot;Hi&quot;)
    Text(&quot;World&quot;)
}</code></pre>



<p>Check out the <a href="https://developer.apple.com/wwdc22/10056" target="_blank" rel="noreferrer noopener">Compose custom layouts with SwiftUI</a> talk for more details!</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<p><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/26a0.png" alt="⚠" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <strong>SwiftUI-Lab Comment:</strong> In beta 3, <code>HStack</code> and <code>VStack</code> no longer conform to Layout. In beta 4, new Layout types have been added: <code>HStackLayout</code>, <code>VStackLayout</code>, <code>ZStackLayout</code> and <code>GridLayout</code>. </p>



<p>Here&#8217;s a full example:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    @State var horizontal: Bool = false
    
    var body: some View {
        
        let layout = horizontal ? AnyLayout(VStackLayout()) : AnyLayout(HStackLayout())

        layout {
            Text(&quot;Hi&quot;)
            Text(&quot;World&quot;)
        }
        
        Toggle(&quot;Horizontal&quot;, isOn: $horizontal.animation(.easeInOut))
    }
}</code></pre>

</div></div>

<div id="layout-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-cb115e5c-d945-4733-81b4-3680bffa5bc2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cb115e5c-d945-4733-81b4-3680bffa5bc2">How does ViewThatFits decide if a view fits? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-cb115e5c-d945-4733-81b4-3680bffa5bc2">

<p><strong>Full Question:</strong> How does <code>ViewThatFits</code> decide if a view fits? I find it a bit strange that Text with a line limit of 1 still &#8220;fits&#8221; even if it&#8217;s truncated for example.</p>



<p><code>ViewThatFits</code>&nbsp;consults the view&#8217;s ideal frame size for both dimensions.</p>



<p>The latter behavior isn&#8217;t intended. A feedback # and keeping an eye on later seeds is a good strategy here.</p>



<p><strong>User Reply:</strong> Adding a <code>fixedSize(horizontal: true, vertical: false)</code> seems to fix the issue but also seems unnecessary. I’ll file a feedback.</p>

</div></div>

<div id="layout-4" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-3-cb115e5c-d945-4733-81b4-3680bffa5bc2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cb115e5c-d945-4733-81b4-3680bffa5bc2">How can i get something similar to autolayout priorities? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-3-cb115e5c-d945-4733-81b4-3680bffa5bc2">

<p><strong>Full Question:</strong> how can i get something similar to auto-layout priorities, of being able to have 2 views in a stack equal but only up to a certain width?</p>



<p><strong>Engineer #1:</strong> You can see the rendered version of that text in the docs under the heading “Access Layout Values”: <a href="https://developer.apple.com/documentation/swiftui/layout" target="_blank" rel="noreferrer noopener">https://developer.apple.com/documentation/swiftui/layout</a></p>



<p><strong>Engineer #</strong>2: You can pass any kind of information you like to an adopter of&nbsp;<code>Layout</code>.&nbsp; So that &#8220;certain width&#8221; could be passed to the instance of the&nbsp;<code>Layout</code>&nbsp;itself. And the layout priority can be provided via the subviews proxy of&nbsp;<code>Layout</code>.</p>



<p>In the swiftinterface file there is discussion of this:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">/// Views have layout values that you set with view modifiers.
/// Layout containers can choose to condition their behavior accordingly.
/// For example, a built-in ``HStack`` allocates space to its subviews based
/// in part on the priorities that you set with the ``View/layoutPriority(_:)``
/// view modifier. Your layout container accesses this value for a subview by
/// reading the proxy&#039;s ``LayoutSubview/priority`` property.</code></pre>



<p>Thinking about this more&#8230;.</p>



<p>Reasoning about this in terms of autolayout might make things tricker than they need to be, especially for 2 views.&nbsp; For instance you could instead use a custom&nbsp;<code>LayoutValueKey</code>&nbsp;to say that View A should take 70% of the proposed size, and View B should take 30%.</p>



<p>Rough sample code:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">MyCustomLayout(widthThreshold: 300.0) {
    viewA.oversizedWidthPercentage(0.7)
    viewB.oversizedWidthPercentage(0.3)
}</code></pre>

</div></div>

<div id="layout-5" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-4-cb115e5c-d945-4733-81b4-3680bffa5bc2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cb115e5c-d945-4733-81b4-3680bffa5bc2">Alignment guides and the new Layout protocol <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-4-cb115e5c-d945-4733-81b4-3680bffa5bc2">

<p><strong>Full Question:</strong> When using the Layout protocol, is it possible to resolve an alignment guide for the layout container, not a subview, to align the subviews relative to the container correctly? For instance, a Layout that proposes size (100, 50) would resolve HorizontalAlignment.center to 50 (if unmodified). If not, what is the correct way to do this?</p>



<p><strong>Engineer #1:</strong> You may be able to use the&nbsp;<code>alignmentGuide</code>&nbsp;modifier to define how an alignment guide for a view will resolve.</p>



<p><strong>User Reply:</strong> My goal is to get the <code>CGFloat</code> value from the container view for its own alignment guides in the <code>placeSubviews</code> function. (Specifically, to do a layout similar to VStack where the children align in the left middle or right)</p>



<p><strong>Engineer #2:</strong> Well, you get the bounds of the region that you are laying out inside of, so you can know the midpoint in each dimension, for example.</p>



<p>You can also set explicit alignment guides for the layout container by implementing either or both of the explicit alignment methods:</p>



<ul><li><a href="https://developer.apple.com/documentation/swiftui/layout/explicitalignment(of:in:proposal:subviews:cache:)-8ofeu" target="_blank" rel="noreferrer noopener">https://developer.apple.com/documentation/swiftui/layout/explicitalignment(of:in:proposal:subviews:cache:)-8ofeu</a></li><li><a href="https://developer.apple.com/documentation/swiftui/layout/explicitalignment(of:in:proposal:subviews:cache:)-3iqmu" target="_blank" rel="noreferrer noopener">https://developer.apple.com/documentation/swiftui/layout/explicitalignment(of:in:proposal:subviews:cache:)-3iqmu</a></li></ul>

</div></div>

<div id="layout-6" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-5-cb115e5c-d945-4733-81b4-3680bffa5bc2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cb115e5c-d945-4733-81b4-3680bffa5bc2">What happens to a subview if you don&#8217;t call .place() on it in placeSubviews in a Layout? What happens if you call it twice? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-5-cb115e5c-d945-4733-81b4-3680bffa5bc2">

<p><strong>Answer:</strong> If you call the method more than once for a subview, the last call takes precedence. If you don’t call this method for a subview, the subview appears at the center of its layout container and uses the layout container’s size proposal.</p>



<p><strong>User Reply:</strong> I found this function a bit strange as I was expecting it to return an array of placements instead of running a place function. Is it more efficient the way it’s set currently set up? Actually, one more follow-up. Is there a way to simply not place a view or have it hidden? Imagine a coverflow style view where you only want to show a small set of subviews.</p>



<p><strong>Answer:</strong> You interact with the subviews from within the layout protocol via the subview proxies that you get as input. This lets you do things like propose a size or place the view, but not perform arbitrary operations on the view, or apply arbitrary modifiers. If there’s something specific that you’d like to do but can’t, please do file a feedback with your use case.</p>

</div></div>

<div id="layout-7" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-6-cb115e5c-d945-4733-81b4-3680bffa5bc2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cb115e5c-d945-4733-81b4-3680bffa5bc2">When is Layout calculated? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-6-cb115e5c-d945-4733-81b4-3680bffa5bc2">

<p><strong>Full Question:</strong> When Layout will be calculated? From UIKit experience,&nbsp; <code>sizeThatFits</code> fail to calculate size on <code>viewDidLoad</code>.</p>



<p><strong>Answer:</strong> Layout participates in SwiftUI’s general update system. It will be computed when any state affecting the layout changes.</p>

</div></div>

<div id="layout-8" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-7-cb115e5c-d945-4733-81b4-3680bffa5bc2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cb115e5c-d945-4733-81b4-3680bffa5bc2">Does Layout support lazy-loading its subviews? Would it be a good replacement for UICollectionView with a custom layout? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-7-cb115e5c-d945-4733-81b4-3680bffa5bc2">

<p><strong>Answer:</strong> Layout is eager.</p>



<p><strong>User Reply:</strong> is eager the opposite of lazy?</p>



<p><strong>Answer:</strong> Yes, sorry. Eager means computed in advance. Lazy means computed only when needed.</p>

</div></div>

<div id="layout-9" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-8-cb115e5c-d945-4733-81b4-3680bffa5bc2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cb115e5c-d945-4733-81b4-3680bffa5bc2">Can I use custom layout to create a hierarchical tree map/view of rectangular boxes of data items connected with lines?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-8-cb115e5c-d945-4733-81b4-3680bffa5bc2">

<p><code>Layout</code> could readily handle positioning the boxes. The lines would be the interesting part. You might experiment with using the layout values to route information.</p>



<p>You could also experiment with using <code>Canvas</code> to do the drawing, though that’s a low-level approach that wouldn’t give you accessibility out of the box. Check out the <code>accessibilityRepresentation</code> modifier for that.</p>

</div></div>

<div id="layout-10" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-9-cb115e5c-d945-4733-81b4-3680bffa5bc2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cb115e5c-d945-4733-81b4-3680bffa5bc2">Do LayoutValueKey values travel up through nested Layouts? Also, how are they different from PreferenceKey? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-9-cb115e5c-d945-4733-81b4-3680bffa5bc2">

<p><code>LayoutValueKeys</code> only travel up to the nearest Layout container. One reason for this is for Layout to facilitate building of encapsulations that can be composed without having unanticipated effects on the other views that surround it</p>

</div></div>

<div id="layout-11" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-10-cb115e5c-d945-4733-81b4-3680bffa5bc2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cb115e5c-d945-4733-81b4-3680bffa5bc2">Do all system stacks implement the Layout protocol for use in AnyLayout? Is this documented anywhere? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/26a0.png" alt="⚠" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-10-cb115e5c-d945-4733-81b4-3680bffa5bc2">

<p>The goal is for as many system provided layouts to conform to the Layout protocol as possible, including the stacks. You can find what protocols a type conforms to in the developer documentation.</p>



<p>Yup, scroll down on this page:&nbsp;<a href="https://developer.apple.com/documentation/swiftui/hstack" target="_blank" rel="noreferrer noopener">https://developer.apple.com/documentation/swiftui/hstack</a></p>


<hr class="ub_divider" id="ub_divider_f8c9a684-e85c-4761-bd9b-320b1bba5c7f"></hr>


<p><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/26a0.png" alt="⚠" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <strong>SwiftUI-Lab Comment:</strong> Until beta 2, <code>Grid</code>, <code>HStack</code> and <code>VStack</code> conformed to <code>Layout</code>. That is no longer the case. However, starting with beta 4, new layout types exist: <code>HStackLayout</code>, <code>VStackLayout</code>, <code>ZStackLayout</code> and <code>GridLayout</code>.</p>

</div></div>

<div id="layout-12" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-11-cb115e5c-d945-4733-81b4-3680bffa5bc2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cb115e5c-d945-4733-81b4-3680bffa5bc2">How does Layout interact with other view modifiers or constructs that can provide layout data? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-11-cb115e5c-d945-4733-81b4-3680bffa5bc2">

<p><strong>Full Question:</strong> How does <code>Layout</code> interact with other view modifiers or constructs that can provide layout data, like offset, geometry reader, anchor preferences, etc?</p>



<p><strong>Answer:</strong> A layout is only able to position its direct subviews.</p>



<p>It can be superior to <code>GeometryReader</code> because it&#8217;s able to do that while also computing a <code>sizeThatFits</code>.</p>



<p>If you&#8217;re trying to arrange things that are crossing parent-child boundaries, though, anchor preferences will likely still be necessary.</p>

</div></div>

<div id="layout-13" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-12-cb115e5c-d945-4733-81b4-3680bffa5bc2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cb115e5c-d945-4733-81b4-3680bffa5bc2">Should Layout work fine with UIKit-representable views? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-12-cb115e5c-d945-4733-81b4-3680bffa5bc2">

<p>Yes! To get more control over how <code>UIViewControllerRepresentables</code> size themselves in SwiftUI layout you may want to implement their new&nbsp;<a href="https://developer.apple.com/documentation/swiftui/uiviewcontrollerrepresentable/sizethatfits(_:uiviewcontroller:context:)-35p75" target="_blank" rel="noreferrer noopener">sizeThatFits</a>&nbsp;method.</p>

</div></div>

<div id="layout-14" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-13-cb115e5c-d945-4733-81b4-3680bffa5bc2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cb115e5c-d945-4733-81b4-3680bffa5bc2">Is it possible to use @State, et. al from within a custom Layout? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-13-cb115e5c-d945-4733-81b4-3680bffa5bc2">

<p><strong>Full Question:</strong> Is it possible to use <code>@State</code>, et. al from within a custom <code>Layout</code>? Or is there a different way we should parameterize our layouts? I noticed that the protocol doesn&#8217;t inherit from <code>View</code>, so I wasn&#8217;t sure if using the property wrappers would work.</p>



<p><strong>Answer:</strong> You can add input parameters to your layout, and you can attach values to particular views using the <code>LayoutValueKey</code> protocol. To store data between calls into your layout, you can use the cache, but that’s only to avoid repeated calculations, and you should be prepared for the cache to go away at any time.</p>



<p><strong>User Reply:</strong> Okay, so anything stateful should live in the parent view (and be passed as init args) or in a child view (and be read through a <code>LayoutValueKey</code>)?</p>



<p><strong>Answer:</strong> Yes.</p>

</div></div>

<div id="layout-15" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-14-cb115e5c-d945-4733-81b4-3680bffa5bc2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cb115e5c-d945-4733-81b4-3680bffa5bc2">Is it possible to compose some HStack and VStack within my custom Layout? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-14-cb115e5c-d945-4733-81b4-3680bffa5bc2">

<p><strong>Full Question:</strong> When creating a custom <code>Layout</code>, is it OK to use another <code>Layout</code> within the func like <code>sizeThatFits</code> or <code>placeSubviews</code>, including the built-in Layout (like <code>HStack</code>)? More specifically, is it possible to compose some <code>HStack</code> and <code>VStack</code> within my custom <code>Layout</code>? In that case I have to create a <code>LayoutSubview</code> by myself, is it possible?</p>



<p><strong>Engineer #1:</strong> Yes this is an explicit use case the Layout protocol was designed to support.</p>



<p><strong>Engineer #2:</strong> Yes, that should be fine, although you&#8217;ll need to manage the cache(s) of any intermediate layouts you use. (E.g. store them in your own layout&#8217;s cache storage, and invalidate them as needed.)</p>



<p>You can also create subsets of the subviews collection, to pass to the inner layouts&#8230; use the <code>LayoutSubviews</code> <code>subscript(bounds:)</code> operator for that.</p>

</div></div>
</div>


<h2 class="wp-block-heading">Previews</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-d3fe70f9-5300-4382-958d-962d91a99171" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="previews-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-d3fe70f9-5300-4382-958d-962d91a99171" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-d3fe70f9-5300-4382-958d-962d91a99171">Tip: Xcode Previews and Tabs <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4a1.png" alt="💡" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-d3fe70f9-5300-4382-958d-962d91a99171">

<p>We’ve been getting some questions regarding the new previews experience where each preview is given its own tab, and folks are wondering if there is a way to instead have multiple previews in the same tab.</p>



<p>Each view in the&nbsp;<code>PreviewProvider</code>&nbsp;now shows in its own tab. If the individual views are differently configured rows for a list or can be combined in a&nbsp;<code>VStack</code>&nbsp;then a single preview could be used for seeing the different configurations. We&#8217;d love feedback if you have a unique case that you don&#8217;t think is covered by the current solutions!</p>

</div></div>

<div id="previews-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-d3fe70f9-5300-4382-958d-962d91a99171" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-d3fe70f9-5300-4382-958d-962d91a99171">Tip: New Previews experience with the previewLayout modifier  <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4a1.png" alt="💡" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-d3fe70f9-5300-4382-958d-962d91a99171">

<p>We’ve been seeing some confusion regarding the behavior of the&nbsp;&nbsp;<code>.previewLayout</code>&nbsp;modifier in the new previews experience which we wanted to address.</p>



<p>the&nbsp;<code>.previewLayout</code>&nbsp;modifier does indeed still work, but like previous releases it does not affect the live preview which means you&#8217;d need to switch to the new Selectable mode to see its effect.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="360" height="92" src="https://swiftui-lab.com/wp-content/uploads/2022/06/previews-slack.png" alt="" class="wp-image-3382" srcset="https://swiftui-lab.com/wp-content/uploads/2022/06/previews-slack.png 360w, https://swiftui-lab.com/wp-content/uploads/2022/06/previews-slack-300x77.png 300w" sizes="(max-width: 360px) 100vw, 360px" /></figure></div>
</div></div>

<div id="previews-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-d3fe70f9-5300-4382-958d-962d91a99171" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-d3fe70f9-5300-4382-958d-962d91a99171">Any tips to make Previews run faster? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-d3fe70f9-5300-4382-958d-962d91a99171">

<p><strong>Full Question:</strong> My Previews take generally a long time to render, often failing (timeout) and sometimes it&#8217;s quicker to just launch a run on the simulator. Also, it takes some huge place on disk (40GB+). Any hint to optimise all this and make the Previews quick, light and reactive?</p>



<p><strong>Answer:</strong> If you&#8217;re experiencing long times to render there might be something specific about your setup. Filing a feedback with a sysdiagnose taken while the preview is taking the long time to render would be very helpful for us to diagnose this.</p>



<p>As far as general tips to keep things fast, it helps to break up you views into smaller components where possible. And if your app project itself takes a long time to build, then it could be very helpful to split your Swift UI views out into a separate framework target so they could be built without the burden of the rest of the project.</p>



<p>I think the general theme is trying to focus on building as little as possible. If you can build out those new SwiftUI views in a framework / package, you can opt to build just that package rather than all of the app.</p>



<p><strong>User Reply:</strong> Yes I was just thinking about this last advice — although perhaps with a Package rather than a framework.</p>



<p><strong>Answer:</strong> Yup, packages would be fine, too. It&#8217;s even easier to use them in Xcode now. The larger point is to break out the parts that need Swift UI into their own targets that can be built independently. It might even help to have a separate &#8220;previewing&#8221; app target that you link your Swift UI views into instead of your main app. It all depends on your setup, of course. The tl;dr is that Previews needs to build&nbsp;<em>some</em>&nbsp;target to get its work done. If your whole app target is large and slow to build then it will be the bottleneck for previews that you can investigate.</p>

</div></div>

<div id="previews-4" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-3-d3fe70f9-5300-4382-958d-962d91a99171" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-d3fe70f9-5300-4382-958d-962d91a99171">What&#8217;s the best practice for working with Core Data and SwiftUI previews, such that we don&#8217;t end up interacting with the actual store data? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-3-d3fe70f9-5300-4382-958d-962d91a99171">

<p>Core Data supports pointing to in-memory storage which won&#8217;t need the file system and would work great in any situation where you don&#8217;t want to persist the changes permanently, even in Previews.</p>



<p><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreData/PersistentStoreFeatures.html" target="_blank" rel="noreferrer noopener">https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreData/PersistentStoreFeatures.html</a></p>

</div></div>

<div id="previews-5" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-4-d3fe70f9-5300-4382-958d-962d91a99171" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-d3fe70f9-5300-4382-958d-962d91a99171">Is there a fix for Previews failing with views in SPM modules? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-4-d3fe70f9-5300-4382-958d-962d91a99171">

<p><strong>Full Question:</strong> Currently Xcode Previews fail to find the <code>.module</code> bundle (and associated resources) for views in SPM modules. This has a workaround (manually locating the bundle), but adds additional boilerplate code.<br></p>



<p>I&#8217;d like to know it&#8217;s a known issue. I&#8217;ve seen that Previews got a substantial update in Xcode 14 and I was surprised to see this was not addressed.</p>



<p><strong>Answer:</strong> Thank you for the feedback. Yes, we know this is a common issue and are still finding the best path forward to solve it. Thanks for the patience!</p>

</div></div>

<div id="previews-6" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-5-d3fe70f9-5300-4382-958d-962d91a99171" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-d3fe70f9-5300-4382-958d-962d91a99171">How do I see multiple previews at the same time with Xcode 14? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-5-d3fe70f9-5300-4382-958d-962d91a99171">

<p>Each view in the&nbsp;<code>PreviewProvider</code>&nbsp;now shows in its own tab, and there are two ways to see multiple configurations in one tab.</p>



<p>First, you can see multiple previews in the same tab for variations in device settings by using the new variants mode, accessible from the bottom bar of the canvas.</p>



<p>Second, for multiple previews of the same view but with different inputs, you can make a single preview of a&nbsp;<code>List</code>&nbsp;or&nbsp;<code>VStack</code>&nbsp;that contains those different configurations. This is particularly helpful with rows of a&nbsp;<code>List</code>&nbsp;as the&nbsp;<code>List</code>&nbsp;will also show those views with the correct list styling and metrics.</p>

</div></div>

<div id="previews-7" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-6-d3fe70f9-5300-4382-958d-962d91a99171" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-d3fe70f9-5300-4382-958d-962d91a99171">Is it possible to print to the console while in SwiftUI previews? </p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-6-d3fe70f9-5300-4382-958d-962d91a99171">

<p><strong>Engineer #1:</strong> This is a known issue we&#8217;re actively investigating.</p>



<p><strong>Engineer #2:</strong> (Also not necessarily the best solution, but sometimes I end up just adding a debug label attached to state and use that as a print…)</p>



<p>FWIW,&nbsp;<code>os_log</code>&nbsp;and&nbsp;<code>Logger</code>&nbsp;do work fine in previews and then you can look for those with the Console app like any other syslog output.</p>

</div></div>
</div>


<h2 class="wp-block-heading">Sharing</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-86738c4c-a928-40d2-83cc-26e308d32bda" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="sharing-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-86738c4c-a928-40d2-83cc-26e308d32bda" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-86738c4c-a928-40d2-83cc-26e308d32bda">Transferable: Can we create our own custom payload for internal app drag and drop? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-86738c4c-a928-40d2-83cc-26e308d32bda">

<p class="p1">Yes! you can! If you create a custom payload type that multiple apps support, you can send it across them as well! As long as they have the same codable representation, you should be all set!</p>

</div></div>

<div id="sharing-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-86738c4c-a928-40d2-83cc-26e308d32bda" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-86738c4c-a928-40d2-83cc-26e308d32bda">Tip: PhotosPicker and ShareLink on watchOS <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4a1.png" alt="💡" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-86738c4c-a928-40d2-83cc-26e308d32bda">

<p><code>PhotosPicker</code> and <code>ShareLink</code> are available on watchOS. It&#8217;s the first time we&#8217;ve had this functionality available on the platform!</p>

</div></div>

<div id="sharing-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-86738c4c-a928-40d2-83cc-26e308d32bda" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-86738c4c-a928-40d2-83cc-26e308d32bda">Can you print / create a PDF on watchOS? or from tvOS with ShareLink? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-86738c4c-a928-40d2-83cc-26e308d32bda">

<p>You can&#8217;t, but please file a feedback with your use case!</p>

</div></div>

<div id="sharing-4" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-3-86738c4c-a928-40d2-83cc-26e308d32bda" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-86738c4c-a928-40d2-83cc-26e308d32bda">Does Transferable support async behavior like NSFilePromiseProvider? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-3-86738c4c-a928-40d2-83cc-26e308d32bda">

<p><strong>Full Question:</strong> Does <code>Transferable</code> also support asynchronous behavior like <code>NSFilePromiseProvider</code>, e.g. if you do not have a file URL yet (e.g. cause a file first needs to be downloaded from a web server, but only when the drag operation ends).</p>
<p><strong>Answer: </strong>Definitely, the&nbsp;<code>FileRepresentation</code> transfer representation does what you’re describing. Check the Meet Transferable talk.</p>

</div></div>
</div>


<h2 class="wp-block-heading">SwiftUI + UIFrameworks</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-314797b6-ce01-4a4e-91cb-08716e1b0901" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="ui-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-314797b6-ce01-4a4e-91cb-08716e1b0901" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-314797b6-ce01-4a4e-91cb-08716e1b0901">What would be the recommended way to update cell&#8217;s height when used with DiffableDataSource? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-314797b6-ce01-4a4e-91cb-08716e1b0901">

<p><strong>Full Question:</strong>  Once again, here goes the question about SwiftUI views in Table/Collection cell. <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f601.png" alt="😁" class="wp-smiley" style="height: 1em; max-height: 1em;" /> If we&#8217;d like to tinker with our own <code>UIHostingConfiguration</code> to support older OS versions, what would be the recommended way to update cell&#8217;s height when used with <code>DiffableDataSource</code>? Currently, the most common scenario I see is a pair of <code>tableView.beginUpdates()</code> <code>tableView.endUpdates()</code></p>



<p>It would be nice to recap on our available options</p>



<p><strong>Answer:</strong> On iOS 15 and earlier, you request an update to the size of self-sizing cells in UICollectionView and <code>UITableView</code> by:</p>



<ul><li>If using diffable data source, re-applying the diffable data source’s current snapshot with&nbsp;<code>animatingDifferences: true</code></li><li>If not using diffable data source, performing empty batch updates on the collection or table view directly (that’s the same as the begin/end updates you mentioned)</li></ul>

</div></div>

<div id="ui-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-314797b6-ce01-4a4e-91cb-08716e1b0901" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-314797b6-ce01-4a4e-91cb-08716e1b0901">Is there a way to coordinate between SwiftUI DragGesture with their UIKit counterparts?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-314797b6-ce01-4a4e-91cb-08716e1b0901">

<p><strong>Full Question:</strong> Is there a way to coordinate between SwiftUI DragGesture with their UIKit counterparts in the UIGestureRecognizerDelegate like <code>shouldBegin</code> or <code>shouldRequireFailure</code>?</p>



<p><strong>Answer:</strong> Sorry, no, there&#8217;s no interop between SwiftUI gestures and UIKit gestures.</p>



<p><strong>User</strong> <strong>Reply:</strong> How about multiple SwiftUI <code>DragGestures</code>?</p>



<p><strong>Answer:</strong> You can ensure exclusivity with this:<a href="https://developer.apple.com/documentation/swiftui/gesture/exclusively(before:)" target="_blank" rel="noreferrer noopener">https://developer.apple.com/documentation/swiftui/gesture/exclusively(before:)</a></p>



<p><strong>User Reply:</strong> Does it work if there are two DragGestures applying to different views?</p>



<p><strong>Answer:</strong> No, the exclusivity is only for a single gesture application.</p>

</div></div>

<div id="ui-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-314797b6-ce01-4a4e-91cb-08716e1b0901" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-314797b6-ce01-4a4e-91cb-08716e1b0901">In SwiftUI, is there a way to listen for navigation events or would that have to be custom from UIKit delegates?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-314797b6-ce01-4a4e-91cb-08716e1b0901">

<p><strong>Answer:</strong> With the new iOS 16 <code>NavigationStack</code>, you can bind a path to the stack. Then you can use the&nbsp;<code>.onChange()</code>&nbsp;modifier to watch for changes to the path.</p>



<p><strong>User Reply:</strong> What about non navigation events like dismissal of sheets or full screen modals? Is there a stateful way to be informed of when these events are done so we can say present a follow up confirmation or pop the navigation stack back?</p>



<p><strong>Answer:</strong> Those dismiss events will reset the binding that caused the modal presentation to appear. So the same recommendation works there. You can use&nbsp;<code>onChange()</code>&nbsp;to observe that binding too. </p>



<p><strong>User Reply:</strong> What if you’re programmatically changing those bindings? If I set an isPresented var to false to dismiss a modal, how would I be able to know when the modal is actually gone? If I change the navigation backing state right away to pop a view or try and set a sheet as not to display , I’m usually presented with inconsistent UI behavior or a message saying that I’m trying to present / dismiss in an invalid state. I’m usually stuck doing something like asyncAwait after and then playing with the timeframe and that’s, well, gross.</p>



<p><strong>Answer:</strong> Ah, I see. The delay hack is one approach. Another approach people seem to have some success with is using a common&nbsp;<code>sheet</code>&nbsp;modifier for a variety of presentations. Then you can drive the sheet with an optional enum state. Set it to&nbsp;<code>nil</code>&nbsp;to dismiss, or switch between different non-nil values to present different sheets.</p>



<p>We’re also made some improvements in iOS 16 to make the invalid state issue much less common. For example, we try to delay the presentation of the next sheet until the previous one is gone. So you might find that things just work now.&nbsp;</p>

</div></div>

<div id="ui-4" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-3-314797b6-ce01-4a4e-91cb-08716e1b0901" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-314797b6-ce01-4a4e-91cb-08716e1b0901">Is there an analog to AppKit&#8217;s flagsChanged notification? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-3-314797b6-ce01-4a4e-91cb-08716e1b0901">

<p><strong>Full Question:</strong> Is there an analog to AppKit&#8217;s flagsChanged notification, to change the appearance of SwiftUI controls based on keyboard modifiers? I&#8217;m currently polling on a timer to do this, but that is unsatisfying. (FB9601140)</p>



<p><strong>Answer:</strong> You could try using something like this:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">import AppKit
import SwiftUI

class KeyboardModifierMonitor: ObservableObject {
    @Published var eventModifiers = EventModifiers()
    var localEventMonitor: Any?
    var globalEventMonitor: Any?
    
    init() {
        localEventMonitor = NSEvent.addLocalMonitorForEvents(
            matching: [.flagsChanged],
            handler: { [weak self] event in
                self?.eventModifiers = EventModifiers(event.modifierFlags)
                return event
            }
        )
        globalEventMonitor = NSEvent.addGlobalMonitorForEvents(
            matching: [.flagsChanged],
            handler: { [weak self] event in
                self?.eventModifiers = EventModifiers(event.modifierFlags)
            }
        )
    }
    
    deinit {
        localEventMonitor.map { NSEvent.removeMonitor($0) }
        globalEventMonitor.map { NSEvent.removeMonitor($0) }
    }
}

extension EventModifiers {
    init(_ flags: NSEvent.ModifierFlags) {
        self.init()
        if flags.contains(.capsLock) { insert(.capsLock) }
        if flags.contains(.shift) { insert(.shift) }
        if flags.contains(.control) { insert(.control) }
        if flags.contains(.option) { insert(.option) }
        if flags.contains(.command) { insert(.command) }
        if flags.contains(.numericPad) { insert(.numericPad) }
        if flags.contains(.function) { insert(.function) }
    }
}
</code></pre>



<p>which you would then use in your controls like so:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">public struct MyAmazingButton: View {
    @StateObject fileprivate var eventMonitor = KeyboardModifierMonitor()

    public var body: some View {
        let modifiers = eventMonitor.eventModifiers
        let isOptionHeld = modifiers.contains(.option)
        let isShiftHeld = modifiers.contains(.shift)
</code></pre>



<p><strong>User Reply:</strong> Nice! Will do. Oh darn! I did try exactly that a year ago. The problem is that while the macOS menu is down, the message is not delivered. The behavior in AppKit of opening a menu, then trying the modifier keys to see what changes while the menu is down is lost.</p>



<p><strong>Answer:</strong> <code>EventMonitors</code> don&#8217;t fire during tracking loops, and while a menu is open, AppKit is tracking that via an event tracking loop. You can submit a feedback request to get modifier changes during event tracking. But what it really sounds like is that you want a way to provide alternate menu items via SwiftUI.</p>

</div></div>
</div>


<h2 class="wp-block-heading">Windows, Scenes, Sheets, Popovers and MenuBarExtra</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-518fc4c1-ee39-42f7-802c-daafb8cca4c2" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="win-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-518fc4c1-ee39-42f7-802c-daafb8cca4c2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-518fc4c1-ee39-42f7-802c-daafb8cca4c2">Are windows available for iOS and iPadOS or only macOS? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-518fc4c1-ee39-42f7-802c-daafb8cca4c2">

<p class="p1">For iOS support of&nbsp;<span class="s1">Window</span>, please check release notes for future changes.</p>

</div></div>

<div id="win-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-518fc4c1-ee39-42f7-802c-daafb8cca4c2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-518fc4c1-ee39-42f7-802c-daafb8cca4c2">Using the new Window scene for splash screens <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-518fc4c1-ee39-42f7-802c-daafb8cca4c2">

<p><strong>Full Question:</strong> Can <code>Window</code> be used for splash screen finally (such as What’s New? or News startup) . I’ve had a lot of issues making <code>Scenes</code> work for Document-based (and opted out on iOS) because it starts an app with a Nondescript Files.</p>
<p><strong>Answer:</strong> <code>Window</code>&nbsp;is likely not the best expression for these types of onboarding experiences. A feedback for this type of functionality would definitely be appreciated though!</p>

</div></div>

<div id="win-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-518fc4c1-ee39-42f7-802c-daafb8cca4c2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-518fc4c1-ee39-42f7-802c-daafb8cca4c2">Creating an onboarding experience with SwiftUI <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-518fc4c1-ee39-42f7-802c-daafb8cca4c2">

<p><strong>Full Question:</strong> Pages and Numbers are both document-based apps which have a beautiful onboarding experience. How do I build such an onboarding experience for my document-based app using SwiftUI?</p>
<p><strong>Answer:</strong> Hi &#8211; this is a great question! While we do not currently have a high-level concept in SwiftUI for this type of flow, it may be possible to combine the new <code>Window</code> scene together with the new <code>OpenDocumentAction</code> and <code>NewDocumentAction</code> to create it. You would need to define the Window as the primary (first) scene in your app, however. It&#8217;s possible there may be some drawbacks to this approach, so I&#8217;d love a feedback for an enhancement in this area.</p>

</div></div>

<div id="win-4" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-3-518fc4c1-ee39-42f7-802c-daafb8cca4c2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-518fc4c1-ee39-42f7-802c-daafb8cca4c2">Can a presented view switch between popover and sheet style, depending on size class? </p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-3-518fc4c1-ee39-42f7-802c-daafb8cca4c2">

<p><strong>Full Question:</strong> Is it possible to have a presented view that switches between the popover/sheet presentation styles depending on the size class (i.e., sheet in compact, popover in regular)? </p>



<p><strong>Answer:</strong> Yes! You can do this by creating a custom view modifier that uses looks at the&nbsp;<code>UserInterfaceSizeClass</code>. Custom modifiers are great for conditional combinations of other modifiers, views, etc. and this is a perfect use case.</p>



<p>We have an example of this use case in the&nbsp;<a href="https://developer.apple.com/documentation/swiftui/bringing_multiple_windows_to_your_swiftui_app" target="_blank" rel="noreferrer noopener">BookClub sample app</a>, in&nbsp;<code>ProgressEditor.swift</code>.</p>

</div></div>

<div id="win-5" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-4-518fc4c1-ee39-42f7-802c-daafb8cca4c2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-518fc4c1-ee39-42f7-802c-daafb8cca4c2">Is it possible to control  a MenuBarExtra window width and height? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-4-518fc4c1-ee39-42f7-802c-daafb8cca4c2">

<p><strong>Full Question:</strong> When using the new <code>MenuBarExtra</code> in window style is it possible to control the width and maximum height of the content window?</p>



<p><strong>Answer:</strong> Hi &#8211; great question. The window size should be derived from the content provided to it, though we do impose a minimum and maximum on the resulting size. If you are seeing unexpected behavior in this area, please do file a feedback with a sample to reproduce it, and we can take a look.</p>

</div></div>

<div id="win-6" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-5-518fc4c1-ee39-42f7-802c-daafb8cca4c2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-518fc4c1-ee39-42f7-802c-daafb8cca4c2">Is it possible to create a windowless app with MenuBarExtra? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-5-518fc4c1-ee39-42f7-802c-daafb8cca4c2">

<p><strong>Full Question:</strong> When creating a <code>MenuBarExtra</code>, is it possible to create something that runs on its own, separate from the parent app? I have an app that users can save data to by means of various app extensions. If the app is closed, however, those changes don&#8217;t get synced to CloudKit. I was thinking of having a menu bar app that would essentially be my workaround: always listening, always active. Can a MenuBarExtra do that for me?</p>



<p><strong>Answer:</strong> Hi &#8211; you can certainly define a SwiftUI&nbsp;<code>App</code>&nbsp;with only a&nbsp;<code>MenuBarExtra</code>&nbsp;<code>Scene</code>. If your app should not show a Dock icon, that will require some changes to the&nbsp;<code>Info.plist</code>&nbsp;file, which should be noted in the documentation for&nbsp;<code>MenuBarExtra</code>.</p>



<p>Posting that bit of documentation here as well: </p>



<pre class="wp-block-verse">For apps that only show in the menu bar, a common behavior is for the app to not display its icon in either the Dock or the application switcher. To enable this behavior, set the LSUIElement flag in your app’s Info.plist file to true.</pre>



<p>See See&nbsp;<a href="https://developer.apple.com/documentation/swiftui/menubarextra" target="_blank" rel="noreferrer noopener">https://developer.apple.com/documentation/swiftui/menubarextra</a></p>

</div></div>

<div id="win-7" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-6-518fc4c1-ee39-42f7-802c-daafb8cca4c2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-518fc4c1-ee39-42f7-802c-daafb8cca4c2">How to make MenuBarExtra persistent after app quits? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-6-518fc4c1-ee39-42f7-802c-daafb8cca4c2">

<p><strong>Full Question:</strong> With the new <code>MenuBarExtra</code> API on the Mac, if I want the menu item to be persistent after my app quits, do I need to do any extra work (e.g. adding a login item) or does the system automagically make sure it appears after reboot/logout?</p>



<p><strong>Answer:</strong> Hi &#8211; this is a great question. You can certainly use&nbsp;<code>MenuBarExtra</code>&nbsp;to create a standalone menu bar app, though you may want to look into the&nbsp;<code>Info.plist</code>&nbsp;changes noted in the documentation:</p>



<pre class="wp-block-verse">For apps that only show in the menu bar, a common behavior is for the app to not display its icon in either the Dock or the application switcher. To enable this behavior, set the <code>LSUIElement</code> flag in your app’s <code>Info.plist</code> file to <code>true</code>.</pre>



<p>If the menu bar app is used in conjunction with a main app, then you&#8217;ll need to package it together (ie, the &#8220;helper app&#8221; model). Adding a login item sounds like the way to go if you want it to show at login regardless of the user&#8217;s preference for restoring state.</p>



<p>We&#8217;d also certainly welcome any feedbacks for enhancement requests in this area as well.</p>

</div></div>
</div>


<h2 class="wp-block-heading">Other Questions</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-083e3fc7-73a3-4128-affd-ca1dd9d9dc60" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="other-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-083e3fc7-73a3-4128-affd-ca1dd9d9dc60" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-083e3fc7-73a3-4128-affd-ca1dd9d9dc60">Any updates related to UI testing in SwiftUI apps? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-083e3fc7-73a3-4128-affd-ca1dd9d9dc60">

<p><strong>Full Question:</strong> Curious if there&#8217;s updates related to UI testing in SwiftUI apps? Or should I be thinking more in terms of testing the model layer that drives the declarative UI?</p>



<p><strong>Answer:</strong> Our recommendation is still to thoroughly test your model layer. In my experience, the best SwiftUI apps move their logic into model code, using SwiftUI as a declarative mapping from that model state to views. Then your tests of the model layer are effectively tests of the resulting UI as well</p>

</div></div>

<div id="other-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-083e3fc7-73a3-4128-affd-ca1dd9d9dc60" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-083e3fc7-73a3-4128-affd-ca1dd9d9dc60">Is it possible to reorder items and insert into an outline group?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-083e3fc7-73a3-4128-affd-ca1dd9d9dc60">

<p><strong>Answer:</strong> SwiftUI doesn’t have much in the way of automatic support for that, I’m afraid. I’d love a Feedback with details of your specific use case. We did expose public API for <code>disclosureGroupStyle</code> this year, which might be worth investigating.</p>
<p><strong>User Reply: </strong>I&nbsp;was&nbsp;thinking&nbsp;this&nbsp;could&nbsp;be&nbsp;a&nbsp;normal list,&nbsp;but&nbsp;there&nbsp;a&nbsp;limits with&nbsp;cross-section&nbsp;item&nbsp;moves&nbsp;that&nbsp;I&nbsp;end&nbsp;up&nbsp;tripping&nbsp;over.</p>
<p><strong>Answer: </strong><span style="font-size: inherit; background-color: initial;">Makes sense. With the current API, I’d use a view model that vends the items as if they are a flat array, then style the items based on their apparent depth. That would let you use <code>onMove</code> or the awesome new editing support on <code>List</code>&nbsp;to update your view model.</span></p>

</div></div>

<div id="other-4" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-083e3fc7-73a3-4128-affd-ca1dd9d9dc60" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-083e3fc7-73a3-4128-affd-ca1dd9d9dc60">When is onAppear/onDisappear called? How do they compare to the UIKit equivalents of did/willAppear? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-083e3fc7-73a3-4128-affd-ca1dd9d9dc60">

<p>hi, the framework makes no guarantees on the specific timeframes on when these methods are called, but you&nbsp;<em>can</em>&nbsp;be sure that onAppear will&nbsp;<em>always</em>&nbsp;be called before the view is visible to the user and onDisappear will&nbsp;<em>never</em>&nbsp;be called while the view is on screen.</p>



<p>We have recently updated the documentation for these methods online to clarify these details; see&nbsp;</p>



<p><a href="https://developer.apple.com/documentation/SwiftUI/AnyView/onAppear(perform:)" target="_blank" rel="noreferrer noopener">https://developer.apple.com/documentation/SwiftUI/AnyView/onAppear(perform:)</a></p>



<p><a href="https://developer.apple.com/documentation/SwiftUI/AnyView/onDisappear(perform:)" target="_blank" rel="noreferrer noopener">https://developer.apple.com/documentation/SwiftUI/AnyView/onDisappear(perform:)</a></p>



<p>in terms of a comparison to UIKit, there is not a direct parallel. The UIKit methods are invoked specifically around when views become visible/not visible to the user, whereas the SwiftUI calls are tied more to when the views are constructed/torn down, rather than visually presented.</p>

</div></div>

<div id="other-5" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-3-083e3fc7-73a3-4128-affd-ca1dd9d9dc60" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-083e3fc7-73a3-4128-affd-ca1dd9d9dc60">Difference between ViewModifier and custom Views</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-3-083e3fc7-73a3-4128-affd-ca1dd9d9dc60">

<p><strong>Full Question:</strong> <code>ViewModifier</code> question: What’s the difference between a custom <code>ViewModifier</code> (without <code>DynamicProperty</code>) that uses some built-in modifiers in <code>body(content:)</code>, and a custom <code>View</code> extension func that just use those built-in modifiers?</p>



<p>Similarly, what’s the difference between a custom <code>ViewModifier</code> with some <code>DynamicProperty</code> and a custom <code>View</code> with some <code>DynamicProperty</code> (also has a <code>@ViewBuilder</code> content property to receive content to modify) ? I think two have the same render result and behavior.</p>



<p><strong>Answer:</strong> Because of the way a <code>ViewModifier</code> is expressed, the engine knows it&#8217;s not changing the&nbsp;<code>content</code>&nbsp;passed in and can apply performance optimizations (compared to just an extension on <code>View</code>).</p>

</div></div>

<div id="other-6" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-4-083e3fc7-73a3-4128-affd-ca1dd9d9dc60" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-083e3fc7-73a3-4128-affd-ca1dd9d9dc60">When using .contextMenu on a List , how can I find out what was actually selected? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-4-083e3fc7-73a3-4128-affd-ca1dd9d9dc60">

<p><strong>Full Question:</strong> A macOS question. When using <code>.contextMenu</code> on a <code>List</code>, how can I find out what was actually selected? When looking at Finder, the selected item (i.e., item on which the action should be performed on) is either the selection (1 or more) OR it is the item that has been right clicked on directly. How can I replicate this behavior using SwiftUI?</p>



<p><strong>Answer:</strong> Check out the new context menu API that accepts a&nbsp;<code>forSelectionType</code>&nbsp;parameter. This passes the value of the selection into the modifier for you to act on.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">List(selection: $selection) {
 ...
}
.contextMenu(forSelectionType: MySelection.self) { selection in
 // check selection
}</code></pre>



<p>Be sure to match the type of your lists selection to the type you provide to the context menu modifier.</p>



<p><a href="https://developer.apple.com/documentation/swiftui/view/contextaction(forselectiontype:action:)" target="_blank" rel="noreferrer noopener">https://developer.apple.com/documentation/swiftui/view/contextaction(forselectiontype:action:)</a></p>

</div></div>

<div id="other-7" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-5-083e3fc7-73a3-4128-affd-ca1dd9d9dc60" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-083e3fc7-73a3-4128-affd-ca1dd9d9dc60">Is there a value of avg. duration that no View&#8217;s body should go above for avoiding performance issues?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-5-083e3fc7-73a3-4128-affd-ca1dd9d9dc60">

<p><strong>Full Question:</strong> Question regarding the SwiftUI Instrument: Is there a value of avg. duration that no View&#8217;s body should go above when rendering for avoiding performance issues/hitches ?</p>



<p><strong>Answer:</strong> View’s body properties should be cheap and avoid any potentially expensive work. If there are things you need in your views body, its best to pre-compute that into a piece of state that you can pass your views.</p>



<p>Concretely, each frame has a hard deadline of generally 1/60s or 1/120s (depending on the refresh rate of the display) to render its content. Thats 8ms in the fastest case.</p>



<p>Thats for the entire screen to render its content though, not just your single view . So if any one view is taking more than a few ms to finish calling body, you’ll run into issues.</p>



<p>If you’re using Swift concurrency to move work off the main thread, consider watching this session:&nbsp;<a href="https://developer.apple.com/videos/play/wwdc2022/110350/" target="_blank" rel="noreferrer noopener"></a><a href="https://developer.apple.com/videos/play/wwdc2022/110350/" target="_blank" rel="noreferrer noopener">Visualize and optimize Swift concurrency</a>. This is all mostly related to scrolling performance. Other kinds of things like app launch or navigation pushes will typically take longer than multiple frames to render, but those situations have different expectations around frame deadlines.</p>

</div></div>

<div id="other-8" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-6-083e3fc7-73a3-4128-affd-ca1dd9d9dc60" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-083e3fc7-73a3-4128-affd-ca1dd9d9dc60">Are there any tools to help implement good design? (e.g., Sketch export tools to generate code for components/symbols)</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-6-083e3fc7-73a3-4128-affd-ca1dd9d9dc60">

<p><strong>Full Question:</strong> Having implemented several SwiftUI apps, I still consider its constraints concerning custom designs a challenge to communicate to designers. Apart from HIG or trying out, do you know any resources/tooling which helps to implement good design? Like are their Sketch export tools to generate code for components/symbols?</p>



<p><strong>Answer:</strong> I know there are Figma (and potentially Sketch) plugins for generating SwiftUI code from designs, however I haven&#8217;t personally used them so I can&#8217;t vouch for how well they work</p>



<p>Apple also provides design tool plugins, which make it easier for designers to create mock ups that use stock system components and styles: <a href="https://developer.apple.com/design/resources/" target="_blank" rel="noreferrer noopener">https://developer.apple.com/design/resources/</a></p>



<p>Of course, nothing is going to be as high fidelity as the designer jumping into SwiftUI directly. Many designers have found SwiftUI to be surprisingly approachable and there are a number of SwiftUI resources available on the internet targeted at teaching designers to code SwiftUI views.</p>

</div></div>

<div id="other-9" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-7-083e3fc7-73a3-4128-affd-ca1dd9d9dc60" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-083e3fc7-73a3-4128-affd-ca1dd9d9dc60">Can onTapGesture be used more than once on a single view?  Like single-click to select, double-click to open in a window?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-7-083e3fc7-73a3-4128-affd-ca1dd9d9dc60">

<p><code>onTapGesture</code>&nbsp;can indeed be used more than once but you need to get them in the right order, so that the double-tap fails before the single-tap succeeds. Something like this:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">ItemView()
    .onTapGesture(count: 2) {
        ...
    }
    .onTapGesture {
        ...
    }</code></pre>

</div></div>

<div id="other-10" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-8-083e3fc7-73a3-4128-affd-ca1dd9d9dc60" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-083e3fc7-73a3-4128-affd-ca1dd9d9dc60">Tip: Modifying the background of a SwiftUI List <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4a1.png" alt="💡" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/26a0.png" alt="⚠" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-8-083e3fc7-73a3-4128-affd-ca1dd9d9dc60">

<p><strong>Engineer:</strong> We’ve gotten a few questions about modifying the background of a SwiftUI List.</p>



<p>In general, you should not rely on implementation details of a framework (including SwiftUI) to achieve specific behaviors in your apps. The release notes did call out the change in implementation of List since we were aware of developers using UIKit methods to style their Lists in the past. This is a known limitation, but we realize this is a popular request, so rest assured we have noted the feedback here and in the SwiftUI lounge!</p>



<hr class="wp-block-separator has-alpha-channel-opacity"/>



<p><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/26a0.png" alt="⚠" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <strong>SwiftUI-Lab Comment</strong>: Good news! Starting with beta 3, a new modifier exists that will make it possible to work with the background of views with scroll views: <a href="https://developer.apple.com/documentation/swiftui/text/scrollcontentbackground(_:)" target="_blank" rel="noreferrer noopener">scrollContentBackground(_ visibility: Visibility)</a></p>



<p>By hiding the standard system background, you may put your own:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">List {
    Text(&quot;One&quot;)
    Text(&quot;Two&quot;)
    Text(&quot;Three&quot;)
}
.scrollContentBackground(.hidden)
.background(.green.gradient)</code></pre>

</div></div>
</div>


<hr class="wp-block-separator has-css-opacity"/>



<h2 class="wp-block-heading">Summary</h2>



<p>Congratulations for reaching the end of this long post. I hope you enjoyed the SwiftUI Digital Lounge content.</p>



<p>Please feel free to comment below, and follow me on twitter if you would like to be notified when new articles come out. Until next time! </p>



<script>
jQuery( document ).ready(function() {
    
    // ----------------------------
    // ADD COPY BUTTONS
    var headings = jQuery("div.wp-block-ub-content-toggle-accordion-content-wrap");
    
    jQuery.each(headings, function (i, e) {
        var anchor = jQuery(e).parent().attr('id');
        
        var btn = jQuery('<button onClick="copyQuestionLink(\'' + anchor + '\')" title="Copy link to this question" type="button">#</button>');
        
        btn.css('position', 'absolute');
        btn.css('padding', '1px 7px');
        btn.css('right', '10px');
        btn.css('bottom', '10px');
                
        btn.appendTo(e);
    });

    
    // ----------------------------
    // EXPAND AND GO TO ANCHOR
    var h = window.location.hash;
    
    if(h) {
        let selector = "div" + h + ".wp-block-ub-content-toggle-accordion > div";
        
        var a = jQuery(selector).first();
        
        if(a) {
            a.click();
            
            jQuery('html, body').animate({
              scrollTop: a.offset().top
            });
            
        }
    }
});

function copyQuestionLink(anchor) {
    var link = "https://www.swiftui-lab.com/digital-lounges-2022#" + anchor;
    
    // Copy to clipboard
    var aux = document.createElement("input");
    aux.setAttribute("value", link);
    document.body.appendChild(aux);
    aux.select();
    document.execCommand("copy");
    document.body.removeChild(aux);
    
    alert("Question link copied to clipboard: " + link);
}
</script>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/digital-lounges-2022/">WWDC 2022: Lessons from the SwiftUI Digital Lounges</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://swiftui-lab.com/digital-lounges-2022/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
		<item>
		<title>SwiftUI &#8217;22 in Numbers (and a few Charts)</title>
		<link>https://swiftui-lab.com/swiftui-22-in-numbers/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=swiftui-22-in-numbers</link>
					<comments>https://swiftui-lab.com/swiftui-22-in-numbers/#comments</comments>
		
		<dc:creator><![CDATA[javier]]></dc:creator>
		<pubDate>Tue, 14 Jun 2022 13:11:13 +0000</pubDate>
				<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">https://swiftui-lab.com/?p=3485</guid>

					<description><![CDATA[<p>After posting this article, I realized that due to a bug in SourceKit, the numbers here are a bit underestimated. They do not include the Charts API types, methods and properties. SourceKit is currently crashing when trying to open the interface file of the Charts API. I will update the numbers as soon as sourcekit ... <a title="SwiftUI &#8217;22 in Numbers (and a few Charts)" class="read-more" href="https://swiftui-lab.com/swiftui-22-in-numbers/" aria-label="More on SwiftUI &#8217;22 in Numbers (and a few Charts)">Read more</a></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/swiftui-22-in-numbers/">SwiftUI &#8217;22 in Numbers (and a few Charts)</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p class="has-white-color has-luminous-vivid-orange-background-color has-text-color has-background">After posting this article, I realized that due to a bug in SourceKit, the numbers here are a bit underestimated. They do not include the Charts API types, methods and properties. SourceKit is currently crashing when trying to open the interface file of the Charts API. I will update the numbers as soon as sourcekit is fixed.</p>



<p>One more year, the <strong>WWDC</strong> has come and gone. And so it is time for me to start writing articles on the exciting changes and additions it has left us. Every year, in order to better plan for the updates of the <a href="https://swiftui-lab.com/companion/">Companion for SwiftUI app</a>, my first step post-WWDC is to go through the entire API first. This will let me see how much work I have ahead.</p>



<p>This is a great opportunity for me to translate all these changes into numbers, and since this year SwiftUI adds a new Charts API, why not take the chance to plot those numbers too.</p>



<p>Today we will also look to the past. We are now starting the fourth year in SwiftUI history, so I think it is a good time to put those numbers into perspective and see how much the API has evolved.</p>



<h3 class="wp-block-heading"><strong>New types</strong></h3>



<p class="has-text-align-left">The following chart shows the number of types that are new, deprecated, or already existed but are now extended to a new platform (e.g., Tables where only available on macOS, but now they can also be used with iOS).</p>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="550" src="https://swiftui-lab.com/wp-content/uploads/2022/06/wwdc-2022-chart-1-1-1024x550.png" alt="" class="wp-image-3500" srcset="https://swiftui-lab.com/wp-content/uploads/2022/06/wwdc-2022-chart-1-1-1024x550.png 1024w, https://swiftui-lab.com/wp-content/uploads/2022/06/wwdc-2022-chart-1-1-300x161.png 300w, https://swiftui-lab.com/wp-content/uploads/2022/06/wwdc-2022-chart-1-1-768x413.png 768w, https://swiftui-lab.com/wp-content/uploads/2022/06/wwdc-2022-chart-1-1.png 1029w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<figure class="wp-block-table is-style-regular"><table class="has-background" style="background-color:#f3f4f5"><thead><tr><th>Type</th><th class="has-text-align-center" data-align="center">Added</th><th class="has-text-align-center" data-align="center"> <strong>Deprecated</strong> </th><th class="has-text-align-center" data-align="center">   Extended   </th></tr></thead><tbody><tr><td>Protocols</td><td class="has-text-align-center" data-align="center">5</td><td class="has-text-align-center" data-align="center">0</td><td class="has-text-align-center" data-align="center">9</td></tr><tr><td>Views</td><td class="has-text-align-center" data-align="center">20</td><td class="has-text-align-center" data-align="center">2</td><td class="has-text-align-center" data-align="center">4</td></tr><tr><td>Shapes</td><td class="has-text-align-center" data-align="center">1</td><td class="has-text-align-center" data-align="center">&#8211;</td><td class="has-text-align-center" data-align="center">&#8211;</td></tr><tr><td>Property Wrappers</td><td class="has-text-align-center" data-align="center">&#8211;</td><td class="has-text-align-center" data-align="center">&#8211;</td><td class="has-text-align-center" data-align="center">&#8211;</td></tr><tr><td>Scenes</td><td class="has-text-align-center" data-align="center">2</td><td class="has-text-align-center" data-align="center">&#8211;</td><td class="has-text-align-center" data-align="center">&#8211;</td></tr><tr><td>Environment Values</td><td class="has-text-align-center" data-align="center">20</td><td class="has-text-align-center" data-align="center">1</td><td class="has-text-align-center" data-align="center">2</td></tr><tr><td>Style Protocols</td><td class="has-text-align-center" data-align="center">5</td><td class="has-text-align-center" data-align="center">1</td><td class="has-text-align-center" data-align="center">2</td></tr><tr><td>Style Types</td><td class="has-text-align-center" data-align="center">19</td><td class="has-text-align-center" data-align="center">5</td><td class="has-text-align-center" data-align="center">4</td></tr></tbody><tfoot><tr><td><strong>Total</strong></td><td class="has-text-align-center" data-align="center"><strong>72</strong></td><td class="has-text-align-center" data-align="center"><strong>9</strong></td><td class="has-text-align-center" data-align="center"><strong>21</strong></td></tr></tfoot></table></figure>



<p>Although these numbers don&#8217;t look too impressive, when we look deeper, we find out that the existing views and protocols have exploded in number of methods, properties and initializers. See below.</p>



<h3 class="wp-block-heading"><strong>New initializers, methods and properties</strong></h3>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="353" src="https://swiftui-lab.com/wp-content/uploads/2022/06/wwdc-2022-chart-2-1-1024x353.png" alt="" class="wp-image-3501" srcset="https://swiftui-lab.com/wp-content/uploads/2022/06/wwdc-2022-chart-2-1-1024x353.png 1024w, https://swiftui-lab.com/wp-content/uploads/2022/06/wwdc-2022-chart-2-1-300x103.png 300w, https://swiftui-lab.com/wp-content/uploads/2022/06/wwdc-2022-chart-2-1-768x265.png 768w, https://swiftui-lab.com/wp-content/uploads/2022/06/wwdc-2022-chart-2-1.png 1029w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<figure class="wp-block-table"><table class="has-background" style="background-color:#e7f5fe"><thead><tr><th></th><th class="has-text-align-center" data-align="center">Added</th><th class="has-text-align-center" data-align="center"> <strong>Deprecated</strong> </th><th class="has-text-align-center" data-align="center">    <strong>Extended</strong>    </th></tr></thead><tbody><tr><td>Initializers</td><td class="has-text-align-center" data-align="center">193</td><td class="has-text-align-center" data-align="center">15</td><td class="has-text-align-center" data-align="center">38</td></tr><tr><td>Instance methods</td><td class="has-text-align-center" data-align="center">162</td><td class="has-text-align-center" data-align="center">6</td><td class="has-text-align-center" data-align="center">32</td></tr><tr><td>Instance properties</td><td class="has-text-align-center" data-align="center">46</td><td class="has-text-align-center" data-align="center">5</td><td class="has-text-align-center" data-align="center">12</td></tr></tbody><tfoot><tr><td><strong>Total</strong></td><td class="has-text-align-center" data-align="center"><strong>401</strong></td><td class="has-text-align-center" data-align="center"><strong>26</strong></td><td class="has-text-align-center" data-align="center"><strong>82</strong></td></tr></tfoot></table></figure>



<h3 class="wp-block-heading"><strong>The Year Of&#8230;</strong></h3>



<p>Every WWDC brought updates in multiple areas. But each had its highlights:</p>



<p><strong>WWDC &#8216;2019:</strong> The year SwiftUI was born, need I say more?</p>



<p><strong>WWDC &#8216;2020:</strong> Lazy grids, better scroll support, a new SwiftUI life cycle for our apps, Scenes, Widgets, matchedGeomtryEffect.</p>



<p><strong>WWDC &#8216;2021</strong>: Audio graphs, tables for macOS, timeline view, async images and other async features, search, enum-like styles, canvas view. </p>



<p><strong>WWDC &#8216;2022</strong>: Charts, sharing, a badly needed navigation view improvement, an exciting new layout protocol, tables arrived to iOS, improvements for UIKit/AppKit integration, a new window scene, a new menu bar scene, eager grids (as opposed to lazy grids), focus sections now supported on macOS.</p>



<p><strong>WWDC &#8216;2023</strong>: If I only new&#8230; <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f52e.png" alt="🔮" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>



<h3 class="wp-block-heading"><strong>Evolution of SwiftUI in Numbers</strong></h3>



<p>The following charts show how many types, initializers, methods and properties where added every year:</p>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="895" src="https://swiftui-lab.com/wp-content/uploads/2022/06/wwdc-2022-chart-3-1024x895.png" alt="" class="wp-image-3502" srcset="https://swiftui-lab.com/wp-content/uploads/2022/06/wwdc-2022-chart-3-1024x895.png 1024w, https://swiftui-lab.com/wp-content/uploads/2022/06/wwdc-2022-chart-3-300x262.png 300w, https://swiftui-lab.com/wp-content/uploads/2022/06/wwdc-2022-chart-3-768x671.png 768w, https://swiftui-lab.com/wp-content/uploads/2022/06/wwdc-2022-chart-3.png 1029w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>The same charts as before, but this is showing the accumulated totals (existing and new) each year:</p>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="895" src="https://swiftui-lab.com/wp-content/uploads/2022/06/wwdc-2022-chart-4-1024x895.png" alt="" class="wp-image-3503" srcset="https://swiftui-lab.com/wp-content/uploads/2022/06/wwdc-2022-chart-4-1024x895.png 1024w, https://swiftui-lab.com/wp-content/uploads/2022/06/wwdc-2022-chart-4-300x262.png 300w, https://swiftui-lab.com/wp-content/uploads/2022/06/wwdc-2022-chart-4-768x671.png 768w, https://swiftui-lab.com/wp-content/uploads/2022/06/wwdc-2022-chart-4.png 1029w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading"><strong>Wrapping Up</strong></h2>



<p>After looking at those numbers, it seems we have some work to do, so I better get started. But first, since it feels weird posting without some code, here is a gist with all the SwiftUI charts from this article. The code is not too elegant, as I wrote it while learning, gathering data and writing this post. Now, with the disclaimer out of the way, here&#8217;s the <a href="https://gist.github.com/swiftui-lab/e317fbe4e7bb911c073c845e57cb318b" target="_blank" rel="noreferrer noopener">link</a>.</p>



<p>Very soon I will be posting, same as last year, a curated and categorized list of the Q&amp;A&#8217;s of the SwiftUI Digital Lounges. Sometimes, the best questions are those we did not think to ask&#8230; Stay tuned!</p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/swiftui-22-in-numbers/">SwiftUI &#8217;22 in Numbers (and a few Charts)</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://swiftui-lab.com/swiftui-22-in-numbers/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>Advanced SwiftUI Animations &#8211; Part 5: Canvas</title>
		<link>https://swiftui-lab.com/swiftui-animations-part5/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=swiftui-animations-part5</link>
					<comments>https://swiftui-lab.com/swiftui-animations-part5/#respond</comments>
		
		<dc:creator><![CDATA[javier]]></dc:creator>
		<pubDate>Fri, 10 Sep 2021 14:08:57 +0000</pubDate>
				<category><![CDATA[Animations]]></category>
		<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">https://swiftui-lab.com/?p=3175</guid>

					<description><![CDATA[<p>This fifth part of the Advanced SwiftUI Animations series will explore the Canvas view. Technically, it is not an animated view, but when combined with TimelineView from Part 4, it brings a lot of interesting possibilities, as shown in this digital rain example: I had to delay this article several weeks because the Canvas view ... <a title="Advanced SwiftUI Animations &#8211; Part 5: Canvas" class="read-more" href="https://swiftui-lab.com/swiftui-animations-part5/" aria-label="More on Advanced SwiftUI Animations &#8211; Part 5: Canvas">Read more</a></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/swiftui-animations-part5/">Advanced SwiftUI Animations &#8211; Part 5: Canvas</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>This fifth part of the Advanced SwiftUI Animations series will explore the <code>Canvas</code> view. Technically, it is not an animated view, but when combined with TimelineView from <a href="https://swiftui-lab.com/swiftui-animations-part4/">Part 4</a>, it brings a lot of interesting possibilities, as shown in this digital rain example:</p>



<figure class="wp-block-video aligncenter"><video autoplay controls loop src="https://swiftui-lab.com/wp-content/uploads/2021/08/matrix-loop-small.mp4"></video></figure>



<p>I had to delay this article several weeks because the Canvas view was a little unstable. We are still in the beta period, so that was to be expected. However, the crashes produced by the view made some of the examples here not ready for sharing. Although not all issues were resolved, every example now runs smoothly. At the end of the article, I will point out some of the workarounds I found.</p>



<h2 class="wp-block-heading"><strong>A Simple Canvas</strong></h2>



<p>In a nutshell, the canvas is a SwiftUI view that gets drawing instructions from a rendering closure. Unlike most closures in the SwiftUI API,  it is not a view builder. This means there are no restrictions to the swift language we can use.</p>



<p>The closure receives two parameters: <strong>context</strong> and <strong>size</strong>. The context uses a new SwiftUI type <strong>GraphicsContext</strong>, which packs a lot of methods and properties that will let us draw just about anything. Here&#8217;s a basic example of how a Canvas can be arranged:</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="269" height="278" src="https://swiftui-lab.com/wp-content/uploads/2021/08/canvas-1.png" alt="" class="wp-image-3182"/></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    var body: some View {
        Canvas { context, size in
            let rect = CGRect(origin: .zero, size: size).insetBy(dx: 25, dy: 25)

            // Path
            let path = Path(roundedRect: rect, cornerRadius: 35.0)

            // Gradient
            let gradient = Gradient(colors: [.green, .blue])
            let from = rect.origin
            let to = CGPoint(x: rect.width + from.x, y: rect.height + from.y)
            
            // Stroke path
            context.stroke(path, with: .color(.blue), lineWidth: 25)
            
            // Fill path
            context.fill(path, with: .linearGradient(gradient,
                                                     startPoint: from,
                                                     endPoint: to))
        }
    }
}</code></pre>



<p>The Canvas initializer has other parameters (opaque, colorMode and rendersAsynchronously). Refer to <a href="https://developer.apple.com/documentation/swiftui/canvas/init(opaque:colormode:rendersasynchronously:renderer:symbols:)" target="_blank" rel="noreferrer noopener">Apple&#8217;s documentation</a> to learn more about them.</p>



<h2 class="wp-block-heading"><strong>The GraphicsContext</strong></h2>



<p>The <strong>GraphicsContext</strong> is full of methods and properties, but it is not my intention to make this post a reference where I list every one of them. It is a long list that can be a little overwhelming. However, when I was updating the <a href="https://swiftui-lab.com/companion/">Companion for SwiftUI app</a>, I did have to go through all of them. That gave me an overall view. I will try to categorize what&#8217;s available, so you get the same picture.</p>



<ul><li><a href="#paths">Drawing Paths</a></li><li><a href="#images">Drawing Images and Text</a></li><li><a href="#symbols">Drawing Symbols (aka SwiftUI views)</a></li><li><a href="#mutating">Mutating the Graphics Context</a></li><li><a href="#coregraphics">Reusing CoreGraphics Code</a></li><li><a href="#animating">Animating the Canvas</a></li><li><a href="#crashes">Canvas Crashes</a></li></ul>


<hr class="ub_divider" id="ub_divider_0ee9c795-ee50-46be-82a6-d4982010d422"></hr>


<h2 class="wp-block-heading" id="paths"><strong>Paths</strong></h2>



<p>The first thing you need to do to draw a path, is to create it. Since the first version of SwiftUI, a path can be created and modified in many ways. Some of the available initializers are:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">let path = Path(roundedRect: rect, cornerSize: CGSize(width: 10, height: 50), style: .continuous)</code></pre>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">let cgPath = CGPath(ellipseIn: rect, transform: nil)
let path = Path(cgPath)</code></pre>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">let path = Path {
    let points: [CGPoint] = [
        .init(x: 10, y: 10),
        .init(x: 0, y: 50),
        .init(x: 100, y: 100),
        .init(x: 100, y: 0),
    ]
    
    $0.move(to: .zero)
    $0.addLines(points)
}
</code></pre>



<p>Paths can also be created from a SwiftUI shape. The Shape protocol has a path method you may use to create one:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">let path = Circle().path(in: rect)</code></pre>



<p>Of course, this also works with custom shapes:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">let path = MyCustomShape().path(in: rect)</code></pre>



<h3 class="wp-block-heading"><strong>Filling a Path</strong></h3>



<p>To fill a path, use the <code>context.fill()</code> method:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">fill(_ path: Path, with shading: GraphicsContext.Shading, style: FillStyle = FillStyle())</code></pre>



<p>The shading indicates how to fill the shape (with a color, a gradient, a tiled image, etc.). Use the FillStyle type if you need to indicate the style to use (i.e., even odd/antialiased properties).</p>



<h3 class="wp-block-heading"><strong>Stroking a Path</strong></h3>



<p>To stroke a path, use one of these GraphicsContext methods:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">stroke(_ path: Path, with shading: GraphicsContext.Shading, style: StrokeStyle)
stroke(_ path: Path, with shading: GraphicsContext.Shading, lineWidth: CGFloat = 1)</code></pre>



<p>You may specify a shading (color, gradient, etc) to indicate how to stroke the line. Use style if you need to specify dash, line cap, join, etc. Alternatively, you can just specify a line width.</p>



<p>For a full example of how to stroke and fill a shape, see the example above (section <strong>A Simple Canvas</strong>).</p>


<hr class="ub_divider" id="ub_divider_b515cdbd-4109-4bc9-8046-3d45c1135384"></hr>


<h2 class="wp-block-heading" id="images"><strong>Images and Text</strong></h2>



<p>Images and Text are drawn using the context <code>draw()</code> method, in one of its two versions:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">draw(image_or_text, at point: CGPoint, anchor: UnitPoint = .center)
draw(image_or_text, in rect: CGRect)</code></pre>



<p>In the case of images, there is an additional optional parameter for the second draw() version, style:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">draw(image, in rect: CGRect, style: FillStyle = FillStyle())</code></pre>



<p>Before one of these elements can be drawn, they must be resolved. By resolving, SwiftUI will take into account the environment  (e.g., color scheme, display resolution, etc.). In addition, resolving these elements expose some interesting properties that may be further used in our drawing logic. For example, the resolved text will tell us the final size of the text for the specified font. Or we can also change the shading of the resolved element before drawing it. To learn more about the available properties and methods, check <a href="https://developer.apple.com/documentation/swiftui/graphicscontext/resolvedimage" target="_blank" rel="noreferrer noopener">ResolvedImage</a> and <a href="https://developer.apple.com/documentation/swiftui/graphicscontext/resolvedtext" target="_blank" rel="noreferrer noopener">ResolvedText</a>.</p>



<p>Use the context <code>resolve()</code> method to get a <code>ResolvedImage</code> from <code>Image</code>, and <code>ResolvedText</code> from <code>Text</code>.</p>



<p>Resolving is optional, the <code>draw()</code> method also accepts <code>Image</code> and <code>Text</code> (instead of <code>ResolvedImage</code> and <code>ResolvedText</code>). In that case, <code>draw()</code> will resolve them automatically. This is convenient if you don&#8217;t have any use for the resolved properties and methods.</p>



<p>In this example, text is resolved. We use its size to figure out the gradient, and the shading to apply such gradient:</p>



<div class="wp-block-image"><figure class="aligncenter size-full is-resized"><img loading="lazy" decoding="async" src="https://swiftui-lab.com/wp-content/uploads/2021/08/canvas-2.png" alt="" class="wp-image-3206" width="302" height="166" srcset="https://swiftui-lab.com/wp-content/uploads/2021/08/canvas-2.png 604w, https://swiftui-lab.com/wp-content/uploads/2021/08/canvas-2-300x165.png 300w" sizes="(max-width: 302px) 100vw, 302px" /></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    var body: some View {
        Canvas { context, size in
            
            let midPoint = CGPoint(x: size.width/2, y: size.height/2)
            let font = Font.custom(&quot;Arial Rounded MT Bold&quot;, size: 36)
            
            var resolved = context.resolve(Text(&quot;Hello World!&quot;).font(font))
            
            let start = CGPoint(x: (size.width - resolved.measure(in: size).width) / 2.0, y: 0)
            let end = CGPoint(x: size.width - start.x, y: 0)
            
            resolved.shading = .linearGradient(Gradient(colors: [.green, .blue]),
                                               startPoint: start,
                                               endPoint: end)
            
            context.draw(resolved, at: midPoint, anchor: .center)
        }
    }
}</code></pre>


<hr class="ub_divider" id="ub_divider_f9905f3f-544b-46c9-86e3-9e954f24b7d9"></hr>


<h2 class="wp-block-heading" id="symbols"><strong>Symbols</strong></h2>



<p>When talking about Canvas, symbols refer to just any SwiftUI. Do not confuse with SF Symbols, which is a completely different thing. The Canvas view has a way of referencing a SwiftUI view, resolve it into a symbol, and then draw it.</p>



<p>Views to resolved, are passed in a ViewBuilder closure, as shown in the example below. In order to reference a view, it needs to be tagged with a unique hashable identifier. Note that a resolved symbol can be drawn more than once on a Canvas.</p>



<div class="wp-block-image"><figure class="aligncenter size-full is-resized"><img loading="lazy" decoding="async" src="https://swiftui-lab.com/wp-content/uploads/2021/08/canvas-3.png" alt="" class="wp-image-3211" width="243" height="184" srcset="https://swiftui-lab.com/wp-content/uploads/2021/08/canvas-3.png 486w, https://swiftui-lab.com/wp-content/uploads/2021/08/canvas-3-300x227.png 300w" sizes="(max-width: 243px) 100vw, 243px" /></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    var body: some View {
        Canvas { context, size in
            
            let r0 = context.resolveSymbol(id: 0)!
            let r1 = context.resolveSymbol(id: 1)!
            let r2 = context.resolveSymbol(id: 2)!
            
            context.draw(r0, at: .init(x: 10, y: 10), anchor: .topLeading)
            context.draw(r1, at: .init(x: 30, y: 20), anchor: .topLeading)
            context.draw(r2, at: .init(x: 50, y: 30), anchor: .topLeading)
            context.draw(r0, at: .init(x: 70, y: 40), anchor: .topLeading)

        } symbols: {
            RoundedRectangle(cornerRadius: 10.0).fill(.cyan)
                .frame(width: 100, height: 50)
                .tag(0)
            
            RoundedRectangle(cornerRadius: 10.0).fill(.blue)
                .frame(width: 100, height: 50)
                .tag(1)

            RoundedRectangle(cornerRadius: 10.0).fill(.indigo)
                .frame(width: 100, height: 50)
                .tag(2)
        }
    }
}</code></pre>



<p>The ViewBuilder can also use a ForEach. The same example can be rewritten like this:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    let colors: [Color] = [.cyan, .blue, .indigo]
    
    var body: some View {
        Canvas { context, size in
            
            let r0 = context.resolveSymbol(id: 0)!
            let r1 = context.resolveSymbol(id: 1)!
            let r2 = context.resolveSymbol(id: 2)!
            
            context.draw(r0, at: .init(x: 10, y: 10), anchor: .topLeading)
            context.draw(r1, at: .init(x: 30, y: 20), anchor: .topLeading)
            context.draw(r2, at: .init(x: 50, y: 30), anchor: .topLeading)
            context.draw(r0, at: .init(x: 70, y: 40), anchor: .topLeading)

        } symbols: {
            ForEach(Array(colors.enumerated()), id: \.0) { n, c in
                RoundedRectangle(cornerRadius: 10.0).fill(c)
                    .frame(width: 100, height: 50)
                    .tag(n)
            }
        }
    }
}</code></pre>



<h3 class="wp-block-heading" id="animated_symbols">Animated Symbols</h3>



<p>I was pleasantly surprised when I tested what would happen if the View resolved as a symbol, is animated. Guess what, the Canvas will continuously redraw it to keep the animation going:</p>



<div class="wp-block-image"><figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="188" height="162" src="https://swiftui-lab.com/wp-content/uploads/2021/08/canvas-4.gif" alt="" class="wp-image-3214"/></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    var body: some View {
        Canvas { context, size in
            
            let symbol = context.resolveSymbol(id: 1)!
            
            context.draw(symbol, at: CGPoint(x: size.width/2, y: size.height/2), anchor: .center)

        } symbols: {
            SpinningView()
                .tag(1)
        }
    }
}

struct SpinningView: View {
    @State private var flag = true
    
    var body: some View {
        Text(&quot;<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f3d0.png" alt="🏐" class="wp-smiley" style="height: 1em; max-height: 1em;" />&quot;)
            .font(.custom(&quot;Arial&quot;, size: 72))
            .rotationEffect(.degrees(flag ? 0 : 360))
            .onAppear{
                withAnimation(.linear(duration: 1.0).repeatForever(autoreverses: false)) {
                    flag.toggle()
                }
            }
    }
}</code></pre>


<hr class="ub_divider" id="ub_divider_73d8a531-67be-4558-bf66-5ea0ab27fa8c"></hr>


<h2 class="wp-block-heading" id="mutating"><strong>Mutating the Graphic Context</strong></h2>



<p>The graphics context can be mutated, using one of the following methods:</p>



<ul><li><a href="https://developer.apple.com/documentation/swiftui/graphicscontext/addfilter(_:options:)?changes=l_7_8_3" target="_blank" rel="noreferrer noopener">addFilter</a></li><li><a href="https://developer.apple.com/documentation/swiftui/graphicscontext/clip(to:style:options:)" target="_blank" rel="noreferrer noopener">clip</a></li><li><a href="https://developer.apple.com/documentation/swiftui/graphicscontext/cliptolayer(opacity:options:content:)/" target="_blank" rel="noreferrer noopener">clipToLayer</a></li><li><a href="https://developer.apple.com/documentation/swiftui/graphicscontext/concatenate(_:)" target="_blank" rel="noreferrer noopener">concatenate</a></li><li><a href="https://developer.apple.com/documentation/swiftui/graphicscontext/rotate(by:)" target="_blank" rel="noreferrer noopener">rotate</a></li><li><a href="https://developer.apple.com/documentation/swiftui/graphicscontext/scaleby(x:y:)" target="_blank" rel="noreferrer noopener">scaleBy</a></li><li><a href="https://developer.apple.com/documentation/swiftui/graphicscontext/translateby(x:y:)" target="_blank" rel="noreferrer noopener">translateBy</a></li></ul>



<p>If you are familiar with AppKit&#8217;s <code>NSGraphicContext</code>, or CoreGraphic&#8217;s <code>CGContext</code> you may be used to pushing (saving) and popping (restoring) graphics context states from a stack. The Canvas GraphicsContext works a little differently. If you want to make a temporary change to the context, you have several options.</p>



<p>To illustrate that, let&#8217;s see the following example. We need to draw three houses in three colors. Only the house in the middle, needs to be blurred:</p>



<div class="wp-block-image"><figure class="aligncenter size-full is-resized"><img loading="lazy" decoding="async" src="https://swiftui-lab.com/wp-content/uploads/2021/08/canvas-5.png" alt="" class="wp-image-3222" width="347" height="217" srcset="https://swiftui-lab.com/wp-content/uploads/2021/08/canvas-5.png 694w, https://swiftui-lab.com/wp-content/uploads/2021/08/canvas-5-300x188.png 300w" sizes="(max-width: 347px) 100vw, 347px" /></figure></div>



<p>All the examples below will use the following <code>CGPoint</code> extension:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">extension CGPoint {
    static func +(lhs: CGPoint, rhs: CGPoint) -&gt; CGPoint {
        return CGPoint(x: lhs.x + rhs.x, y: lhs.y + rhs.y)
    }

    static func -(lhs: CGPoint, rhs: CGPoint) -&gt; CGPoint {
        return CGPoint(x: lhs.x - rhs.x, y: lhs.y - rhs.y)
    }
}</code></pre>



<p>Here are three ways of achieving the same result:</p>



<h4 class="wp-block-heading"><strong>Sort Operations Accordingly</strong></h4>



<p>When possible, you may choose to sort draw operations in a way that works for you. In this case, drawing the blurred house last, solves the problem. Otherwise, as soon as you add the blur filter, all draw operations will continue to blur.</p>



<p>Sometimes this may not be possible, and even if it is, it may turn into code that is hard to read. If that&#8217;s the case, check the other options.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    var body: some View {
        Canvas { context, size in
            
            // All drawing is done at x4 the size
            context.scaleBy(x: 4, y: 4)

            let midpoint = CGPoint(x: size.width / (2 * 4), y: size.height / (2 * 4))
            
            var house = context.resolve(Image(systemName: &quot;house.fill&quot;))

            // Left house
            house.shading = .color(.red)
            context.draw(house, at: midpoint - CGPoint(x: house.size.width, y: 0), anchor: .center)

            // Right house
            house.shading = .color(.blue)
            context.draw(house, at: midpoint + CGPoint(x: house.size.width, y: 0), anchor: .center)
            
            // Center house
            context.addFilter(.blur(radius: 1.0, options: .dithersResult), options: .linearColor)
            house.shading = .color(.green)
            context.draw(house, at: midpoint, anchor: .center)

        }
    }
}</code></pre>



<h4 class="wp-block-heading"><strong>Work On a Copy</strong></h4>



<p>Since the graphics context is a value type, you can simply create a copy. All changes made on the copy, will not affect the original context. As soon as you&#8217;re done, you can resume drawing on the original (unchanged) context.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    var body: some View {
        Canvas { context, size in
            
            // All drawing is done at x4 the size
            context.scaleBy(x: 4, y: 4)

            let midpoint = CGPoint(x: size.width / (2 * 4), y: size.height / (2 * 4))
            
            var house = context.resolve(Image(systemName: &quot;house.fill&quot;))

            // Left house
            house.shading = .color(.red)
            context.draw(house, at: midpoint - CGPoint(x: house.size.width, y: 0), anchor: .center)

            // Center house
            var blurContext = context
            
            blurContext.addFilter(.blur(radius: 1.0, options: .dithersResult), options: .linearColor)
            house.shading = .color(.green)
            blurContext.draw(house, at: midpoint, anchor: .center)

            // Right house
            house.shading = .color(.blue)
            context.draw(house, at: midpoint + CGPoint(x: house.size.width, y: 0), anchor: .center)

        }
    }
}</code></pre>



<h4 class="wp-block-heading"><strong>Use Layers</strong></h4>



<p>Finally, you may use the context method drawLayer. The method has a closure that receives a copy of the context you can work with. All changes to the layer context will not affect the original context:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    var body: some View {
        Canvas { context, size in
            
            // All drawing is done at x4 the size
            context.scaleBy(x: 4, y: 4)

            let midpoint = CGPoint(x: size.width / (2 * 4), y: size.height / (2 * 4))
            
            var house = context.resolve(Image(systemName: &quot;house.fill&quot;))

            // Left house
            house.shading = .color(.red)
            context.draw(house, at: midpoint - CGPoint(x: house.size.width, y: 0), anchor: .center)

            // Center house
            context.drawLayer { layerContext in
                layerContext.addFilter(.blur(radius: 1.0, options: .dithersResult), options: .linearColor)
                house.shading = .color(.green)
                layerContext.draw(house, at: midpoint, anchor: .center)
            }
            
            // Right house
            house.shading = .color(.blue)
            context.draw(house, at: midpoint + CGPoint(x: house.size.width, y: 0), anchor: .center)

            
        }
    }
}</code></pre>


<hr class="ub_divider" id="ub_divider_9d1adfae-0e65-4353-9d74-68cc212b823a"></hr>


<h2 class="wp-block-heading" id="coregraphics"><strong>Reusing CoreGraphics Code</strong></h2>



<p>If you already have CoreGraphics drawing code, you may use it. The Canvas context has a <code>withCGContext</code> method to rescue you in such case:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    
    var body: some View {
        Canvas { context, size in
            
            context.withCGContext { cgContext in
                
                // CoreGraphics code here
                
            }
        }
    }
}</code></pre>


<hr class="ub_divider" id="ub_divider_365b1c5c-a9a1-4e4d-9bc5-ef517b430eed"></hr>


<h2 class="wp-block-heading" id="animating"><strong>Animating the Canvas</strong></h2>



<p>By wrapping the Canvas inside a TimelineView, we can achieve some pretty interesting animations. Basically, with each timeline update, you get the chance to draw a new frame of the animation.</p>



<p>The rest of the article asumes you are already familiar with TimelineView, but If you are not, you may check <a href="https://swiftui-lab.com/swiftui-animations-part4/">Part 4</a> of this series to learn more.</p>



<p>In the following example, our Canvas draws an analog clock for a given date. By putting the Canvas inside a TimelineView, and using the timeline update date, we get the animated clock. A part of the following screen capture is accelerated, to show how the minute and hour clock hands move, which otherwise would not be noticeable.</p>



<figure class="wp-block-video aligncenter retina_media"><video autoplay controls loop src="https://swiftui-lab.com/wp-content/uploads/2021/08/clock-demo-speedup.mp4"></video></figure>



<p>When we create animations with Canvas, it is common to use the TimelineSchedule <code>.animation</code>. This updates as fast as possible, redrawing our Canvas several times per second. However, when possible, we should use the <code>minimumInterval</code> parameter to limit the number of updates per second. This will be less demanding on the CPU. For example, in this case there is no <meta charset="utf-8">visually noticeable difference between using <code>.animation</code>, and <code>.animation(minimumInterval: 0.06)</code>. However, on my testing hardware, CPU usage goes down from <strong>30%</strong> to <strong>14%</strong>. Using a higher minimumInterval may start to become visually noticeable, so you may have to do some trial an error, to find the best value.</p>



<figure class="wp-block-video aligncenter retina_media"><video autoplay controls loop src="https://swiftui-lab.com/wp-content/uploads/2021/08/clock-comparison.mp4"></video></figure>



<p>To further improve performance, you should consider if there are parts of the <code>Canvas</code> that do not need constant redrawing. In our example, only the clock hands move, the rest remains static. It is wise then, to split it into two overlapping canvases. One that draws everything except the clock hands (outside the <code>TimelineView</code>), and another just for the clock hands, inside the TimelineView. By implementing that change, CPU goes down from <strong>16%</strong> to <strong>6%</strong>:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct Clock: View {
    var body: some View {
        ZStack {
            ClockFaceCanvas()
            
            TimelineView(.animation(minimumInterval: 0.06)) { timeline in
                ClockHandsCanvas(date: timeline.date)
            }
        }
    }
}</code></pre>



<p>By careful analyzing our Canvas, and with little changes, we managed to improved CPU usage to be 5 times less demanding (from <strong>30%</strong> to <strong>6%</strong>). By the way, if you can live with a seconds clock hand that updates every second, you would further reduce CPU usage to less than <strong>1%</strong>. You should experiment to find the best trade-off for your view.</p>



<p>The full code for the clock can be found <a href="https://gist.github.com/swiftui-lab/168d8bb3abbe894c9dbbac22fdfdec86" target="_blank" rel="noreferrer noopener">here</a>.</p>



<h3 class="wp-block-heading">Divide and Conquer</h3>



<p>Once we learn about Canvas, we might be tempted to draw everything in it. However, sometimes the best option is to choose what to do and where. A good example is this Matrix Digital Rain animation below:</p>



<figure class="wp-block-video"><video autoplay controls loop src="https://swiftui-lab.com/wp-content/uploads/2021/08/digital-rain.mp4"></video></figure>



<p>The full code for the digital rain can be found <a href="https://gist.github.com/swiftui-lab/7f13f04e2d103e43685193eec0c33dd5" target="_blank" rel="noreferrer noopener">here</a>.</p>



<p>Let&#8217;s analyze what&#8217;s in it. We have columns of characters appearing, growing in numbers of characters, slowly sliding down and finally reducing its characters until they disappear. Each column is drawn with a gradient. There is also a sense of depth, by making the columns near to the observer slide faster and slightly larger. To increase the effect, the further back a column is, the more out of focus (blurred) it appears.</p>



<p>Implementing all these requirements inside the Canvas is absolutely possible. However, the task becomes much easier, if we split these tasks (divide and conquer). As we have seen already in the <a href="#animated_symbols">Animated Symbols</a> section of this article, an animated SwiftUI view can be drawn into the Canvas with a single <code>draw()</code> call. So not everything has to be dealt with inside the Canvas.</p>



<p>Each column is implemented as a separate SwiftUI view. Stacking character and drawing with a gradient is handled by the view. When we use a gradient on the Canvas, the starting/ending point or any other geometry parameter is relative to the entire Canvas. For the column gradient, it is easier to implement it inside the view, as it will be relative to the view&#8217;s origin.</p>



<p>Each column has many parameters: position (x, y, z), characters, how many characters from the top are removed, etc. These values are advanced after each TimelineView update.</p>



<p>Finally the Canvas is in charge of resolving each view, drawing them in their (<strong>x</strong>, <strong>y</strong>) positions, and adding a blur and scale effect based on its <strong>z</strong> value. I added some comments to the code to help you navigate through it, should you be interested.</p>


<hr class="ub_divider" id="ub_divider_57bc4ef6-d764-4bc5-9fed-8f1a9b3892a7"></hr>


<h2 class="wp-block-heading" id="crashes"><strong>Canvas Crashes</strong></h2>



<p>Unfortunately, at the time of this writing, I have experienced some crashes with the Canvas. Fortunately, they improved a lot with each beta release. I&#8217;m hoping they all get sorted out by the time iOS15 is officially released. The message is usually something like this:</p>



<pre class="wp-block-code"><code>-&#091;MTLDebugRenderCommandEncoder validateCommonDrawErrors:]:5252: failed assertion `Draw Errors Validation
Fragment Function(primitive_gradient_fragment): argument small&#091;0] from buffer(3) with offset(65460) and length(65536) has space for 76 bytes, but argument has a length(96).</code></pre>



<p>I managed to workaround these crashes, using at least one of these actions:</p>



<ul><li>Reduce the amount of drawing. In the digital rain example, you may reduce the number of columns.</li><li>Use simpler gradients. Originally, the digital rain columns had three color gradients. The crash disappeared when I reduced it to two.</li><li>Update that Canvas less frequently. Using a slower TimelineView, can prevent the crash.</li></ul>



<p>I am not saying you cannot use gradients with more than two colors, but that is just one place where you can look, if you find yourself in a situation where the Canvas crashes. If that does not fix your problem, I suggest you start to remove drawing operations until the app no longer crashes. That can lead you to find what is causing the crash. Once you know what it is, you may try to do it differently.</p>



<p>If you encounter this problem, I encourage you to report it to Apple. If you want, you can reference my own report: FB9363322.</p>


<hr class="ub_divider" id="ub_divider_c954964d-e21a-4261-885c-24d7764b9e19"></hr>


<h2 class="wp-block-heading"><strong>Summary</strong></h2>



<p>I hope this post helped you add a new tool to your SwiftUI animation toolbox. This concludes the fifth part animations series. At least for this year&#8230; Who knows what WWDC&#8217;22 will bring!</p>



<p>Feel free to&nbsp;follow me on twitter, if you want to be notified when new articles are published. Until then!</p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/swiftui-animations-part5/">Advanced SwiftUI Animations &#8211; Part 5: Canvas</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://swiftui-lab.com/swiftui-animations-part5/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		<enclosure url="https://swiftui-lab.com/wp-content/uploads/2021/08/matrix-loop-small.mp4" length="646774" type="video/mp4" />
<enclosure url="https://swiftui-lab.com/wp-content/uploads/2021/08/clock-demo-speedup.mp4" length="682065" type="video/mp4" />
<enclosure url="https://swiftui-lab.com/wp-content/uploads/2021/08/clock-comparison.mp4" length="1043362" type="video/mp4" />
<enclosure url="https://swiftui-lab.com/wp-content/uploads/2021/08/digital-rain.mp4" length="1410535" type="video/mp4" />

			</item>
		<item>
		<title>Advanced SwiftUI Animations — Part 4: TimelineView</title>
		<link>https://swiftui-lab.com/swiftui-animations-part4/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=swiftui-animations-part4</link>
					<comments>https://swiftui-lab.com/swiftui-animations-part4/#comments</comments>
		
		<dc:creator><![CDATA[javier]]></dc:creator>
		<pubDate>Mon, 28 Jun 2021 14:27:45 +0000</pubDate>
				<category><![CDATA[Animations]]></category>
		<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">https://swiftui-lab.com/?p=2841</guid>

					<description><![CDATA[<p>It&#8217;s been two years since I published Part 3 of this series of articles about Advanced SwiftUI Animations. I&#8217;m super excited about this year&#8217;s WWDC introduction of TimelineView and Canvas. It opens a whole new range of possibilities that I will try to lay out in this and the next part of the series. In ... <a title="Advanced SwiftUI Animations — Part 4: TimelineView" class="read-more" href="https://swiftui-lab.com/swiftui-animations-part4/" aria-label="More on Advanced SwiftUI Animations — Part 4: TimelineView">Read more</a></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/swiftui-animations-part4/">Advanced SwiftUI Animations — Part 4: TimelineView</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>It&#8217;s been two years since I published <a href="https://swiftui-lab.com/swiftui-animations-part3/">Part 3</a> of this series of articles about <strong>Advanced SwiftUI Animations</strong>. I&#8217;m super excited about this year&#8217;s WWDC introduction of <code>TimelineView</code> and <code>Canvas</code>. It opens a whole new range of possibilities that I will try to lay out in this and the next part of the series.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="690" height="372" src="https://swiftui-lab.com/wp-content/uploads/2021/06/hello-there-25.gif" alt="" class="wp-image-3123"/></figure></div>



<p>In this post, we will explore <code>TimelineView</code> in detail. We will start slow, with the most common uses. However, I think the biggest potential comes with combining <code>TimelineView</code> and the existing animations we already know. By being a little creative, among other things, this combo will let us finally do &#8220;keyframe-like&#8221; animations.</p>
<p>In part 5, we will explore the <strong><code>Canvas</code></strong> view, and how great it is in combination with our new friend <code>TimelineView</code>.</p>



<p>The animation shown above has been created using the techniques explained in this article. The full code of that animation is available in this <a href="https://gist.github.com/swiftui-lab/c1d089207d6f7b365729b1af2e695cc4" target="_blank" rel="noreferrer noopener">gist</a>.</p>



<h2 class="wp-block-heading">Components of a TimelineView</h2>



<p>TimelineView is a container view that re-evaluates its content with a frequency determined by the associated scheduler:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">TimelineView(.periodic(from: .now, by: 0.5)) { timeline in

    ViewToEvaluatePeriodically()

}</code></pre>



<p>The <code>TimelineView</code> receives a scheduler as a parameter. We will look at them in detail later, for now, the example uses a scheduler that fires every half a second.</p>
<p>The other parameter is a content closure that receives a <code>TimelineView.Context</code> parameter that looks something like this:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct Context {
    let cadence: Cadence
    let date: Date

    enum Cadence: Comparable {
        case live
        case seconds
        case minutes
    }
}</code></pre>



<p>A <code>Cadence</code> is an enum we can use to make some decisions on what to show in our view. Possible values are: <code>live</code>, <code>seconds</code>, and <code>minutes</code>. Take this as a hint to avoid showing information irrelevant for the cadence. The typical example is to avoid showing milliseconds on a clock that has a scheduler with a <code>seconds</code> or <code>minutes</code> cadence.</p>
<p>Note that the cadence is not something you can change, but something that reflects a device state. The documentation provides only one example. On watchOS, the cadence slows down when lowering the wrist. If you find other cases where the cadence changes, I would very much like to know. Please comment below.</p>



<p>Well, this all looks great, but there are many subtleties we should be aware of. Let&#8217;s start building our first <code>TimelineView</code> animation to see what these are&#8230;</p>



<h2 class="wp-block-heading">Understanding How TimelineView Works</h2>



<p>Look at the following code. We have two emoji characters that change randomly. The only difference between the two is that one is written in the content closure, while the other has been put on a separate view for better readability.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ManyFaces: View {
    static let emoji = [&quot;<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f600.png" alt="😀" class="wp-smiley" style="height: 1em; max-height: 1em;" />&quot;, &quot;<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f62c.png" alt="😬" class="wp-smiley" style="height: 1em; max-height: 1em;" />&quot;, &quot;<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f604.png" alt="😄" class="wp-smiley" style="height: 1em; max-height: 1em;" />&quot;, &quot;<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" />&quot;, &quot;<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f617.png" alt="😗" class="wp-smiley" style="height: 1em; max-height: 1em;" />&quot;, &quot;<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f913.png" alt="🤓" class="wp-smiley" style="height: 1em; max-height: 1em;" />&quot;, &quot;<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f60f.png" alt="😏" class="wp-smiley" style="height: 1em; max-height: 1em;" />&quot;, &quot;<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f615.png" alt="😕" class="wp-smiley" style="height: 1em; max-height: 1em;" />&quot;, &quot;<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f61f.png" alt="😟" class="wp-smiley" style="height: 1em; max-height: 1em;" />&quot;, &quot;<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f60e.png" alt="😎" class="wp-smiley" style="height: 1em; max-height: 1em;" />&quot;, &quot;<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f61c.png" alt="😜" class="wp-smiley" style="height: 1em; max-height: 1em;" />&quot;, &quot;<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f60d.png" alt="😍" class="wp-smiley" style="height: 1em; max-height: 1em;" />&quot;, &quot;<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f92a.png" alt="🤪" class="wp-smiley" style="height: 1em; max-height: 1em;" />&quot;]
    
    var body: some View {
        TimelineView(.periodic(from: .now, by: 0.2)) { timeline in

            HStack(spacing: 120) {

                let randomEmoji = ManyFaces.emoji.randomElement() ?? &quot;&quot;
            
                Text(randomEmoji)
                    .font(.largeTitle)
                    .scaleEffect(4.0)
                
                SubView()
                
            }
        }
    }
    
    struct SubView: View {
        var body: some View {
            let randomEmoji = ManyFaces.emoji.randomElement() ?? &quot;&quot;

            Text(randomEmoji)
                .font(.largeTitle)
                .scaleEffect(4.0)
        }
    }
}</code></pre>



<p>Now, let&#8217;s see what happens when we run the code:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="338" height="216" src="https://swiftui-lab.com/wp-content/uploads/2021/06/emojis-changing-one.gif" alt="" class="wp-image-2935"/></figure></div>



<p>Shocked? Why does the left emoji change, but the other remains sad at all times? It turns out, the <code>SubView</code> is not receiving any changing parameters, which means it has no dependencies. SwiftUI has no reason to recompute the view&#8217;s body. A great talk from this year&#8217;s WWDC is <a href="https://developer.apple.com/videos/play/wwdc2021/10022/" target="_blank" rel="noopener">Demystify SwiftUI</a>. It explains view identify, lifetime and dependency. All these topics are very important to understand why the timeline behaves as it does.</p>
<p>To solve the problem, we change the <code>SubView</code> view to add a parameter that will change with every timeline update. Note that we do not need to use the parameter, it just has to be there. Nevertheless, we will see that this unused value will be quite useful later.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct SubView: View {
    let date: Date // just by declaring it, the view will now be recomputed apropriately.
    
    var body: some View {

        let randomEmoji = ManyFaces.emoji.randomElement() ?? &quot;&quot;

        Text(randomEmoji)
            .font(.largeTitle)
            .scaleEffect(4.0)
    }
}</code></pre>



<p>Now the <code>SubView</code> is created like this:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">SubView(date: timeline.date)</code></pre>



<p>Finally, both our emoji can experience a whirlwind of emotions:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="338" height="216" src="https://swiftui-lab.com/wp-content/uploads/2021/06/emojis-changing-two.gif" alt="" class="wp-image-2934"/></figure></div>



<h2 class="wp-block-heading">Acting Upon a Timeline</h2>



<p>Most examples about TimelineView (at the time of this writing), are usually about drawing clocks. That makes sense. The data provided by the timeline is, after all, a <code>Date</code>.</p>



<p>The easiest TimelineView clock ever:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">TimelineView(.periodic(from: .now, by: 1.0)) { timeline in
            
    Text(&quot;\(timeline.date)&quot;)

}</code></pre>



<p>Clocks may become a little more elaborate. For example, using an analog clock with shapes, or drawing the clock with the new Canvas view.</p>



<p>However, <code>TimelineView</code> is here for more than just clocks. In many cases, we want our view to do something every time the timeline updates our view. The perfect place to put this code is the <code>onChange(of:perform)</code> closure.</p>
<p>In the following example, we use this technique, to update our model every 3 seconds.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="516" height="55" src="https://swiftui-lab.com/wp-content/uploads/2021/06/anim-part4-example-3.gif" alt="" class="wp-image-2871"/></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    var body: some View {
        TimelineView(.periodic(from: .now, by: 3.0)) { timeline in
            QuipView(date: timeline.date)
        }
    }

    struct QuipView: View {
        @StateObject var quips = QuipDatabase()
        let date: Date
        
        var body: some View {
            Text(&quot;_\(quips.sentence)_&quot;)
                .onChange(of: date) { _ in
                    quips.advance()
                }
        }
    }
}

class QuipDatabase: ObservableObject {
    static var sentences = [
        &quot;There are two types of people, those who can extrapolate from incomplete data&quot;,
        &quot;After all is said and done, more is said than done.&quot;,
        &quot;Haikus are easy. But sometimes they don&#039;t make sense. Refrigerator.&quot;,
        &quot;Confidence is the feeling you have before you really understand the problem.&quot;
    ]
    
    @Published var sentence: String = QuipDatabase.sentences[0]
    
    var idx = 0
    
    func advance() {
        idx = (idx + 1) % QuipDatabase.sentences.count
        
        sentence = QuipDatabase.sentences[idx]
    }
}</code></pre>



<p>It&#8217;s important to notice that for every timeline update, our <code>QuipView</code> is refreshed twice. That is, once when the timeline updates, and then again immediately after, because by calling <code>quips.advance()</code>&nbsp;we are causing the @Published value of <code>quips.sentence</code> to change and trigger the view update. This is perfectly fine, but it is something to be aware of, as it will become more important later on.</p>
<blockquote>
<p>An important concept we take from this is that although the timeline may produce a certain number of updates, the content of the view will most likely update even more times.</p>
</blockquote>



<h2 class="wp-block-heading">Combining TimelineView with Traditional Animations</h2>



<p>The new <code>TimelineView</code> brings a lot of new opportunities. Combining it with <code>Canvas</code>, as we will see in a future post, is a great addition. But that puts the load of writing all the code for each frame of the animation on us. The technique I am going to expose in this section, uses the animations we already know and love to animate views from one timeline update to the next. This will finally let us create our own keyframe-like animations purely in SwiftUI.</p>
<p>But let&#8217;s begin slow, with our little project: the metronome shown below. Play the video with the volume up, to appreciate how the beat sound is synchronized with the pendulum. Also, as metronomes do, a bell sounds every few beats:</p>



<figure class="wp-block-video"><video height="600" controls="" src="https://swiftui-lab.com/wp-content/uploads/2021/06/metronome.mp4"></video></figure>



<p>First, let&#8217;s see what our timeline looks like:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct Metronome: View {
    let bpm: Double = 60 // beats per minute
    
    var body: some View {
        TimelineView(.periodic(from: .now, by: 60 / bpm)) { timeline in
            MetronomeBack()
                .overlay(MetronomePendulum(bpm: bpm, date: timeline.date))
                .overlay(MetronomeFront(), alignment: .bottom)
        }
    }
}</code></pre>



<p>Metronomes speeds are usually specified in bpm (beats per minute). The example uses a periodic scheduler, that repeats every <code>60/bpm</code> seconds. For our case, <code>bpm = 60</code>, so the scheduler fires every 1 second. That is, 60 times per minute.</p>
<p>The <code>Metronome</code> view is composed of three layers: The <code>MetronomeBack</code>, <code>MetronomePendulum</code>, and <code>MetronomeFront</code>. They are overlaid in that order. The only view that will have to refresh with every timeline update, will be the <code>MetronomePendulum</code>, which swings from side to side. The other views won&#8217;t refresh, because they have no dependencies.</p>
<p>The code for <code>MetronomeBack</code> and <code>MetronomeFront</code> is very simple, they use a custom shape called <code>RoundedTrapezoid</code>. To avoid making this page too long, the code for the custom shape is in this <a href="https://gist.github.com/swiftui-lab/62c3a7512644271e7881985f0b4f7357" target="_blank" rel="noopener">gist</a>.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct MetronomeBack: View {
    let c1 = Color(red: 0, green: 0.3, blue: 0.5, opacity: 1)
    let c2 = Color(red: 0, green: 0.46, blue: 0.73, opacity: 1)
    
    var body: some View {
        let gradient = LinearGradient(colors: [c1, c2],
                                      startPoint: .topLeading,
                                      endPoint: .bottomTrailing)
        
        RoundedTrapezoid(pct: 0.5, cornerSizes: [CGSize(width: 15, height: 15)])
            .foregroundStyle(gradient)
            .frame(width: 200, height: 350)
    }
}

struct MetronomeFront: View {
    var body: some View {
        RoundedTrapezoid(pct: 0.85, cornerSizes: [.zero, CGSize(width: 10, height: 10)])
            .foregroundStyle(Color(red: 0, green: 0.46, blue: 0.73, opacity: 1))
            .frame(width: 180, height: 100).padding(10)
    }
}</code></pre>



<p>The <code>MetronomePendulum</code> view, however, is where things start to get interesting:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct MetronomePendulum: View {
    @State var pendulumOnLeft: Bool = false
    @State var bellCounter = 0 // sound bell every 4 beats

    let bpm: Double
    let date: Date
    
    var body: some View {
        Pendulum(angle: pendulumOnLeft ? -30 : 30)
            .animation(.easeInOut(duration: 60 / bpm), value: pendulumOnLeft)
            .onChange(of: date) { _ in beat() }
            .onAppear { beat() }
    }
    
    func beat() {
        pendulumOnLeft.toggle() // triggers the animation
        bellCounter = (bellCounter + 1) % 4 // keeps count of beats, to sound bell every 4th
        
        // sound bell or beat?
        if bellCounter == 0 {
            bellSound?.play()
        } else {
            beatSound?.play()
        }
    }
        
    struct Pendulum: View {
        let angle: Double
        
        var body: some View {
            return Capsule()
                .fill(.red)
                .frame(width: 10, height: 320)
                .overlay(weight)
                .rotationEffect(Angle.degrees(angle), anchor: .bottom)
        }
        
        var weight: some View {
            RoundedRectangle(cornerRadius: 10)
                .fill(.orange)
                .frame(width: 35, height: 35)
                .padding(.bottom, 200)
        }
    }
}</code></pre>



<p>Our view needs to keep track of where we are in the animation. I will call this, the animation phase. Since we need to track these phases, we will use @State variables:</p>



<ol><li><code>pendulumOnLeft</code>:  keeps track of which way the pendulum is swinging.</li><li><code>bellCounter</code>: it keeps count of the number of beats, to determine if a beat or a bell should be heard.</li></ol>



<p>The example uses the <code>.animation(_:value:)</code> modifier. This version of the modifier, applies an animation when the specified value changes. Note that it is also possible to use an explicit animation. Instead of calling <code>.animation()</code>, simply toggle the <code>pendulumOnLeft</code> variable inside a <code>withAnimation</code> closure.</p>
<p>To make our view advance through the animation phases, we monitor changes in <code>date</code>, using the <code>onChange(of:perform)</code> modifier, as we did with the previous quip example.</p>
<p>In addition to advancing the animation phase every time the date value changes, we also do it in the <code>onAppear</code> closure. Otherwise, there would be a pause at the beginning.</p>



<p>The final piece of code, non-SwiftUI related, is creating the NSSound instances. To avoid overcomplicating the example, I just created a couple of global variables:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">let bellSound: NSSound? = {
    guard let url = Bundle.main.url(forResource: &quot;bell&quot;, withExtension: &quot;mp3&quot;) else { return nil }
    return NSSound(contentsOf: url, byReference: true)
}()

let beatSound: NSSound? = {
    guard let url = Bundle.main.url(forResource: &quot;beat&quot;, withExtension: &quot;mp3&quot;) else { return nil }
    return NSSound(contentsOf: url, byReference: true)
}()
</code></pre>



<p>If you need sound files, there is a large database available at: <a href="https://freesound.org/" target="_blank" rel="noreferrer noopener">https://freesound.org/</a></p>



<p>The ones in the example are:</p>



<ul><li><strong>bell sound</strong>: <a href="https://freesound.org/people/m1rk0/sounds/50071/" target="_blank" rel="noreferrer noopener">metronome_pling</a> under license  CC BY 3.0 (m1rk0)</li><li><strong>beat sound</strong>: <a href="https://freesound.org/people/Druminfected/sounds/250552/" target="_blank" rel="noreferrer noopener">metronome.wav</a> under license CC0 1.0 (Druminfected)</li></ul>



<h2 class="wp-block-heading">The TimelineScheduler</h2>



<p>As we&#8217;ve seen already, a <code>TimelineView</code> needs a <code>TimelineScheduler</code> to determine when to update its contents. SwiftUI provides some predefined schedulers, like the ones we used. However, we can also create our own custom scheduler. I will elaborate more on that in the next section. But let&#8217;s start with the pre-existing ones.</p>
<p>A timeline scheduler is basically a struct that adopts the <code>TimelineScheduler</code> protocol. The existing types are:</p>



<ul><li><code>AnimationTimelineSchedule</code>: Updates as fast as possible, giving you the chance to draw each frame of the animation. It has parameters that let you limit the frequency of updates, and pause the updates. This one will be very useful when combining <code>TimelineView</code> with the new <code>Canvas</code> view.</li><li><code>EveryMinuteTimelineSchedule</code>: As the name implies, it updates every minute, at the start of the minute.</li><li><code>ExplicitTimelineSchedule</code>: You may provide an array with all the times you want the timeline to update.</li><li><code>PeriodicTimelineSchedule</code>: You may provide a start time and a frequency at which updates occur.</li></ul>



<p>Although you could create a timeline in this fashion:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">Timeline(EveryMinuteTimelineSchedule()) { timeline in
    ...
}</code></pre>



<p>Since Swift 5.5 and the introduction of <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0299-extend-generic-static-member-lookup.md" target="_blank" rel="noreferrer noopener">SE-0299</a>, we now have support for enum-like syntax. This makes the code more readable and improves autocompletion.  It is recommended that we use this syntax instead:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">TimelineView(.everyMinute) { timeline in
    ...
}</code></pre>



<p><em>Note: You may have heard, but this has also been introduced with styles this year. And better yet, for styles, as long as you are using Swift 5.5, you may back-deploy it with previous versions.</em></p>



<p>For each of the existing schedulers, there may be more than one enum-like option. For example, these two lines create a scheduler of the AnimationTimelineSchedule type:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">TimelineView(.animation) { ... }

TimelineView(.animation(minimumInterval: 0.3, paused: false)) { ... }</code></pre>



<p>And you may even create your own (do not forget the static keyword!):</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">extension TimelineSchedule where Self == PeriodicTimelineSchedule {
    static var everyFiveSeconds: PeriodicTimelineSchedule {
        get { .init(from: .now, by: 5.0) }
    }
}

struct ContentView: View {
    var body: some View {
        TimelineView(.everyFiveSeconds) { timeline in
            ...
        }
    }
}</code></pre>



<h2 class="wp-block-heading">Custom TimelineScheduler</h2>



<p>If none of the existing schedulers fit your needs, you may create your own. Consider the following animation:</p>



<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img loading="lazy" decoding="async" src="https://swiftui-lab.com/wp-content/uploads/2021/06/beating-heart.gif" alt="" class="wp-image-2922" width="119" height="120"/></figure></div>



<p>In this animation, we have a heart emoji that changes its scale, at irregular intervals and irregular amplitudes:</p>



<p>It starts with a scale of 1.0, 0.2 seconds later grows to 1.6,  0.2 seconds later, grows to 2.0, then shrinks back to 1.0 and stays there for 0.4 seconds, before starting all over. In other words:</p>



<p>Scale changes: 1.0 → 1.6 → 2.0 → start again<br>Time between changes: 0.2 → 0.2 → 0.4 → start again</p>



<p>We could create a <code>HeartTimelineSchedule</code> that updates exactly as the heart requires. But in the name of reusability, let&#8217;s do something more generic that can be reused in the future.</p>



<p>Our new scheduler will be called: <code>CyclicTimelineSchedule</code>&nbsp;and will receive an array of time offsets. Each offset value will be relative to the previous value in the array. When the scheduler has exhausted the offsets, it will cycle back to the beginning of the array and start all over.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct CyclicTimelineSchedule: TimelineSchedule {
    let timeOffsets: [TimeInterval]
    
    func entries(from startDate: Date, mode: TimelineScheduleMode) -&gt; Entries {
        Entries(last: startDate, offsets: timeOffsets)
    }
    
    struct Entries: Sequence, IteratorProtocol {
        var last: Date
        let offsets: [TimeInterval]
        
        var idx: Int = -1
        
        mutating func next() -&gt; Date? {
            idx = (idx + 1) % offsets.count
            
            last = last.addingTimeInterval(offsets[idx])
            
            return last
        }
    }
}</code></pre>



<p>There are a couple of requirements to implement a TimelineSchedule:</p>



<ul><li>Provide the <code>entries(from:mode:)</code> function.</li><li>Our <code>Entries</code> type must conform to <code>Sequence</code> where <code>Entries.Element == Date</code></li></ul>



<p>There are several ways in which you can conform to <code>Sequence</code>. This example implements <code>IteratorProtocol</code>&nbsp;and declares conformance to both <code>Sequence</code> and <code>IteratorProtocol</code>. You can read more about Sequence conformance <a href="https://developer.apple.com/documentation/swift/sequence" target="_blank" rel="noreferrer noopener">here</a>.</p>
<p>For <code>Entries</code> to implement <code>IteratorProtocol</code>, we must write the <code>next()</code> function, which produces the dates in the timeline. Our scheduler remembers the last date and adds the appropriate offset. When no more offsets remain, it cycles back to the first in the array.</p>
<p>Finally, the icing on the cake for our scheduler is to create an enum-like initializer:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">extension TimelineSchedule where Self == CyclicTimelineSchedule {
    static func cyclic(timeOffsets: [TimeInterval]) -&gt; CyclicTimelineSchedule {
            .init(timeOffsets: timeOffsets)
    }
}</code></pre>



<p>Now that we have our <code>TimelineSchedue</code> type ready, let&#8217;s put some life into our heart:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct BeatingHeart: View {
    var body: some View {
        TimelineView(.cyclic(timeOffsets: [0.2, 0.2, 0.4])) { timeline in
            Heart(date: timeline.date)
        }
    }
}

struct Heart: View {
    @State private var phase = 0
    let scales: [CGFloat] = [1.0, 1.6, 2.0]
    
    let date: Date
    
    var body: some View {
        HStack {
            Text(&quot;<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2764.png" alt="❤" class="wp-smiley" style="height: 1em; max-height: 1em;" />&quot;)
                .font(.largeTitle)
                .scaleEffect(scales[phase])
                .animation(.spring(response: 0.10,
                                   dampingFraction: 0.24,
                                   blendDuration: 0.2),
                           value: phase)
                .onChange(of: date) { _ in
                    advanceAnimationPhase()
                }
                .onAppear {
                    advanceAnimationPhase()
                }

        }
    }
    
    func advanceAnimationPhase() {
        phase = (phase + 1) % scales.count
    }
}
</code></pre>



<p>You should be familiar with this pattern now, it is the same one we used with the metronome. Advance the animation with <code>onChange</code> and <code>onAppear</code>, use <code>@State</code> variables to keep track of the animation, and set an animation that will transition our view from one timeline update, to the next. In this case, we employ a <code>.spring</code> animation, giving it a nice shake effect.</p>



<h2 class="wp-block-heading">KeyFrame Animations</h2>



<p>The heart and metronome examples are, in a way, keyframe animations. We defined several key points in the whole animation, where we change the parameters of our view, and let SwiftUI animate the transition between these points. The following example will try to generalize that idea, and make it more evident. Meet our new project friend, the jumping guy:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="121" height="216" src="https://swiftui-lab.com/wp-content/uploads/2021/06/jumping-emoji-1.gif" alt="" class="wp-image-2948"/></figure></div>



<p>If you observe the animation carefully, you will notice that this emoji character has many of its parameters changed at different points in time. These parameters are: y-offset, rotation and y-scale. And also important, the different segments of the animation, have different animation types (<code>linear</code>, <code>easeIn</code> and <code>easeOut</code>). Since these are the parameters we change, it is a good idea to put them together in an array. Let&#8217;s begin:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct KeyFrame {
    let offset: TimeInterval    
    let rotation: Double
    let yScale: Double
    let y: CGFloat
    let animation: Animation?
}

let keyframes = [
    // Initial state, will be used once. Its offset is useless and will be ignored
    KeyFrame(offset: 0.0, rotation: 0, yScale: 1.0, y: 0, animation: nil),

    // Animation keyframes
    KeyFrame(offset: 0.2, rotation:   0, yScale: 0.5, y:  20, animation: .linear(duration: 0.2)),
    KeyFrame(offset: 0.4, rotation:   0, yScale: 1.0, y: -20, animation: .linear(duration: 0.4)),
    KeyFrame(offset: 0.5, rotation: 360, yScale: 1.0, y: -80, animation: .easeOut(duration: 0.5)),
    KeyFrame(offset: 0.4, rotation: 360, yScale: 1.0, y: -20, animation: .easeIn(duration: 0.4)),
    KeyFrame(offset: 0.2, rotation: 360, yScale: 0.5, y:  20, animation: .easeOut(duration: 0.2)),
    KeyFrame(offset: 0.4, rotation: 360, yScale: 1.0, y: -20, animation: .linear(duration: 0.4)),
    KeyFrame(offset: 0.5, rotation:   0, yScale: 1.0, y: -80, animation: .easeOut(duration: 0.5)),
    KeyFrame(offset: 0.4, rotation:   0, yScale: 1.0, y: -20, animation: .easeIn(duration: 0.4)),
]</code></pre>



<p>It is important to know that when <code>TimelineView</code> appears, it will draw our view, even if there are no scheduled updates, or if they are in the future. When the <code>TimelineView</code> appears, it needs to show something so it does draw our view. We are going to use the first keyframe for the state of our view at that point, but when we loop, that frame will be ignored. This is an implementation decision, you may need or want to do it differently.</p>



<p>Now, let&#8217;s look at our timeline:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct JumpingEmoji: View {
    // Use all offset, minus the first
    let offsets = Array(keyframes.map { $0.offset }.dropFirst())
    
    var body: some View {
        TimelineView(.cyclic(timeOffsets: offsets)) { timeline in
            HappyEmoji(date: timeline.date)
        }
    }
}</code></pre>



<p>We are already benefiting from the work we did on the previous example, and reusing the <code>CyclicTimelineScheduler</code>. As mentioned, we do not need the offset of the first keyframe, so we discard it.</p>



<p>Now the fun part:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct HappyEmoji: View {
    // current keyframe number
    @State var idx: Int = 0

    // timeline update
    let date: Date
    
    var body: some View {
        Text(&quot;<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f603.png" alt="😃" class="wp-smiley" style="height: 1em; max-height: 1em;" />&quot;)
            .font(.largeTitle)
            .scaleEffect(4.0)
            .modifier(Effects(keyframe: keyframes[idx]))
            .animation(keyframes[idx].animation, value: idx)
            .onChange(of: date) { _ in advanceKeyFrame() }
            .onAppear { advanceKeyFrame()}
    }
    
    func advanceKeyFrame() {
        // advance to next keyframe
        idx = (idx + 1) % keyframes.count
        
        // skip first frame for animation, which we
        // only used as the initial state.
        if idx == 0 { idx = 1 }
    }
    
    struct Effects: ViewModifier {
        let keyframe: KeyFrame
        
        func body(content: Content) -&gt; some View {
            content
                .scaleEffect(CGSize(width: 1.0, height: keyframe.yScale))
                .rotationEffect(Angle(degrees: keyframe.rotation))
                .offset(y: keyframe.y)
        }
    }
}</code></pre>



<p>For better readability, I put all the changing parameters inside a modifier, called <code>Effects</code>. As you can see, it is again the same pattern: use <code>onChange</code> and <code>onAppear</code> to advance our animation, and add an animation for each keyframe segment. Nothing new there.</p>



<h2 class="wp-block-heading">Don&#8217;t! It&#8217;s a Trap!</h2>



<p>In your path to the <code>TimelineView</code> discovery, you may encounter this error:</p>



<pre class="wp-block-code"><code>Action Tried to Update Multiple Times Per Frame</code></pre>



<p>Let&#8217;s see an example that generates this message:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    @State private var flag = false
    
    var body: some View {

        TimelineView(.periodic(from: .now, by: 2.0)) { timeline in

            Text(&quot;Hello&quot;)
                .foregroundStyle(flag ? .red : .blue)
                .onChange(of: timeline.date) { (date: Date) in
                    flag.toggle()
                }

        }
    }
}</code></pre>



<p>The code looks harmless, and it is supposed to change the text color every two seconds, alternating between red and blue. So what could be going on? Just pause for a second and see if you can spot the reason behind it.</p>



<p>We are not dealing with a bug. The problem is, in fact, predictable.</p>



<p>It is important to remember that the first update of a timeline is when it appears for the first time, then it follows the scheduler rules to trigger the following updates. So even if our scheduler produces no update, the TimelineView content is generated at least once.</p>



<p>In this specific example, we monitor for changes in the <code>timeline.date</code> value, and when it does change, we toggle the <code>flag</code> variable, which produces the color change.</p>



<p>The <code>TimelineView</code> will first appear. Two seconds later, the timeline will update (e.g., due to the first scheduler update), triggering the <code>onChange</code> closure. This will in turn change the <code>flag</code> variable. Now, since our <code>TimelineView</code> has a dependency on it, it will need to refresh immediately, triggering another toggle of the <code>flag</code> variable, forcing another <code>TimelineView</code> refresh, and so on, and so on… You got it: multiple updates per frame.</p>



<p>So how do we fix it? Solutions may vary. In this case, we simply encapsulate the contents and move the <code>flag</code> variable inside the encapsulated view. Now the <code>TimelineView</code> no longer depends on it:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    var body: some View {

        TimelineView(.periodic(from: .now, by: 1.0)) { timeline in
            SubView(date: timeline.date)
        }

    }
}

struct SubView: View {
    @State private var flag = false
    let date: Date

    var body: some View {
        Text(&quot;Hello&quot;)
            .foregroundStyle(flag ? .red : .blue)
            .onChange(of: date) { (date: Date) in
                flag.toggle()
            }
    }
}
</code></pre>



<h2 class="wp-block-heading">Exploring New Ideas</h2>



<p><strong>Refreshing Once Per Timeline Update</strong>: As mentioned before, this pattern makes our views to compute their bodies twice per update: first when the timeline updates, and then again when we advance our animation state values. In this type of animation where we have spaced key points in time, that is perfectly fine.</p>



<p>In animations where those points in time are too close together maybe you need/want to avoid that. If you need to change a stored value, but avoid a view refresh&#8230; there&#8217;s a trick you can do. Instead of <code>@State</code>, use <code>@StateObject</code>. Make sure you DO NOT make such value <code>@Published</code>. If at some point, you want/need to tell your view to refresh, you can always call <code>objectWillChange.send()</code></p>



<p><strong>Matching Animation Duration and Offsets</strong>:In the keyframe example, we use different animations for each of the animation segments. To do so, we store the Animation values in our array. If you look closer, you&#8217;ll see that in our specific example, the offsets and the animation durations match! It makes sense, right? So instead of having the Animation value in your array, you may define an enum with the kind of animations. Later in your view, you create the Animation value, based on the animation kind, but instantiate it with the duration from the offset value. Something like this:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">enum KeyFrameAnimation {
    case none
    case linear
    case easeOut
    case easeIn
}

struct KeyFrame {
    let offset: TimeInterval    
    let rotation: Double
    let yScale: Double
    let y: CGFloat
    let animationKind: KeyFrameAnimation
    
    var animation: Animation? {
        switch animationKind {
        case .none: return nil
        case .linear: return .linear(duration: offset)
        case .easeIn: return .easeIn(duration: offset)
        case .easeOut: return .easeOut(duration: offset)
        }
    }
}

let keyframes = [
    // Initial state, will be used once. Its offset is useless and will be ignored
    KeyFrame(offset: 0.0, rotation: 0, yScale: 1.0, y: 0, animationKind: .none),

    // Animation keyframes
    KeyFrame(offset: 0.2, rotation:   0, yScale: 0.5, y:  20, animationKind: .linear),
    KeyFrame(offset: 0.4, rotation:   0, yScale: 1.0, y: -20, animationKind: .linear),
    KeyFrame(offset: 0.5, rotation: 360, yScale: 1.0, y: -80, animationKind: .easeOut),
    KeyFrame(offset: 0.4, rotation: 360, yScale: 1.0, y: -20, animationKind: .easeIn),
    KeyFrame(offset: 0.2, rotation: 360, yScale: 0.5, y:  20, animationKind: .easeOut),
    KeyFrame(offset: 0.4, rotation: 360, yScale: 1.0, y: -20, animationKind: .linear),
    KeyFrame(offset: 0.5, rotation:   0, yScale: 1.0, y: -80, animationKind: .easeOut),
    KeyFrame(offset: 0.4, rotation:   0, yScale: 1.0, y: -20, animationKind: .easeIn),
]</code></pre>



<p>If you wonder why I didn&#8217;t do it like this in the first place, I just wanted to show you that both ways are possible. The first case is more flexible, but more verbose. That is, we are forced to specify the duration for each animation, however, it is more flexible, because we are free to use a duration that does not match the offset. </p>



<p>When using this new approach, however, you could easily add a customizable factor, that could let you slow down or speed up the animation, without having to touch the keyframes at all.</p>



<p><strong>Nesting TimelineViews</strong>: Nothing prevents you from nesting one <code>TimelineView</code> inside another. Now that we have our JumpingEmoji, we can put three <code>JumpingEmoji</code> views inside a <code>TimelineView</code> that makes them appeared one at a time with a delay:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="346" height="216" src="https://swiftui-lab.com/wp-content/uploads/2021/06/wave-emoji-1.gif" alt="" class="wp-image-2969"/></figure></div>



<p>For the full code of the emoji wave, check out this <a href="https://gist.github.com/swiftui-lab/f4e77af35ba15853cc1426c735cc6cdc" target="_blank" rel="noreferrer noopener">gist</a>.</p>



<h2 class="wp-block-heading">GifImage Example</h2>



<p>I originally had one more example, but it got scrapped when I published the article. The reason it didn&#8217;t made the cut, is because the concurrency API was not yet stable. Fortunately, it is now safe to publish it. The code uses TimelineView to implement a view for animated gifs. The view loads the gif asynchronously from a URL (which can be both local or remote). All the code is available in this <a href="https://gist.github.com/swiftui-lab/aa5d73b81c8696dee4a5996954b22e5c" target="_blank" rel="noreferrer noopener">gist</a>.</p>



<h2 class="wp-block-heading">Summary</h2>



<p>Congratulations for reaching the end of this long post. It was a ride! We went from the simplest <code>TimelineView</code> example, to some creative uses of the view. In part 5, I will explore the new <code>Canvas</code> view, and how well it combines with <code>TimelineView</code>. By putting them both together, we will extend even more what is possible in the world of SwiftUI animations.</p>



<p>Feel free to&nbsp;follow me on twitter, if you want to be notified when new articles are published. Until then!</p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/swiftui-animations-part4/">Advanced SwiftUI Animations — Part 4: TimelineView</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://swiftui-lab.com/swiftui-animations-part4/feed/</wfw:commentRss>
			<slash:comments>6</slash:comments>
		
		<enclosure url="https://swiftui-lab.com/wp-content/uploads/2021/06/metronome.mp4" length="746921" type="video/mp4" />

			</item>
		<item>
		<title>Random Lessons from the SwiftUI Digital Lounge</title>
		<link>https://swiftui-lab.com/random-lessons/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=random-lessons</link>
					<comments>https://swiftui-lab.com/random-lessons/#comments</comments>
		
		<dc:creator><![CDATA[javier]]></dc:creator>
		<pubDate>Mon, 21 Jun 2021 14:39:10 +0000</pubDate>
				<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">https://swiftui-lab.com/?p=2590</guid>

					<description><![CDATA[<p>One of this year’s WWDC highlights was the introduction of the Digital Lounges. Unfortunately, it was as good as it was ephemeral. In an instant… puff! it was gone! Many weren&#8217;t able to attend due to other commitments, lack of time, failure to register, etc. I personally failed to follow them as closely as I ... <a title="Random Lessons from the SwiftUI Digital Lounge" class="read-more" href="https://swiftui-lab.com/random-lessons/" aria-label="More on Random Lessons from the SwiftUI Digital Lounge">Read more</a></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/random-lessons/">Random Lessons from the SwiftUI Digital Lounge</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>One of this year’s WWDC highlights was the introduction of the Digital Lounges. Unfortunately, it was as good as it was ephemeral. In an instant… puff! it was gone!</p>



<p>Many weren&#8217;t able to attend due to other commitments, lack of time, failure to register, etc. I personally failed to follow them as closely as I would have like, due to an inconvenient time zone (I&#8217;ll plan better next year). Still, before the channel was taken down, I managed to take my notes. Fortunately, when the moderators were asked, they said the information is not considered private and can be shared with others.</p>



<p>In that spirit, I have categorized, curated, and in some cases commented the SwiftUI Digital Lounge questions. For better and faster browsing, I simplified many of the questions to one (or two) lines. Still, the original text can be found inside. I have also removed all names, just in case someone is uncomfortable with it.</p>



<p>In some of the questions, I added my own comments, by either expanding on the topic, or appending an example of what is discussed. These questions are marked with <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" />.</p>



<p>When a question is related to a new feature introduced in WWDC &#8217;21, I flagged it with a <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> symbol.</p>



<p>I also put a <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /> mark, on those questions that I found particularly interesting. Some of the reasons why a question gets the star are:</p>



<ol><li>The answer provides a brand new piece of information.</li><li>The answer from Apple confirms something we suspected for a long time, but wasn&#8217;t documented anywhere.</li><li>The answer from Apple confirms a pattern we&#8217;ve adopted in the community, but not seen used by Apple until now.</li><li>The question discusses a topic rarely treated and deserves some attention.</li><li>The answer provides some insight into the inner workings of the framework.</li><li>Or just any other question that made me stop to think <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f914.png" alt="🤔" class="wp-smiley" style="height: 1em; max-height: 1em;" /></li></ol>



<p>Introduction over&#8230; let&#8217;s start questioning&#8230;</p>



<h2 class="wp-block-heading">Animations</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-d1d23870-e2e0-42e1-9c8d-e267e0af3a52" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="animations-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-d1d23870-e2e0-42e1-9c8d-e267e0af3a52" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-d1d23870-e2e0-42e1-9c8d-e267e0af3a52">Is there a way to animate a View moving from one place in hierarchy to another? Like when a View changes parents? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-d1d23870-e2e0-42e1-9c8d-e267e0af3a52">

<p>Yes! You should check out the <code>matchedGeometryEffect()</code> API, which was introduced last year: <a href="https://developer.apple.com/documentation/swiftui/view/matchedgeometryeffect(id:in:properties:anchor:issource:)" target="_blank" rel="noreferrer noopener">https://developer.apple.com/documentation/swiftui/view/matchedgeometryeffect(id:in:properties:anchor:issource:)</a></p>



<hr class="wp-block-separator"/>



<p><strong>Comments</strong>: I have written a two-part series post with an extensive explanation of the <code>matchGeometryEffect</code> modifier. Check it out <a href="https://swiftui-lab.com/matchedgeometryeffect-part1/">here</a> if you are interested.</p>

</div></div>

<div id="animations-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-d1d23870-e2e0-42e1-9c8d-e267e0af3a52" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-d1d23870-e2e0-42e1-9c8d-e267e0af3a52">Is there a way to animate text font size changes? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-d1d23870-e2e0-42e1-9c8d-e267e0af3a52">

<p><strong>Full Question</strong>: Is there a way to animate text font size changes? Currently in iOS14 a view can smoothly animate between two sizes or colored backgrounds, but fonts will just jump from the before animation size to the after size with no interpolation in between.</p>



<p><strong>Answer</strong>: This would be a great feedback to file, so that we can investigate!</p>



<p>If you’re interested in a workaround, the Fruta sample code project has an <code>AnimatableFontModifier</code> that uses an explicit font size as its animatable data. This is used for the ingredient cards in the main smoothie detail view. This works for Fruta because the use-case is limited and the text using this modifier is for primarily for graphical purposes. <a href="https://developer.apple.com/documentation/swiftui/fruta_building_a_feature-rich_app_with_swiftui" target="_blank" rel="noopener">https://developer.apple.com/documentation/swiftui/fruta_building_a_feature-rich_app_with_swiftui</a></p>



<hr class="wp-block-separator"/>



<p><strong>Comment</strong>: I have a series of articles about advanced animation techniques, one in particular deals with animating text using an <code>AnimatableModifier</code>. (<a href="https://swiftui-lab.com/swiftui-animations-part3/">Advanced Animations &#8211; Part 3</a>), as shown in the example below:</p>



<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img loading="lazy" decoding="async" src="https://swiftui-lab.com/wp-content/uploads/2019/09/wave-text.gif" alt="" class="wp-image-935" width="408" height="119"/></figure></div>

</div></div>

<div id="animations-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-d1d23870-e2e0-42e1-9c8d-e267e0af3a52" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-d1d23870-e2e0-42e1-9c8d-e267e0af3a52">Is it safe to employ multiple <strong>TimelineView</strong> with the <strong>animation</strong> schedule? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-d1d23870-e2e0-42e1-9c8d-e267e0af3a52">

<p><strong>Full Question</strong>: Is it safe to employ multiple&nbsp;<code>TimelineView</code>&nbsp;with the&nbsp;<code>animation</code>&nbsp;schedule or is it equivalent to instantiating a number of&nbsp;<code>CADisplayLink</code>s? I was thinking of the adage around “reusing”&nbsp;<code>CADisplayLink</code>s as much as possible.</p>
<p><strong>Answer</strong>: Yes! You should be able to use as many <code>TimelineView</code> as appropriate to get your interface behaving how you want. SwiftUI will take care of scheduling things so they update like you want.</p>



<p>The thing to be careful of is to not have too much “different” between each update of the timeline content.</p>

</div></div>
</div>


<h2 class="wp-block-heading">AppKit/UIKit</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-a4499456-725f-449c-b791-e3e29437e571" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="appkit-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-a4499456-725f-449c-b791-e3e29437e571" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a4499456-725f-449c-b791-e3e29437e571">How can we get access to the underlying AppKit/UIKit that SwiftUI is built on? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-a4499456-725f-449c-b791-e3e29437e571">

<p><strong>Original question</strong>: Sometimes with SwiftUI in AppKit or UIKit it&#8217;s only possible to do something by getting access to an underlying UI/NSViewController or NSWindow, but it requires some juggling to &#8220;peek beneath the covers&#8221; to surface these instances. Could SwiftUI provide more configuration proxies or some kind of factory-like mechanism to make this more explicit?</p>



<hr class="wp-block-separator"/>



<p><strong>Comments</strong>: Although no answer was given to the question, the back and forth conversation asking what use cases the poster needed this for, indicate that there is no intention in providing such feature. Instead, they encourage people to file feedback to ask the addition of the missing feature that required &#8220;peeking&#8221; in the first place.</p>



<p>Although I would love to have this feature, I understand why we may never see it. If we start to peek on SwiftUI stuff under the cover, we run the risk of having our code break from one release to the next, simply because Apple changed the inner (private) workings of the view we are peeking.</p>

</div></div>

<div id="appkit-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-a4499456-725f-449c-b791-e3e29437e571" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a4499456-725f-449c-b791-e3e29437e571">Does SwiftUI have an equivalente to UIView&#8217;s drawHierarchy to render the view to an image?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-a4499456-725f-449c-b791-e3e29437e571">

<p>SwiftUI doesn&#8217;t have API that supports this. That said, you can accomplish this by wrapping your SwiftUI view hierarchy in a <code>UIHostingController</code> and applying drawHierarchy to the hosting controller&#8217;s view.</p>

</div></div>

<div id="appkit-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-a4499456-725f-449c-b791-e3e29437e571" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a4499456-725f-449c-b791-e3e29437e571">How can I control the ideal size of a <strong>UIViewRepresentable</strong> View?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-a4499456-725f-449c-b791-e3e29437e571">

<p><strong>Original Question</strong>: How can I control the ideal size of a <code>UIViewRepresentable</code> View? I have a lot of trouble getting correct automatic sizing of wrapped views, especially if they wrap <code>UIStackView</code>. Any recommendations for getting proper automatic sizing so I don’t need to use <code>fixedSize</code> so much?</p>



<p><strong>Answer</strong>: Try implementing intrinsicContentSize on your view.</p>

</div></div>

<div id="appkit-4" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-3-a4499456-725f-449c-b791-e3e29437e571" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a4499456-725f-449c-b791-e3e29437e571">Is it ok to use AnyView with <strong>UIHostingController</strong>? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-3-a4499456-725f-449c-b791-e3e29437e571">

<p><strong>Original Question</strong>: I have a framework that vends a SwiftUI View to the main app via a HostingController. The view handles everything it needs internally, so all the types are internal. The only public method is the one that vends the HostingController. In order to maintain the isolation I do it this way:&nbsp;<code>return UIHostingController(rootView: AnyView(SchedulesView(store: store)))</code>&nbsp;Is this a correct way to use&nbsp;<code>AnyView</code></p>



<p><strong>Answer</strong>: Yes, that’s an OK usage, particularly because it’s at the base of the hierarchy view and not used to add dynamism.</p>



<p>But there are other ways to encapsulate the exact type of the hosting controller, for instance returning an upcast or custom protocol type:</p>



<ul><li>Returning it typed as UIViewController instead its actual&nbsp;<code>UIHostingController&lt;..&gt;</code>&nbsp;type.</li><li>Creating a protocol with the extra API that clients might expect from the view controller, and returning it typed as that.</li></ul>



<p>Or by using a container UIViewController that has a child of your hosting controller.</p>



<p>As an additional benefit, the calling module can remove the dependency on SwiftUI.</p>

</div></div>

<div id="appkit-5" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-4-a4499456-725f-449c-b791-e3e29437e571" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a4499456-725f-449c-b791-e3e29437e571">Why does a <strong>UIViewRepresentable</strong> update once after <strong>makeUIView</strong> and once before <strong>dismantleUIView</strong>?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-4-a4499456-725f-449c-b791-e3e29437e571">

<p>The update function can be called for a number of reasons. It will be called at least once after make as the <code>UIView</code> becomes extant. It may be called multiple times before the <code>UIView</code> is eventually dismantled. You should not rely on any frequency (or lack thereof) of update calls.</p>



<p><strong>Follow-Up</strong>: I have a <code>UIViewDiffableRepresentable</code> that conforms to <code>Hashable</code> to check whether properties have effectively updated and therefore prevent the <code>updateUIView</code> call to through to expensive logic. Is it overkill? Is there a more sensible approach?</p>
<p><strong>Answer</strong>: It&#8217;s overkill. The framework is able to call <code>updateUIView</code> when properties outside of the representable struct have changed, like the environment. So, you&#8217;ll probably drop updates on the floor with this approach.</p>

</div></div>

<div id="appkit-6" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-5-a4499456-725f-449c-b791-e3e29437e571" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a4499456-725f-449c-b791-e3e29437e571">when creating a <strong>UIViewRepresentable</strong>, it is dangerous for the <strong>Coordinator</strong> to hold an instance of the <strong>UIView</strong> passed in <strong>updateUIView()</strong> or should it be strictly treated as ephemeral? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-5-a4499456-725f-449c-b791-e3e29437e571">

<p>That is OK! Your coordinator will have been created before any views are — so in makeUIView you can give the coordinator a reference to that view.</p>

</div></div>

<div id="appkit-7" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-6-a4499456-725f-449c-b791-e3e29437e571" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a4499456-725f-449c-b791-e3e29437e571">Is there any way to convert from the old AppDelegate/SceneDelegate lifecycle to the new “SwiftUI 2” lifecycle?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-6-a4499456-725f-449c-b791-e3e29437e571">

<p>Yes! You can use the <code>UIApplicationDelegateAdaptor</code> property wrapper in your App. Something like this: <code>UIApplicationDelegateAdaptor var myDelegate: MyAppDelegate</code></p>



<p>SwiftUI will instantiate an instance of your <code>UIApplicationDelegate</code> and call it in the normal fashion.</p>



<p>Furthermore, if you return a custom scene delegate class from <code>configurationForConnectingSceneSession</code>, SwiftUI will instantiate it and call it as well.</p>

</div></div>
</div>


<h2 class="wp-block-heading">Backward Compatibility</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-7dd2efe7-6a18-4a8b-addb-674b3e47cab3" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="backward-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-7dd2efe7-6a18-4a8b-addb-674b3e47cab3" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-7dd2efe7-6a18-4a8b-addb-674b3e47cab3">Can you talk about ways to have existing SwiftUI code inherit the newer features so I could support both iOS 14 and 15 with one codebase? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-7dd2efe7-6a18-4a8b-addb-674b3e47cab3">

<p>Most new features do not back-deploy to earlier OS versions. You can use e.g.</p>



<pre class="wp-block-swiftuilab-snippet faq-code"><code class="language-swift">if #available(iOS 15, *) {
    ...
} else {
    // Fallback on earlier versions
}</code></pre>



<p>to check for whether a feature can be used.</p>



<p>That said, some functionality is able to back-deploy. For example, the new ability to pass bindings to collections into List and ForEach, and get back a binding to each element, e.g.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">ForEach($elements) { $element in
    ... 
}</code></pre>



<p>is able to back-deploy to any earlier release supported by SwiftUI.</p>



<hr class="wp-block-separator"/>



<p><strong>Comments</strong>: Another WWDC&#8217;21 addition that is back-deployable, is enum-like styles.</p>

</div></div>

<div id="backward-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-7dd2efe7-6a18-4a8b-addb-674b3e47cab3" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-7dd2efe7-6a18-4a8b-addb-674b3e47cab3">Is the @ViewBuilder to remove AnyView (“Demystify SwiftUI” talk) only available with iOS 15? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-7dd2efe7-6a18-4a8b-addb-674b3e47cab3">

<p>No, in fact it can back-deploy to any previous version!</p>

</div></div>
</div>


<h2 class="wp-block-heading">Coding Strategies</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-da77a77b-cfc5-43c6-b5fe-0bed587415f4" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="coding-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-da77a77b-cfc5-43c6-b5fe-0bed587415f4" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-da77a77b-cfc5-43c6-b5fe-0bed587415f4">Do situations exist when the developers really need to use AnyView and there are totally no alternatives using Swift constructs? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-da77a77b-cfc5-43c6-b5fe-0bed587415f4">

<p>Lot’s of questions about when it is okay or not to use <code>AnyView</code>!</p>



<p>If you can avoid <code>AnyView</code>, we recommend that. For example, use <code>@ViewBuilder</code> or pass view values around using generics instead of using <code>AnyView</code>.</p>



<p>However, we offer <code>AnyView</code> as API because we understand that there are some situations where no other solution is possible, or comes with other important tradeoffs.</p>



<p>One rule of thumb: <code>AnyView</code> can be okay if used in situations where the wrapped view will rarely or never change. But using <code>AnyView</code> to switch back and forth between different values can cause performance issues, since SwiftUI has to do extra work to manage that.</p>



</div></div>

<div id="coding-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-da77a77b-cfc5-43c6-b5fe-0bed587415f4" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-da77a77b-cfc5-43c6-b5fe-0bed587415f4">Which view body is computed first: child or parent? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-da77a77b-cfc5-43c6-b5fe-0bed587415f4">

<p><strong>Original Question</strong>: From the dependency graph part of “Demystifying SwiftUI”: The video mentioned that both views, two views that are dependent on the same dependency, would need to generate a new body. Which view would need to generate a new body first if one view is the child of the other?</p>



<p><strong>Answer</strong>: The parent view will generate its body first, and recursively travers all the child views.</p>

</div></div>

<div id="coding-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-da77a77b-cfc5-43c6-b5fe-0bed587415f4" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-da77a77b-cfc5-43c6-b5fe-0bed587415f4">How can we pass a view to a ViewModifier, without AnyView? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-da77a77b-cfc5-43c6-b5fe-0bed587415f4">

<p><strong>Original Question</strong>: I have created a ViewModifier that adds a custom modal “overlay” on top of a view, somewhat similar to a sheet. Is there a way to pass a View as parameter of this ViewModifier initializer, without resorting to AnyView? I want to be able to pass the view that will be the actual “content” of the overlay.</p>



<p><strong>Answer</strong>: You can do this by making your custom <code>ViewModifier</code> generic on the content, something like: <code>struct MyModifier&lt;C: View&gt;: ViewModifier { … }</code> , then using a property with the generic like so: <code>var content: C</code></p>



<hr class="wp-block-separator"/>



<p><strong>Comments</strong>: To expand on the issue, here&#8217;s a full example that implements a modifier that adds an overlay view only when the view is hovered over.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    var body: some View {
        RoundedRectangle(cornerRadius: 10)
            .fill(.green)
            .frame(width: 200, height: 80)
            .modifier(MyHoverModifier(hoverView: Text(&quot;hello!&quot;).font(.largeTitle)))
    }
}

struct MyHoverModifier&lt;C: View&gt;: ViewModifier {
    @State var isHovering = false
    var hoverView: C
    
    func body(content: Content) -&gt; some View {
        content
            .overlay(self.hoverView.opacity(isHovering ? 1.0 : 0.0))
            .onHover {
                isHovering = $0
            }
    }
}</code></pre>

</div></div>

<div id="coding-4" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-3-da77a77b-cfc5-43c6-b5fe-0bed587415f4" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-da77a77b-cfc5-43c6-b5fe-0bed587415f4">Group or ViewBuilder?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-3-da77a77b-cfc5-43c6-b5fe-0bed587415f4">

<p><strong>Original Question</strong>: Fun question on conditions: We need to put them at least in Group { if whatever { … } else { … } }. So … is it preferable to use ViewBuilder commands to create it, like ViewBuilder.buildBlock(pageInfo == nil ? ViewBuilder.buildEither(first: EmptyView()) : ViewBuilder.buildEither(second: renderPage) ) Awful to read, but is it better?</p>



<p><strong>Answer</strong>: Using a Group is preferred in this case.</p>



<p><strong>Follow-Up Question</strong>: Is that for readability reasons, or is there a performance (or other) benefit here? Isn&#8217;t the if/else above going to create the same conditional content block nested in the Group?</p>



<p><strong>Answer</strong>: Mostly readability — it&#8217;s generally not recommended to call the result builder implementation directly and instead let the compiler handle it.</p>

</div></div>

<div id="coding-5" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-4-da77a77b-cfc5-43c6-b5fe-0bed587415f4" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-da77a77b-cfc5-43c6-b5fe-0bed587415f4">Can we use .id() to keep view equality? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-4-da77a77b-cfc5-43c6-b5fe-0bed587415f4">

<p><strong>Original Question</strong>: If we apply same id in the condition, will SwiftUI sees this as a same view:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">var body: some View {
    if isTrue {

        Text(&quot;Hello&quot;)
            .id(viewID)

    } else {

        Text(&quot;World&quot;)
            .id(viewID)

    }
}</code></pre>



<p><strong>Answer</strong>: No, these will be two different views.</p>



<p>This is because body is implicitly a ViewBuilder. If you don&#8217;t use a ViewBuilder, such as in another property, it would be the same view.</p>



<p>Alternatively, the view can be written as:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">var body: some View {
    Text(isTrue ? &quot;Hello&quot; : &quot;World&quot;).id(viewID)
}</code></pre>



<p><strong>Follow-Up Question</strong>: Are there any other examples except <code>body</code> that are implicitly a <code>ViewBuilder</code>?</p>
<p><strong>Answer</strong>: Yes, <code>ViewModifier</code>&#8216;s body function, <code>makeBody</code> for view styles, preview providers, and many more.</p>
<p><strong>Follow-Up Question</strong>: so&#8230; we should avoid conditionals in view builders as a pretty much blanket rule?</p>
<p><strong>Answer</strong>: Definitely not! They exist for a reason. The message here is to just be careful when using them over-aggressively.</p>

</div></div>

<div id="coding-6" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-5-da77a77b-cfc5-43c6-b5fe-0bed587415f4" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-da77a77b-cfc5-43c6-b5fe-0bed587415f4">Is there any situation in which <strong>Hashable</strong> may be preferred to <strong>Identifiable</strong>?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-5-da77a77b-cfc5-43c6-b5fe-0bed587415f4">

<p>If you just need to be able to identify a value, that’s what <code>Identifiable</code> is for, which means that only the <code>id</code> needs to be <code>Hashable</code>, not the whole type.</p>

</div></div>

<div id="coding-7" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-6-da77a77b-cfc5-43c6-b5fe-0bed587415f4" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-da77a77b-cfc5-43c6-b5fe-0bed587415f4">How can we use conditional modifiers with styles? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-6-da77a77b-cfc5-43c6-b5fe-0bed587415f4">

<p><strong>Original Question</strong>: How can we conditionally set different modifier, for example list styles?</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">List {

   ...

}.listStyle(isIpad ? .sidebar : .insets)</code></pre>



<p><strong>Answer</strong>:  Styles in SwiftUI are static, and are not permitted to change at runtime. This is a case where a branch is more appropriate, but consider whether you really want to change the style— a single style is almost always the correct choice.</p>



<p>If there is a certain dynamism you’re looking for here, please file a feedback.</p>

</div></div>

<div id="coding-8" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-7-da77a77b-cfc5-43c6-b5fe-0bed587415f4" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-da77a77b-cfc5-43c6-b5fe-0bed587415f4">Is there a good way to apply a modifier to a SwiftUI view conditionally?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-7-da77a77b-cfc5-43c6-b5fe-0bed587415f4">

<p><strong>Original Question</strong>: Is there a good way to apply a modifier to a SwiftUI view conditionally? I’m using a custom .if modifier, and it refreshes the whole view on state change <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f641.png" alt="🙁" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>



<p><strong>Answer</strong>: Consider making an inert version of the modifier as discussed in the session. If there is a modifier that lacks an inert version that you’d like to see, please file a feedback.</p>

</div></div>

<div id="coding-9" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-8-da77a77b-cfc5-43c6-b5fe-0bed587415f4" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-da77a77b-cfc5-43c6-b5fe-0bed587415f4">When using the new SwiftUI Table View, can you Group to have more than 10 TableColumns? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-8-da77a77b-cfc5-43c6-b5fe-0bed587415f4">

<p>Yes, you can; just like Views!</p>



<p><strong>Follow-Up Question</strong>: Do I understand correctly that there are no more limitation on the number of objects in <code>@ViewBuilder</code>?</p>
<p><strong>Answer</strong>: There is no change to <code>@ViewBuilder</code> this year, so it is still limited in the number of elements it can build into a block. But <code>Group</code> as well as nested builders are great tools to allow for as many views to be combined together as you want</p>



<hr class="wp-block-separator"/>



<p><strong>Comments</strong>: After some testing, I found that <code>ForEach</code> and control-flow statements do not work with <code>TableColumnBuilder</code>. That is most unfortunate, I can see many scenarios when that will be necessary. I have filed feedbacks: FB9189673 (ForEach)&nbsp;and FB9189678 (control flow).</p>

</div></div>

<div id="coding-10" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-9-da77a77b-cfc5-43c6-b5fe-0bed587415f4" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-da77a77b-cfc5-43c6-b5fe-0bed587415f4">How to avoid AnyView with Core Data and UIHostingController <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-9-da77a77b-cfc5-43c6-b5fe-0bed587415f4">

<p><strong>Original Question</strong>: When using SwiftUI with something like Core Data and <code>UIHostingController</code>, how can we avoid using <code>AnyView</code> if the environment modifier changes the type of the view. See example below:</p>



<pre class="wp-block-swiftuilab-snippet faq-code"><code class="language-swift">import UIKit
import SwiftUI
import CoreData

struct MyView: View {
    var body: some View {
        Text(&quot;!&quot;)
    }
}
class MyHostingController: UIHostingController&lt;MyView&gt; {
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        // custom stuff here
    }
}
class TestViewController: UIViewController {
    override func viewDidLoad() {
        super.viewDidLoad()
        let persistentContainer = NSPersistentContainer(name: &quot;MyStore&quot;)
        let rootView = MyView().environment(\.managedObjectContext, persistentContainer.viewContext)
        let hostingController = MyHostingController(rootView: rootView) // this will not work anymore because type has changed with the environment modifier
        // more stuff
    }
}</code></pre>



<p><strong>Answer</strong>: Great question! Here’s a technique, though it runs the risk of angle-bracket-blindness…</p>
<p>In <code>class MyHostingController: UIHostingController</code> <code>MyView</code> isn’t really the right type. You want the type of <code>MyView().environment(.managedObjectContext, persistentContainer.viewContext)</code></p>
<p>On the let <code>hostingController = …</code> line, you’re probably getting an error message about the types not matching. That error message will include the full type of the right-hand side of the assignment.</p>
<p>Something like <code>ModifiedContent&lt;MyView, …&gt;</code> with lots of stuff inside the <code>…</code> there.</p>
<p>What I like to do is (1) copy that type, then (2) add a top-level type alias: <code>typealias MyModifiedView = ModifiedContent&lt;MyView, …&gt;</code> where the right-hand side is the value I copied from the error message. Then you can write <code>class MyHostingController: UIHostingController</code></p>



<hr class="wp-block-separator"/>



<p><strong>Comments</strong>: The proposed solution used to work in the past, when the swift compiler complained with the value type. However, swiftc no longer reports the type, instead it reports <code>some View</code>, which doesn&#8217;t help much. Luckily, with some minor modifications, it is still doable.</p>
<p>One way to determine the real type, is to just print it out:</p>



<pre class="wp-block-swiftuilab-snippet faq-code"><code class="language-swift">let rootView = MyView().environment(\.managedObjectContext, persistentContainer.viewContext)
print(&quot;\(type(of: rootView))&quot;)</code></pre>



<p>But that is not enough, because it still won&#8217;t compile. You will need to force cast your rootView:</p>



<pre class="wp-block-swiftuilab-snippet faq-code"><code class="language-swift">rootView as! MyModifiedView</code></pre>



<p>The full code will end up like this:</p>



<pre class="wp-block-swiftuilab-snippet faq-code"><code class="language-swift">import UIKit
import SwiftUI
import CoreData

typealias MyModifiedView = ModifiedContent&lt;MyView, _EnvironmentKeyWritingModifier&lt;NSManagedObjectContext&gt;&gt;

struct MyView: View {
    var body: some View {
        Text(&quot;!&quot;)
    }
}

class MyHostingController: UIHostingController&lt;MyModifiedView&gt; {
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        // custom stuff here
    }
}

class TestViewController: UIViewController {
    override func viewDidLoad() {
        super.viewDidLoad()
        let persistentContainer = NSPersistentContainer(name: &quot;MyStore&quot;)
        let rootView = MyView().environment(\.managedObjectContext, persistentContainer.viewContext)
        let hostingController = MyHostingController(rootView: rootView as! MyModifiedView)
        // more stuff
    }
}</code></pre>

</div></div>

<div id="coding-11" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-10-da77a77b-cfc5-43c6-b5fe-0bed587415f4" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-da77a77b-cfc5-43c6-b5fe-0bed587415f4">If <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0309-unlock-existential-types-for-all-protocols.md">SE-309</a> comes to effect and applies to <strong>View</strong>, will there be a difference between a <strong>View</strong> existential and <strong>AnyView</strong> in terms of view identity? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-10-da77a77b-cfc5-43c6-b5fe-0bed587415f4">

<p><strong>Original Question</strong>: <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0309-unlock-existential-types-for-all-protocols.md" target="_blank" rel="noreferrer noopener">SE-309</a>&nbsp;allows using protocols with associated types as existentials, assumedly including&nbsp;<code>View</code>. At that point, will there be a difference between a&nbsp;<code>View</code>&nbsp;existential and&nbsp;<code>AnyView</code>&nbsp;in terms of view identity?</p>



<p><strong>Answer</strong>: I <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2665.png" alt="♥" class="wp-smiley" style="height: 1em; max-height: 1em;" /> that proposal! I can’t comment on implementation details, but generally <code>AnyView</code> erases more information than an existential, so the existential would still have the edge.</p>



<p></p>

</div></div>

<div id="coding-12" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-11-da77a77b-cfc5-43c6-b5fe-0bed587415f4" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-da77a77b-cfc5-43c6-b5fe-0bed587415f4">Are there any places where you think: yep, this is the place to use <strong>onAppear</strong> rather than <strong>task</strong>? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-11-da77a77b-cfc5-43c6-b5fe-0bed587415f4">

<p><strong>Answer (engineer #1)</strong>: <code>onAppear()</code> is still fine to use. There’s no need to update existing code that uses it. Going forward, I think <code>task()</code> provides a more general solution, even for short synchronous work, since it sets you up to evolve towards asynchronous work if necessary in the future.</p>



<p><strong>Follow-Up Question</strong>: So&#8230; you would <em>always</em> use <code>task()</code> for new code, or are there still places where <code>onAppear()</code> is the right solution? I was maybe expecting to see <code>onAppear()</code> being gently deprecated or similar.</p>
<p><strong>Answer (engineer #1)</strong>: I&#8217;d always use <code>task()</code> personally, but there&#8217;s also a nice symmetry between <code>onAppear()</code> and <code>onDisappear()</code> that some folks will want to maintain.</p>



<p><strong>Follow-Up Question</strong>: Is there really any difference?</p>
<p><strong>Answer (engineer #1)</strong>: While <code>task()</code> cancels any async work at <code>onDisappear</code> time, it doesn&#8217;t trigger new work then.</p>
<p><strong>Answer (engineer #2)</strong>: We generally try to avoid deprecating things unless they&#8217;re actively harmful / dangerous / tricky. As we mentioned, <code>onAppear</code> is more limited than task, so I would recommend using it for new code, but <code>onAppear</code> isn&#8217;t harmful in any way.</p>



<p></p>

</div></div>
</div>


<h2 class="wp-block-heading">Concurrency</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-6333c359-97e1-4ac3-904c-59e40639a016" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="concurrency-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-6333c359-97e1-4ac3-904c-59e40639a016" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-6333c359-97e1-4ac3-904c-59e40639a016">Is the refreshable property the only SwiftUI property that supports async code? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-6333c359-97e1-4ac3-904c-59e40639a016">

<p>The <code>task</code> modifier also provides support for async code out of the box! Generally, we only make user provided closures async if we can provide some additional utility to you by doing so, such as canceling a <code>task</code> when the attached view’s lifetime ends, or finishing the refresh animation. If you want to dispatch to async code in other places, you can use an <code>async</code> block!</p>

</div></div>

<div id="concurrency-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-6333c359-97e1-4ac3-904c-59e40639a016" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-6333c359-97e1-4ac3-904c-59e40639a016">Is it possible to back-deploy concurrency? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-6333c359-97e1-4ac3-904c-59e40639a016">

<p>For now you should assume that Swift concurrency cannot be back-deployed, however the team understands that this is a popular request and is investigating.</p>



<p>The fun part is that Swift is open source, and so you can visit <a href="https://forums.swift.org" target="_blank" rel="noreferrer noopener">https://forums.swift.org</a> to peek in on the active development process for Swift concurrency, and they will likely discuss this topic more there as well.</p>

</div></div>
</div>


<h2 class="wp-block-heading">Data Management</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-a91666db-21ff-44e5-88a0-71cec8806465" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="data-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-a91666db-21ff-44e5-88a0-71cec8806465" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a91666db-21ff-44e5-88a0-71cec8806465">@StateObject or ObservedObject?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-a91666db-21ff-44e5-88a0-71cec8806465">

<p><strong>Original Question</strong>: Let’s say I have a purely SwiftUI flow. I have a ListView with a&nbsp;<code>@StateObject var listFetcher</code>, that makes requests for a list of items. Tapping on an item in the list navigates to a DetailView, which has an ObservableObject property&nbsp;<code>detailFetcher</code>, that makes requests for details on the item. What’s the best way to structure DetailView and which property wrapper would we use for&nbsp;<code>detailFetcher</code>&nbsp;in DetailView?</p>
<ol>
<li>Have an initializer like <code>init(itemID: Int)</code>, and use <code>@StateObject</code>? This would require us to eventually update the <code>detailFetcher</code> property with something like <code>detailFetcher.itemID = itemID</code>&nbsp;in the body’s <code>onAppear</code>.</li>
<li>Pass in the <code>detailFetcher</code> into the initializer like <code>init(detailFetcher: ObservableObject)</code> and make the property <code>@ObservableObject</code>? If this is preferred, where would this <code>detailFetcher</code>&nbsp;live if not in SwiftUI?</li>
</ol>
<p><strong>Answer</strong>: In general, use <code>@StateObject</code> when the view in question owns the associated object, i.e. the object will be created when the view is created, and should be destroyed when the view is removed.</p>
<p>In contrast, use <code>@ObservedObject</code> when the view needs to reference an object that is owned by another view or something else. So the view is dependent on the object, but their lifetimes are not tied together.</p>
<p>For example, you could have a main screen that uses <code>@StateObject</code> to initialize your app’s model, and then pass that object off to detail screens using <code>@ObservedObject</code>. Also check out the <a href="https://developer.apple.com/videos/play/wwdc2021/10022/" target="_blank" rel="noopener">Demystify SwiftUI</a> talk to learn more about this!</p>

</div></div>

<div id="data-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-a91666db-21ff-44e5-88a0-71cec8806465" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a91666db-21ff-44e5-88a0-71cec8806465">Any way to control when the @SceneStorage gets saved?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-a91666db-21ff-44e5-88a0-71cec8806465">

<p><strong>Original Question</strong>: Any way to control when the @SceneStorage gets saved? Many are in my root app view, and they only seem to be written at app background, not before.</p>



<p><strong>Answer</strong>: I’m sorry, but we don’t provide API to control scene storage. The intent is that it’s saved on background and restored on foreground/scene recreation.</p>

</div></div>

<div id="data-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-a91666db-21ff-44e5-88a0-71cec8806465" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a91666db-21ff-44e5-88a0-71cec8806465">Should <strong>@State</strong> and <strong>@StateObject</strong> be usually defined as <strong>private</strong>?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-a91666db-21ff-44e5-88a0-71cec8806465">

<p>Yes! It’s often helpful to make them <code>private</code> to indicate that the state is for this view and its descendants.</p>

</div></div>

<div id="data-4" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-3-a91666db-21ff-44e5-88a0-71cec8806465" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a91666db-21ff-44e5-88a0-71cec8806465">Is there any difference between the persistence of <strong>@State</strong> vs <strong>@StateObject</strong> vs <strong>@ObservedObject</strong> when identity changes?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-3-a91666db-21ff-44e5-88a0-71cec8806465">

<p>Yes! <code>ObservedObject</code> does not have any lifetime implications— when you use that property wrapper, you are responsible for managing the lifetime yourself. The object can live anywhere— either in <code>StateObject</code> or possibly even in another data structure in your app.</p>

</div></div>

<div id="data-5" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-4-a91666db-21ff-44e5-88a0-71cec8806465" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a91666db-21ff-44e5-88a0-71cec8806465">What are the downsides of having the whole app state in a single <strong>StateObject</strong> set in the root view? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-4-a91666db-21ff-44e5-88a0-71cec8806465">

<p><strong>Original Question</strong>: I have a <code>class Store&lt;State, Action&gt;: ObservableObject</code> that holds the whole app state. It lives as <code>@StateObject</code> in the root of the App lifecycle and passed via environment to all views. View send actions to the store and update as soon as store’s state updated. It allows me to keep the app consistent. Could you please mention any downsides of this approach from your prospective?</p>



<p><strong>Answer</strong>: That approach makes every view in your app dependent on a single <code>Observable</code> object. Any change to a Published property forces every view that references the environment object to be updated.</p>
<p><strong>Follow-Up Question</strong>: What is your recommendation, assuming that we have&nbsp; multiple views depending on the same data that should keep views in the consistent/updated state?</p>
<p><strong>Answer</strong>: I&#8217;m sorry but architectural choices are really context dependent, so there&#8217;s no blanket policy. Scoping down your model as you move down is one approach. Passing a binding to a subcomponent of your state is another.</p>

</div></div>

<div id="data-6" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-5-a91666db-21ff-44e5-88a0-71cec8806465" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a91666db-21ff-44e5-88a0-71cec8806465">Is there any difference between <strong>State</strong>/<strong>Binding</strong> vs <strong>EnvironmentObject</strong>?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-5-a91666db-21ff-44e5-88a0-71cec8806465">

<p><strong>Original Question</strong>: Are there any difference between passing a <code>State</code> as a binding through each view in the hierarchy vs passing it as an environment object and only access it in the subviews that use it, say in a Text view would the first one have worse dependency graph that needs more updates?</p>



<p><strong>Answer</strong>: environment object is a slightly different tool than State since it requires an <code>ObservableObject</code>. Environment object is optimized to invalidate only the views that read its value.</p>
<p>As for State, when you pass the binding down to subviews, changing the binding will mutate the state that in turn will invalidate the view holding the state and its children.</p>

</div></div>

<div id="data-7" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-6-a91666db-21ff-44e5-88a0-71cec8806465" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a91666db-21ff-44e5-88a0-71cec8806465">Performance wise, <strong>ObservableObject</strong> or <strong>EnvironmentObject</strong>?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-6-a91666db-21ff-44e5-88a0-71cec8806465">

<p><strong>Original Question</strong>: Performance wise, is it preferred to pass <code>ObservableObject</code>s down to subviews explicitly, or use&nbsp;<code>EnvironmentObject</code>s?</p>
<p><strong>Answer</strong>: Using one or the other shouldn’t make much difference in any given view, but if you don’t need to use the object in some views then <code>EnvironmentObject</code> is a great way to avoid the boilerplate of pass it down through intermediary layers, and can avoid creating unintentional dependencies.</p>

</div></div>

<div id="data-8" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-7-a91666db-21ff-44e5-88a0-71cec8806465" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a91666db-21ff-44e5-88a0-71cec8806465">Is is ok to use child CoreData context as <strong>@StateObject</strong>?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-7-a91666db-21ff-44e5-88a0-71cec8806465">

<p><strong>Original Question</strong>: Is it okay to use child CoreData context as @StateObject vars in SwiftUI views, or would you recommend passing those in the environment and holding on to them outside of SwiftUI?</p>



<p><strong>Answer</strong>: There is not need to use a <code>@StateObject</code> since the context is not an <code>ObservableObject</code>. Passing it down using the environment is a good solution.</p>

</div></div>

<div id="data-9" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-8-a91666db-21ff-44e5-88a0-71cec8806465" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a91666db-21ff-44e5-88a0-71cec8806465">Why the error &#8220;view environmentObject may be missing as an ancestor of this view&#8221;? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-8-a91666db-21ff-44e5-88a0-71cec8806465">

<p><strong>Original Question</strong>: For when using <code>@EnvironmentObject</code>, it seems like I need to pass the <code>.environmentObject</code> modifier for every layer of subview. If I don’t do that, it will give error “view environmentObject may be missing as an ancestor of this view” But I thought the point of <code>Environment Object</code>&nbsp;is to make data available to all view without writing a lot of code. Is that a design choice or am I doing something wrong?</p>



<p><strong>Answer</strong>: Thanks for the question. <code>.environmentObject(…)</code> <em>mostly</em> flows down the view hierarchy, however there are some places where we intentionally do not forward it. For example, the destination of a navigation link does not get the environment object, because there is a conflict as to whether the destination should get the object from the originating link or the placeholder of the destination, or even the previous view on the stack.</p>



<p>There was also a bug where sheets and popovers didn’t get the environment object, but that was fixed.</p>



<p>If you find other places where environment object does not propagate as expected, please file a Feedback. It’s important to me that we get this right!</p>

</div></div>

<div id="data-10" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-9-a91666db-21ff-44e5-88a0-71cec8806465" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a91666db-21ff-44e5-88a0-71cec8806465">May I call the StateObject initializer directly? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-9-a91666db-21ff-44e5-88a0-71cec8806465">

<p><strong>Original Question</strong>: When I’ve needed to inject data into a detail view, but still let the view have ownership of its <code>StateObject</code>, I’ve used the <code>StateObject(wrappedValue:)</code> initializer directly in my view initializer, for example:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">public struct PlanDetailsView: View {

    @StateObject var model: PlanDetailsModel
    
    public init(plan: Plan) {
        self._model = StateObject(wrappedValue: PlanDetailsModel(plan: plan))
    }

    ...
}</code></pre>



<p>Is this an acceptable use of the initializer? I know <code>StateObject</code> is only supposed to initialize at the start of the View’s lifetime, and not on subsequent instantiations of the <code>View</code> value, so I want to make sure I’m not forcing it to re-allocate new storage each time the <code>View</code> is re-instantiated.</p>
<p><strong>Answer</strong>: Yes, this is an acceptable use of the initializer and your understanding is correct: that object will be create only at the beginning of the view lifetime and kept alive. The <code>StateObject</code>’s wrapped value is an autoclosure that is invoke only once at the beginning of the view lifetime. That also means that SwiftUI will capture the value of <code>plan</code> when is firstly created; something to keep in mind is that if you view identity doesn’t change but you pass a different <code>plan</code> SwiftUI will not notice that.</p>



<p><strong>Follow-Up Question</strong>: May I suggest the documentation might be updated to reflect this? The documentation for <code>StateObject.init(wrappedValue:)</code> states:</p>



<p><em>You don&#8217;t call this initializer directly. Instead, declare a property with the <code>@StateObject</code> attribute in a <code>View</code>, <code>App</code> or <code>Scene</code>, and provide an initial value.</em></p>



<p><strong>Answer</strong>: Thank you for your feedback. If you find places where we can improve our documentation you should feel free to submit feedback for it.</p>

</div></div>

<div id="data-11" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-10-a91666db-21ff-44e5-88a0-71cec8806465" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a91666db-21ff-44e5-88a0-71cec8806465">Can custom property wrappers embed existing ones (e.g., <strong>State</strong>, <strong>ObservedObject</strong>, etc)? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-10-a91666db-21ff-44e5-88a0-71cec8806465">

<p><strong>Original Question</strong>: If we create custom property wrappers that embed existing ones (like State, ObservedObject, etc) does SwiftUI still “see” those embedded wrappers and do the right thing? For example, can I create an&nbsp;<code>@Whatever</code>&nbsp;wrapper as a convenience for&nbsp;<code>@Environment(\.whatever)</code>&nbsp;and still expect that to work the same way?</p>
<p><strong>Answer (engineer #1)</strong>: Yes, you can make do that. As long as you add conform to the DynamicProperty to your wrapper this will work.</p>
<p><strong>Follow-Up Question</strong>: Would I also need to implement <code>update()</code> or is the default implementation sufficient?</p>
<p><strong>Answer (engineer #1)</strong>: No need to implement the <code>update()</code> requirement.</p>
<p><strong>Follow-Up Question</strong>: When implementing <code>DynamicProperty</code> to my custom property wrapper, only those have SwiftUI&#8217;s property wrapper (like <code>State</code>, <code>ObservedObject</code>, etc) will trigger SwiftUI view&#8217;s update, isn&#8217;t it?</p>
<p><strong>Answer (engineer #2)</strong>: Or any other <code>DynamicProperty</code>. <code>State</code>, <code>ObservedObject</code> and company all implement the <code>DynamicProperty</code> protocol as well.</p>
<p><strong>Follow-Up Question</strong>: Oh, that&#8217;s it. So I cannot implement <code>DynamicProperty</code> by myself.</p>
<p><strong>Answer (engineer #2)</strong>: You <code>DynamicProperty</code> should be implemented in terms of existing <code>DynamicProperties</code>, correct.</p>



<p></p>

</div></div>

<div id="data-12" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-11-a91666db-21ff-44e5-88a0-71cec8806465" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a91666db-21ff-44e5-88a0-71cec8806465">Can a <strong>@State</strong> variable be mutated from outside the main thread?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-11-a91666db-21ff-44e5-88a0-71cec8806465">

<p><strong>Original Question</strong>: The&nbsp;<code>State</code>&nbsp;documentation states “It is safe to mutate state properties from any thread.” What does it refer to considering that SwiftUI complains with runtime warnings when a&nbsp;<code>PassthroughSubject</code>published from a non-main thread?</p>
<p><strong>Answer</strong>: <code>State</code> is thread safe and can be mutated from any thread. When you mention <code>PassthroughSubject</code> I would imagine you are using that in the context of an <code>ObservableObject</code> with either one of <code>@StateObject</code>, <code>@ObserverdObject</code>, or <code>@EnvironmentObject</code> . <code>ObservableObject</code> does require that you mutate all the properties observed by the view, and publish <code>objectWillChange</code> on the Main Thread. I would recommend you check out <a href="https://developer.apple.com/videos/play/wwdc2021/10019/" target="_blank" rel="noopener">Discover Concurrency in SwiftUI</a> where my colleague Curt and Jessica talk all about Swift and concurrency.</p>



<p><strong>Follow-Up Question</strong>: I am using it with <code>onReceive</code> and a <code>CurrentValueSubject</code> to set a <code>State</code> within a modifier. Should I file a feedback.</p>



<p><strong>Answer</strong>: I see. Yes, currently <code>onReceive</code> expects you to publish on the main thread.</p>
<p>In general, notifying and do mutation for code that interact with the UI on the main thread is going to avoid you a lot of headache.</p>

</div></div>

<div id="data-13" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-12-a91666db-21ff-44e5-88a0-71cec8806465" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a91666db-21ff-44e5-88a0-71cec8806465">If an <strong>ObservedObject</strong> is passed into a view, will it get invalidated if it does not use the value? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-12-a91666db-21ff-44e5-88a0-71cec8806465">

<p><strong>Original Question</strong>: When an observedObject is passed into a view, does SwiftUI differentiate between views that actually use it (the object is used in the body) and ‘intermediate’ views (which just pass that object to a child? )? Or are all views just invalidated?</p>



<p><strong>Answer</strong>: Yes, there is a difference. If you don’t use any of the <code>ObservableObject</code> property wrappers (<code>@StateObject</code>, <code>@ObservedObject</code>) the view would not observe and update the instance. So you you just need to pass an <code>ObservableObject</code> through some intermediary view just make it a regular property on the view but make sure to use the property wrapper if you ever read any of the value in the view, otherwise your view will no be consistent with your data.</p>



<p>Also, <code>@EnvironmetObject</code> is a great tool when you have an <code>ObservableObject</code> that you want to pass down multiple levels of your view hierarchy without having to manually do it every step of the way.</p>



<p><strong>Comments</strong>: To clarify with an example, the code below shows how IntermediaryA recomputes its body unnecessary when the model changes. IntermediaryB does not:</p>



<pre class="wp-block-swiftuilab-snippet faq-code"><code class="language-swift">class Model: ObservableObject {
    @Published var flag = false
}

struct ExampleView: View {
    @StateObject var model = Model()
    
    var body: some View {
        HStack(spacing: 20) {
            Button(&quot;Toggle&quot;) {
                model.flag.toggle()
            }
            
            IntermediaryA(model: model)

            IntermediaryB(model: model)

        }
    }
}

struct IntermediaryA: View {
    @ObservedObject var model: Model
    
    var body: some View {
        print(&quot;IntermediaryA body computed!&quot;)

        return Flag(model: model)
    }
}

struct IntermediaryB: View {
    var model: Model
    
    var body: some View {
        print(&quot;IntermediaryB body computed!&quot;)
        return Flag(model: model)
    }
}

struct Flag: View {
    @ObservedObject var model: Model
    
    var body: some View {
        Image(systemName: model.flag ? &quot;flag.fill&quot; : &quot;flag.slash.fill&quot;)
            .font(.largeTitle)
    }
}</code></pre>



<p>However, this is precisely where <code>EnvironmentObject</code> shines, by simplifying our code a lot. <code>Intermediary</code> and <code>Flag</code> no longer need parameters in their initializers!</p>



<pre class="wp-block-swiftuilab-snippet faq-code"><code class="language-swift">class Model: ObservableObject {
    @Published var flag = false
}

struct ExampleView: View {
    @StateObject var model = Model()
    
    var body: some View {
        HStack(spacing: 20) {
            Button(&quot;Toggle&quot;) {
                model.flag.toggle()
            }
            
            Intermediary()
                .environmentObject(model)

        }
    }
}

struct Intermediary: View {
    var body: some View {
        print(&quot;Intermediary body computed!&quot;)

        return Flag()
    }
}

struct Flag: View {
    @EnvironmentObject var model: Model
    
    var body: some View {
        Image(systemName: model.flag ? &quot;flag.fill&quot; : &quot;flag.slash.fill&quot;)
            .font(.largeTitle)
    }
}</code></pre>

</div></div>

<div id="data-14" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-13-a91666db-21ff-44e5-88a0-71cec8806465" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a91666db-21ff-44e5-88a0-71cec8806465">Why do I get nil <strong>EnvironmentObjects</strong> on sheets? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-13-a91666db-21ff-44e5-88a0-71cec8806465">

<p><strong>Original Question</strong>: I’ve had several intermittent crashes from environment objects being&nbsp;<code>nil</code>&nbsp;when I pass them to a sheet or <code>NavigationLink</code>. It’s tricky to replicate due to being intermittent and I usually work around it by architecting my code differently to avoid passing environment objects. Do you know of reasons this might happen? All I can think of is that the views that originate the <code>environmentObject</code> further up the view hierarchy are being taken out of memory. Thanks for any help you can provide!</p>



<p><strong>Answer (engineer #1)</strong>: <code>NavigationLink</code> by design doesn’t flow <code>EnvironmentObjects</code> through to its destination as it’s unclear where the <code>environmentObject</code> should be inherited from. I suspect this might what’s causing your issue. In order to get the behavior you expect, you’ll have to explicitly pass the environmentObject through at that point.</p>
<p><strong>Answer (engineer #2)</strong>:You can also apply the <code>environmentObject</code> to the <code>NavigationView</code> itself, which will make it available to all pushed content.</p>

</div></div>

<div id="data-15" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-14-a91666db-21ff-44e5-88a0-71cec8806465" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a91666db-21ff-44e5-88a0-71cec8806465">I need to support <strong>iOS13</strong>, but I need <strong>StateObject</strong>. What should I do?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-14-a91666db-21ff-44e5-88a0-71cec8806465">

<p><strong>Original Question</strong>: I am using&nbsp;<code>@ObservedObject</code>&nbsp;now for my model, since I still need to support iOS 13. However I know that&nbsp;<code>@StateObject</code>&nbsp;provides the correct behaviors to me. Is there a suggested way to use them at the same time for back compatibility? I first thought&nbsp;<code>if #available</code>&nbsp;might work, but it does not work for a property.</p>
<p><strong>Answer</strong>: For supporting iOS 13, you’ll need to use <code>@ObservedObject</code> and keep your object alive through some other means, like using a static property or keeping a reference in your application delegate.</p>
<p>I don’t think trying to switch between observed object and state object buys you much here, since changing the owner of the object with availability checks would be awkward.</p>



<p></p>

</div></div>

<div id="data-16" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-15-a91666db-21ff-44e5-88a0-71cec8806465" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a91666db-21ff-44e5-88a0-71cec8806465"><strong>EnvironmentObject</strong> or <strong>ObservedObject</strong>: Which is better?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-15-a91666db-21ff-44e5-88a0-71cec8806465">

<p><strong>Original Question</strong>: In general, to pass data around, would it better to have an <code>EnvironmentObject</code> that could be called within a view, or an <code>ObservedObject</code> that gets passed down (and/or injected) through child views?</p>
<p><strong>Answer</strong>: Both have their uses, and it depends on the architecture you’re building. If you have one (or a few) large <code>ObservableObjects</code> that large parts of the view hierarchy need to see, I would generally recommend <code>EnvironmentObject</code> as SwiftUI can look at which of your views depend on the <code>EnvironmentObject</code> and only invalidate those when your <code>ObservableObject</code> changes (you can get this behavior with <code>ObservedObject</code> too, but it’s more cumbersome). Plus, views that don’t actually use the <code>ObservableObject</code> don’t get cluttered with code relating to it.</p>
<p>That said, if your model is, for example, an object graph that is largely not structured based on your view hierarchy, it may make more sense to use <code>ObservedObject</code> to grab pieces of that model out to use in your view.</p>

</div></div>
</div>


<h2 class="wp-block-heading">Debugging</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-be42d6d7-efd6-4671-8a33-b00d714e24a2" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="debuggin-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-be42d6d7-efd6-4671-8a33-b00d714e24a2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-be42d6d7-efd6-4671-8a33-b00d714e24a2">How can I debug AttributeGraph crashes? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-be42d6d7-efd6-4671-8a33-b00d714e24a2">

<p><strong>Original Question</strong>:Is there a way to debug AttributeGraph crashes? I’m getting&nbsp;<code>AttributeGraph precondition failure: &quot;setting value during update&quot;: 696.</code>, probably due to a hosting controller somewhere, but don’t know how to track it down.</p>
<p><strong>Answer</strong>: That error usual means that some code evaluated in body or <code>updateUIViewController</code> (or NS…) is mutating state.</p>
<p>We have a new debugging tool in the new SDK that might help narrow it down.</p>
<p>Inside body if you write <code>Self._printChanges()</code> SwiftUI will log the name of the property that changed to cause the view to be redrawn.</p>
<p>(Note the underscore. This isn’t API, but is for exposed for debugging.)</p>

</div></div>

<div id="debuggin-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-be42d6d7-efd6-4671-8a33-b00d714e24a2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-be42d6d7-efd6-4671-8a33-b00d714e24a2">Is there a way to profile SwiftUI code? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-be42d6d7-efd6-4671-8a33-b00d714e24a2">

<p><strong>Original Question</strong>: How do I profile SwiftUI code, to know how to optimize my views? Instruments is almost only showing SwiftUI library code, so it’s hard to see what is expensive to render…</p>



<p><strong>Answer</strong>: Using the SwiftUI instrument will help call out expensive body methods. In addition it’s important to limit the number of times each views body will get reevaluated. Highly recommend watching the <a href="https://developer.apple.com/videos/play/wwdc2021/10022/" target="_blank" rel="noreferrer noopener">Demystify SwiftUI</a> talk for some in depth looks at how this works.</p>



<p>Pro tip: call the new debug helper <code>Self._printChanges()</code> inside <code>body</code> to log which property caused the view to be reevaluated.</p>
<p>It&#8217;s not technically API —notice the leading underscore— so should only be used in debugging. My one sentence pro-tip is the extent of the docs I&#8217;m afraid.</p>

</div></div>
</div>


<h2 class="wp-block-heading">Drawing</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-0c300f42-02c1-4bae-a1a8-93737c6ba687" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="drawing-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-0c300f42-02c1-4bae-a1a8-93737c6ba687" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-0c300f42-02c1-4bae-a1a8-93737c6ba687">Is there an efficient way to set the values of individual pixels in a view in SwiftUI? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-0c300f42-02c1-4bae-a1a8-93737c6ba687">

<p><strong>Original Question</strong>: Is there an efficient way to set the values of individual pixels in a view in SwiftUI? Sorry I haven’t fully examined the new <code>Canvas</code> API yet. For the record, I don’t really know how to do this in UIKit either, other than writing a custom fragment shader for a Metal view. Thank you!</p>



<p>Answer: <code>Canvas</code> is really the best bet here. You could fill a 1px x 1px rectangle of the color you want, and that would be the most efficient expression of that within SwiftUI itself.</p>



<p>And to get the size of a pixel you would request the pixelLength from the environment of the <code>GraphicsContent</code> of the <code>Canvas</code>.</p>

</div></div>

<div id="drawing-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-0c300f42-02c1-4bae-a1a8-93737c6ba687" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-0c300f42-02c1-4bae-a1a8-93737c6ba687">Is there a way to disable pixel rounding in SwiftUI?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-0c300f42-02c1-4bae-a1a8-93737c6ba687">

<p><strong>Original Question</strong>: Is there a way to disable pixel rounding in SwiftUI? The hover effect from my OS X Dock yesterday is jittery because padding is being applied to many views in a row, but rounded to the nearest pixel for each view. This inaccuracy in padding adds up, making the entire view jitter by a few pixels whenever I move the mouse.</p>



<p><strong>Answer</strong>: SwiftUI layout is always rounded to the nearest pixel. But using any <code>GeometryEffect</code> won’t take on the snapping behavior. Things like <code>.offset</code> and <code>.scaleEffect</code> are existing ways to achieve this, but you can also implement your own <code>GeometryEffect</code> if you need something custom.</p>

</div></div>

<div id="drawing-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-0c300f42-02c1-4bae-a1a8-93737c6ba687" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-0c300f42-02c1-4bae-a1a8-93737c6ba687">How far can we go (performance wise), with the new <strong>Canvas</strong> view? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-0c300f42-02c1-4bae-a1a8-93737c6ba687">

<p><strong>Original Question</strong>: The&nbsp;<code>Canvas</code>&nbsp;looks like a great new addition. I’m wondering about using it to render a single drawn surface that can be nested in a&nbsp;<code>ScrollView</code>&nbsp;which is then panned, zoomed into etc. Is this a reasonable solution and in terms of performance, will there be any guidelines on how far to push it? I intend to put a whole bunch of images as well as other shape data in there.</p>
<p><strong>Answer</strong>: This sounds like a good application for <code>Canvas</code>. Like anything, performance will depend on how far you push it and the hardware it’s running on. I’m afraid that’s not a very actionable answer, but every app is different.</p>



<hr class="wp-block-separator"/>



<p><strong>Comments</strong>: More information about Canvas, check <a href="https://developer.apple.com/wwdc21/10021" target="_blank" rel="noreferrer noopener">Add rich graphics to your SwiftUI app</a>.</p>

</div></div>

<div id="drawing-4" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-3-0c300f42-02c1-4bae-a1a8-93737c6ba687" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-0c300f42-02c1-4bae-a1a8-93737c6ba687">How does <strong>Canvas</strong> behave with <strong>TimelineView</strong>? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-3-0c300f42-02c1-4bae-a1a8-93737c6ba687">

<p><strong>Original Question</strong>: Hi guys, you all did a great job again congrats. My question is related to <code>CanvasView</code>, that view is pretty awesome and opens lots of possibilities for creative and generative art for example. I would like to know how behaves a <code>Canvas</code> encapsulated in a <code>Timeline</code> receiving updates of Bindings Combine’s streams. During the render, does it lost the current time information, does it resets to re-render the new state or there’s no re-render at all and the <code>Timeline</code> still running wherever the body changes?</p>
<p><strong>Answer</strong>: Thank you! As long as the identity of the timeline is the same, and the value of the schedule didn’t change based on the body update, it shouldn’t trigger a new update of the contained <code>Canvas</code>. If the content of the canvas itself changed, you will likely see another update from the <code>TimelineView</code> with the date of the current entry of the schedule.</p>

</div></div>
</div>


<h2 class="wp-block-heading">Focus</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-746ff5f4-d36b-4962-bd60-21d61d3030e8" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="focus-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-746ff5f4-d36b-4962-bd60-21d61d3030e8" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-746ff5f4-d36b-4962-bd60-21d61d3030e8">Is it possible to set focus programmatically this year? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-746ff5f4-d36b-4962-bd60-21d61d3030e8">

<p><strong>Original Question</strong>: Are you able to programmatically change focus of text fields natively in SwiftUI this year? For example, having the a button at the bottom of the keyboard say “next” and focus into the next text field?</p>



<p><strong>Answer (engineer #1)</strong>: Look at the new <a href="https://developer.apple.com/documentation/swiftui/focusstate" target="_blank" rel="noreferrer noopener">focus API</a></p>



<p><strong>Answer (engineer #2)</strong>: Fun fact! <code>@FocusState</code> isn&#8217;t just for <code>Textfield</code>. On watchOS, you can use <code>FocusState</code> to direct the Digital Crown and on tvOS for the remote.</p>



<p><strong>Answer (engineer #3)</strong>: Also check <a href="https://developer.apple.com/videos/play/wwdc2020/10041/" target="_blank" rel="noreferrer noopener">What&#8217;s New in SwiftUI</a> and <a href="https://developer.apple.com/videos/play/wwdc2021/10023/" target="_blank" rel="noreferrer noopener">Direct and reflect focus in SwiftUI</a></p>

</div></div>

<div id="focus-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-746ff5f4-d36b-4962-bd60-21d61d3030e8" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-746ff5f4-d36b-4962-bd60-21d61d3030e8">Why doesn&#8217;t FocusState support an initial value? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-746ff5f4-d36b-4962-bd60-21d61d3030e8">

<p><strong>Original Question</strong>: I noticed&nbsp;<code>@FocusState</code>&nbsp;doesn’t support an initial value — instead, you can set the focus in&nbsp;<code>onAppear</code>. Is there a reason for this?</p>



<p><strong>Answer</strong>: One way to think of focus (not to be confused with the new user-facing feature we just launched) is that it is global state managed by the framework. A lot of the times, the user will be the one in control of this state, by selecting a text field, etc. The new <code>@FocusState</code> and <code>focused(_:)</code> API allows for some influence over that state as well, but ultimately, the source of this state is still internal to SwiftUI. Does that help to answer your question?</p>



<p>I tend to think of <code>@FocusState</code> as a client&#8217;s view in into the state that the framework is managing.</p>

</div></div>
</div>


<h2 class="wp-block-heading">Import/Export</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-ac8d9e3e-c6ea-40f5-a048-9789a12df164" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="import-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-ac8d9e3e-c6ea-40f5-a048-9789a12df164" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-ac8d9e3e-c6ea-40f5-a048-9789a12df164">Does the modifier of importsItemProviders work with other commands, or other stuff to import things in the app? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-ac8d9e3e-c6ea-40f5-a048-9789a12df164">

<p>It works with any macOS system service that vends data. So if you had a service or shortcut that didn’t take input, but produced output — your app’s <code>importsItemProviders</code>&nbsp;could consume that data when the user invokes that service.</p>

</div></div>

<div id="import-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-ac8d9e3e-c6ea-40f5-a048-9789a12df164" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-ac8d9e3e-c6ea-40f5-a048-9789a12df164">Can <strong>importsFromDevices</strong> (i.e., continuity camera) work as a source for <strong>AsyncImage</strong>? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-ac8d9e3e-c6ea-40f5-a048-9789a12df164">

<p>No, continuity camera will callback your <code>importsItemProviders</code> with an item provider that will give the full image data and not a <code>URL</code>. But if you have a use case where there could be some better integration between the two, please file a feedback</p>

</div></div>
</div>


<h2 class="wp-block-heading">Layout</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-7b32f7e3-9f11-49bc-9123-faaa46409140" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="layout-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-7b32f7e3-9f11-49bc-9123-faaa46409140" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-7b32f7e3-9f11-49bc-9123-faaa46409140">What is the layout and sizing behavior of <strong>Canvas</strong>? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-7b32f7e3-9f11-49bc-9123-faaa46409140">

<p>A <code>Canvas</code> will consume the space offered to it. You can put it in a <code>.frame</code> to control the size if needed.</p>

</div></div>

<div id="layout-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-7b32f7e3-9f11-49bc-9123-faaa46409140" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-7b32f7e3-9f11-49bc-9123-faaa46409140">Is it ok to put <strong>GeometryReader</strong> inside a clear overlay to avoid impacting layout? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-7b32f7e3-9f11-49bc-9123-faaa46409140">

<p><strong>Original Question</strong>: There’s a lot of sample code out there where people use <code>GeometryReader</code> inside of clear overlays and the like to not impact layout… is that “ok”? Seems not like the way it was designed to work.</p>
<p><strong>Answer</strong>: In general we’d consider that a bit of a misuse of the API. If you have specific use-cases where you’re needing to do this we’d love to hear about it in a feedback report!</p>



<hr class="wp-block-separator"/>



<p><strong>Comments</strong>: I particularly liked this question. Many people stressed that although it&#8217;s ugly, sometimes it is just the only way to achieve certain layouts. I agree.</p>



<p>For a proof this is still an unfortunate pattern, read the following question, where the answer gives, in a way, its blessing to this technique (with reserves).</p>





<p>I encourage everyone that encounter a use case where this is the only solution, to file a feedback report. It is the only way this will ever change.</p>

</div></div>

<div id="layout-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-7b32f7e3-9f11-49bc-9123-faaa46409140" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-7b32f7e3-9f11-49bc-9123-faaa46409140">How can I get the size of another view? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-7b32f7e3-9f11-49bc-9123-faaa46409140">

<p><strong>Original Question</strong>: Is there any way to get GeometryReader size from another view? I want to replace “???” with the height of “Hello world!”.</p>



<pre class="wp-block-swiftuilab-snippet faq-code"><code class="language-swift">struct ContentView: View {
    var body: some View {
        VStack {
            Text(&quot;Hello world!&quot;)
                .background(
                    GeometryReader { proxy in
                        Color.clear /// placeholder
                        let _ = print(proxy.size.height) /// 20.333333333333332
                    }
                )
            Text(&quot;Height of first text is ???&quot;)
        }
    }
}</code></pre>



<p><strong>Answer</strong>: Howdy! Using a <code>GeometryReader</code> in a background of a view ensures the <code>GeometryReader</code> doesn’t grow to be larger than that containing view, but it makes it tricky to bubble its size out. You could do something like this:</p>



<pre class="wp-block-swiftuilab-snippet faq-code"><code class="language-swift">struct ContentView: View {
    @State private var height = 100.0
    
    var body: some View {
        MyView().background {
            GeometryReader { proxy in
                Color.clear
                    .onAppear {
                        height = proxy.size.height
                    }
                    .onChange(of: proxy.size.height) {
                        height = $0
                    }
            }
        }
    }
}</code></pre>



<p>Then you can use your height <code>State</code> property like usual.</p>



<p><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/26a0.png" alt="⚠" class="wp-smiley" style="height: 1em; max-height: 1em;" /> Beware: You must ensure you will not cause a continuous layout loop here, if your layout responds to height changing in a way that causes the <code>GeometryReader</code> to lay out again and cause height to get updated, you can get into a loop!</p>
<p><em><strong>I think as long as you&#8217;re aware of the <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/26a0.png" alt="⚠" class="wp-smiley" style="height: 1em; max-height: 1em;" /> gotcha, you can use this technique. I would like to say though that this is becoming a common pattern and we would love feedback on how to improve this experience in SwiftUI —if you explain your use cases in feedback it&#8217;ll help the team understand what you&#8217;re trying to do!</strong></em></p>



<hr class="wp-block-separator"/>



<p><strong>Comments</strong>: There are multiple opinions about this technique (read the previous question).</p>



<p>I have rewritten the example from the question, to accommodate the answer given:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    @State private var height = 100.0
    
    var body: some View {
        
        VStack {
            Text(&quot;Hello world!&quot;)
                .background(
                    GeometryReader { proxy in
                    Color.clear
                        .onAppear {
                            height = proxy.size.height
                        }
                        .onChange(of: proxy.size.height) {
                            height = $0
                        }
                })
        }

        Text(&quot;Height of first text is \(height)&quot;)
    }
}</code></pre>

</div></div>

<div id="layout-4" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-3-7b32f7e3-9f11-49bc-9123-faaa46409140" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-7b32f7e3-9f11-49bc-9123-faaa46409140">The Dependency Graph — can it have loops, or is it acyclic?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-3-7b32f7e3-9f11-49bc-9123-faaa46409140">

<p>Graph cycles are not allowed and will trap at runtime.</p>

</div></div>

<div id="layout-5" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-4-7b32f7e3-9f11-49bc-9123-faaa46409140" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-7b32f7e3-9f11-49bc-9123-faaa46409140">How can we maintain view equality when switching its container from HStack to VStack? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-4-7b32f7e3-9f11-49bc-9123-faaa46409140">

<p><strong>Original Question</strong>: Is there a good way to switch between HStacks and VStacks while allowing SwiftUI to understand that the contents of those stacks are the same?</p>



<p><strong>Answer</strong>: Lots of questions similar to this, so repeating an answer from earlier: Yes! You should check out the <code>matchedGeometryEffect()</code> API, which was introduced last year. Docs <a href="https://developer.apple.com/documentation/swiftui/view/matchedgeometryeffect(id:in:properties:anchor:issource:)" target="_blank" rel="noopener">here</a>.</p>



<hr class="wp-block-separator"/>



<p><strong>Comments</strong>: I have written a two-part series post with an extensive explanation of the <code>matchGeometryEffect</code> modifier. Check it out <a href="https://swiftui-lab.com/matchedgeometryeffect-part1/">here</a> if you are interested.</p>

</div></div>

<div id="layout-6" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-5-7b32f7e3-9f11-49bc-9123-faaa46409140" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-7b32f7e3-9f11-49bc-9123-faaa46409140">Is there enough public API to create our own containers with a fully custom layout? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-5-7b32f7e3-9f11-49bc-9123-faaa46409140">

<p><strong>Original Question</strong>: Does SwiftUI expose enough API that would allow us to build our own&nbsp;<code>Lazy{H,V}{Stack,Grid}</code>&nbsp;with a fully custom layout, or are there still a lot of “magical bits” under the hood that prevent us from doing so?</p>
<p><strong>Answer</strong>: Unfortunately, we don’t offer support for building custom layouts today.</p>

</div></div>

<div id="layout-7" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-6-7b32f7e3-9f11-49bc-9123-faaa46409140" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-7b32f7e3-9f11-49bc-9123-faaa46409140"><strong>frame()</strong> or <strong>Spacer()</strong>? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-6-7b32f7e3-9f11-49bc-9123-faaa46409140">

<p><strong>Original Question</strong>: In most cases, the layout behavior with&nbsp;<code>Spacer</code>&nbsp;can be replaced with&nbsp;<code>.frame(maxWidth:alignment:)</code>(or height) seamlessly. Since Spacer is an actual View that is arranged within the view hierarchy, using Spacer will consume more memory and cpu resources. And <a href="https://developer.apple.com/videos/play/wwdc2021/10022/" target="_blank" rel="noopener">Demystify SwiftUI</a> also says “modifier is cheap”. So should I use&nbsp;<code>.frame</code>&nbsp;instead of&nbsp;<code>Spacer</code>&nbsp;as much as possible?</p>
<p><strong>Answer (engineer #1)</strong>: While <code>Spacer</code> is a view, it doesn’t end up displaying anything of its own so it is plenty lightweight. Using <code>.frame</code> can have other behavior introduced to the way the view gets laid out beyond just changing its size. They both have their uses, so use them each where appropriate.</p>
<p><strong>Answer (engineer #2)</strong>: To add a little more onto this, even in cases where you will get almost entirely the same behavior between the two, the performance difference will be so minimal that I would strongly suggest prioritizing code readability over performance / memory use to make this decision.</p>
<p>If <code>Spacer</code> makes it more clear what layout you’re trying to specify, use that, and vice versa.</p>



<hr class="wp-block-separator"/>



<p><strong>Comments</strong>: To illustrate one case where <code>frame</code> and <code>Spacer</code> behave differently, consider the code below. Because the spacing parameter in the <code>HStack</code> containers is left unspecified, SwiftUI uses auto padding. <code>Spacer</code> and <code>.frame</code> are handled different when auto padding. Although the outcome of both <code>HStack</code> views will be very similar, they won&#8217;t be identical.</p>



<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img loading="lazy" decoding="async" src="https://swiftui-lab.com/wp-content/uploads/2021/06/spacer-vs-frame.png" alt="" class="wp-image-2755" width="293" height="218" srcset="https://swiftui-lab.com/wp-content/uploads/2021/06/spacer-vs-frame.png 364w, https://swiftui-lab.com/wp-content/uploads/2021/06/spacer-vs-frame-300x223.png 300w" sizes="(max-width: 293px) 100vw, 293px" /></figure></div>



<pre class="wp-block-swiftuilab-snippet faq-code"><code class="language-swift">struct ExampleView: View {
    var body: some View {
        VStack {
            HStack {
                Spacer()

                Circle().frame(width: 50, height: 50)
                
                Spacer()
                
                Circle().frame(width: 50, height: 50)
            }
            .border(Color.blue)
            
            HStack {
                Color.clear.frame(maxWidth: .infinity, maxHeight: 0)
                
                Circle().frame(width: 50, height: 50)
                
                Color.clear.frame(maxWidth: .infinity, maxHeight: 0)
                
                Circle().frame(width: 50, height: 50)
            }
            .border(Color.blue)
        }
    }
}</code></pre>



<p>Specifying an <code>HStack</code> spacing, however, will make both <code>HStack</code> views generate the same result.</p>

</div></div>

<div id="layout-8" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-7-7b32f7e3-9f11-49bc-9123-faaa46409140" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-7b32f7e3-9f11-49bc-9123-faaa46409140">What is error: Bound preference SizePreferenceKey tried to update multiple times per frame?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-7-7b32f7e3-9f11-49bc-9123-faaa46409140">

<p><strong>Original Question</strong>: How do we avoid incurring in <code>Bound preference SizePreferenceKey tried to update multiple times per frame</code>?</p>



<p>It sounds like you have a cycle in your updates. For example, a <code>GeometryReader</code> that writes a preference, that causes the containing view to resize, which causes the <code>GeometryReader</code> to write the preference again.</p>



<p>It’s important to avoid creating such cycles. Often that can be done by moving the <code>GeometryReader</code> higher in the view hierarchy so that its size doesn’t change and it can communicate size to its subviews instead of using a preference.</p>



<p>I’m afraid I can’t give any more specific guidance than that without seeing your code, but hopefully that helps you track down the issue!</p>

</div></div>
</div>


<h2 class="wp-block-heading">List Views</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-5b2df6d1-8cdc-40d0-93d1-19100399c34e" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="list-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-5b2df6d1-8cdc-40d0-93d1-19100399c34e" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-5b2df6d1-8cdc-40d0-93d1-19100399c34e">How can I change a <strong>List</strong> background color?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-5b2df6d1-8cdc-40d0-93d1-19100399c34e">

<p><strong>Original Question</strong>: Is there a way to change the background colour of a list? Last year this wasn’t possible.</p>



<p><strong>Answer</strong>: Currently it’s only possible to change background color of list rows, not the <code>List</code> itself.</p>
<p><strong>Follow-Up Question</strong>: Thanks, is this intended, or something that might change in the future? If so, what is the best way to change the background colour currently? I’d like to use system materials specifically.</p>
<p><strong>Answer</strong>: Unfortunately, it’s not possible to use system materials with <code>List</code> at the moment, please file a feedback and we will take a look at it. In the mean time, you could try using a <code>ScrollView</code> instead of a List.</p>

</div></div>

<div id="list-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-5b2df6d1-8cdc-40d0-93d1-19100399c34e" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-5b2df6d1-8cdc-40d0-93d1-19100399c34e">How can we make <strong>List</strong> rows editable? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-5b2df6d1-8cdc-40d0-93d1-19100399c34e">

<p><strong>Original Question</strong>: How would someone go about turning a <code>List</code> cell into a <code>TextField</code> on tap, such as to edit the name (similar to the Reminders app)?</p>
<p><strong>Answer</strong>: I’d try putting a TextField in an overlay of your cell content with an opacity of 0 and disabled. Then use a tap gesture to switch the opacity and un-disable it.</p>
<p>You could use the new <code>FocusState</code> or <code>onSubmit</code> when the user is done editing to switch back.</p>
<p>The trickiest bit will be getting your <code>TextField</code> and the regular <code>Text</code> to line up. You might need some custom padding for that. Take a look at the <code>ScaledMetric</code> property wrapper to make padding that adapts to dynamic text size.</p>



<p><strong>Follow-Up Question</strong>: What about the new <code>selectable</code> text modifier?? Would that work here?</p>



<p><strong>Answer</strong>: That’s a great idea. It would work for selecting and copying the text, but not for editing it.</p>



<p><strong>Follow-Up Question</strong>: Is there any way to create a frame that takes up the same size as the text and then set that as the editable area to avoid padding inconsistencies across device screen sizes?</p>



<p><strong>Answer</strong>: If the <code>TextField</code> is an overlay on the <code>Text</code>, it should be constrained to the same size. The challenge is that editable fields (on iOS at least) include some insets that static text does not. I&#8217;m imagining something like this:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">Text(itemText)
    .padding(2)
    .overlay {
        TextField($itemText)
    }</code></pre>



<p>That&#8217;s missing the bits to hide and show the pieces.</p>



<p>The trouble is if <code>itemText</code> is a short string, the whole assemblage will be short. I think the toggling is the hard part and the rest will take some experimentation.</p>



<p><strong>Follow-Up Question</strong>: So would it be better to put the <code>Text</code> inside of a frame with the <code>overlay</code>? That&#8217;s about all I can think of right now without diving into the documentation.</p>



<p><strong>Answer</strong>: Yeah, a flexible frame seems like the right answer. Perhaps with a layout priority greater than 0 so it consumes most of the space.</p>



<hr class="wp-block-separator"/>



<p><strong>Comments</strong>: To complete the answer, here&#8217;s an implementation of what was discussed. I did not implement any compensating padding, because that will very much depend on the platform you are using. Also, I like there to be a difference in padding when editing, it provides feedback to the user to know a row is being edited.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    @State var editingId: Int = 0
    
    @State var data = [Person(id: 1, name: &quot;Albert&quot;),
                       Person(id: 2, name: &quot;Chris&quot;),
                       Person(id: 3, name: &quot;Mary&quot;)]
    
    var body: some View {
        List($data) { $person in
            Text(person.name)
                .frame(maxWidth: .infinity, alignment: .leading)
                .overlay(alignment: .leading) {
                    if person.id == editingId {                        
                        TextField(&quot;&quot;, text: $person.name)
                            .textFieldStyle(.roundedBorder)
                            .onSubmit { editingId = 0 }
                    }
                }
                .onTapGesture { editingId = person.id }
        }
    }
}</code></pre>

</div></div>

<div id="list-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-5b2df6d1-8cdc-40d0-93d1-19100399c34e" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-5b2df6d1-8cdc-40d0-93d1-19100399c34e">How can I prevent a button activation when its row is selected?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-5b2df6d1-8cdc-40d0-93d1-19100399c34e">

<p><strong>Original Question</strong>: Is it possible to prevent a <code>Button</code> inside a <code>List</code> item from being activated when the list row is selected? Right now, if you have multiple <code>Buttons</code> they will all be triggered when the row is selected, so can’t really have a secondary button in a list row.</p>



<p><strong>Answer</strong>: Explicitly setting the <code>buttonStyle</code> of the nested buttons will stop the <code>List</code> from capturing the event.</p>

</div></div>

<div id="list-4" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-3-5b2df6d1-8cdc-40d0-93d1-19100399c34e" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-5b2df6d1-8cdc-40d0-93d1-19100399c34e">Which one I choose? List(items) { &#8230; } or List { ForEach(items) { &#8230; } }</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-3-5b2df6d1-8cdc-40d0-93d1-19100399c34e">

<p><strong>Original Question</strong>: When to iterate a collection directly from:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">List(items) { items in
    ...
}</code></pre>



<p>vs.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">List {
    ForEach(items) { items in
        ...
    }
}</code></pre>



<p><strong>Answer</strong>: Fundamentally these should provide the same behavior, in almost all use cases this would be a stylistic choice over which to use. The former works great if you know you’ll only ever have that single array of items in your list. The latter is where I generally start because it&#8217;s less things to change if I want to provide content from multiple sources into my list.</p>

</div></div>

<div id="list-5" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-4-5b2df6d1-8cdc-40d0-93d1-19100399c34e" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-5b2df6d1-8cdc-40d0-93d1-19100399c34e">How can we sort a <strong>List</strong>?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-4-5b2df6d1-8cdc-40d0-93d1-19100399c34e">

<p><strong>Original Question</strong>: What is a good way to have a custom order of elements in a list so the user can change the order (using a stable ID)?</p>



<p><strong>Answer</strong>: A <code>List</code> or <code>ForEach</code> will preserve the same order as used in the collection passed into them. The identity of each element should be independent of that order — even if a collection is reordered, each element should maintain the same ID.</p>



<p>If you maintain a stable identity like that, then you should be able to reorder the collection no problem in response to user actions</p>

</div></div>

<div id="list-6" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-5-5b2df6d1-8cdc-40d0-93d1-19100399c34e" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-5b2df6d1-8cdc-40d0-93d1-19100399c34e">How can we bypass system styling, for example, with <strong>List</strong> sections headers?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-5-5b2df6d1-8cdc-40d0-93d1-19100399c34e">

<p><strong>Original Question</strong>: What is the best practice for bypassing the system styling for a component?</p>



<p>For example, in a <code>Section</code> header in a grouped <code>List</code>, SwiftUI automatically dims the content and capitalizes all text (as you would expect in a text-only section header for UIKit). Is there a built-in way to bypass this dimming and capitalization?</p>



<p><strong>Answer</strong>: Many of the customizations you see are part of the default styling that lets you have the most natural feeling UI by default. However, most of these default stylings should be overridable by using the same modifiers you would to get that style. For example, if you want to remove the default capitalization of the section header, you can use the text case modifier:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">Section {
  // ...
} header: {
  Text(&quot;My Header&quot;)
      .textCase(nil)
}</code></pre>



<p>The same goes for other customization points like foreground style, font, etc.</p>

</div></div>
</div>


<h2 class="wp-block-heading">NavigationView</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-a7a0ba50-deae-4ffa-8986-a089e57c5f8b" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="navigationview-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-a7a0ba50-deae-4ffa-8986-a089e57c5f8b" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a7a0ba50-deae-4ffa-8986-a089e57c5f8b">How can we manage a <strong>NavigationView</strong> with a multiline title?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-a7a0ba50-deae-4ffa-8986-a089e57c5f8b">

<p><strong>Original Question</strong>: What is the recommended way to account for a <code>NavigationView</code> title that may take up multiple lines? I tried setting <code>.lineLimit</code> to nil, but I am not getting the results that I want. For instance, I have “XYZ Club Executive Meeting” for the <code>navigationBarTitle</code> text, but it only shows “XYZ Club Execut…”</p>



<p>Take a look at the toolbar modifier and the <code>.principal</code> placement. If that doesn’t meet your needs, please file a Feedback so we can look into your use case.</p>



<p>As a note, the <code>.principal</code> toolbar placement doesn&#8217;t apply across all platforms. If you need support for this on other platforms, feel free to file feedback requesting support for this on other platforms.</p>

</div></div>

<div id="navigationview-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-a7a0ba50-deae-4ffa-8986-a089e57c5f8b" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-a7a0ba50-deae-4ffa-8986-a089e57c5f8b">How to pop a <strong>NavigationView</strong> to its root? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-a7a0ba50-deae-4ffa-8986-a089e57c5f8b">

<p><strong>Original Question</strong>: Hello! I have tried to implement with SwiftUI a common feature in iOS apps that is when tapping again a tab item of a <code>TabView</code> with a nested <code>NavigationView</code>, it pops to the root view of the navigation view. Using <code>presentationMode.wrappedValue.dismiss()</code> it just chains the view dismiss, any idea of how to implement this in a more clean way ? (mine feels “hacky”)</p>



<p><strong>Answer</strong>: Thanks for the question! I’m afraid I don’t have a great answer here, but there are a couple of options you can try.</p>



<p>One option is to use a representable to embed a <code>UITabBarController</code>, so you can hook the delegate methods.</p>



<p>Another option, if you can detect when the user taps the same SwiftUI tab again, is to decorate your <code>NavigationView</code> with <code>.id(counter)</code>, where counter is <code>@State private var counter = 0</code>.</p>



<p>Then when the user taps the same SwiftUI tab again, you can increment <code>counter</code>, which changes the identity of the navigation view, causing SwiftUI to replace it.</p>



<p>I’d love to get an enhancement request Feedback for your particular use case so we can prioritize making this easier!</p>



<hr class="wp-block-separator"/>



<p><strong>Comments</strong>: When using the .id() trick to force the recreation of a view, I usually use a boolean and just toggle when I want to reset the view.</p>
<p>To illustrate the second solution offered by the engineer, here&#8217;s an example:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    @State var selectedTab: Int = 0
    @State var reset: Bool = false
    
    var body: some View {
        TabView(selection: $selectedTab) {
            NavigationView {
                RootView()
            }
            .onChange(of: selectedTab) { if $0 == 1 { reset.toggle() } }
            .id(reset)
            .tabItem { Text(&quot;Left Tab&quot;) }
            .tag(1)
            
            VStack {
                Text(&quot;Hello World&quot;)
            }
            .tabItem { Text(&quot;Right Tab&quot;) }
            .tag(2)
        }
    }
}

struct RootView: View {
    var body: some View {
        VStack {
            Text(&quot;Root View&quot;)
            
            NavigationLink(&quot;Push&quot;, destination: { SecondView() })
        }
    }
}

struct SecondView: View {
    var body: some View {
        VStack {
            Text(&quot;Second View&quot;)
            
            NavigationLink(&quot;Push&quot;, destination: { Text(&quot;Third View&quot;) })
        }
    }
}</code></pre>

</div></div>
</div>


<h2 class="wp-block-heading">Performance</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-5eac7924-7856-4c39-9a0f-b8f01d1f3670" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="performance-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-5eac7924-7856-4c39-9a0f-b8f01d1f3670" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-5eac7924-7856-4c39-9a0f-b8f01d1f3670">Are NavigationLinks &#8220;<strong>lazy</strong>&#8221; in iOS 15? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-5eac7924-7856-4c39-9a0f-b8f01d1f3670">

<p>NavigationLinks do not fully resolve their destinations until they are triggered, though the value of the destination view is created when the NavigationLink is created.</p>



<p>In general, we recommend avoiding as much work as possible when a view is initialized, which would avoid potential issues here. This is important for performance. Instead, have that work be triggered within the view’s <code>body</code>, such as using <code>onAppear</code> or the new <code>task()</code> modifier.</p>



<p>SwiftUI may reinitialize views for any number of reasons, and this is a normal part of the update process.</p>



<p>I&#8217;d recommend watching the <a href="https://developer.apple.com/videos/play/wwdc2021/10022/" target="_blank" rel="noreferrer noopener">Demystify SwiftUI</a> talk, which helps explain some of these concepts in more detail.</p>

</div></div>

<div id="performance-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-5eac7924-7856-4c39-9a0f-b8f01d1f3670" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-5eac7924-7856-4c39-9a0f-b8f01d1f3670">Does AsyncImage support caching? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-5eac7924-7856-4c39-9a0f-b8f01d1f3670">

<p><code>AsyncImage</code> uses the shared <code>URLSession</code> , and so uses the shared <code>URLCache</code>. There’s currently no support for customizing the cache.</p>



<p>If that’s something you’d like support for though, feel free to file feedback with that request</p>

</div></div>

<div id="performance-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-5eac7924-7856-4c39-9a0f-b8f01d1f3670" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-5eac7924-7856-4c39-9a0f-b8f01d1f3670">Does using long strings as ID present a problem for performance? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-5eac7924-7856-4c39-9a0f-b8f01d1f3670">

<p><strong>Original Question</strong>: If the only reasonable property for establishing stable identity in a model from, say, an existing JSON API, is a string that might be quite long (maybe it’s more of a description than a name), is that large ID enough of a potential performance problem that we should consider modifying the model/API to add a more compact ID? Thanks much!</p>



<p><strong>Answer</strong>: Great question! As with any performance problem, it’s best to measure first before over-optimizing. Long strings can often be expensive, so it might make sense to optimize the identifier, but I’d recommend measuring first.</p>

</div></div>

<div id="performance-4" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-3-5eac7924-7856-4c39-9a0f-b8f01d1f3670" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-5eac7924-7856-4c39-9a0f-b8f01d1f3670">Are there any combinations of parameters in .frame(maxWidth:&#8230;) more performant than others? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-3-5eac7924-7856-4c39-9a0f-b8f01d1f3670">

<p><strong>Original Question</strong>: When using <code>View.frame(minWidth:, idealWidth, maxWidth:…)</code> are there any combinations of parameters that are more performant that others? Any combination to avoid?</p>
<p><strong>Answer</strong>: There isn’t really any performance difference between any combination of parameters. You should just use the appropriate values to get the layout you’re looking for.</p>
<p><strong>Follow-Up Question</strong>: what’s the best way to enforce a specific size? min + max? or ideal? or all?</p>
<p><strong>Answer</strong>: You would want to use the other version of <code>.frame</code> for that which just takes a width and a height. <code>View.frame(width:height:)</code></p>

</div></div>

<div id="performance-5" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-4-5eac7924-7856-4c39-9a0f-b8f01d1f3670" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-5eac7924-7856-4c39-9a0f-b8f01d1f3670">Sample code in the <strong>Advanced Graphics</strong> section of <strong>Whats New in SwiftUI</strong> is too slow? Why? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-4-5eac7924-7856-4c39-9a0f-b8f01d1f3670">

<p><strong>Original-Answer</strong>: Dumb question here… but I was just playing around with the code in the Advanced Graphics section of Whats new in SwiftUI. Taylor showed a symbols browser…. I copied the code and when I run the performance is really bad… he showed the smooth gesture with the fisheye and the timeline view animation… on my side it is super jerky with seconds delay to render… is that right?</p>



<p><strong>Answer</strong>: Sorry about that! That’s a known issue in beta 1. As a quick workaround to see the same smooth effect today, you can manually cache the resolved images.</p>



<p>One thing you could try is moving that resolution to be outside of the inner for loop, so it only happens once. (cheating since for the code snippet it only uses the swift bird rather than every symbol like my demo had).</p>

</div></div>

<div id="performance-6" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-5-5eac7924-7856-4c39-9a0f-b8f01d1f3670" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-5eac7924-7856-4c39-9a0f-b8f01d1f3670">Do we incur in a performance penalty for using <strong>ViewBuilders</strong>? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-5-5eac7924-7856-4c39-9a0f-b8f01d1f3670">

<p><strong>Original-Question</strong>: If we break our Views into separate <code>some View</code> properties to help readability, is there much cost to marking those other properties as <code>ViewBuilders</code> to get the nicer syntax? Is that something we need to worry about?</p>
<p><strong>Answer</strong>: Nope, in fact, we encourage you to do so! Using the <code>@ViewBuilder</code> syntax helps nudge you towards structuring your code in a way that SwiftUI can make use of intelligently, so using it in more places is never a problem. Check out the talk, <a href="https://developer.apple.com/videos/play/wwdc2021/10022/" target="_blank" rel="noopener">Demystify SwiftUI</a> for more on this!&nbsp;</p>

</div></div>

<div id="performance-7" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-6-5eac7924-7856-4c39-9a0f-b8f01d1f3670" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-5eac7924-7856-4c39-9a0f-b8f01d1f3670">Animating changes of the data set on List views is very slow. Is this expected? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-6-5eac7924-7856-4c39-9a0f-b8f01d1f3670">

<p><strong>Original Question</strong>: I noticed that while using Combine and lists (say local search combined with remote results). Lists have a really, REALLY hard time keeping up with animated updates. I found the only reliable way to force correct data representation is to use&nbsp;<code>.id(UUID())</code>&nbsp;and turn off animations. Is this somewhat expected?</p>
<p><strong>Answer</strong>: We worked really hard on improving <code>List</code> performance in iOS 15, macOS Monterey, and aligned releases. Please try there and let us know if you’re still seeing issues. If you aren’t doing so already, it also may be good to debounce the queries.</p>

</div></div>

<div id="performance-8" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-7-5eac7924-7856-4c39-9a0f-b8f01d1f3670" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-5eac7924-7856-4c39-9a0f-b8f01d1f3670">Is <strong>GeometryReader</strong> bad for performance? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-7-5eac7924-7856-4c39-9a0f-b8f01d1f3670">

<p><strong>Original Question</strong>: Are <code>GeometryReaders</code> really bad in terms of performance? I’m getting the feeling that they should be avoided, but I don’t know if it’s because they’re inefficient, because they’re “breaking” the layout, or because other solutions may exist (like anchored preferences) and be better suited for the purpose?</p>
<p><strong>Answer</strong>: Just like any tool, <code>GeometryReader</code> has a time and place where it is correct to use. There aren’t any particular performance pitfalls I’d call out with them, but they shouldn’t be used as a hammer.</p>

</div></div>
</div>


<h2 class="wp-block-heading">Presenting Views</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-e41695d6-29d2-4faa-9b7d-0430548c3578" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="presenting-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-e41695d6-29d2-4faa-9b7d-0430548c3578" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-e41695d6-29d2-4faa-9b7d-0430548c3578">What is the proper way to dismiss a <strong>.fullscreenCover</strong>?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-e41695d6-29d2-4faa-9b7d-0430548c3578">

<p><strong>Original Question</strong>: What is the proper way to dismiss a .fullscreenCover when it is being presented based off an item: setting the item to nil or dismissing using the presentationMode?</p>



<p><strong>Answer</strong>: That really depends on what is doing the dismissing. They both have the same effect in setting the item binding back to nil. It is more about where you are driving the dismissal state from. If you’re dismissing from within the sheet’s content, then using the presentation mode will be more flexible because that will work no matter what is controlling the presentation.</p>



<p>There is also a new environment property introduced this year that can accomplish this as well, which is <a href="https://developer.apple.com/documentation/swiftui/environmentvalues/dismiss" target="_blank" rel="noreferrer noopener">dismiss</a></p>

</div></div>

<div id="presenting-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-e41695d6-29d2-4faa-9b7d-0430548c3578" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-e41695d6-29d2-4faa-9b7d-0430548c3578">How to avoid error &#8220;Attempt to present &lt;X> on &lt;Y> which is already presenting &lt;Z>&#8221;?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-e41695d6-29d2-4faa-9b7d-0430548c3578">

<p><strong>Original Question</strong>: Is there a suggested way or best practice to show a <code>UIDocumentPickerViewController</code> in a SwiftUI sheet without triggering an “Attempt to present &lt;X&gt; on &lt;Y&gt; which is already presenting &lt;Z&gt;&#8221;?</p>
<p><strong>Answer</strong>: You should check out the <a href="https://developer.apple.com/documentation/swiftui/form/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)" target="_blank" rel="noopener"><code>.fileImporter</code></a> modifier if you haven’t already (doc <a href="https://developer.apple.com/documentation/swiftui/form/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)" target="_blank" rel="noopener">here</a>). If you are encountering a specific issue that you think may be a bug, please file a Feedback report!</p>

</div></div>

<div id="presenting-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-e41695d6-29d2-4faa-9b7d-0430548c3578" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-e41695d6-29d2-4faa-9b7d-0430548c3578">What’s the recommended practice for custom sheet presentations? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-e41695d6-29d2-4faa-9b7d-0430548c3578">

<p><strong>Original Question</strong>: What’s the recommended practice for custom sheet presentations? SwiftUI’s <code>.sheet</code> only supports the standard card-style modal presentation. It doesn’t have the flexibility of e.g. UIKit’s transitioning delegates and presentation controllers to let us size and position modally presented controllers.</p>



<p><strong>Answer</strong>: Thanks for the question. For custom presentations, I’ve had good luck putting the presentation content in an overlay, then using an offset modifier to shift it off screen. To bring it on screen, I use State to zero out the offset. If the state is updated inside withAnimation to transition is animated.</p>



<p><strong>Follow-Up Question</strong>: That content won’t be lazy then, right? It’ll be computed in advance and off-screen.</p>



<p><strong>Answer</strong>: You could conditionalize the content too. An offscreen empty view would be essentially free. As would an offscreen view with opacity of 0. You might need to play with the transitions to get the appearance just right.</p>



<p><strong>Follow-Up Question</strong>: And it’s essentially free because the framework is smart enough to not bother rendering content that’s invisible?</p>



<p><strong>Answer</strong>: Yep!</p>



<hr class="wp-block-separator"/>



<p><strong>Comments</strong>: For a hero animation approach, check the example project from my article <a href="https://swiftui-lab.com/matchedgeometryeffect-part1/">matchedEffect Part 1</a></p>

</div></div>
</div>


<h2 class="wp-block-heading">Refreshable</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-c3ddbc3a-cc1b-4227-9750-c7612c095aa2" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="refreshable-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-c3ddbc3a-cc1b-4227-9750-c7612c095aa2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-c3ddbc3a-cc1b-4227-9750-c7612c095aa2">Can the new <strong>.refreshable</strong> API be used with custom refresh controls/spinners? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-c3ddbc3a-cc1b-4227-9750-c7612c095aa2">

<p>Take a look at the <code>&lt;strong&gt;EnvironmentValues.refresh&lt;/strong&gt;</code> property. The refreshable modifier sets this property up with closure provided to the modifier. You can query this property to hook up to your own UI.</p>



<hr class="wp-block-separator"/>



<p><strong>Comments:</strong> An example was requested, but unfortunately none was given. After superficially looking into it, it seems the <strong>List</strong> view refreshable appearance is not customizable. On iOS, it will always be a standard progress view on top, and refresh will trigger with a swipe gesture (although additional triggers may be added by calling the <code>EnvironmentValues.refresh</code> action).</p>
<p>The answer, I think, is aiming at making other views refreshable, but using custom refresh triggers and appearance.</p>

</div></div>

<div id="refreshable-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-c3ddbc3a-cc1b-4227-9750-c7612c095aa2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-c3ddbc3a-cc1b-4227-9750-c7612c095aa2">Is there a way to make refreshable work with LazyVGrid? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-c3ddbc3a-cc1b-4227-9750-c7612c095aa2">

<p>Refreshable is currently only supported by <code>List</code>.</p>



<hr class="wp-block-separator"/>



<p><strong>Comments</strong>: If I understand this correctly, this is not entirely accurate. According to the previous question, it is possible to implement refreshable with custom views. What is unique to Lists, is the pull to refresh gesture and progress view on top.</p>



<p>This means a refreshable action can be associated to just any view, by putting it into the environment (via the<code> .refreshable()</code> modifier). Then you must implement the UI yourself, and when the user triggers the refresh, call the action you obtain from <code>EnvironmentValues.refresh</code>.</p>

</div></div>

<div id="refreshable-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-c3ddbc3a-cc1b-4227-9750-c7612c095aa2" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-c3ddbc3a-cc1b-4227-9750-c7612c095aa2">Does <strong>refreshable()</strong> work with <strong>ScrollView</strong>? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-c3ddbc3a-cc1b-4227-9750-c7612c095aa2">

<p><strong>Original Question</strong>: Refreshable doesn’t work with scroll view. Is it a bug or desired behaviour?</p>



<p><strong>Answer</strong>: Currently refreshable only supports <code>List</code>. Please file a feedback request if you have other use-cases you’d like to see supported.</p>

</div></div>
</div>


<h2 class="wp-block-heading">Searching</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-df8e0ac5-8e22-4ec1-99b1-ef21e231a945" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="searching-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-df8e0ac5-8e22-4ec1-99b1-ef21e231a945" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-df8e0ac5-8e22-4ec1-99b1-ef21e231a945">Using <strong>@Environment(.isSearching)</strong>, how would multiple navigation bar in an app work? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-df8e0ac5-8e22-4ec1-99b1-ef21e231a945">

<p>The <code>isSearching</code> environment property is tied to the searchable modifier that sets it up. If you have the following:</p>



<pre class="wp-block-swiftuilab-snippet faq-code"><code class="language-swift">NavigationView {
    ContentView()
    DetailView()
}
.searchable(text: $text)
</code></pre>



<p>Then you could query the <code>isSearching</code> property inside of <code>ContentView</code> or <code>DetailView</code>. If you have the following:</p>



<pre class="wp-block-swiftuilab-snippet faq-code"><code class="language-swift">NavigationView {

    ContentView()

    DetailView()
        .searchable(text: $text)
}</code></pre>



<p>Then you could only query it inside of <code>DetailView</code>. Similarly, if you have the following:</p>



<pre class="wp-block-swiftuilab-snippet faq-code"><code class="language-swift">NavigationView {

    ContentView()

    MiddleView()
        .searchable(text: $text)

    DetailView()
        .searchable(text: $text)

}</code></pre>



<p>Then you could query <code>isSearching</code> in either <code>MiddleView</code> or <code>DetailView</code> and the property would relate to the enclosing searchable modifier.</p>

</div></div>

<div id="searching-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-df8e0ac5-8e22-4ec1-99b1-ef21e231a945" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-df8e0ac5-8e22-4ec1-99b1-ef21e231a945">Is <strong>.searchable</strong> for local data only, or can it be used to query services? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-df8e0ac5-8e22-4ec1-99b1-ef21e231a945">

<p>Searchable specifies that the view supports search. You can implement that search however works best for your app.</p>



<p>For example, you could kick off a query using the bound search term, then update the results when your query completes.</p>

</div></div>

<div id="searching-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-df8e0ac5-8e22-4ec1-99b1-ef21e231a945" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-df8e0ac5-8e22-4ec1-99b1-ef21e231a945">How would one go about adding the <strong>.searchable</strong> modifier to a PDFView? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-df8e0ac5-8e22-4ec1-99b1-ef21e231a945">

<p>On iOS, the searchable modifier works with a navigation view to render its search field. On macOS, it works with a navigation view or the root view of your scene. If you combine a&nbsp;<code>PDFView</code>&nbsp;with a navigation view, things should hopefully work as you expect. If not, please do file a feedback with some more details on what you would like to achieve.</p>

</div></div>
</div>


<h2 class="wp-block-heading">SF Symbols</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-6c8e3f3b-9e6b-43f7-8e24-237f29c33d9e" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="sf-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-6c8e3f3b-9e6b-43f7-8e24-237f29c33d9e" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-6c8e3f3b-9e6b-43f7-8e24-237f29c33d9e">Can we use the new buttons with non-SF single-color graphics? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-6c8e3f3b-9e6b-43f7-8e24-237f29c33d9e">

<p>Yep, in fact the new buttons can have a label of any view, including shapes and more! <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f600.png" alt="😀" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>



<p>The one thing to be careful of with custom images is that they use template rendering if you want the standard foreground styling within the button (otherwise, they&#8217;ll be the exact color of the image&#8217;s pixels).</p>

</div></div>

<div id="sf-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-6c8e3f3b-9e6b-43f7-8e24-237f29c33d9e" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-6c8e3f3b-9e6b-43f7-8e24-237f29c33d9e">Does using more SF Symbols have an impact on total app size? Or they all are stored in the OS?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-6c8e3f3b-9e6b-43f7-8e24-237f29c33d9e">

<p>These are part of the OS, so you can feel free to go wild with all the symbols you want with no impact to app size.</p>

</div></div>

<div id="sf-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-6c8e3f3b-9e6b-43f7-8e24-237f29c33d9e" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-6c8e3f3b-9e6b-43f7-8e24-237f29c33d9e">Is there a limit to where SFSymbols change size?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-6c8e3f3b-9e6b-43f7-8e24-237f29c33d9e">

<p><strong>Original Question</strong>: Is there a limit to where SFSymbols change size? I put them as items in a TabView but it doesn’t seem like they are scaling with dynamic text…</p>



<p><strong>Answer</strong>: TabViews do have a standard symbol size across all apps and how far they scale.</p>



<p><strong>Follow-Up Question</strong>: Does that mean they don’t scale as much as other places?</p>



<p><strong>Answer</strong>: Right, other elements could end up scaling more, which is expected.</p>



<p><strong>Follow-Up Question</strong>: As a UI element I sort of wanted it to scale more. Is there a better way to do that. I’d rather not leave SF Symbols.</p>



<p><strong>Answer</strong>: If you have a more custom UI element where you want that scaling, you could build that! Especially with the new <code>.bar</code> material, you could still get a similar material background behind that custom bottom bar.</p>
<p>It ends up being the same API, just using <code>.background(.bar)</code> instead of <code>.thinMaterial</code></p>
<p>More information about materials: <a href="https://developer.apple.com/videos/play/wwdc2021/10021/" target="_blank" rel="noopener">Add rich graphics to your SwiftUI app</a></p>



<p></p>

</div></div>
</div>


<h2 class="wp-block-heading">Text</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-00230eb6-9c28-410c-9419-d10bdfc63e71" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="text-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-00230eb6-9c28-410c-9419-d10bdfc63e71" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-00230eb6-9c28-410c-9419-d10bdfc63e71">Are paragraph styles supported by AttributedStrings in Text? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-00230eb6-9c28-410c-9419-d10bdfc63e71">

<p><strong>Original Question</strong>: Is it possible to specify paragraph styles AttributedStrings used by SwiftUI <code>Text</code> views? I don’t see any mention of paragraph style in the SwiftUI <code>AttributeScope</code> (but it’s there for the UIKit scope)</p>
<p><strong>Answer</strong>: SwiftUI currently supports all of the attributes in the SwiftUI scope and some in the nested Foundation scope, the supported Foundation attributes are <code>link</code> and <code>inlinePresentationIntent</code>. So it’s not possible to specify paragraph styles</p>

</div></div>

<div id="text-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-00230eb6-9c28-410c-9419-d10bdfc63e71" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-00230eb6-9c28-410c-9419-d10bdfc63e71">Can the new <strong>AtrributedString</strong> be used to provide accessibility notations in SwiftUI? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-00230eb6-9c28-410c-9419-d10bdfc63e71">

<p><strong>Original Question</strong>: Can the new&nbsp;<code>AtrributedString</code>&nbsp;be used to provide accessibility notations in SwiftUI like&nbsp;<code>NSAttributedString</code>s can in UIKit? Should we report any attributes from&nbsp;<code>NSAttributedString</code>&nbsp;we need on&nbsp;<code>AttributedString</code>?</p>



<p><strong>Answer (engineer #1)</strong>: <code>AttributedString</code> should have the full suite of accessibility attributes and they should now be standardized across platforms! But if you see any we missed, please do file Feedback so we can fix any oversights.</p>



<p>Thanks for the question. We’re super excited about the AttributedString support!</p>



<p>Localization, accessibility, formatting, and morphology agreement in one tidy package.</p>



<p><strong>Follow-Up Question</strong>: I was looking for pronunciation control but couldn&#8217;t find it. Does it have a different name?</p>



<p><strong>Answer (engineer #2)</strong>: Those are not yet available. But we are very aware of the issue <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>



<p>In the meanwhile, there is some new AX API that can be applied to <code>Text</code> itself, such as <code>speechSpellsOutCharacters</code>, <code>accessibilityTextContentType</code>, and more.</p>

</div></div>

<div id="text-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-00230eb6-9c28-410c-9419-d10bdfc63e71" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-00230eb6-9c28-410c-9419-d10bdfc63e71">Markdown text in a variable won&#8217;t work. Is it a bug? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2666.png" alt="♦" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f4ac.png" alt="💬" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-00230eb6-9c28-410c-9419-d10bdfc63e71">

<p><strong>Original Question</strong>: When I put Markdown-formatted text as a <code>String</code> literal in a <code>Text</code>, it formats with nice attribution, but when I pass it in from a variable, it doesn’t. Is this a bug, or have I misunderstood something about how Texts take Markdown-formatted Strings?</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    var text: AttributedString = &quot;**Hello**, `world`! Visit our [website](https://www.capitalone.com)).&quot;

    var body: some View {
        VStack {
            Text(&quot;**Hello**, `world`! Visit our [website](https://www.capitalone.com)).&quot;)
            
            Text(text)
        }
    }
}</code></pre>



<p>The first <code>Text</code> renders nicely with bold, code and a link, while the second doesn’t &#8211; it just shows the Markdown annotations in the string directly.</p>



<p><strong>Answer</strong>: I think that’s a bug in beta 1. You might try <code>Text(&quot;\(text)&quot;)</code> to trigger the use of a different initializer.</p>



<hr class="wp-block-separator"/>



<p><strong>Comments</strong>: If you have a string literal and you want to avoid markdown treatment, use <code>Text(verbatim:)</code></p>

</div></div>
</div>


<h2 class="wp-block-heading">WatchKit</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-cdf1a448-f565-430b-9d61-b600e39a21f9" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="watchkit-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-cdf1a448-f565-430b-9d61-b600e39a21f9" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-cdf1a448-f565-430b-9d61-b600e39a21f9">When using the WatchKit way to get text input, do we still get the text input improvements from SwiftUI? (e.g. remembering the user choice of scribble vs. voice input)</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-cdf1a448-f565-430b-9d61-b600e39a21f9">

<p>If you don’t pass any suggestions to the WatchKit API, then yes, you get all of the new behavior.</p>

</div></div>
</div>


<h2 class="wp-block-heading">Window Management</h2>


<div class="wp-block-ub-content-toggle" id="ub-content-toggle-0b9bfd9b-6b1e-4f88-bfc0-c2bd1bf30d58" data-mobilecollapse="false" data-desktopcollapse="true">
<div id="window-1" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-0-0b9bfd9b-6b1e-4f88-bfc0-c2bd1bf30d58" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-0b9bfd9b-6b1e-4f88-bfc0-c2bd1bf30d58">What is the recommended way to open a View in a new window in SwiftUI for macOS? (1)</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-0-0b9bfd9b-6b1e-4f88-bfc0-c2bd1bf30d58">

<p>We don’t have much API in this area at the moment &#8211; using a NavigationLink in a commands context will open a window with the destination view.</p>



<p><strong>Follow-Up Question</strong>: We did a convoluted combination of URLs and <code>handlesExternalEvents</code> to trigger a <code>WindowGroup</code> which seems to work?!? Not sure if that&#8217;s a best practice though &#8211; was hard to find details on this.</p>



<p><strong>Answer</strong>: Yes, that works due to the default behavior of the <code>handlesExternalEvents</code>, which is to create a new window for the matched scene.</p>
<p>Certainly any feedbacks filed here would be much appreciated, and can help inform our APIs in this area.</p>

</div></div>

<div id="window-2" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-1-0b9bfd9b-6b1e-4f88-bfc0-c2bd1bf30d58" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-0b9bfd9b-6b1e-4f88-bfc0-c2bd1bf30d58">What is the recommended way to open a View in a new window in SwiftUI for macOS? (2) <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-1-0b9bfd9b-6b1e-4f88-bfc0-c2bd1bf30d58">

<p><strong>Original Question</strong>: Is there any way to open additional window from SwiftUI Life cycle? I mean call additional <code>WindowGroup</code>. For example Inspector panel.</p>



<p><strong>Answer</strong>: Hi &#8211; we currently do not have any API for this, though we’d love if you could file a feedback with any specifics you have for your use case. One option for something like an inspector panel is that you could use <code>NSApplicationDelegateAdaptor</code>, and open your window by communicating with that. A secondary <code>WindowGroup</code> might not be the best match for something like an inspector panel, since <code>WindowGroup</code> supports multiple windows, and will should up in the File -&gt; New menu.</p>
<p>Oh, I should mention that the window created via the delegate adaptor would be an <code>NSWindow</code> instance, with an <code>NSHostingView</code> as the <code>contentView</code>.</p>
<p><strong>Follow-Up Question</strong>: Thank you! Previously you suggest to use <code>NavigationLink</code> in a commands context to open a new window. I have tried and it works. It looks a little tricky. Its good solution or is it better to avoid it?</p>
<p><strong>Answer</strong>: Yes, that is also supported &#8211; we will open a new window with the destination view as the content. This could also be a good fit for your case, since it will only ever make one window for that destination (it will be brought to the front if its already open and the user elects the menu item again).</p>
<p><strong>Follow-Up Question</strong>: And is there any way to make <code>WindowGroup</code> open only single window? Or this is the only way <code>CommandGroup(replacing: .newItem, addition: {})</code></p>
<p><strong>Answer</strong>: No, the design of <code>WindowGroup</code> is to support multiple windows on platforms that support it (iPadOS and macOS). What you have there will effectively remove the menu item. The problem with this approach is that if the user closes the window, they will not have an easy way to get it back, short of clicking the dock icon. If your app is one that makes sense to only have one window, we would certainly love a feedback about that, though.</p>
<p><strong>Follow-Up Question</strong>: One more question about using <code>NavigationLink</code>. It works when I put it into <code>.commands</code>. It is possible to add it to toolbar. I was try this:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">.toolbar(content: {
    NavigationLink(&quot;Test&quot;, destination: Text(&quot;Hello, world!&quot;).padding())
})</code></pre>



<p>But the button is disabled in the toolbar.</p>



<p><strong>Answer</strong>: I do not believe we support that, though feedbacks are always welcome for this as well. <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>

</div></div>

<div id="window-3" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-2-0b9bfd9b-6b1e-4f88-bfc0-c2bd1bf30d58" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-0b9bfd9b-6b1e-4f88-bfc0-c2bd1bf30d58">Is there a way for a view to know when the window it is hosted in is key or not on macOS?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-2-0b9bfd9b-6b1e-4f88-bfc0-c2bd1bf30d58">

<p>Could you elaborate some on what you’re trying to achieve? There is the <code>controlActiveState</code> property on the <code>Environment</code>, but there is also <code>focusedValue(:&lt;em&gt;_:_&lt;/em&gt;)</code> and <code>@FocusedValue</code> which are used in the context of the key window on macOS.</p>

</div></div>

<div id="window-4" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-3-0b9bfd9b-6b1e-4f88-bfc0-c2bd1bf30d58" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-0b9bfd9b-6b1e-4f88-bfc0-c2bd1bf30d58">What is the handlesExternalEvents modifier? <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2b50.png" alt="⭐" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-3-0b9bfd9b-6b1e-4f88-bfc0-c2bd1bf30d58">

<p>This modifier allows you to specify a <code>Scene</code> to be used when external data is sent to the app &#8211; a <code>URL</code> or an <code>NSUserActivity</code>. For example, on macOS, when a url comes in that matches the pattern, we will either create a new window for that <code>Scene</code>, or use an existing one, if a view has been modified with <code>handlesExternalEvents</code> to prefer that incoming value.</p>



<p><strong>Follow-Up Question</strong>: About that. In my case I always get a new window when I use <code>handlesExternalEvents</code>. How I can tell system o use already existed window and not to create another one?</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">WindowGroup {
    ContentView2()
}
.handlesExternalEvents(marching: [&quot;texturl://open&quot;]</code></pre>



<p><strong>Answer</strong>: You can apply the view modifier with the <code>preferring:</code> parameter &#8211; if an existing window prefers the incoming value, we will use that rather than creating a new one.</p>



<p>Depending on your case, you may wish to use this in tandem with <code>onOpenURL</code>.</p>



<p>The <code>handlesExternalEvents</code> modifiers are a way to tell the system which <code>Scene</code> to choose, if you have more than one. <code>onOpenURL</code> will get the actual data, though.</p>

</div></div>

<div id="window-5" class="wp-block-ub-content-toggle-accordion">
                <div class="wp-block-ub-content-toggle-accordion-title-wrap" aria-expanded="false" aria-controls="ub-content-toggle-panel-4-0b9bfd9b-6b1e-4f88-bfc0-c2bd1bf30d58" tabindex="0">
                    <p class="wp-block-ub-content-toggle-accordion-title ub-content-toggle-title-0b9bfd9b-6b1e-4f88-bfc0-c2bd1bf30d58">For SwiftUI macOS document apps, is there a recommended way to save and restore window size and position?</p><div class="wp-block-ub-content-toggle-accordion-toggle-wrap right"><span class="wp-block-ub-content-toggle-accordion-state-indicator wp-block-ub-chevron-down"></span>
                    </div></div><div role="region" class="wp-block-ub-content-toggle-accordion-content-wrap ub-hide" id="ub-content-toggle-panel-4-0b9bfd9b-6b1e-4f88-bfc0-c2bd1bf30d58">

<p>Hi, when state restoration is not enabled on macOS, this is expected behavior at the moment. We’d welcome a feedback for this, though. If you could include any information about your use case as well, that’d be very helpful. Thanks!</p>

</div></div>
</div>


<hr class="wp-block-separator"/>



<h2 class="wp-block-heading">Summary</h2>



<p>Congratulations for reaching the end of this long post. I hope you enjoyed the SwiftUI Digital Lounge content.</p>



<p>Please feel free to comment below, and follow me on twitter if you would like to be notified when new articles come out. Until next time! </p>



<script>
jQuery( document ).ready(function() {
    
    // ----------------------------
    // ADD COPY BUTTONS
    var headings = jQuery("div.wp-block-ub-content-toggle-accordion-content-wrap");
    
    jQuery.each(headings, function (i, e) {
        var anchor = jQuery(e).parent().attr('id');
        
        var btn = jQuery('<button onClick="copyQuestionLink(\'' + anchor + '\')" title="Copy link to this question" type="button">#</button>');
        
        btn.css('position', 'absolute');
        btn.css('padding', '1px 7px');
        btn.css('right', '10px');
        btn.css('bottom', '10px');
                
        btn.appendTo(e);
    });

    
    // ----------------------------
    // EXPAND AND GO TO ANCHOR
    var h = window.location.hash;
    
    if(h) {
        let selector = "div" + h + ".wp-block-ub-content-toggle-accordion > div";
        
        var a = jQuery(selector).first();
        
        if(a) {
            a.click();
            
            jQuery('html, body').animate({
              scrollTop: a.offset().top
            });
            
        }
    }
});

function copyQuestionLink(anchor) {
    var link = "https://www.swiftui-lab.com/random-lessons#" + anchor;
    
    // Copy to clipboard
    var aux = document.createElement("input");
    aux.setAttribute("value", link);
    document.body.appendChild(aux);
    aux.select();
    document.execCommand("copy");
    document.body.removeChild(aux);
    
    alert("Question link copied to clipboard:\n\n" + link);
}
</script>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/random-lessons/">Random Lessons from the SwiftUI Digital Lounge</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://swiftui-lab.com/random-lessons/feed/</wfw:commentRss>
			<slash:comments>10</slash:comments>
		
		
			</item>
		<item>
		<title>SwiftUI &#8217;21 in Numbers</title>
		<link>https://swiftui-lab.com/swiftui-21-in-numbers/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=swiftui-21-in-numbers</link>
					<comments>https://swiftui-lab.com/swiftui-21-in-numbers/#comments</comments>
		
		<dc:creator><![CDATA[javier]]></dc:creator>
		<pubDate>Tue, 08 Jun 2021 15:13:27 +0000</pubDate>
				<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">https://swiftui-lab.com/?p=2576</guid>

					<description><![CDATA[<p>WWDC &#8217;21 is finally here and it brought a lot of new toys to play with. In the upcoming weeks I will be writing new articles and will update the Companion for SwiftUI app to include all the new SwiftUI features introduced this year. In anticipation, a week ago I released a beta version of ... <a title="SwiftUI &#8217;21 in Numbers" class="read-more" href="https://swiftui-lab.com/swiftui-21-in-numbers/" aria-label="More on SwiftUI &#8217;21 in Numbers">Read more</a></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/swiftui-21-in-numbers/">SwiftUI &#8217;21 in Numbers</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p><strong>WWDC &#8217;21</strong> is finally here and it brought a lot of new toys to play with. In the upcoming weeks I will be writing new articles and will update the <strong>Companion for SwiftUI</strong> app to include all the new SwiftUI features introduced this year. In anticipation, a week ago I released a beta version of the Companion app that introduced a lot of UI enhancements. The main purpose was to facilitate faster API exploration (<a href="https://swiftui-lab.com/swiftui-companion-3-0-1-release-notes/">read more here</a>).</p>



<p>With the task ahead, the question is, how much work is there? A brief review of the SwiftUI declaration file reveals the following (approximate) numbers:</p>



<p><strong>Number of new types:</strong></p>



<figure class="wp-block-table is-style-regular"><table class="has-subtle-light-gray-background-color has-background"><thead><tr><th>Type</th><th class="has-text-align-center" data-align="center">Combined</th><th class="has-text-align-center" data-align="center"> macOS </th><th class="has-text-align-center" data-align="center">   iOS   </th><th class="has-text-align-center" data-align="center">  tvOS  </th><th class="has-text-align-center" data-align="center">watchOS</th></tr></thead><tbody><tr><td>Protocols</td><td class="has-text-align-center" data-align="center">6</td><td class="has-text-align-center" data-align="center">6</td><td class="has-text-align-center" data-align="center">3</td><td class="has-text-align-center" data-align="center">3</td><td class="has-text-align-center" data-align="center">3</td></tr><tr><td>Views</td><td class="has-text-align-center" data-align="center">8</td><td class="has-text-align-center" data-align="center">7</td><td class="has-text-align-center" data-align="center">7</td><td class="has-text-align-center" data-align="center">5</td><td class="has-text-align-center" data-align="center">6</td></tr><tr><td>Shapes</td><td class="has-text-align-center" data-align="center">&#8211;</td><td class="has-text-align-center" data-align="center">&#8211;</td><td class="has-text-align-center" data-align="center">&#8211;</td><td class="has-text-align-center" data-align="center">&#8211;</td><td class="has-text-align-center" data-align="center">&#8211;</td></tr><tr><td>Property Wrappers</td><td class="has-text-align-center" data-align="center">3</td><td class="has-text-align-center" data-align="center">3</td><td class="has-text-align-center" data-align="center">3</td><td class="has-text-align-center" data-align="center">3</td><td class="has-text-align-center" data-align="center">3</td></tr><tr><td>Scenes</td><td class="has-text-align-center" data-align="center">&#8211;</td><td class="has-text-align-center" data-align="center">&#8211;</td><td class="has-text-align-center" data-align="center">&#8211;</td><td class="has-text-align-center" data-align="center">&#8211;</td><td class="has-text-align-center" data-align="center">&#8211;</td></tr><tr><td>Environment Values</td><td class="has-text-align-center" data-align="center">15</td><td class="has-text-align-center" data-align="center">14</td><td class="has-text-align-center" data-align="center">14</td><td class="has-text-align-center" data-align="center">13</td><td class="has-text-align-center" data-align="center">14</td></tr><tr><td>Style Protocols</td><td class="has-text-align-center" data-align="center">2</td><td class="has-text-align-center" data-align="center">2</td><td class="has-text-align-center" data-align="center">1</td><td class="has-text-align-center" data-align="center">&#8211;</td><td class="has-text-align-center" data-align="center">&#8211;</td></tr><tr><td>Style Types</td><td class="has-text-align-center" data-align="center">15</td><td class="has-text-align-center" data-align="center">14</td><td class="has-text-align-center" data-align="center">11</td><td class="has-text-align-center" data-align="center">7</td><td class="has-text-align-center" data-align="center">7</td></tr></tbody><tfoot><tr><td><strong>Total</strong></td><td class="has-text-align-center" data-align="center"><strong>49</strong></td><td class="has-text-align-center" data-align="center"><strong>46</strong></td><td class="has-text-align-center" data-align="center"><strong>39</strong></td><td class="has-text-align-center" data-align="center"><strong>31</strong></td><td class="has-text-align-center" data-align="center"><strong>33</strong></td></tr></tfoot></table></figure>



<p>Although these numbers don&#8217;t look too impressive, when we look deeper, we find out that the existing views and protocols have exploded in number of methods, properties and initializers. See below.</p>



<p><strong>Number of New initializers, methods and properties:</strong></p>



<figure class="wp-block-table"><table class="has-subtle-pale-blue-background-color has-background"><thead><tr><th></th><th class="has-text-align-center" data-align="center">Combined</th><th class="has-text-align-center" data-align="center"> <strong>macOS</strong> </th><th class="has-text-align-center" data-align="center">    <strong>iOS</strong>    </th><th class="has-text-align-center" data-align="center">   <strong>tvOS</strong>   </th><th class="has-text-align-center" data-align="center"><strong>watchOS</strong></th></tr></thead><tbody><tr><td>Initializers</td><td class="has-text-align-center" data-align="center">116</td><td class="has-text-align-center" data-align="center">114</td><td class="has-text-align-center" data-align="center">98</td><td class="has-text-align-center" data-align="center">79</td><td class="has-text-align-center" data-align="center">79</td></tr><tr><td>Instance methods</td><td class="has-text-align-center" data-align="center">189</td><td class="has-text-align-center" data-align="center">179</td><td class="has-text-align-center" data-align="center">177</td><td class="has-text-align-center" data-align="center">148</td><td class="has-text-align-center" data-align="center">148</td></tr><tr><td>Static methods</td><td class="has-text-align-center" data-align="center">23</td><td class="has-text-align-center" data-align="center">21</td><td class="has-text-align-center" data-align="center">18</td><td class="has-text-align-center" data-align="center">18</td><td class="has-text-align-center" data-align="center">18</td></tr><tr><td>Instance properties</td><td class="has-text-align-center" data-align="center">38</td><td class="has-text-align-center" data-align="center">37</td><td class="has-text-align-center" data-align="center">31</td><td class="has-text-align-center" data-align="center">30</td><td class="has-text-align-center" data-align="center">31</td></tr><tr><td>Static properties</td><td class="has-text-align-center" data-align="center">112</td><td class="has-text-align-center" data-align="center">98</td><td class="has-text-align-center" data-align="center">84</td><td class="has-text-align-center" data-align="center">65</td><td class="has-text-align-center" data-align="center">66</td></tr></tbody><tfoot><tr><td><strong>Total</strong></td><td class="has-text-align-center" data-align="center"><strong>478</strong></td><td class="has-text-align-center" data-align="center"><strong>449</strong></td><td class="has-text-align-center" data-align="center"><strong>408</strong></td><td class="has-text-align-center" data-align="center"><strong>340</strong></td><td class="has-text-align-center" data-align="center"><strong>342</strong></td></tr></tfoot></table></figure>



<p><strong>Number of Deprecated Initializers, methods and properties:</strong></p>



<figure class="wp-block-table"><table class="has-subtle-pale-pink-background-color has-background"><thead><tr><th></th><th class="has-text-align-center" data-align="center">Combined</th><th class="has-text-align-center" data-align="center"> <strong>macOS</strong> </th><th class="has-text-align-center" data-align="center">    <strong>iOS</strong>    </th><th class="has-text-align-center" data-align="center">   <strong>tvOS</strong>   </th><th class="has-text-align-center" data-align="center"><strong>watchOS</strong></th></tr></thead><tbody><tr><td>Initializers</td><td class="has-text-align-center" data-align="center">30</td><td class="has-text-align-center" data-align="center">29</td><td class="has-text-align-center" data-align="center">29</td><td class="has-text-align-center" data-align="center">21</td><td class="has-text-align-center" data-align="center">25</td></tr><tr><td>Instance methods</td><td class="has-text-align-center" data-align="center">12</td><td class="has-text-align-center" data-align="center">7</td><td class="has-text-align-center" data-align="center">11</td><td class="has-text-align-center" data-align="center">9</td><td class="has-text-align-center" data-align="center">9</td></tr><tr><td>Static methods</td><td class="has-text-align-center" data-align="center">&#8211;</td><td class="has-text-align-center" data-align="center">&#8211;</td><td class="has-text-align-center" data-align="center">&#8211;</td><td class="has-text-align-center" data-align="center">&#8211;</td><td class="has-text-align-center" data-align="center">&#8211;</td></tr><tr><td>Instance properties</td><td class="has-text-align-center" data-align="center">1</td><td class="has-text-align-center" data-align="center">1</td><td class="has-text-align-center" data-align="center">1</td><td class="has-text-align-center" data-align="center">1</td><td class="has-text-align-center" data-align="center">1</td></tr><tr><td>Static properties</td><td class="has-text-align-center" data-align="center">0</td><td class="has-text-align-center" data-align="center">0</td><td class="has-text-align-center" data-align="center">0</td><td class="has-text-align-center" data-align="center">0</td><td class="has-text-align-center" data-align="center">0</td></tr></tbody><tfoot><tr><td><strong>Total</strong></td><td class="has-text-align-center" data-align="center">43</td><td class="has-text-align-center" data-align="center">37</td><td class="has-text-align-center" data-align="center">41</td><td class="has-text-align-center" data-align="center">31</td><td class="has-text-align-center" data-align="center">35</td></tr></tfoot></table></figure>



<p>Now that we know where we stand in terms of the task ahead, let&#8217;s get to work!</p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/swiftui-21-in-numbers/">SwiftUI &#8217;21 in Numbers</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://swiftui-lab.com/swiftui-21-in-numbers/feed/</wfw:commentRss>
			<slash:comments>7</slash:comments>
		
		
			</item>
		<item>
		<title>Attributed Strings with SwiftUI</title>
		<link>https://swiftui-lab.com/attributed-strings-with-swiftui/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=attributed-strings-with-swiftui</link>
					<comments>https://swiftui-lab.com/attributed-strings-with-swiftui/#comments</comments>
		
		<dc:creator><![CDATA[javier]]></dc:creator>
		<pubDate>Mon, 09 Nov 2020 16:00:41 +0000</pubDate>
				<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">https://swiftui-lab.com/?p=2458</guid>

					<description><![CDATA[<p>In the last few weeks, I have been asked frequently about how to work with attributed strings and SwiftUI, so I decided to write an article to share what I know about the topic. Before we begin, let&#8217;s put it right there:&#160;SwiftUI is not prepared to handle attributed strings easily.&#160;With that out of the way, ... <a title="Attributed Strings with SwiftUI" class="read-more" href="https://swiftui-lab.com/attributed-strings-with-swiftui/" aria-label="More on Attributed Strings with SwiftUI">Read more</a></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/attributed-strings-with-swiftui/">Attributed Strings with SwiftUI</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>In the last few weeks, I have been asked frequently about how to work with attributed strings and SwiftUI, so I decided to write an article to share what I know about the topic.</p>



<p>Before we begin, let&#8217;s put it right there:&nbsp;<em>SwiftUI is not prepared to handle attributed strings easily.</em>&nbsp;With that out of the way, let&#8217;s see the best approaches to fill that void and the limitations or problems we will find along the way.</p>



<h2 class="wp-block-heading">Attributed Strings</h2>



<p>In this article, I am assuming you know what an <a href="https://developer.apple.com/documentation/foundation/nsattributedstring" target="_blank" rel="noreferrer noopener">NSAttributedString</a> is and how to create one. They have been around for a very long time. If you need to know how to build one, the Internet is full of resources. Google&#8217;s your friend there.</p>



<p>To simplify the examples in this post, they will all use the same attributed string, defined as a global variable and initialized with the following code:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="656" height="85" src="https://swiftui-lab.com/wp-content/uploads/2020/11/NSAttributedString.png" alt="" class="wp-image-2460" srcset="https://swiftui-lab.com/wp-content/uploads/2020/11/NSAttributedString.png 656w, https://swiftui-lab.com/wp-content/uploads/2020/11/NSAttributedString-300x39.png 300w" sizes="(max-width: 656px) 100vw, 656px" /></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">let myAttributedString: NSMutableAttributedString = {
    
    let a1: [NSAttributedString.Key: Any] = [.foregroundColor: UIColor.systemRed, .kern: 5]
    let s1 = NSMutableAttributedString(string: &quot;Red spaced &quot;, attributes: a1)
    
    let a2: [NSAttributedString.Key: Any] = [.strikethroughStyle: 1, .strikethroughColor: UIColor.systemBlue]
    let s2 = NSAttributedString(string: &quot;strike through&quot;, attributes: a2)
    
    let a3: [NSAttributedString.Key: Any] = [.baselineOffset: 10]
    let s3 = NSAttributedString(string: &quot; raised &quot;, attributes: a3)

    let a4: [NSAttributedString.Key: Any] = [.font: UIFont(name: &quot;Papyrus&quot;, size: 36.0)!, .foregroundColor: UIColor.green]
    let s4 = NSAttributedString(string: &quot; papyrus font &quot;, attributes: a4)

    let a5: [NSAttributedString.Key: Any] = [.foregroundColor: UIColor.systemBlue, .underlineStyle: 1, .underlineColor: UIColor.systemRed]
    let s5 = NSAttributedString(string: &quot;underlined &quot;, attributes: a5)

    s1.append(s2)
    s1.append(s3)
    s1.append(s4)
    s1.append(s5)
    
    return s1
}()</code></pre>



<h2 class="wp-block-heading">The Quick Way Out: Ignoring Attributes</h2>



<p>Sometimes you may have an attributed string that has no attributes, or you don&#8217;t mind losing their effect. If you happen to be so lucky, you can just use its plain&nbsp;<strong>string</strong>&nbsp;value:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="486" height="67" src="https://swiftui-lab.com/wp-content/uploads/2020/11/DumbNSAttributedString.png" alt="" class="wp-image-2465" srcset="https://swiftui-lab.com/wp-content/uploads/2020/11/DumbNSAttributedString.png 486w, https://swiftui-lab.com/wp-content/uploads/2020/11/DumbNSAttributedString-300x41.png 300w" sizes="(max-width: 486px) 100vw, 486px" /></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    var body: some View {
        Text(myAttributedString.string)
            .padding(10)
            .border(Color.black)
    }
}</code></pre>



<p>Alternatively, you can have a Text extension with a custom initializer that does the same. It may seem overkill, but I&#8217;d like to introduce this technique here, as we will expand it later.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">extension Text {
    init(dumbAttributedString: NSAttributedString) {
        self.init(dumbAttributedString.string)
    }
}

struct ContentView: View {
    var body: some View {
        Text(dumbAttributedString: myAttributedString)
            .padding(10)
            .border(Color.black)
    }
} </code></pre>



<h2 class="wp-block-heading">A Limited, but Effective Approach: Text Concatenation</h2>



<p>In 2020, SwiftUI added the ability to concatenate Text views. Adding two Text views together results in a new Text view:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    var body: some View {

        Text(&quot;Hello &quot;) + Text(&quot;world!&quot;)
    }
}</code></pre>



<p>You may also use modifiers on those Text views:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="132" height="58" src="https://swiftui-lab.com/wp-content/uploads/2020/11/TextConcatenation.png" alt="" class="wp-image-2464"/></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    var body: some View {

        let t = Text(&quot;Hello &quot;).foregroundColor(.red) + Text(&quot;world!&quot;).fontWeight(.heavy)
        
        return t
            .padding(10)
            .border(Color.black)
    }
}</code></pre>



<p>However, not all modifiers will work, only those that return&nbsp;<strong>Text</strong>. If a modifier returns&nbsp;<strong>some View</strong>, you are out of luck. It is worth noting that some modifiers exist in two versions. For example, foregroundColor is a method of the&nbsp;<strong>Text</strong>&nbsp;view:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">extension Text {
    public func foregroundColor(_ color: Color?) -&gt; Text
}</code></pre>



<p>But there is another method with the same name in the&nbsp;<strong>View</strong>&nbsp;protocol:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">extension View {
    @inlinable public func foregroundColor(_ color: Color?) -&gt; some View
}</code></pre>



<p>They both do the same, but if you pay attention to the return type, one returns&nbsp;<strong>Text</strong>, while the other returns&nbsp;<strong>some View</strong>. The return type will depend on the view you are modifying. If it is a Text view, it will return&nbsp;<strong>Text</strong>. Otherwise, it will be&nbsp;<strong>some View</strong>.</p>



<p>At the time of this writing, the modifiers that can return&nbsp;<strong>Text</strong>&nbsp;are:</p>



<ul><li>baselineOffset()</li><li>bold()</li><li>font()</li><li>fontWeight()</li><li>foregroundColor()</li><li>italic()</li><li>kerning()</li><li>strikethrough()</li><li>tracking()</li><li>underline()</li></ul>



<h2 class="wp-block-heading">From Attributed String to Concatenated Text</h2>



<p>Now that we know how we can concatenate Text views, let&#8217;s explore a way of going from an attributed string to a composed Text view. What we want to achieve is a custom Text initializer. It will receive an attributed string and return a Text view made of concatenated pieces, each with the appropriate modifiers that correspond to the attributes found in the attributed string. Using it would look something like this:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="655" height="94" src="https://swiftui-lab.com/wp-content/uploads/2020/11/TextExtension.png" alt="" class="wp-image-2466" srcset="https://swiftui-lab.com/wp-content/uploads/2020/11/TextExtension.png 655w, https://swiftui-lab.com/wp-content/uploads/2020/11/TextExtension-300x43.png 300w" sizes="(max-width: 655px) 100vw, 655px" /></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    var body: some View {
        Text(myAttributedString)
            .padding(10)
            .border(Color.black)
    }
}</code></pre>



<p>See the code for the initializer below:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">extension Text {
    init(_ astring: NSAttributedString) {
        self.init(&quot;&quot;)
        
        astring.enumerateAttributes(in: NSRange(location: 0, length: astring.length), options: []) { (attrs, range, _) in
            
            var t = Text(astring.attributedSubstring(from: range).string)

            if let color = attrs[NSAttributedString.Key.foregroundColor] as? UIColor {
                t  = t.foregroundColor(Color(color))
            }

            if let font = attrs[NSAttributedString.Key.font] as? UIFont {
                t  = t.font(.init(font))
            }

            if let kern = attrs[NSAttributedString.Key.kern] as? CGFloat {
                t  = t.kerning(kern)
            }
            
            
            if let striked = attrs[NSAttributedString.Key.strikethroughStyle] as? NSNumber, striked != 0 {
                if let strikeColor = (attrs[NSAttributedString.Key.strikethroughColor] as? UIColor) {
                    t = t.strikethrough(true, color: Color(strikeColor))
                } else {
                    t = t.strikethrough(true)
                }
            }
            
            if let baseline = attrs[NSAttributedString.Key.baselineOffset] as? NSNumber {
                t = t.baselineOffset(CGFloat(baseline.floatValue))
            }
            
            if let underline = attrs[NSAttributedString.Key.underlineStyle] as? NSNumber, underline != 0 {
                if let underlineColor = (attrs[NSAttributedString.Key.underlineColor] as? UIColor) {
                    t = t.underline(true, color: Color(underlineColor))
                } else {
                    t = t.underline(true)
                }
            }
            
            self = self + t
            
        }
    }
}</code></pre>



<p>This is a pretty nice solution. Unfortunately, not all attributes can be handled, because only a few modifiers return Text (the ones from the list above). For example, if the attributed string has a hyperlink, this solution will flat-out ignore it. If you are unfortunate to have an unsupported attribute, you may need to use the next approach.</p>



<h2 class="wp-block-heading">Fallback to UIKit, with UIViewRepresentable (iOS)</h2>



<p>When we exhaust all SwiftUI resources, it may be time to create a UIViewRepresentable. As usual, this has its own set of problems, but at least all attributes are supported. We will start with a simple UIViewRepresentable:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="807" height="387" src="https://swiftui-lab.com/wp-content/uploads/2020/11/AttributedTextLarge.png" alt="" class="wp-image-2467" srcset="https://swiftui-lab.com/wp-content/uploads/2020/11/AttributedTextLarge.png 807w, https://swiftui-lab.com/wp-content/uploads/2020/11/AttributedTextLarge-300x144.png 300w, https://swiftui-lab.com/wp-content/uploads/2020/11/AttributedTextLarge-768x368.png 768w" sizes="(max-width: 807px) 100vw, 807px" /></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    var body: some View {
        AttributedText(attributedString: myAttributedString)
            .padding(10)
            .border(Color.black)
    }
}

struct AttributedText: UIViewRepresentable {
    
    let attributedString: NSAttributedString
    
    init(_ attributedString: NSAttributedString) {
        self.attributedString = attributedString
    }
    
    func makeUIView(context: Context) -&gt; UILabel {
        let label = UILabel()
        
        label.lineBreakMode = .byClipping
        label.numberOfLines = 0

        return label
    }
    
    func updateUIView(_ uiView: UILabel, context: Context) {
        uiView.attributedText = attributedString
    }
}</code></pre>



<p>As you can observe, the problem we have with this approach is that the UIViewRepresentable grows to occupy all the available space. Here&#8217;s where we need to get creative to make our view follow the layout we need.</p>



<p>When trying to solve this problem, we first need to identify what we want exactly. Should the text wrap? Should it grow to its ideal maximum width? Favor height? Will you honor the attributed string paragraph style, or perhaps  ignore it? Once you answer these questions, knowing a little UIKit/AppKit will go a long way.</p>



<p>I&#8217;ll propose a possible solution that may help in some scenarios. Of course, your needs may vary. If so, I hope this article provided you with a good starting point.</p>



<h2 class="wp-block-heading">Using a Binding with sizeThatFits</h2>



<p>To prevent the view from growing (or shrinking too much), we can force it to a specific size, using&nbsp;<strong>frame(width:height:)</strong>. The challenge is finding the right values for width and height. The following example creates a&nbsp;<strong>Binding</strong>&nbsp;to connect a&nbsp;<strong>State</strong>&nbsp;size variable with the result of calling&nbsp;<strong>sizeThatFits</strong> on the UILabel.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="657" height="98" src="https://swiftui-lab.com/wp-content/uploads/2020/11/SizeThatFitsBinding.png" alt="" class="wp-image-2468" srcset="https://swiftui-lab.com/wp-content/uploads/2020/11/SizeThatFitsBinding.png 657w, https://swiftui-lab.com/wp-content/uploads/2020/11/SizeThatFitsBinding-300x45.png 300w" sizes="(max-width: 657px) 100vw, 657px" /></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {   
    var body: some View {
        AttributedText(myAttributedString)
            .padding(10)
            .border(Color.black)
    }
}

struct AttributedText: View {
    @State private var size: CGSize = .zero
    let attributedString: NSAttributedString
    
    init(_ attributedString: NSAttributedString) {
        self.attributedString = attributedString
    }
    
    var body: some View {
        AttributedTextRepresentable(attributedString: attributedString, size: $size)
            .frame(width: size.width, height: size.height)
    }
    
    struct AttributedTextRepresentable: UIViewRepresentable {
        
        let attributedString: NSAttributedString
        @Binding var size: CGSize

        func makeUIView(context: Context) -&gt; UILabel {
            let label = UILabel()
            
            label.lineBreakMode = .byClipping
            label.numberOfLines = 0

            return label
        }
        
        func updateUIView(_ uiView: UILabel, context: Context) {
            uiView.attributedText = attributedString
            
            DispatchQueue.main.async {
                size = uiView.sizeThatFits(uiView.superview?.bounds.size ?? .zero)
            }
        }
    }
}</code></pre>



<p>This solution will not work for every scenario, other options may be setting the hugging priority and compression resistance of the UILabel (UILabel.setContentHuggingPriority() and UILabel.setContentCompressionResistancePriority()). The bottom line, you will need to get creative, depending on the results you expect.</p>



<h2 class="wp-block-heading">Fallback to AppKit, with NSViewRepresentable (macOS)</h2>



<p>Following a similar pattern, the same can be achieved with macOS. We will use NSTextView to replace the UILabel view, and instead of sizeThatFit, we will call the NSTextView.textStorage.size() method.</p>



<p>Because we are now using macOS,&nbsp;<strong>myAttributedString</strong>&nbsp;is created with a slightly modified code. It is the same, but replacing UIColor with NSColor and UIFont with NSFont:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">let myAttributedString: NSMutableAttributedString = {
    
    let a1: [NSAttributedString.Key: Any] = [.foregroundColor: NSColor.systemRed, .kern: 5]
    let s1 = NSMutableAttributedString(string: &quot;Red spaced &quot;, attributes: a1)
    
    let a2: [NSAttributedString.Key: Any] = [.strikethroughStyle: 1, .strikethroughColor: NSColor.systemBlue]
    let s2 = NSAttributedString(string: &quot;strike through&quot;, attributes: a2)
    
    let a3: [NSAttributedString.Key: Any] = [.baselineOffset: 10]
    let s3 = NSAttributedString(string: &quot; raised &quot;, attributes: a3)

    let a4: [NSAttributedString.Key: Any] = [.font: NSFont(name: &quot;Papyrus&quot;, size: 36.0)!, .foregroundColor: NSColor.green]
    let s4 = NSAttributedString(string: &quot; papyrus font &quot;, attributes: a4)

    let a5: [NSAttributedString.Key: Any] = [.foregroundColor: NSColor.systemBlue, .underlineStyle: 1, .underlineColor: NSColor.systemRed]
    let s5 = NSAttributedString(string: &quot;underlined &quot;, attributes: a5)

    s1.append(s2)
    s1.append(s3)
    s1.append(s4)
    s1.append(s5)
    
    return s1
}()

struct ContentView: View {
    var body: some View {
        VStack {
            AttributedText(myAttributedString)
                .padding(10)
                .border(Color.black)

        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
    }
}

struct AttributedText: View  {
    @State var size: CGSize = .zero
    let attributedString: NSAttributedString
    
    init(_ attributedString: NSAttributedString) {
        self.attributedString = attributedString
    }

    var body: some View {
        AttributedTextRepresentable(attributedString: attributedString, size: $size)
            .frame(width: size.width, height: size.height)
    }
    
    struct AttributedTextRepresentable: NSViewRepresentable {

        let attributedString: NSAttributedString
        @Binding var size: CGSize
        
        func makeNSView(context: Context) -&gt; NSTextView {
            let textView = NSTextView()

            textView.textContainer!.widthTracksTextView = false
            textView.textContainer!.containerSize = CGSize(width: CGFloat.greatestFiniteMagnitude, height: CGFloat.greatestFiniteMagnitude)
            textView.drawsBackground = false

            return textView
        }

        func updateNSView(_ nsView: NSTextView, context: Context) {
            nsView.textStorage?.setAttributedString(attributedString)
            
            DispatchQueue.main.async {
                size = nsView.textStorage!.size()
            }
        }
    }
}</code></pre>



<h2 class="wp-block-heading">Summary</h2>



<p>SwiftUI is far from supporting attributed strings, but with a little effort, we can get at least a little closer. I guess I&#8217;ll put it in my wishlist for next year&#8217;s additions.</p>



<p>Please feel free to comment below, and follow me on twitter if you would like to be notified when new articles come out. Until next time!</p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/attributed-strings-with-swiftui/">Attributed Strings with SwiftUI</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://swiftui-lab.com/attributed-strings-with-swiftui/feed/</wfw:commentRss>
			<slash:comments>11</slash:comments>
		
		
			</item>
		<item>
		<title>NSUserActivity with SwiftUI</title>
		<link>https://swiftui-lab.com/nsuseractivity-with-swiftui/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=nsuseractivity-with-swiftui</link>
					<comments>https://swiftui-lab.com/nsuseractivity-with-swiftui/#comments</comments>
		
		<dc:creator><![CDATA[javier]]></dc:creator>
		<pubDate>Thu, 10 Sep 2020 13:21:23 +0000</pubDate>
				<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">https://swiftui-lab.com/?p=2438</guid>

					<description><![CDATA[<p>When I was researching NSUserActivity in order to expand the content of the Companion for SwiftUI app, I found that there is a lot of outdated information and confusing examples out there. For instance, most articles about Handoff are from the time the feature was added. But when that happened, scenes did not exist yet. ... <a title="NSUserActivity with SwiftUI" class="read-more" href="https://swiftui-lab.com/nsuseractivity-with-swiftui/" aria-label="More on NSUserActivity with SwiftUI">Read more</a></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/nsuseractivity-with-swiftui/">NSUserActivity with SwiftUI</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>When I was researching <strong>NSUserActivity</strong> in order to expand the content of the <a href="https://swiftui-lab.com/companion/">Companion for SwiftUI</a> app, I found that there is a lot of outdated information and confusing examples out there. For instance, most articles about Handoff are from the time the feature was added. But when that happened, scenes did not exist yet. Everything was handled by the application delegate. When scenes appeared later, a lot of the code moved to the scene delegate and all those handoff examples just stopped working properly. When you are new to <strong>NSUserActivity</strong>, that is very confusing. And now that SwiftUI also supports user activities and the scene delegates are gone, there&#8217;s even more change. A good time then, for a new article.</p>



<p>Another aspect of <strong>NSUserActivity</strong> that makes it a little confusing, is the fact that it is an object that can be used for multiple but unrelated functions. Many of its properties are only relevant in some cases, but not in others.</p>



<p>A summary of some of the things that NSUserActivity is involved with:</p>



<ul><li><strong>Universal Links</strong>: Universal links are URLs that open in the associated app (if installed), or in Safari otherwise.</li><li><strong>SiriKit</strong>: Siri can launch your app and tell it what it wants to do.</li><li><strong>Spotlight</strong>: Define actions that your app can do, so they are included in Spotlight search results.</li><li><strong>Handoff</strong>: An application can continue the work of another application (or the same application from a different device).</li></ul>



<p>This article presents a series of examples, that will progressively introduce the methods SwiftUI offers to deal with NSUserActivity. There is one example for each of the cases described above.</p>



<h3 class="wp-block-heading">Important Notice</h3>



<p>The SwiftUI methods involved with NSUserActivity are <strong>onOpenURL()</strong>, <strong>userActivity()</strong>, <strong>onContinueUserActivity()</strong> and <strong>handlesExternalEvents()</strong>. Note that these methods can only be used successfully if your app was created with the SwiftUI Lifecycle. If your project still uses a scene delegate, the inclusion of these methods will produce the following console message:</p>



<pre class="wp-block-swiftuilab-snippet wrapped-pre error-pre"><code class="language-">Cannot use Scene methods for URL, NSUserActivity, and other External Events without using SwiftUI Lifecycle. Without SwiftUI Lifecycle, advertising and handling External Events wastes resources, and will have unpredictable results.</code></pre>



<p>In my experience, the aforementioned unpredictable results, are very predictable: all methods are ignored.</p>



<h3 class="wp-block-heading">The Two Faces of a User Activity</h3>



<p>According to <a href="https://developer.apple.com/documentation/foundation/nsuseractivity">Apple&#8217;s </a><a href="https://developer.apple.com/documentation/foundation/nsuseractivity" target="_blank" rel="noreferrer noopener">documentation</a>, a user activity object represents the state of an app at a moment in time:</p>



<blockquote class="wp-block-quote"><p>An&nbsp;<strong>NSUserActivity</strong>&nbsp;object provides a lightweight way to capture the state of your app and put it to use later. You create user activity objects and use them to capture information about what the user was doing, such as viewing app content, editing a document, viewing a web page, or watching a video. When the system launches your app and an activity object is available, your app can use the information in that object to restore itself to an appropriate state.</p></blockquote>



<p>With this in mind, we can distinguish two key moments in a user activity: At some point, user activities are created (we&#8217;ll see when and how later). At some other time, the system may decide to launch (or resume) an app, providing it with an NSUserActivity, so the application can show the relevant UI. We&#8217;ll also learn how to react to these user activities in the app.</p>



<p>Note that when an application can have multiple scenes, only one will get the user activity. We will see how that is determined&#8230; although, spoiler alert, at the time of this writing (Xcode 12, beta 6), that part of SwiftUI seems broken.</p>



<hr class="wp-block-separator"/>



<h3 class="nomargin wp-block-heading">Universal Links</h3>



<h5 class="has-cyan-bluish-gray-color has-text-color wp-block-heading"><strong>Introducing onOpenURL()</strong></h5>



<p>Universal links are useful to integrate your app with your website. Setting up universal links requires several steps that are very well documented by Apple here: <a href="https://developer.apple.com/ios/universal-links/">Universal </a><a href="https://developer.apple.com/ios/universal-links/" target="_blank" rel="noreferrer noopener">Links</a>.</p>



<p>Of all the <strong>NSUserActivity</strong> uses, this is the easiest to implement with SwiftUI. Although universal links use an NSUserActivity to launch or resume your app, you will never get to see it if you are using the SwiftUI LifeCycle!</p>



<p>With UIKit, you would normally use the scene delegate:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">func scene(_ scene: UIScene, continue userActivity: NSUserActivity) {
    if userActivity.activityType == NSUserActivityTypeBrowsingWeb  {
        doSomethingWith(url: userActivity.webpageURL)
    }
}</code></pre>



<p>However, because now we no longer have a scene delegate, we can simply use the onOpenURL method. Now, instead of getting an NSUserActivity object, we will get the URL:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    var body: some View {
        SomeView()
            .onOpenURL { url in
                doSomethingWith(url: url)
            }
    }
    
    func doSomethingWith(url: URL?) {
        ...
    }
}</code></pre>



<hr class="wp-block-separator"/>



<h3 class="nomargin wp-block-heading">SiriKit</h3>



<h5 class="has-cyan-bluish-gray-color has-text-color wp-block-heading"><strong>Introducing onContinueUserActivity()</strong></h5>



<p>Our application can define shortcuts to specific parts of our app. In iOS, these may be created with the Shortcuts app, but we can also create them from inside the application. UIKit has some UI elements to do so, but since these are not directly available in SwiftUI, the example in this section includes a UIViewControllerRepresentable. Its purpose is to place a button that opens the system modal that lets the user create (or edit) the shortcut.</p>



<p>Once the shortcut is created, when Siri is instructed to execute it, it will launch (or resume) our app and will provide an NSUserActivity with the details of the shortcut it wants us to execute. The SwiftUI method we use to provide a callback for that event is <strong>onContinueUserActivity()</strong></p>



<p>In the example below, say &#8220;Hey Siri, show random animal&#8221; (or any other configured phrase). The  system will launch our app and will navigate into a random animal view.</p>



<figure class="wp-block-video aligncenter"><video autoplay controls loop src="https://swiftui-lab.com/wp-content/uploads/2020/09/radom-animal-1.mp4"></video></figure>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">import SwiftUI
import Intents

// Remember to add this to the NSUserActivityTypes array in the Info.plist file
let aType = &quot;com.example.show-animal&quot;

struct Animal: Identifiable {
    let id: Int
    let name: String
    let image: String
}

let animals = [Animal(id: 1, name: &quot;Lion&quot;, image: &quot;lion&quot;),
               Animal(id: 2, name: &quot;Fox&quot;, image: &quot;fox&quot;),
               Animal(id: 3, name: &quot;Panda&quot;, image: &quot;panda-bear&quot;),
               Animal(id: 4, name: &quot;Elephant&quot;, image: &quot;elephant&quot;)]

struct ContentView: View {
    @State private var selection: Int? = nil
    
    var body: some View {
        NavigationView {
            List(animals) { animal in
                NavigationLink(
                    destination: AnimalDetail(animal: animal),
                    tag: animal.id,
                    selection: $selection,
                    label: { AnimalRow(animal: animal) })
            }
            .navigationTitle(&quot;Animal Gallery&quot;)
            .onContinueUserActivity(aType, perform: { userActivity in
                self.selection = Int.random(in: 0...(animals.count - 1))
            })
            
        }.navigationViewStyle(StackNavigationViewStyle())
    }
}

struct AnimalRow: View {
    let animal: Animal
    
    var body: some View {
        HStack {
            Image(animal.image)
                .resizable()
                .frame(width: 60, height: 60)

            Text(animal.name)
        }
    }
}

struct AnimalDetail: View {
    @State private var showAddToSiri: Bool = false
    let animal: Animal
    
    let shortcut: INShortcut = {
        let activity = NSUserActivity(activityType: aType)
        activity.title = &quot;Display a random animal&quot;
        activity.suggestedInvocationPhrase = &quot;Show Random Animal&quot;

        return INShortcut(userActivity: activity)
    }()
    
    var body: some View {
        VStack(spacing: 20) {
            Text(animal.name)
                .font(.title)

            Image(animal.image)
                .resizable()
                .scaledToFit()
            
            SiriButton(shortcut: shortcut).frame(height: 34)

            Spacer()
        }
    }
}</code></pre>



<p>The <strong>UIViewControllerRepresentable</strong> for the shortcut creation and edit modal:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">import SwiftUI
import IntentsUI

struct SiriButton: UIViewControllerRepresentable {
    public let shortcut: INShortcut
    
    func makeUIViewController(context: Context) -&gt; SiriUIViewController {
        return SiriUIViewController(shortcut: shortcut)
    }
    
    func updateUIViewController(_ uiViewController: SiriUIViewController, context: Context) {
    }
}

class SiriUIViewController: UIViewController {
    let shortcut: INShortcut
    
    init(shortcut: INShortcut) {
        self.shortcut = shortcut
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder: NSCoder) {
        fatalError(&quot;init(coder:) has not been implemented&quot;)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        let button = INUIAddVoiceShortcutButton(style: .blackOutline)
        button.shortcut = shortcut
        
        self.view.addSubview(button)
        view.centerXAnchor.constraint(equalTo: button.centerXAnchor).isActive = true
        view.centerYAnchor.constraint(equalTo: button.centerYAnchor).isActive = true
        button.translatesAutoresizingMaskIntoConstraints = false

        button.delegate = self
    }
}

extension SiriUIViewController: INUIAddVoiceShortcutButtonDelegate {
    func present(_ addVoiceShortcutViewController: INUIAddVoiceShortcutViewController, for addVoiceShortcutButton: INUIAddVoiceShortcutButton) {
        addVoiceShortcutViewController.delegate = self
        addVoiceShortcutViewController.modalPresentationStyle = .formSheet
        present(addVoiceShortcutViewController, animated: true)
    }
    
    func present(_ editVoiceShortcutViewController: INUIEditVoiceShortcutViewController, for addVoiceShortcutButton: INUIAddVoiceShortcutButton) {
        editVoiceShortcutViewController.delegate = self
        editVoiceShortcutViewController.modalPresentationStyle = .formSheet
        present(editVoiceShortcutViewController, animated: true)
    }
}

extension SiriUIViewController: INUIAddVoiceShortcutViewControllerDelegate {
    func addVoiceShortcutViewController(_ controller: INUIAddVoiceShortcutViewController, didFinishWith voiceShortcut: INVoiceShortcut?, error: Error?) {
        controller.dismiss(animated: true)
    }

    func addVoiceShortcutViewControllerDidCancel(_ controller: INUIAddVoiceShortcutViewController) {
        controller.dismiss(animated: true)
    }
}

extension SiriUIViewController: INUIEditVoiceShortcutViewControllerDelegate {
    func editVoiceShortcutViewController(_ controller: INUIEditVoiceShortcutViewController, didUpdate voiceShortcut: INVoiceShortcut?, error: Error?) {
        controller.dismiss(animated: true)
    }

    func editVoiceShortcutViewController(_ controller: INUIEditVoiceShortcutViewController, didDeleteVoiceShortcutWithIdentifier deletedVoiceShortcutIdentifier: UUID) {
        controller.dismiss(animated: true)
    }

    func editVoiceShortcutViewControllerDidCancel(_ controller: INUIEditVoiceShortcutViewController) {
        controller.dismiss(animated: true)
    }
}</code></pre>



<hr class="wp-block-separator"/>



<h3 class="nomargin wp-block-heading">Spotlight</h3>



<h5 class="has-cyan-bluish-gray-color has-text-color wp-block-heading"><strong>Introducing userActivity()</strong></h5>



<p>Spotlight search results can include common activities from your app. To make Spotlight learn about them, you need to advertise these activities when they occur. This will make Spotlight aware of them. To advertise NSUserActivities with SwiftUI, we use the <strong>userActivity()</strong> modifier.</p>



<p>In the example below, we have an app that sells ice creams. Whenever we select one of the ice cream sizes, the app updates the advertised size. Whenever the user searches for ice creams, a result for our app will be shown. If the user selects it, the app will be launched and take the user to the last ice cream size advertised.</p>



<p>Note that the system optimizes the times at which it calls the closure from <strong>userActivity()</strong>. Unfortunately, that is not documented. The system tries to be clever enough to keep the information current, without doing constant updates. When debugging, it is a good idea to use a print statement in the userActivity closure.</p>



<p>The example also includes a &#8220;Forget&#8221; button, useful for debugging. It clears the advertised user activity to remove the app from search results. Note that NSUserActivity has an optional property <strong>expirationDate</strong>. If left as <code>nil</code>, the activity does not expire.</p>



<figure class="wp-block-video aligncenter"><video autoplay controls loop src="https://swiftui-lab.com/wp-content/uploads/2020/09/icecream-1.mp4"></video></figure>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">import SwiftUI
import Intents
import CoreSpotlight
import CoreServices

// Remember to add this to the NSUserActivityTypes array in the Info.plist file
let aType = &quot;com.example.icecream-selection&quot;

struct IceCreamSize: Identifiable {
    let id: Int
    let name: String
    let price: Float
    let image: String
}

let sizes = [
    IceCreamSize(id: 1, name: &quot;Small&quot;, price: 1.0, image: &quot;small&quot;),
    IceCreamSize(id: 2, name: &quot;Medium&quot;, price: 1.45, image: &quot;medium&quot;),
    IceCreamSize(id: 3, name: &quot;Large&quot;, price: 1.9, image: &quot;large&quot;)
]

struct ContentView: View {
    @State private var selection: Int? = nil
    
    var body: some View {
        NavigationView {
            List(sizes) { size in
                NavigationLink(destination: IceCreamDetail(icecream: size),
                               tag: size.id,
                               selection: $selection,
                               label: { IceCreamRow(icecream: size) })
            }
            .navigationTitle(&quot;Ice Creams&quot;)
            .toolbar {
                Button(&quot;Forget&quot;) {
                    NSUserActivity.deleteAllSavedUserActivities {
                        print(&quot;done!&quot;)
                    }
                }
            }
            
        }
        .onContinueUserActivity(aType, perform: { userActivity in
            if let icecreamId = userActivity.userInfo?[&quot;sizeId&quot;] as? NSNumber {
                selection = icecreamId.intValue

            }
        })
        .navigationViewStyle(StackNavigationViewStyle())
    }
}

struct IceCreamRow: View {
    let icecream: IceCreamSize
    
    var body: some View {
        HStack {
            Image(icecream.image)
                .resizable()
                .frame(width: 80, height: 80)
            
            VStack(alignment: .leading) {
                Text(&quot;\(icecream.name)&quot;).font(.title).fontWeight(.bold)
                Text(&quot;$ \(String(format: &quot;%0.2f&quot;, icecream.price))&quot;).font(.subheadline)
                Spacer()
            }
        }
    }
}

struct IceCreamDetail: View {
    let icecream: IceCreamSize
    
    var body: some View {
        VStack {
            Text(&quot;\(icecream.name)&quot;).font(.title).fontWeight(.bold)
            Text(&quot;$ \(String(format: &quot;%0.2f&quot;, icecream.price))&quot;).font(.subheadline)

            Image(icecream.image)
                .resizable()
                .scaledToFit()
            
            Spacer()
        }
        .userActivity(aType) { userActivity in
            userActivity.isEligibleForSearch = true
            userActivity.title = &quot;\(icecream.name) Ice Cream&quot;
            userActivity.userInfo = [&quot;sizeId&quot;: icecream.id]
            
            let attributes = CSSearchableItemAttributeSet(itemContentType: kUTTypeItem as String)
            
            attributes.contentDescription = &quot;Get a delicious ice cream now!&quot;
            attributes.thumbnailData = UIImage(named: icecream.image)?.pngData()
            userActivity.contentAttributeSet = attributes
            
            print(&quot;Advertising: \(icecream.name)&quot;)
        }
    }
}</code></pre>



<hr class="wp-block-separator"/>



<h3 class="wp-block-heading">Handoff</h3>



<p>With the methods introduced so far, we can already create a Handoff application. That is an application that can resume work on another device. It can be a single app or a different app. This is usually the case when you distribute two versions of your application: one for iOS and another for macOS.</p>



<p>Note that for Handoff to work, all apps involved need to be signed with the same developer team identifier. Remember to also define your activity type(s) in the <strong>NSUserActivityTypes</strong> entry of the Info.plist of all participating apps.</p>



<p>More details on Handoff implementation is available in <a href="https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/Handoff/AdoptingHandoff/AdoptingHandoff.html">Apple&#8217;s </a><a href="https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/Handoff/AdoptingHandoff/AdoptingHandoff.html" target="_blank" rel="noreferrer noopener">website</a>.</p>



<p>The example below implements a simple web browser. The example calls <strong>userActivity()</strong> to advertise the page the user is viewing and the current scroll position of the page.</p>



<p>If the user switches to another device, the <strong>onContinueUserActivity()</strong> closure will be called when the app is launched (or resumed). The app can then open the page and scroll to the position the user was at in the other device.</p>



<p>User activities can include payload data, in the form of a userInfo dictionary. This is the place where we store all the specific information about our handoff activity. In this example: scroll position (as a percentage) and the URL of the opened page. The example also includes the bundle id of the app that advertised the activity. This is only for debugging purposes, so we know exactly what is going on.</p>



<p>Also, note that the code of this example works both on iOS and macOS. This will let you build two apps, so you can test handoff between an iOS device and a Mac.</p>



<p>Finally, although not related to NSUserActivity, this example wraps a WKWebView with a Representable view. It is a nice example that showcases how a javascript event (in this case <code>onScroll</code>) can update a binding of your SwiftUI view. The full WebView code is available in the following gist file: <a href="https://gist.github.com/swiftui-lab/a873bf413770db6fd1a525fa424ce8cd" target="_blank" rel="noreferrer noopener">WebView.swift</a></p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">import SwiftUI

// Remember to add this to the NSUserActivityTypes array in the Info.plist file
let activityType = &quot;com.example.openpage&quot;

struct ContentView: View {
    @StateObject var data = WebViewData()
    
    @State private var reload: Bool = false
    
    var body: some View {
        VStack {
            HStack {
                TextField(&quot;&quot;, text: $data.urlBar, onCommit: { self.loadUrl(data.urlBar) })
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .disableAutocorrection(true)
                    .modifier(KeyboardModifier())
                    .frame(maxWidth: .infinity)
                    .overlay(ProgressView().opacity(self.data.loading ? 1 : 0).scaleEffect(0.5), alignment: .trailing)
                
                
                Button(action: {
                    self.data.scrollOnLoad = self.data.scrollPercent
                    self.reload.toggle()
                }, label: { Image(systemName: &quot;arrow.clockwise&quot;) })
                
                Button(&quot;Go&quot;) {
                    self.loadUrl(data.urlBar)
                }
            }
            .padding(.horizontal, 4)

            Text(&quot;\(data.scrollPercent)&quot;)
            
            WebView(data: data)
                .id(reload)
                .onAppear { loadUrl(data.urlBar) }
        }
        .userActivity(activityType, element: data.url) { url, activity in
            
            let bundleid = Bundle.main.bundleIdentifier ?? &quot;&quot;
            
            activity.addUserInfoEntries(from: [&quot;scrollPercent&quot;: data.scrollPercent,
                                               &quot;page&quot;: data.url?.absoluteString ?? &quot;&quot;,
                                               &quot;setby&quot;: bundleid])
            
            logUserActivity(activity, label: &quot;activity&quot;)
        }
        .onContinueUserActivity(activityType, perform: { userActivity in
            if let page = userActivity.userInfo?[&quot;page&quot;] as? String {
                // Load handoff page
                if self.data.url?.absoluteString != page {
                    self.data.url = URL(string: page)
                }
                
                // Restore handoff scroll position
                if let scrollPercent = userActivity.userInfo?[&quot;scrollPercent&quot;] as? Float {
                    self.data.scrollOnLoad = scrollPercent
                }
            }
            
            logUserActivity(userActivity, label: &quot;on activity&quot;)
        })
    }
    
    func loadUrl(_ string: String) {
        if string.hasPrefix(&quot;http&quot;) {
            self.data.url = URL(string: string)
        } else {
            self.data.url = URL(string: &quot;https://&quot; + string)
        }
        
        self.data.urlBar = self.data.url?.absoluteString ?? string
    }
}

func logUserActivity(_ activity: NSUserActivity, label: String = &quot;&quot;) {
    print(&quot;\(label) TYPE = \(activity.activityType)&quot;)
    print(&quot;\(label) INFO = \(activity.userInfo ?? [:])&quot;)
}

struct KeyboardModifier: ViewModifier {
    func body(content: Content) -&gt; some View {
        #if os(iOS)
            return content
                .keyboardType(.URL)
                .textContentType(.URL)
        #else
            return content
        #endif
    }
}
</code></pre>



<hr class="wp-block-separator"/>



<h3 class="nomargin wp-block-heading">Scene Selection</h3>



<h5 class="has-cyan-bluish-gray-color has-text-color wp-block-heading"><strong>Introducing handlesExternalEvents()</strong></h5>



<p>When the system launches or resumes our app, it must decide which scene gets the user activity (only one will). To help it decide, our app can use the <strong>handlesExternalEvents()</strong> method. Unfortunately, at the time of this writing (Xcode 12, beta 6), it seems the method is broken. Not only that, although supported on macOS, it is missing from that platform&#8217;s definition file.</p>



<p>For the time being, I will just comment on how it is supposed to work. In the future, when it can be successfully used, I will update this post.</p>



<p>There are two versions of this method. One that can be used with WindowGroup scenes:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">func handlesExternalEvents(matching conditions: Set&lt;String&gt;) -&gt; some Scene</code></pre>



<p>and another that can be used with views:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">func handlesExternalEvents(preferring: Set&lt;String&gt;, allowing: Set&lt;String&gt;) -&gt; some View</code></pre>



<p>In both cases, we specify a <code>Set</code> of strings that the system will compare with the <strong>targetContentIdentifier</strong> property of the NSUserActivity. If a match is found, that scene is used. If not specified, or no match is found, the behavior is platform dependent. For example, on iPadOS the system will choose an existing scene. On macOS, a new scene will be created.</p>



<p>On systems that only support one scene, this method is ignored.</p>



<p>Note that <strong>targetContentIdentifier</strong> is also present in <strong>UNNotificationContent</strong> and <strong>UIApplicationShortcutItem</strong>, so <strong>handlesExternalEvents()</strong> will most likely support those events too.</p>



<h3 class="wp-block-heading">Summary</h3>



<p>Apple&#8217;s documentation of NSUserActivity is very extensive, and I recommend you check it out. At the moment, it&#8217;s lacking in SwiftUI examples. This article aims to fill that void, by providing you with some kickstart code to begin experimenting with NSUserActivity.</p>



<p>Please feel free to comment below, and follow me on twitter if you would like to be notified when new articles come out. Until next time!</p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/nsuseractivity-with-swiftui/">NSUserActivity with SwiftUI</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://swiftui-lab.com/nsuseractivity-with-swiftui/feed/</wfw:commentRss>
			<slash:comments>4</slash:comments>
		
		<enclosure url="https://swiftui-lab.com/wp-content/uploads/2020/09/radom-animal-1.mp4" length="975224" type="video/mp4" />
<enclosure url="https://swiftui-lab.com/wp-content/uploads/2020/09/icecream-1.mp4" length="541905" type="video/mp4" />

			</item>
		<item>
		<title>Impossible Grids with SwiftUI</title>
		<link>https://swiftui-lab.com/impossible-grids/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=impossible-grids</link>
					<comments>https://swiftui-lab.com/impossible-grids/#comments</comments>
		
		<dc:creator><![CDATA[javier]]></dc:creator>
		<pubDate>Mon, 27 Jul 2020 14:21:29 +0000</pubDate>
				<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">https://swiftui-lab.com/?p=2178</guid>

					<description><![CDATA[<p>Native support for grids in SwiftUI is finally here. This is made possible by two new views. These are&#160;LazyVGrid&#160;and&#160;LazyHGrid. From now on, when I write Lazy*View, I will be referring to both of them. In this article, we will first cover the basics, but then we will go a little beyond the common grids with ... <a title="Impossible Grids with SwiftUI" class="read-more" href="https://swiftui-lab.com/impossible-grids/" aria-label="More on Impossible Grids with SwiftUI">Read more</a></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/impossible-grids/">Impossible Grids with SwiftUI</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>Native support for grids in SwiftUI is finally here. This is made possible by two new views. These are&nbsp;<strong>LazyVGrid</strong>&nbsp;and&nbsp;<strong>LazyHGrid</strong>. From now on, when I write Lazy*View, I will be referring to both of them.</p>



<p>In this article, we will first cover the basics, but then we will go a little beyond the common grids with uniform rows and columns. We will explore how to get information about the grid&#8217;s layout and also how we can achieve special grids (see picture below), like the honeycomb, or other grids where a cell may want to span the area of two or more cells. If you are already familiar with how grids work and want to jump to the most advanced topics, scroll down to &#8220;The Impossible Begins&#8221;.</p>



<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img loading="lazy" decoding="async" src="https://swiftui-lab.com/wp-content/uploads/2020/07/honeycomb-colspan-1024x430.jpg" alt="" class="wp-image-2297" width="900" height="378" srcset="https://swiftui-lab.com/wp-content/uploads/2020/07/honeycomb-colspan-1024x430.jpg 1024w, https://swiftui-lab.com/wp-content/uploads/2020/07/honeycomb-colspan-300x126.jpg 300w, https://swiftui-lab.com/wp-content/uploads/2020/07/honeycomb-colspan-768x322.jpg 768w, https://swiftui-lab.com/wp-content/uploads/2020/07/honeycomb-colspan.jpg 1060w" sizes="(max-width: 900px) 100vw, 900px" /></figure></div>



<h3 class="wp-block-heading">Laziness</h3>



<p>The Lazy prefix in <strong>LazyVGrid</strong> and <strong>LazyHGrid</strong> indicates that the views contained in the grid are only rendered when on screen. When they are off-screen, they are not part of the view hierarchy.</p>



<p>We also have <strong>LazyVStack</strong> and <strong>LazyHStack</strong>, which are the same as <strong>VStack</strong> and <strong>HStack</strong>, except they avoid rendering off-screen views. Apple recommends that you use their Lazy versions, but only if needed.</p>



<p>It is important to note that the&nbsp;<strong>onAppear</strong>&nbsp;and&nbsp;<strong>onDisappear</strong>&nbsp;closures will fire as the views go in and out of view when scrolled. However, although non-rendered items are removed from the hierarchy, their states continue to exist in memory, so when they scroll back, their states remain unaltered.</p>



<p>Also consider that if your view has a timer or any other publisher, it will continue to fire. This means you can continue to update the view&#8217;s state, even if it is not being rendered.</p>



<p>Finally, although your view continues to exist (albeit un-rendered) when its parent updates a parameter of the subview, that value will only change in the subview, when it is rendered again. However, if the parameter is a @Binding, it will update in the subview immediately. This makes sense, as Binding variables do not store any real data. In reality, Bindings are just closures that read/write directly from the source of truth variables (e.g., @State), which usually belong to a different view. You don&#8217;t need to worry too much about all this. This is only important if your un-rendered view has some kind of background task (e.g., subscribed to a publisher). In that case, this paragraph becomes relevant, otherwise… you can forget about it.</p>



<h3 class="wp-block-heading">The Basics</h3>



<p>In the rest of this post, I will use the term&nbsp;<strong>cell</strong>&nbsp;to refer to each of the views laid out by the&nbsp;<strong>Lazy*Grid</strong>&nbsp;views. Note that the official term in&nbsp;<a href="https://developer.apple.com/documentation/swiftui/lazyvgrid" target="_blank" rel="noreferrer noopener">Apple&#8217;s documentation</a>&nbsp;is &#8220;child view&#8221;. However, depending on the context, it could be confusing, so I will use the term&nbsp;<strong>cell</strong>&nbsp;instead.</p>



<p>A&nbsp;<strong>LazyVGrid</strong>&nbsp;will place its cells vertically but arranged in rows. When a row is full (i.e., all its columns used), it will continue down to the next row. Alternatively, a&nbsp;<strong>LazyHGrid</strong>&nbsp;will place cells horizontally in columns, when a column is full (i.e., all its rows used), it will continue to the next column. It&#8217;s a bit of a tongue-twister, so here is an animation that explains it much better.</p>



<figure class="wp-block-video aligncenter"><video autoplay controls loop src="https://swiftui-lab.com/wp-content/uploads/2020/07/layouts.mp4"></video></figure>



<p>To make grids scrollable, they must be wrapped inside a <strong>ScrollView</strong> with the appropriate axis:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">ScrollView(.vertical) { // .vertical is the default, so it can be omitted
    LazyVGrid(columns: columns) {
        ...
    }
}</code></pre>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">ScrollView(.horizontal) {
    LazyHGrid(rows: rows) {
        ...
    }
}</code></pre>



<h3 class="wp-block-heading">Grid Parameters</h3>



<p>Let&#8217;s have a look at the initializers:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">LazyVGrid.init(columns: [GridItem], alignment: HorizontalAlignment = .center, spacing: CGFloat? = nil, pinnedViews: PinnedScrollableViews = .init(), @ViewBuilder content: () -&gt; Content)</code></pre>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">LazyHGrid.init(rows: [GridItem], alignment: VerticalAlignment = .center, spacing: CGFloat? = nil, pinnedViews: PinnedScrollableViews = .init(), @ViewBuilder content: () -&gt; Content)</code></pre>



<ul><li><strong>columns</strong>/<strong>rows</strong>: This is an array of GridItem values. It determines the specifics of each column in a LazyVGrid, and the specifics of each row in LazyHGrid. This is probably the most complex of all, so we will look at it in more detail later, in a separate section below.</li><li><strong>alignment</strong>: Indicates how to place the contents of the grid. In most cases, this parameter will look like it&#8217;s doing nothing. Its use is only evident when a LazyVGrid is wider than it needs to be to accommodate all the columns, or a LazyHGrid is taller than it needs to be to accommodate all the rows. See the images below.</li></ul>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="784" height="575" src="https://swiftui-lab.com/wp-content/uploads/2020/07/alignments.png" alt="" class="wp-image-2201" srcset="https://swiftui-lab.com/wp-content/uploads/2020/07/alignments.png 784w, https://swiftui-lab.com/wp-content/uploads/2020/07/alignments-300x220.png 300w, https://swiftui-lab.com/wp-content/uploads/2020/07/alignments-768x563.png 768w" sizes="(max-width: 784px) 100vw, 784px" /></figure></div>



<ul><li><strong>spacing</strong>: For a LazyVGrid it is the spacing between the rows, for a LazyHGrid it is the spacing between the columns.</li><li><strong>pinnedViews</strong>: An OptionSet to indicate which views are pinned in the scroll view bounds. At the time of this writing, only Section header and footer views can be pinned. However, the words Apple chose for their documentation is generic enough to hope that one day we will be able to pin specific cells too. For the time being, however, you can specify: <strong>.sectionHeaders</strong>, <strong>.sectionFooters</strong>, or both: <strong>[.sectionHeaders, .sectionFooters]</strong>. We will see an example with pinned sections headers later.</li><li><strong>content</strong>: A ViewBuilder that provides all the views in the grid (i.e., cells). We typically use a <strong>ForEach</strong>.</li></ul>



<h3 class="wp-block-heading">GridItem</h3>



<p>When dealing with&nbsp;<strong>LazyVGrid</strong>, the GridItem determines column properties (i.e., size, spacing, and alignment). The same applies to&nbsp;<strong>LazyHGrid</strong>, where GridItem is used for row properties.</p>



<p>Let&#8217;s look at its signature:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">GridItem.init(_ size: GridItem.Size = .flexible(), spacing: CGFloat? = nil, alignment: Alignment? = nil)</code></pre>



<p>In <strong>LazyVGrid</strong>, spacing is used to specify the gap between this and the next column. In <strong>LazyHGrid</strong> spacing is used to specify the gap between this and the next row.</p>



<p>The alignment determines how our cell view will be positioned in the area offered by the grid. In most cases, we tend to use all the space offered, so this parameter may seem like it is doing nothing. But down below, in section &#8220;Anatomy of a Grid&#8221;, we will see how that is not the case.</p>



<p>The size parameter is an enum type, that will probably leave you scratching your head more than once. Here we have its declaration:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">public struct GridItem {
    public enum Size {
        case fixed(CGFloat)
        case flexible(minimum: CGFloat = 10, maximum: CGFloat = .infinity)
        case adaptive(minimum: CGFloat, maximum: CGFloat = .infinity)
    }
}</code></pre>



<p>Let&#8217;s start with the easiest. Each case adds a little more complexity than the previous, so we must analyze them in order:</p>



<ul><li><strong>fixed(value)</strong>: This one is simple, it provides a single value that will determine the exact width of a column in LazyVGrid, or the height of a row in LazyHGrid.</li><li><strong>.flexible(minimum:maximum:)</strong>: In this case, for LazyVGrid, the following computation will take place to determine the column&#8217;s width:</li></ul>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">let gw = [grid&#039;s width]
let af = [sum of all fixed columns widths]
let sp = [spacing]
let nc = [number of non-fixed columns]

let unclamped_width = (gw - (af + sp)) / nc

let column_width = min(max(unclamped_width, minimum), maximum)</code></pre>



<p>For LazyHGrid, the computation is similar:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">let gh = [grid&#039;s height]
let af = [sum of all fixed rows heights]
let sp = [spacing]
let nr = [number of non-fixed rows]

let unclamped_height = (gh - (af + sp)) / nr

let row_height = min(max(unclamped_height, minimum), maximum)</code></pre>



<ul><li><strong>.adaptive(minimum:maximum)</strong>: in this final case, for LazyVGrid, a single GridItem may represent more than one column. First, the framework determines how much space will be given to this GridItem, and then it decides how many columns it will create there. SwiftUI will try to fit as many&nbsp;<strong>minimum width</strong>&nbsp;columns as possible, but once the number of columns is determined, these can grow up to the maximum width provided, so it fills the full space. The method to determine how much space will be given to this GridItem is the same used for the .flexible() case (without the clamping).</li></ul>



<p>Although it is good to describe the behavior formally, I usually learn these concepts better if I do it visually. For that, I have created a small example called GridTrainer. In addition to improving your learning curve, it will expose some bugs in the Grid implementation. At the moment, not all column combinations work as they should. Especially when the more complex cases are involved and they are competing for scarce space. By playing with the trainer, you may eventually come across one of these bugs. Fortunately, they are not so frequent.</p>



<p>You can get the Xcode project here: <a href="https://github.com/swiftui-lab/GridTrainer" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">https://github.com/</a><a aria-label="undefined (opens in a new tab)" href="https://github.com/swiftui-lab/GridTrainer" target="_blank" rel="noreferrer noopener">swiftui</a><a href="https://github.com/swiftui-lab/GridTrainer">-lab/GridTrainer</a>, I recommend you use a large screen iPad Pro, so you have more space to play.</p>



<figure class="wp-block-video aligncenter"><video autoplay controls loop src="https://swiftui-lab.com/wp-content/uploads/2020/07/GridTrainer-1.mp4"></video></figure>



<p>You will notice that changing the alignment of the GridItems will have no effect. This is because the cells are taking all the space offered by the Grid. If you force the size of the cells to be something different, you will see how the alignment then makes a difference.</p>



<p>In the Toolbar, there is also a refresh icon. As mentioned, although Lazy*Grid works pretty well, it still has some bugs. From time to time it may start doing weird layouts, especially if its width is continuously changed. The refresh button simply destroys the grid and recreates it. Pressing the refresh button will not change any of your settings so most of the time will have no visual effect.</p>



<h3 class="wp-block-heading">Anatomy of a Grid</h3>



<p>Now that we have introduced all the parameters that constitute a Grid, it&#8217;s time to write some code:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="764" height="243" src="https://swiftui-lab.com/wp-content/uploads/2020/07/grid-anatomy.png" alt="" class="wp-image-2228" srcset="https://swiftui-lab.com/wp-content/uploads/2020/07/grid-anatomy.png 764w, https://swiftui-lab.com/wp-content/uploads/2020/07/grid-anatomy-300x95.png 300w" sizes="(max-width: 764px) 100vw, 764px" /></figure></div>



<p>The code below produces the grid above. The dotted line was added after, to show the frame being offered by the grid to each cell. This little example teaches us a lot. Let&#8217;s begin:</p>



<ul><li><strong><em>T<strong><em>he height of a row in a LazyVGrid is driven by the height of the tallest cell</em></strong>. </em></strong>For example in the second row, the green view is the tallest, which makes the grid offer the same height to the other views in the same row. View #3 does not specify a height, and since shapes take as much as possible, it grows to occupy the full height. View #5, however, defines its own frame. Since it doesn&#8217;t match the offered space, it aligns according to the alignment parameter in the GridItem of the corresponding column (bottomTrailing). We will exploit this idea later when we build our honeycomb grid, or when we build a grid with a spanning cell.</li><li><strong><em>The alignment parameter in LazyVGrid is responsible for the group of cells centering as a whole.</em></strong> If we were to change the alignment to .leading, the whole group of cells will  be pushed to the left.</li><li>The space between the first and second columns is determined by the first GridItem (10). The space between the second and the third column is set by the second GridItem (30). <strong><em>The spacing value of the last GridItem is ignored</em></strong>.</li><li><strong><em>The space between the rows is determined by the spacing parameter in the LazyVGrid initializer</em></strong> (20)</li></ul>



<pre class="wp-block-swiftuilab-snippet line-numbers"><code class="language-swift">struct ContentView: View {
    let gridItems = [
        GridItem(.fixed(100.0), spacing: 10.0, alignment: .top),
        GridItem(.fixed(250.0), spacing: 30.0, alignment: .center),
        GridItem(.fixed(150.0), spacing: 10.0, alignment: .bottomTrailing),
    ]

    var body: some View {
        ScrollView(.vertical) {
            LazyVGrid(columns: gridItems, alignment: .center, spacing: 20) {

                ForEach(0..&lt;100) { idx in
                    VStack {
                        if idx == 3 {
                            Rectangle().fill(Color.pink)
                            
                        } else if idx == 4 {
                            Rectangle().fill(Color.green)
                                .frame(height: 50)
                            
                        } else if idx == 5 {
                            Rectangle().fill(Color.blue)
                                .frame(width: 100, height: 30)
                            
                        } else {
                            Rectangle().fill(Color.yellow)
                                .frame(height: 30)
                            
                        }
                    }.overlay(Text(&quot;\(idx)&quot;))
                }
            }
            .border(Color.gray)
            .frame(width: 700)
            .padding(20)
        }
        .frame(height: 200)
        .border(Color.black)
    }
}</code></pre>



<h3 class="wp-block-heading">The Impossible Begins</h3>



<p><strong>LazyVGrid</strong> does not have a column span feature. That is, each cell view normally stays in the assigned width of the column. However, with just a little bit of work, we can achieve a result like the one shown in the image below, where one of the cells spans the space of two columns.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="486" height="492" src="https://swiftui-lab.com/wp-content/uploads/2020/07/colspan.jpg" alt="" class="wp-image-2270" srcset="https://swiftui-lab.com/wp-content/uploads/2020/07/colspan.jpg 486w, https://swiftui-lab.com/wp-content/uploads/2020/07/colspan-296x300.jpg 296w" sizes="(max-width: 486px) 100vw, 486px" /></figure></div>



<p>Let&#8217;s look at how the code works:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ColSpanExample1: View {
    var body: some View {
        let gridItems = [GridItem(.fixed(150), spacing: 10, alignment: .leading),
                         GridItem(.fixed(150), spacing: 10, alignment: .leading),
                         GridItem(.fixed(150), spacing: 10, alignment: .leading)]

        LazyVGrid(columns: gridItems, spacing: 10) {
            ForEach(0..&lt;8) { idx in
                
                Image(&quot;\(idx % 15)&quot;)
                    .resizable()
                    .frame(width: idx == 4 ? 310 : 150, height: 150)
                
                if idx == 4 { Color.clear }
                
            }
        }
        .frame(width: 470)
    }
}</code></pre>



<p>Two things can be learned from the code above. First, although the grid proposes a size to the child view (cell), the cell can ignore it. In this case, we are letting the image grow to twice the cell&#8217;s width (plus the spacing). The other important fact is that the grid has no idea this is happening, so it will still place the next image as usual. To avoid this overlapping, we must create a transparent bogus view that takes that place&#8230; and then everyone&#8217;s happy.</p>



<p>If we are going to use this often, we could have a little helper view like this:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ColSpan&lt;Content: View&gt;: View {
    let span: Bool
    let content: () -&gt; Content
    
    init(span: Bool, @ViewBuilder content: @escaping () -&gt; Content) {
        self.span = span
        self.content = content
    }
    
    var body: some View {
        content()
        
        if span { Color.clear }
    }
}</code></pre>



<p>And then use it like this:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">ForEach(0..&lt;8) { idx in
    
    ColSpan(span: idx == 4) {
        Image(&quot;\(idx % 15)&quot;)
            .resizable()
            .frame(width: idx == 4 ? 310 : 150, height: 150)
    }
    
}</code></pre>



<p>After looking at the code, you may have the feeling that I cheated a little. After all, this is a perfect scenario where we know exactly the width, the spacing, and the number of columns. But what happens if we are using .flexible() columns where the widths are unknown to us. Or worst, if we use .adaptive() columns, where we don&#8217;t even know the number of columns. Well, fear not. Although <strong>Lazy*Grid</strong> views are sneaky in their inner workings, we have our little spies that can give us all sorts of useful information about the grid&#8217;s layout. We&#8217;ll learn more about it in the final section (An Army of Spies). But before that, let&#8217;s continue to explore this concept of having views that do not bound themselves to what the grid offers. A great example of that is the honeycomb, so let&#8217;s build one next.</p>



<h3 class="wp-block-heading">A Honeycomb Grid</h3>



<blockquote class="wp-block-quote"><p><em>The <strong><a aria-label="undefined (opens in a new tab)" href="https://en.wikipedia.org/wiki/Honeycomb_conjecture" target="_blank" rel="noreferrer noopener">honeycomb conjecture</a></strong> states that a regular hexagonal grid is the best way to divide a surface into regions of equal area with the least total perimeter. The conjecture was around for two millennia, but it was proved only recently, by mathematician</em> <em><a aria-label="undefined (opens in a new tab)" href="https://en.wikipedia.org/wiki/Thomas_Callister_Hales" target="_blank" rel="noreferrer noopener">Thomas</a><a href="https://en.wikipedia.org/wiki/Thomas_Callister_Hales"> C. Hales</a> in 1999.</em></p></blockquote>



<p>Now it&#8217;s time to create our honeycomb grid. At first, it may look like there is a lot of code involved, but fortunately, that is not the case. As we learned already, the grid proposes a size and location for each of our cell views. However, cells can take that proposal only as a reference and can decide to draw outside the designated area. Also in our favor, the cell decides the height of the row.</p>



<p>But let&#8217;s begin with our RegularGrid as a starting point:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct RegularGrid: View {
    let cols: Int = 6
    let spacing: CGFloat = 10
    let imgsize = CGSize(width: 150, height: 150)
        
    var body: some View {
        let gridItems = Array(repeating: GridItem(.fixed(imgsize.width), spacing: spacing), count: cols)

        ScrollView(.vertical) {
            LazyVGrid(columns: gridItems, spacing: spacing) {
                ForEach(0..&lt;200) { idx in
                    Image(&quot;image-\(idx % 15)&quot;)
                        .resizable()
                        .frame(width: imgsize.width, height: imgsize.height)
                }
            }
        }
    }
}</code></pre>



<p>Now, to achieve the honeycomb look, we simply need to clip the images with a hexagon shape, manipulate some frames, and some offsets. That&#8217;s all. The following animation shows how these changes let us go from a boring regular grid, to the coolest grid in nature: the honeycomb.</p>



<figure class="wp-block-video aligncenter"><video autoplay controls loop src="https://swiftui-lab.com/wp-content/uploads/2020/07/honeycomb-800x450-1.mp4"></video></figure>



<p><em><strong>Full disclosure on the animation.</strong> <em>I included it here, so you better understand what are the steps to go from a standard grid to the honeycomb look. However, at least as of beta 3, animating these changes does not work very smoothly. The main problem is that as a side effect of the change in the grid, some cells that are rendered in one look, may not be rendered in the other (they scroll off the screen). Since grids are lazy, these views are removed from the hierarchy. That is not a problem, however, for some reason, SwiftUI animates the removal of these views, by sliding them down (and it doesn&#8217;t look nice).</em></em></p>



<p>Here&#8217;s the code for the honeycomb grid. It&#8217;s not long (as promised). We will discuss the changes below.</p>



<pre class="wp-block-swiftuilab-snippet line-numbers"><code class="language-swift">struct Honeycomb: View {
    let cols: Int = 6
    let spacing: CGFloat = 10
    let imgsize = CGSize(width: 150, height: 150)
    var hexagonWidth: CGFloat { (imgsize.width / 2) * cos(.pi / 6) * 2 }
        
    var body: some View {
        let gridItems = Array(repeating: GridItem(.fixed(hexagonWidth), spacing: spacing), count: cols)

        ScrollView(.vertical) {
            LazyVGrid(columns: gridItems, spacing: spacing) {
                ForEach(0..&lt;200) { idx in
                    VStack(spacing: 0) {
                        Image(&quot;image-\(idx % 15)&quot;)
                            .resizable()
                            .frame(width: imgsize.width, height: imgsize.height)
                            .clipShape(PolygonShape(sides: 6).rotation(Angle.degrees(90)))
                            .offset(x: isEvenRow(idx) ? 0 : hexagonWidth / 2 + (spacing/2))
                    }
                    .frame(width: hexagonWidth, height: imgsize.height * 0.75)
                }
            }
            .frame(width: (hexagonWidth + spacing) * CGFloat(cols-1))
        }
    }
    
    func isEvenRow(_ idx: Int) -&gt; Bool { (idx / cols) % 2 == 0 }
}</code></pre>



<p>As you can see, it&#8217;s just a few lines of code. Let&#8217;s analyze the changes:</p>



<ol><li>First, we clip our images with a hexagon shape (line #17).</li><li>Then we wrap our images inside a VStack (indicated with a dashed line in the animation). This VStack will have a height 25% shorter than the actual image. This means, that the image will overflow. Why 25%? That is how much we need to overlap the rows. It can be easily understood visually by looking at the picture below. We also need to adjust the cell&#8217;s width to match the hexagon&#8217;s width (which is a little smaller than the picture). The math for computing the hexagon&#8217;s width is explained down below. (lines #13, #19, and #20)</li></ol>



<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img loading="lazy" decoding="async" src="https://swiftui-lab.com/wp-content/uploads/2020/07/hexagon-75.png" alt="" class="wp-image-2243" width="343" height="282" srcset="https://swiftui-lab.com/wp-content/uploads/2020/07/hexagon-75.png 686w, https://swiftui-lab.com/wp-content/uploads/2020/07/hexagon-75-300x247.png 300w" sizes="(max-width: 343px) 100vw, 343px" /></figure></div>



<ol start="3"><li>Odd rows will be shifted to the right (line #18).</li><li>And finally, we need to crop the grid, so the blank spaces produce by the row shifting does not look ugly (line #23).</li></ol>



<p>When looking at the code, you may see a tiny bit of&nbsp;<a target="_blank" href="https://swiftui-lab.com/trigonometric-recipes-for-swiftui/" rel="noreferrer noopener">trigonometry</a>&nbsp;(sorry, I can&#8217;t avoid it). It is necessary to work out the hexagon&#8217;s width. But don&#8217;t worry, it&#8217;s not hard. It seems those clever bees had it all figured out.</p>



<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img loading="lazy" decoding="async" src="https://swiftui-lab.com/wp-content/uploads/2020/07/hexagon-width.png" alt="" class="wp-image-2266" width="449" height="473" srcset="https://swiftui-lab.com/wp-content/uploads/2020/07/hexagon-width.png 599w, https://swiftui-lab.com/wp-content/uploads/2020/07/hexagon-width-285x300.png 285w" sizes="(max-width: 449px) 100vw, 449px" /></figure></div>



<p>Observing at the picture, we can see that the hexagon&#8217;s width is twice the size of the &#8220;leg b&#8221; of the triangle. We know that h (hypotenuse) is equal to the radius of the circle, which happens to be half the size of the rectangle (imgsize.width / 2). Finally 𝝰 (alpha), is 360/12 (or .pi / 6 in radians). <a aria-label="undefined (opens in a new tab)" href="https://swiftui-lab.com/trigonometric-recipes-for-swiftui/" target="_blank" rel="noreferrer noopener">We already know</a> that cos(𝝰) = leg b / hypotenuse, and since we are looking for 2 * b:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">let hexagonWidth = (imgsize.width / 2) * cos(.pi / 6) * 2</code></pre>



<p>I know those &#8220;twos&#8221; can be removed from the equation and leave <code>imagesize.width * cos(.pi/6)</code>, but I like to keep them there to remember where the number came from.</p>



<p>Ok, so we did it&#8230; but wait, there is a little more code you need to use. But this is an old friend of ours, and we know it well from previous articles: PolygonShape. We need this shape view to clip the image. Here it is again:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct PolygonShape: Shape {
    var sides: Int
    
    func path(in rect: CGRect) -&gt; Path {
        let h = Double(min(rect.size.width, rect.size.height)) / 2.0
        let c = CGPoint(x: rect.size.width / 2.0, y: rect.size.height / 2.0)
        var path = Path()
        
        for i in 0..&lt;sides {
            let angle = (Double(i) * (360.0 / Double(sides))) * Double.pi / 180
            
            let pt = CGPoint(x: c.x + CGFloat(cos(angle) * h), y: c.y + CGFloat(sin(angle) * h))
            
            if i == 0 {
                path.move(to: pt) // move to first vertex
            } else {
                path.addLine(to: pt) // draw line to next vertex
            }
        }
        
        path.closeSubpath()
        
        return path
    }
}</code></pre>



<h3 class="wp-block-heading">An Army of Spies</h3>



<p>The Section view let us provide one view for the header and another for the footer. A very common requirement is that each column has its own header. However, the grid only accepts a single view for the entire grid&#8217;s width. To solve this, we simply create an HStack, and inside of it, we place each of the column headers, with padding between them, equal to the spacing of the columns. That is great, as far as all columns have a .fixed size. Luckily, there&#8217;s a way out when that&#8217;s not the case.</p>



<p>By now, we&#8217;ve seen that&nbsp;<strong>Lazy*Grid</strong>&nbsp;does a lot of work for us. They decide how many columns/rows to place and also their widths/heights. However, grids do all that without reporting back to us. How dare they! This means that if we want to make a decision based on the number of columns, or their position, we are out of luck&#8230; well, not exactly.</p>



<p>Fortunately, we have our little army of spies that can give us all sorts of valuable information about the grid&#8217;s layout. I&#8217;m talking about the cells! They are in a privileged position to help. And when we put together all the information that each view provides individually, we can work out even more information.</p>



<p>Back to our header example, this technique will help us achieve something like this:</p>



<figure class="wp-block-video aligncenter"><video autoplay controls loop src="https://swiftui-lab.com/wp-content/uploads/2020/07/adjustable-headers.mp4"></video></figure>



<p>Below is the code that lets us have adjustable headers. It uses two modifiers that I&#8217;ve implemented (<code>&lt;strong&gt;.gridInfoId()&lt;/strong&gt;</code> and <code>&lt;strong&gt;.gridInfo()&lt;/strong&gt;</code>). Their code will be revealed further down, but for the time being, let&#8217;s look at how we use them.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    @State private var gridWidth: CGFloat = 800
    @State private var info: GridInfo = GridInfo()
        
    var body: some View {
        let gridItems = [GridItem(.adaptive(minimum: 100, maximum: .infinity), spacing: 10)]

        VStack {
            ScrollView(.vertical) {
                LazyVGrid(columns: gridItems, spacing: 10, pinnedViews: .sectionHeaders) {
                    Section(header: HeaderView(info: self.info)) {
                        ForEach(0..&lt;200) { idx in
                            Image(&quot;image-\(idx % 15)&quot;)
                                .resizable()
                                .frame(height: info.cellWidth(idx))
                                .gridInfoId(idx)
                        }
                    }
                }
                .frame(width: gridWidth)
                .gridInfo($info)
            }
            
            Slider(value: $gridWidth, in: 0...1500)
        }
    }
    
}</code></pre>



<p>And here is the HeaderView:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct HeaderView: View {
    let info: GridInfo
    
    var body: some View {
        HStack(spacing: 0) {
            ForEach(0..&lt;info.columnCount) { colIdx in
                RoundedRectangle(cornerRadius: 8)
                    .fill(Color.gray.opacity(0.7))
                    .frame(width: info.columnWidth(colIdx))
                    .overlay(Text(&quot;Column \(colIdx + 1)&quot;))
                    .padding(.trailing, info.spacing(colIdx))
            }
            // Force ForEach to redraw when columnCount changes.
            // Not best solution, but good enough for this example.
            .id(info.columnCount)
        }
        .frame(maxWidth: .infinity, alignment: .topLeading)
        .frame(height: 40)
    }
}</code></pre>



<p>Each of our cells is enrolled as one of our spies, by calling <strong>gridInfoId()</strong> on them. We then add <strong>gridInfo()</strong> to our <strong>LazyVGrid</strong>, which will be responsible for collecting everything into a single variable (info).</p>



<p>Now, <strong>info</strong> contains all the sizes and positions of the rendered views, using the LazyVGrid coordinate space. It also has some helpful computed properties and functions. For example, <strong>info.columnWidth()</strong>, or <strong>info.columnCount</strong>.</p>



<p>Note that since our images are square, we also use the info.cellWidth() to reset the height of our images. This ensures that the height matches the width of the columns at all times.</p>



<p>So how does all this happen? The answer is actually quite simple. Say hello to our savior, once again: Preferences! If you want to learn more about preferences, check the article series: <a aria-label="undefined (opens in a new tab)" href="https://swiftui-lab.com/communicating-with-the-view-tree-part-1/" target="_blank" rel="noreferrer noopener">Inspecting the View Tree</a>.</p>



<p>Here&#8217;s the implementation of both methods:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct GridInfoPreference {
    let id: Int
    let bounds: Anchor&lt;CGRect&gt;
}

struct GridPreferenceKey: PreferenceKey {
    static var defaultValue: [GridInfoPreference] = []
    
    static func reduce(value: inout [GridInfoPreference], nextValue: () -&gt; [GridInfoPreference]) {
        return value.append(contentsOf: nextValue())
    }
}

extension View {
    func gridInfoId(_ id: Int) -&gt; some View {
        self.anchorPreference(key: GridPreferenceKey.self, value: .bounds) {
                [GridInfoPreference(id: id, bounds: $0)]
            }
    }
    
    func gridInfo(_ info: Binding&lt;GridInfo&gt;) -&gt; some View {
        self.backgroundPreferenceValue(GridPreferenceKey.self) { prefs in
            GeometryReader { proxy -&gt; Color in
                DispatchQueue.main.async {
                    info.wrappedValue.cells = prefs.compactMap {
                      GridInfo.Item(id: $0.id, bounds: proxy[$0.bounds])
                    }
                }
                    
                return Color.clear
            }
        }
    }
}</code></pre>



<p>And the GridInfo with all its helpers:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct GridInfo: Equatable {
    // A array of all rendered cells&#039;s bounds
    var cells: [Item] = []
    
    // a computed property that returns the number of columns
    var columnCount: Int {
        guard cells.count &gt; 1 else { return cells.count }

        var k = 1

        for i in 1..&lt;cells.count {
            if cells[i].bounds.origin.x &gt; cells[i-1].bounds.origin.x {
                k += 1
            } else {
                break
            }
        }

        return k
    }
    
    // a computed property that returns the range of cells being rendered
    var cellRange: ClosedRange&lt;Int&gt;? {
        guard let lower = cells.first?.id, let upper = cells.last?.id else { return nil }
        
        return lower...upper
    }
  
    // returns the width of a rendered cell
    func cellWidth(_ id: Int) -&gt; CGFloat {
        columnCount &gt; 0 ? columnWidth(id % columnCount) : 0
    }
    
    // returns the width of a column
    func columnWidth(_ col: Int) -&gt; CGFloat {
        columnCount &gt; 0 &amp;&amp; col &lt; columnCount ? cells[col].bounds.width : 0
    }
    
    // returns the spacing between columns col and col+1
    func spacing(_ col: Int) -&gt; CGFloat {
        guard columnCount &gt; 0 else { return 0 }
        let left = col &lt; columnCount ? cells[col].bounds.maxX : 0
        let right = col+1 &lt; columnCount ? cells[col+1].bounds.minX : left
        
        return right - left
    }

    // Do not forget the &quot;Equatable&quot;, as it prevent redrawing loops
    struct Item: Equatable {
        let id: Int
        let bounds: CGRect
    }
}</code></pre>



<h3 class="wp-block-heading">Summary</h3>



<p>Congratulations on making it to the end! In this (long) article, we have learned how with just a little bit of imagination, Lazy*Grid let us create some views that go beyond the standard regular grid.</p>



<p>Please feel free to comment below, and follow me on twitter if you would like to be notified when new articles come out. Until next time!</p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/impossible-grids/">Impossible Grids with SwiftUI</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://swiftui-lab.com/impossible-grids/feed/</wfw:commentRss>
			<slash:comments>37</slash:comments>
		
		<enclosure url="https://swiftui-lab.com/wp-content/uploads/2020/07/layouts.mp4" length="492809" type="video/mp4" />
<enclosure url="https://swiftui-lab.com/wp-content/uploads/2020/07/GridTrainer-1.mp4" length="3924087" type="video/mp4" />
<enclosure url="https://swiftui-lab.com/wp-content/uploads/2020/07/honeycomb-800x450-1.mp4" length="2119559" type="video/mp4" />
<enclosure url="https://swiftui-lab.com/wp-content/uploads/2020/07/adjustable-headers.mp4" length="719262" type="video/mp4" />

			</item>
		<item>
		<title>MatchedGeometryEffect &#8211; Part 2</title>
		<link>https://swiftui-lab.com/matchedgeometryeffect-part2/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=matchedgeometryeffect-part2</link>
					<comments>https://swiftui-lab.com/matchedgeometryeffect-part2/#comments</comments>
		
		<dc:creator><![CDATA[javier]]></dc:creator>
		<pubDate>Mon, 13 Jul 2020 14:05:52 +0000</pubDate>
				<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">https://swiftui-lab.com/?p=2041</guid>

					<description><![CDATA[<p>With the release of Xcode 12 beta 4, two bugs mentioned in this articles got fixed! I marked those sections with a note, but will keep the sections for a couple of weeks, in case some readers are still using an older beta. The elimination of those bugs will make our life easier. In fact, ... <a title="MatchedGeometryEffect &#8211; Part 2" class="read-more" href="https://swiftui-lab.com/matchedgeometryeffect-part2/" aria-label="More on MatchedGeometryEffect &#8211; Part 2">Read more</a></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/matchedgeometryeffect-part2/">MatchedGeometryEffect &#8211; Part 2</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p class="has-light-green-cyan-background-color has-background">With the release of Xcode 12 beta 4, two bugs mentioned in this articles got fixed! I marked those sections with a note, but will keep the sections for a couple of weeks, in case some readers are still using an older beta. The elimination of those bugs will make our life easier. In fact, some snippets of code in this article could be simplified a little. I will do so when I remove the aforementioned sections.</p>



<p>This is the second and last part of the MatchedGeometryEffect series. These parts can be read in any order. Depending which aspect you would like to focus on first.</p>



<p>In <a aria-label="undefined (opens in a new tab)" href="https://swiftui-lab.com/matchedgeometryeffect-part1/" target="_blank" rel="noreferrer noopener">part 1</a>, we learned how to match the geometry of a view that is removed from the hierarchy, with one that is inserted. This, combined with custom transitions and animatable modifiers, offers a lot of possibilities for hero animations and other interesting effects. The first part includes a full Xcode project with a demonstration on how to create App Store-like transitions.</p>



<p>In this part 2, we are going to focus on how to match the geometry of two or more views that are simultaneously part of the view hierarchy. We will also explore how to use this to create more hero animations, but this time, without needing to use custom transitions. This will be showcased by the example shown in the video below (Xcode project included <a href="https://github.com/swiftui-lab/swiftui-hero-animations-no-transitions" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">here</a>).</p>



<figure class="wp-block-video aligncenter"><video autoplay controls loop src="https://swiftui-lab.com/wp-content/uploads/2020/07/wildlife-1.mp4"></video></figure>



<h3 class="wp-block-heading">What is the Source of Geometry</h3>



<p>So far, we have ignored the isSource parameter of the&nbsp;<strong>matchedGeometryEffect()</strong>&nbsp;method. But no longer. The source parameter, which is a boolean, determines if the view is providing the geometry, or &#8220;borrowing&#8221; it. So far, we used the default value (true) for both. This is because, in the case of transitioning views, they both are the source.&nbsp;<strong><em>In other words, the incoming view uses the geometry of the outgoing view as the starting size and position of the transition, and the outgoing view uses the geometry of the incoming view as the final size and position of the transition. Both views are source and consumer at the same time!</em></strong></p>



<p>Now, in this new use case, that&#8217;s not true any more. In fact, if multiple views are part of the hierarchy, only one can be the source for a specific id and namespace. If you set multiple views as the source for a given id+namespace combination, SwiftUI won&#8217;t like it, and it will complain at runtime with a very clear log message:</p>



<p class="has-text-align-center"><strong>Multiple inserted views in matched geometry group Pair&lt;Int, ID&gt;(first: 1, second: SwiftUI.Namespace.ID(id: 6)) have `isSource: true`, results are undefined.</strong></p>



<h2 class="wp-block-heading">Meet Our New Friend</h2>



<p>Before we continue describing every detail of the matchedGeometryEffect modifier, let me introduce a view that will be used extensively in the examples below.</p>



<p>The view is named <strong>Triangle</strong>, and it simply draws a triangle pointing in the given direction, fills it with the specified color, and adds a black border. You may wonder why this shape? Well, we need the examples to be able to show multiple overlapping views but still, be able to seem them all.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="754" height="159" src="https://swiftui-lab.com/wp-content/uploads/2020/07/triangles.png" alt="" class="wp-image-2047" srcset="https://swiftui-lab.com/wp-content/uploads/2020/07/triangles.png 754w, https://swiftui-lab.com/wp-content/uploads/2020/07/triangles-300x63.png 300w" sizes="(max-width: 754px) 100vw, 754px" /></figure></div>



<p>You can always see up to 4 overlapping Triangle views, provided they have different directions:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="509" height="107" src="https://swiftui-lab.com/wp-content/uploads/2020/07/animating-triangles.gif" alt="" class="wp-image-2048"/></figure></div>



<p>The code for the view can be found in this gist: <a href="https://gist.github.com/swiftui-lab/c77af5f33f68da86de8b1e84391a6a9d" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">squared-triangle.swift</a></p>



<h2 class="wp-block-heading">Introducing <strong>matchedGeometryEffect</strong>, again&#8230;</h2>



<p>We already introduced <strong>matchedGeometryEffect</strong> in <a aria-label="undefined (opens in a new tab)" href="https://swiftui-lab.com/matchedgeometryeffect-part1/" target="_blank" rel="noreferrer noopener">Part 1</a> of this article, but as I mentioned there, it has two distinct uses. To my eyes they are so different, that I think it deserves a new introduction. This time, however, we&#8217;ll have in mind its other use case (i.e., matching geometries between two or more existing views).</p>



<p><strong>In a nutshell, when we have two views paired with matchedGeometryEffect, we are <strong>simply</strong> telling one view (A) to offset its position and resize itself, to match the position and size of another view (B).</strong></p>



<p>The view that provides the geometry (B in the example above) is the source, while the other (A), I will call it the <strong><em>consumer</em></strong>. Note that &#8220;consumer&#8221; is not the official terminology, but I think it is fitting. Officially, the view is either the source or not the source. But that would make the article a little confusing. From now on, when I refer to a consumer view, I am referring to a view that is NOT the source of a matchedGeometryEffect. But enough talk, let&#8217;s start coding&#8230;</p>



<h3 class="wp-block-heading">Baby Steps</h3>



<p>Before we begin, let&#8217;s do a quick recap on what are the <strong>id</strong> and <strong>namespace</strong> parameters of the <strong>matchedGeometryEffect</strong> modifier. Both the id and the namespace together, identify a view. If two views have a call with the same id and namespace, those two views will be matched. The type of match will depend on the other parameters. To learn a little more on id and namespace, refer to <a aria-label="undefined (opens in a new tab)" href="https://swiftui-lab.com/matchedgeometryeffect-part1/" target="_blank" rel="noreferrer noopener">part 1</a>.</p>



<p class="has-text-align-left">In our first example, we have two views. We use the toggle to make the one on the right use the geometry (i.e., size and position) of the view on the left.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="346" height="251" src="https://swiftui-lab.com/wp-content/uploads/2020/07/mge-example1.gif" alt="Example 1" class="wp-image-2075"/></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    @Namespace var ns
    @State var matched: Bool = false
    
    var body: some View {
        VStack(spacing: 50) {
            HStack(spacing: 30) {
                Triangle(.down, .blue)
                    .matchedGeometryEffect(id: &quot;id1&quot;, in: ns)
                    .frame(width: 150, height: 150)
                    .border(Color.gray)
                
                Triangle(.right, .green)
                    .matchedGeometryEffect(id: matched ? &quot;id1&quot; : &quot;&quot;, in: ns, isSource: false)
                    .frame(width: 75, height: 75)
                    .border(Color.gray)
                
            }

            Toggle(isOn: $matched.animation(.easeInOut), label: { Text(&quot;Matched&quot;) }).frame(width: 140)

        }
    }
}</code></pre>



<p>The first thing to notice is the fact that changes to any parameter in matchedGeometryEffect can be animated. All of them, when they produce a change in size or position if triggered by a variable in an animation closure, it will animate. And when I say any of the parameters, I really mean any. That includes the less intuitive, such as namespace and isSource.</p>



<p>The next thing to observe, is that the view that is taking the geometry, is not releasing its space in the layout. Any surrounding views will remained unaffected. As a matter of fact, the gray border remains there, as it is placed after the call to matchedGeometryEffect(). <strong><em>Remember that so called SwiftUI modifiers DO NOT actually modify the view. Instead a new view is created to wrap around the &#8220;modified&#8221; view.</em></strong> If you ever get confuse with this, think matchedGeometryEffect as a modifier that simply calls .offset() and .frame() on the view. It just does it with the right values to make the second view, &#8220;match&#8221; the first one.</p>



<p>Let&#8217;s see how we can replicate the same results, but WITHOUT using <strong>matchedGeometryEffect</strong>:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    @Namespace var ns
    @State var matched: Bool = false
    
    var body: some View {
        let viewArect = CGRect(x: 0, y: 0, width: 150, height: 150)
        let viewBrect = CGRect(x: 180, y: 37.5, width: 75, height: 75)
        
        return VStack(spacing: 30) {
            HStack(spacing: 30) {
                Triangle(.down, .blue)
                    .frame(width: 150, height: 150)
                    .border(Color.gray)
                
                Triangle(.right, .green)
                    // ---------------------------------------------------
                    // Here begins our .matchedGeometryEffect equivalent
                    .offset(x: !matched ? 0 : (viewArect.origin.x - viewBrect.origin.x) + ((viewArect.size.width - viewBrect.size.width) / 2.0),
                            y: !matched ? 0 : (viewArect.origin.y - viewBrect.origin.y) + ((viewArect.size.height - viewBrect.size.height) / 2.0))
                    .frame(width: !matched ? viewBrect.size.width : viewArect.size.width,
                           height: !matched ? viewBrect.size.height : viewArect.size.height)
                    // Here ends our .matchedGeometryEffect equivalent
                    // ---------------------------------------------------
                    .frame(width: 75, height: 75)
                    .border(Color.gray)
                
            }

            Toggle(isOn: $matched.animation(.easeInOut), label: { Text(&quot;Matched&quot;) }).frame(width: 140)
        }
    }
}</code></pre>



<p>As you can see, the code not only is much harder to understand, but it also requires that in order to perform all the calculations, we know the geometry of both views in the same coordinate space! As you probably know by now, that is not easy to do with SwiftUI. You need to use GeometryReader, preferences, or maybe some other method. In this case, I hardcoded the values because I know them in advance. That is rarely the case.</p>



<h3 class="wp-block-heading">Properties to Match, but Not So Much</h3>



<p>The modifier provides the option to decide how much geometry we want to match. That is, you can match just the position, the size, or both. By default, it matches both. This is done  by specifying .position, .size, or .frame in the properties parameter of the view that is NOT the source. The properties parameter on the source view will have no effect. The source view always shares all its geometry (i.e., both size and position). It is up to the consumer, to decide what it wants to take.</p>



<p>Let&#8217;s see with an example. So far we have omitted the properties parameter. It defaults to .frame, which means match both size and position. Now we will slightly modify the call to matchedGeometryEffect on the second view to match only the size:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="376" height="251" src="https://swiftui-lab.com/wp-content/uploads/2020/07/mge-example2.gif" alt="Example 2" class="wp-image-2076"/></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">.matchedGeometryEffect(id: matched ? &quot;id1&quot; : &quot;&quot;, in: ns, properties: .size, isSource: false)</code></pre>



<p>The same can be done with the position:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="344" height="251" src="https://swiftui-lab.com/wp-content/uploads/2020/07/mge-example3.gif" alt="Example 3" class="wp-image-2077"/></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">.matchedGeometryEffect(id: matched ? &quot;id1&quot; : &quot;&quot;, in: ns, properties: .position, isSource: false)</code></pre>



<h3 class="wp-block-heading">Anchoring Paired Views</h3>



<p>The <strong>matchedGeometryEffect</strong> has another parameter (the last one I promise), called anchor. A very useful parameter indeed. When calling <strong>matchedGeometryEffect</strong>, we specify the anchor point both in the source view, and the consumer view. When the view is repositioned, it is done in a way that both anchor points match. Anchor points are expressed as UnitPoint types (more on this later).</p>



<p>In the first example, we are setting <code>.topLeading</code> as the anchor point for the source view (blue) and <code>.bottomTrailing</code> for the consumer view (green).</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="162" height="165" src="https://swiftui-lab.com/wp-content/uploads/2020/07/mge-example4.png" alt="Example 4" class="wp-image-2083"/></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    @Namespace var ns
    
    var body: some View {
        Group {
            Triangle(.down, .blue)
                .matchedGeometryEffect(id: &quot;id1&quot;, in: ns, anchor: .topLeading)
                .frame(width: 75, height: 75)
            
            Triangle(.right, .green)
                .matchedGeometryEffect(id: &quot;id1&quot;, in: ns, anchor: .bottomTrailing, isSource: false)
                .frame(width: 75, height: 75)
        }
    }
}</code></pre>



<p>To better illustrate, let&#8217;s see the following animation. Here, the source view (blue) is always using <code>.topLeading</code> as its anchor point, and the consumer view (green) goes over all 9 predefined anchor points. The red dot shows the anchor point of the source view, and the yellow dot shows the anchor point of the consumer view. A gist file for the code that generates this animation can be found here: <a href="https://gist.github.com/swiftui-lab/56e1cee404cb37163dc99dd307b22b1d" target="_blank" rel="noreferrer noopener" aria-label="undefined (opens in a new tab)">matchedGeometryEffect-anchorPoints.swift</a>&nbsp;</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="247" height="276" src="https://swiftui-lab.com/wp-content/uploads/2020/07/mge-example5-1.gif" alt="Example 5" class="wp-image-2086"/></figure></div>



<h2 class="wp-block-heading">The Problem with the Anchor Parameter (fixed)</h2>



<p class="has-light-green-cyan-background-color has-background">The bug described in this section has been fixed in Xcode 12 beta 4, so you can skip this section. I will keep it here for readers that have not updated to beta 4 yet, but I&#8217;ll remove this section soon.</p>



<p>So far, using anchor points seems pretty straight forward. Doesn&#8217;t it? Well, that is as far as both views have the same size. When we match two views only by its position, and if they do not happen to have the same size, things get a little trickier. See the example below:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="210" height="211" src="https://swiftui-lab.com/wp-content/uploads/2020/07/mge-example6.png" alt="Example 6" class="wp-image-2090" srcset="https://swiftui-lab.com/wp-content/uploads/2020/07/mge-example6.png 210w, https://swiftui-lab.com/wp-content/uploads/2020/07/mge-example6-150x150.png 150w" sizes="(max-width: 210px) 100vw, 210px" /></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView1: View {
    @Namespace var ns
    
    var body: some View {
        Group {
            Triangle(.down, .blue)
                .matchedGeometryEffect(id: &quot;id1&quot;, in: ns, anchor: .topLeading)
                .frame(width: 100, height: 100)
            
            Triangle(.right, .green)
                .matchedGeometryEffect(id: &quot;id1&quot;, in: ns, properties: .position, anchor: .bottomTrailing, isSource: false)
                .frame(width: 75, height: 75)
        }
    }
}</code></pre>



<p>Let&#8217;s analyze what happened here. Although we specified to anchor both views by their .topLeading and .bottomTrailing points, as in the first anchor example, their corners are not touching now. Can you guess why? Let me add a dotted line to superimpose the size of the source view over the consumer view:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="214" height="217" src="https://swiftui-lab.com/wp-content/uploads/2020/07/mge-example7.png" alt="Example 7" class="wp-image-2091"/></figure></div>



<p>The <strong>.bottomTrailing</strong> point for the green view is using the size of the blue view, even though we only asked to match position, not size. This, to me, looks like a bug. I don&#8217;t see much benefit from this behavior and I would very much rather have the anchor point in the green view refer to its own size. I have submitted a bug report to Apple (<a aria-label="undefined (opens in a new tab)" href="https://swiftui-lab.com/bug-matchedgeometryeffect-1/" target="_blank" rel="noreferrer noopener">FB7967943</a>) and I am really wishing this is a bug and not the intended behavior. However, if this is not fixed by the GM, I doubt it will ever be changed, as it would break any code written following the current behavior.</p>



<p>At the time of this writing we are only at beta 2. Let&#8217;s wait and see.</p>



<h2 class="wp-block-heading">A Quick Word on UnitPoint</h2>



<p>A quick note on the UnitPoint type. In most examples, when using UnitPoint, we specify the predefined values (<code>.topLeading</code>, <code>.center</code>, <code>.bottom</code>, etc.). This could mislead you into thinking that UnitPoint is an enum, but it is not. It is a struct, with some static variables for predefined points, such as:</p>
<p style="text-align: center;"><code>.topLeading = UnitPoint(x: 0, y: 0)</code></p>
<p style="text-align: center;"><code>.bottomTrailing = UnitPoint(x: 1, y:0)</code></p>
<p style="text-align: center;"><code></code><code>.center = UnitPoint(x: 0.5, y: 0.5)</code></p>
<p>This means you can actually define your own  UnitPoint, let&#8217;s say: <code>UnitPoint(x: -1.5, y: 0.5)</code>. Note that you can also use negative numbers and exceed the 0.0 to 1.0 range, as long as it makes sense.</p>



<h2 class="wp-block-heading">Annoying Behavior With No Source (fixed)</h2>



<p class="has-light-green-cyan-background-color has-background">The bug described in this section has been fixed in Xcode 12 beta 4, so you can skip this section. I will keep it here for readers that have not updated to beta 4 yet, but I&#8217;ll remove this section soon.</p>



<p>There&#8217;s another behavior, which I&#8217;d like to think is a bug and not by design. I have filed a bug report (<a href="https://swiftui-lab.com/bug-matchedgeometryeffect-2/" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">FB7968204</a>). We&#8217;ll see what happens.</p>



<p>When we have a matchedGeometryEffect that we want to disable, we can simply set the id to a value not used by any source. However, when two views have the same match id and none is the source, I would expect the match to not occur. However, as things stand on beta 2, one of the none source views will act as the source. In my experience so far, it is always the first view the one that takes the role.</p>



<p>This is very annoying. Every view you want to unpair will need a completely different id. This is clear in the example of the next section.</p>



<h2 class="wp-block-heading">Multiple Groups, with Multiple Views</h2>



<p>So far, we have paired two views together. However, matchedGeometryEffect does not limit you there. You can have multiple groups of pairings, and each group can have more than two views, as long as only one is the source for that group. Let&#8217;s see an example:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="562" height="206" src="https://swiftui-lab.com/wp-content/uploads/2020/07/mge-example8.gif" alt="Example 8" class="wp-image-2095"/></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView1: View {
    @Namespace var ns
    @State private var matched = false
    
    var body: some View {
        VStack(spacing: 50) {
            HStack {
                Triangle(.down, .purple)
                    .matchedGeometryEffect(id: &quot;id1&quot;, in: ns)
                    .frame(width: 100, height: 100)
                    .border(Color.gray)
                
                Triangle(.right, .green)
                    .matchedGeometryEffect(id: matched ? &quot;id1&quot; : &quot;unpair1&quot;, in: ns, isSource: false)
                    .frame(width: 100, height: 100)
                    .border(Color.gray)
                
                Triangle(.up, .yellow)
                    .matchedGeometryEffect(id: &quot;id2&quot;, in: ns)
                    .frame(width: 100, height: 100)
                    .border(Color.gray)
                
                Triangle(.left, .red)
                    .matchedGeometryEffect(id: matched ? &quot;id2&quot; : &quot;unpair2&quot;, in: ns, isSource: false)
                    .frame(width: 100, height: 100)
                    .border(Color.gray)
                
                Triangle(.down, .orange)
                    .matchedGeometryEffect(id: matched ? &quot;id2&quot; : &quot;unpair3&quot;, in: ns, isSource: false)
                    .frame(width: 100, height: 100)
                    .border(Color.gray)
            }
        }
        
        Toggle(isOn: $matched.animation(.easeInOut), label: { Text(&quot;Matched&quot;) }).frame(width: 140)

    }
}</code></pre>



<h2 class="wp-block-heading">Multiple Namespaces</h2>



<p>We introduced Namespaces in part 1. We mentioned already that namespaces are useful to prevent id collision between views. However, we can also benefit from them inside a single view by using multiple namespaces.  In some cases, this could be useful. Instead of changing all the ids, you just change a single namespace. In the example below, you can also appreciate how a single view can serve its geometry with more than one id value.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="448" height="223" src="https://swiftui-lab.com/wp-content/uploads/2020/07/mge-example9-2.gif" alt="Example 9" class="wp-image-2102"/></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    @Namespace var empty_namespace
    @Namespace var namespace1
    @Namespace var namespace2
    @Namespace var namespace3

    @State private var namespaceInUse = 0
    
    var body: some View {
        let colors: [Color] = [.purple, .green, .yellow, .red]
        let direction: [Triangle.Direction] = [.up, .down, .left, .right]
        
        VStack(spacing: 30) {
            HStack {
                // Namespace 1
                Rectangle().fill(Color.green.opacity(0.2)).frame(width: 50, height: 50)
                    .matchedGeometryEffect(id: 0, in: namespace1)
                    .matchedGeometryEffect(id: 1, in: namespace1)
                
                Rectangle().fill(Color.green.opacity(0.2)).frame(width: 50, height: 50)
                    .matchedGeometryEffect(id: 2, in: namespace1)
                    .matchedGeometryEffect(id: 3, in: namespace1)
                
                // Namespace 2
                Rectangle().fill(Color.blue.opacity(0.2)).frame(width: 50, height: 50)
                    .matchedGeometryEffect(id: 0, in: namespace2)
                    .matchedGeometryEffect(id: 2, in: namespace2)

                Rectangle().fill(Color.blue.opacity(0.2)).frame(width: 50, height: 50)
                    .matchedGeometryEffect(id: 1, in: namespace2)
                    .matchedGeometryEffect(id: 3, in: namespace2)

                // Namespace 3
                Rectangle().fill(Color.red.opacity(0.2)).frame(width: 50, height: 50)
                    .matchedGeometryEffect(id: 0, in: namespace3)
                    .matchedGeometryEffect(id: 1, in: namespace3)
                    .matchedGeometryEffect(id: 2, in: namespace3)
                    .matchedGeometryEffect(id: 3, in: namespace3)

            }
            
            HStack {
                ForEach(0..&lt;4) { idx in
                    Triangle(direction[idx], colors[idx])
                        .matchedGeometryEffect(id: idx, in: activeNamespace(), isSource: false)
                        .frame(width: 50, height: 50)
                }
            }
            
            HStack(spacing: 30) {
                Button(&quot;Match namespace1&quot;) { withAnimation { namespaceInUse = 1 }}
                Button(&quot;Match namespace2&quot;) { withAnimation { namespaceInUse = 2 }}
                Button(&quot;Match namespace3&quot;) { withAnimation { namespaceInUse = 3 }}
            }
            Button(&quot;Unmatch&quot;) { withAnimation { namespaceInUse = 0 }}
        }
    }
    
    func activeNamespace() -&gt; Namespace.ID {
        if namespaceInUse == 1 {
            return namespace1
        } else if namespaceInUse == 2 {
            return namespace2
        } else if namespaceInUse == 3 {
            return namespace3
        } else {
            return empty_namespace
        }
    }
}</code></pre>



<h2 class="wp-block-heading">A Matter of Preferences</h2>



<p>Do you remember the following example from the series of articles about <a aria-label="undefined (opens in a new tab)" href="https://swiftui-lab.com/communicating-with-the-view-tree-part-1/" target="_blank" rel="noreferrer noopener">Preferences</a>?</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="600" height="301" src="https://swiftui-lab.com/wp-content/uploads/2019/06/blog-tree-animation-2.gif" alt="Related Views" class="wp-image-246"/></figure></div>



<p>Using matchedGeometryEffect can help us avoid overcomplicating our code and get rid of preferences (not always, but in many cases). See how simple the code is now:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView : View {
    @Namespace var ns
    @State private var selection: Int = 1
    
    var body: some View {
        VStack(spacing: 20) {
            ForEach(0..&lt;3) { (row: Int) in
                HStack(spacing: 30) {
                    ForEach(1..&lt;5) { (col: Int) in
                        MonthView(selection: $selection, month: row * 4 + col)
                            .matchedGeometryEffect(id: row * 4 + col, in: ns)
                    }
                }
            }
        }.background(
            RoundedRectangle(cornerRadius: 8).stroke(Color.green, lineWidth: 3)
                .matchedGeometryEffect(id: selection, in: ns, isSource: false)
        )
    }
    
    struct MonthView: View {
        let monthNames = [&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;]
        @Binding var selection: Int
        let month: Int
        
        var body: some View {
            Text(monthNames[month-1])
                .padding(10)
                .onTapGesture {
                    withAnimation(.easeInOut(duration: 1.0)) {
                        self.selection = month
                    }
                }
        }
    }
}</code></pre>



<h3 class="wp-block-heading">Follow the Follower</h3>



<p>In our last example, we are going to see that we can have views that are both sources and consumers of geometry at the same time. In this case, the red circle is getting its geometry from the yellow circle, and the yellow circle is getting its geometry from an item inside the ScrollView. As we scroll, the matched views follow along. In other words, the yellow circle is both following and being followed.</p>



<p>Pay special attention to the order in which matchedGeometryEffect calls are placed.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="317" height="306" src="https://swiftui-lab.com/wp-content/uploads/2020/07/mge-example10.gif" alt="" class="wp-image-2129"/></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView1: View {
    @Namespace var ns
    @State private var flag = false
    let colors: [Color] = [.green, .blue]
    
    var body: some View {
        HStack {
            ScrollView {
                ForEach(0..&lt;30) { idx in
                    RoundedRectangle(cornerRadius: 8).fill(colors[idx%2]).frame(height: 30)
                        .overlay(Text(&quot;Idx = \(idx)&quot;).foregroundColor(.white))
                        .matchedGeometryEffect(id: idx, in: ns, anchor: .trailing, isSource: true)
                        .padding(.horizontal, 10)
                }
            }
            .frame(width: 200)
            
            
            Circle().fill(Color.yellow)
                .frame(width: 30, height: 30)
                .matchedGeometryEffect(id: 1000, in: ns, properties: .position, anchor: .trailing, isSource: true)
                .offset(x: 10)
                .matchedGeometryEffect(id: 9, in: ns, properties: .position, anchor: .leading, isSource: false)

            Circle().fill(Color.red)
                .frame(width: 30, height: 30)
                .offset(x: 10)
                .matchedGeometryEffect(id: 1000, in: ns, properties: .position, anchor: .leading, isSource: false)

            Spacer()
        }
        .frame(width: 300, height: 200)
        .border(Color.gray)
    }
}</code></pre>



<h3 class="wp-block-heading">Hero Animations: Another Approach</h3>



<p>I promised to create a hero animation, but unlike the example from Part 1, one that does not require using custom transitions. The concept is simple:</p>



<ul><li><strong>View A</strong> has the size and position where our <strong>View B</strong> will fly from.</li><li><strong>View B</strong> needs to be added WITHOUT transition or animation. That is, the variable that makes the view to appear, should not be inside a withAnimation block.</li><li><strong>View B</strong> needs to be matched with <strong>View A</strong>, so when it is added it is right on top of <strong>View A</strong>.</li><li>On the <strong>View B</strong> we add the .onAppear modifier. In that closure, we put a withAnimation block where we do two things: First, we un-match both views (which will make View B to fly to its final position). And second, in the same animation closure, we add all other changes needed for a smooth morphing (e.g.,  changing corner radius, shadow, etc).</li></ul>



<p>This technique is showcased in the Wildlife Encyclopedia example. The Xcode project is available <a href="https://github.com/swiftui-lab/swiftui-hero-animations-no-transitions" target="_blank" rel="noreferrer noopener">here</a>.</p>



<h3 class="wp-block-heading">Summary</h3>



<p>In this two-part article, we learned every aspect of this useful modifier. Probably one of the most valued additions to SwiftUI in 2020. Now you have the tools to create animations like the one in the video at the beginning of this article… but if you get stuck, you can always get the Xcode project included.</p>



<p>Please feel free to comment below, and follow me on twitter if you would like to be notified when new articles come out. Until next time!</p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/matchedgeometryeffect-part2/">MatchedGeometryEffect &#8211; Part 2</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://swiftui-lab.com/matchedgeometryeffect-part2/feed/</wfw:commentRss>
			<slash:comments>19</slash:comments>
		
		<enclosure url="https://swiftui-lab.com/wp-content/uploads/2020/07/wildlife-1.mp4" length="7408530" type="video/mp4" />

			</item>
		<item>
		<title>MatchedGeometryEffect &#8211; Part 1 (Hero Animations)</title>
		<link>https://swiftui-lab.com/matchedgeometryeffect-part1/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=matchedgeometryeffect-part1</link>
					<comments>https://swiftui-lab.com/matchedgeometryeffect-part1/#comments</comments>
		
		<dc:creator><![CDATA[javier]]></dc:creator>
		<pubDate>Mon, 06 Jul 2020 14:40:17 +0000</pubDate>
				<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">https://swiftui-lab.com/?p=1987</guid>

					<description><![CDATA[<p>This year brought some interesting new additions to the SwiftUI framework. There is one, in particular, that opens a whole lot of new possibilities. We are talking about a new extension to the View protocol, the .matchedGeometryEffect() modifier. On its own, it&#8217;s good enough, but in combination with other techniques we learned already (custom transitions ... <a title="MatchedGeometryEffect &#8211; Part 1 (Hero Animations)" class="read-more" href="https://swiftui-lab.com/matchedgeometryeffect-part1/" aria-label="More on MatchedGeometryEffect &#8211; Part 1 (Hero Animations)">Read more</a></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/matchedgeometryeffect-part1/">MatchedGeometryEffect &#8211; Part 1 (Hero Animations)</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>This year brought some interesting new additions to the SwiftUI framework. There is one, in particular, that opens a whole lot of new possibilities. We are talking about a new extension to the View protocol, the <strong>.matchedGeometryEffect()</strong> modifier. On its own, it&#8217;s good enough, but in combination with other techniques we learned already (<a aria-label="undefined (opens in a new tab)" href="https://swiftui-lab.com/advanced-transitions/" target="_blank" rel="noreferrer noopener">custom transitions</a> and <a aria-label="undefined (opens in a new tab)" href="https://swiftui-lab.com/swiftui-animations-part3/" target="_blank" rel="noreferrer noopener">animatable modifiers</a>), it becomes even better. It is an essential skill to put in your SwiftUI toolkit.</p>



<h3 class="wp-block-heading">One Method, Two Use Cases</h3>



<p>This single modifier is, in reality, two modifiers in one. It can perform two very distinctive tasks. They are so different, that I have decided to split this article into two parts.</p>



<p><strong>Use Case #1</strong>: We use .matchedGeometryEffect() to synchronize the geometries (size and/or position) of two views. One view is being inserted into the view hierarchy, and the other one is leaving. We will explore this mode in this first part of the article.</p>



<p><strong>Use Case #2</strong>: We use .matchedGeometryEffect() to synchronize the geometries (size and/or position) of several views that are concurrently part of the view hierarchy. In <a href="https://swiftui-lab.com/matchedgeometryeffect-part2/">part 2</a>, we see this case in detail.</p>



<h3 class="wp-block-heading">Make your views fly!</h3>



<p>In the first use case, one view is removed from the view hierarchy, while another is simultaneously inserted. This is ideal for creating &#8220;Hero Animations&#8221;. You know&#8230;, those fancy animations where one element from one area of the screen &#8220;flies&#8221; like Superman, and then lands and integrates into a different area of the screen. Here&#8217;s an example that, once you reach the end of the article, you will be in a position to build yourself. But don&#8217;t worry, I&#8217;ll also include the code if you just want to copy and paste <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>



<figure class="wp-block-video aligncenter"><video autoplay controls loop src="https://swiftui-lab.com/wp-content/uploads/2020/07/hero-animation-small-1.mp4"></video></figure>



<p>Before we create a Hero Animation like the one showcased above, we need to build our concepts gradually. Let&#8217;s get to work.</p>



<h3 class="wp-block-heading">The Building Blocks of a Hero Animation</h3>



<p>We begin by creating two mutually exclusive views. When one is inserted into the hierarchy, the other is removed:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="332" height="186" src="https://swiftui-lab.com/wp-content/uploads/2020/07/match1.gif" alt="Match1" class="wp-image-1994"/></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    @State private var flag: Bool = true

    var body: some View {
        HStack {
            if flag {
                Rectangle().fill(Color.green).frame(width: 100, height: 100)
            }
            
            Spacer()
            
            Button(&quot;Switch&quot;) { flag.toggle() }
            
            Spacer()
            
            if !flag {
                Circle().fill(Color.blue).frame(width: 50, height: 50)
            }
        }.frame(width: 400)
    }
}</code></pre>



<p>When you press on the &#8220;Switch&#8221; button, one shape disappears and the other appears instantaneously. However, for our example, we need an animation in place. To do so, we update our button action:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="332" height="186" src="https://swiftui-lab.com/wp-content/uploads/2020/07/match2.gif" alt="Match2" class="wp-image-1995"/></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">Button(&quot;Switch&quot;) {
    withAnimation(.easeInOut(duration: 2.0)) { flag.toggle() }
}</code></pre>



<p>Ok. Looking better. Now, when there&#8217;s an animation triggering the insertion/removal, SwiftUI uses its default transition to fade-in one shape, and fade-out  the other. This is nice, but both views are still disconnected. It&#8217;s time to introduce <strong>.matchedGeometryEffect</strong>. Let&#8217;s see its function signature:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">func matchedGeometryEffect&lt;ID&gt;(id: ID, in namespace: Namespace.ID, properties: MatchedGeometryProperties = .frame, anchor: UnitPoint = .center, isSource: Bool = true) -&gt; some View where ID : Hashable</code></pre>



<p>For now, we are only interested in the three first parameters. The rest will be left at their defaults and we&#8217;ll cover them later.</p>



<ul><li><strong>id</strong>: Since the method can synchronize the geometries of different groups of views, the <strong>id</strong> parameter is what lets us group them accordingly. It can be any Hashable type (e.g., Int, String, whatever you fancy).</li><li><strong>namespace</strong>: This one may be a little more confusing. <a aria-label="undefined (opens in a new tab)" href="https://developer.apple.com/documentation/swiftui/namespace" target="_blank" rel="noreferrer noopener">Apple&#8217;s documentation</a> says a lot, without saying much. However, after experimenting a little, we understand that it is a way for the framework to not confuse two groups of views with the same id. It could happen that the same id is used in multiple views of the hierarchy. In order to avoid id collision, a pairing of two views is determined by the id+namespace. Fortunately, its use is very formulaic, as you will learn from the examples. It only requires you to define a variable with the @Namespace property wrapper, and you&#8217;re good to go. There are some other uses, those are explored in <a href="https://swiftui-lab.com/matchedgeometryeffect-part2/">Part 2</a>.</li><li><strong>properties</strong>: This indicates if we want to match the size (.size), the position (.position) or both (.frame). If we do not specify anything, it will match both.</li></ul>



<p>But enough talk. Let&#8217;s see it in action. In the code below, we link both views with a call to <strong>.matchedGeometryEffect()</strong>. Now it looks more as if the outgoing view is &#8220;becoming&#8221; the incoming view and vice-versa.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="332" height="186" src="https://swiftui-lab.com/wp-content/uploads/2020/07/match3.gif" alt="Match3" class="wp-image-1996"/></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    @Namespace var nspace
    @State private var flag: Bool = true

    var body: some View {
        HStack {
            if flag {
                Rectangle().fill(Color.green)
                    .matchedGeometryEffect(id: &quot;geoeffect1&quot;, in: nspace)
                    .frame(width: 100, height: 100)
            }

            Spacer()

            Button(&quot;Switch&quot;) { withAnimation(.easeInOut(duration: 2.0)) { flag.toggle() } }

            Spacer()

            if !flag {
                Circle()
                    .fill(Color.blue)
                    .matchedGeometryEffect(id: &quot;geoeffect1&quot;, in: nspace)
                    .frame(width: 50, height: 50)
            }
        }
        .frame(width: 250).padding(10).border(Color.gray, width: 3)
    }
}</code></pre>



<p>This is what SwiftUI is doing:</p>



<ol><li>The view being inserted starts with the size and position of the view being removed. During the transition, however, its size and position animate to reach the place where it was supposed to be.</li><li>The view being removed does the opposite. It starts with its own size and position, and during the transition, it animates to the final size and position of the view being inserted.</li><li>By default, the incoming view fades-in, and the outgoing view fades-out.</li></ol>



<p>Let&#8217;s repeat the example, but we will add some views surrounding the circle, to see how they react. We will also add a rectangle after the <strong>.matchedGeometryEffect()</strong> call of the inserted circle. This will give us a better understanding of what is going on:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="332" height="230" src="https://swiftui-lab.com/wp-content/uploads/2020/07/match4.gif" alt="" class="wp-image-2000"/></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">VStack {
    Rectangle().fill(Color.yellow).frame(width: 50, height: 50)
    
    if !flag {
        Circle()
            .fill(Color.blue)
            .matchedGeometryEffect(id: &quot;geoeffect1&quot;, in: nspace)
            .frame(width: 50, height: 50)
            .border(Color.black)
            .zIndex(1)
    }
    
    Rectangle().fill(Color.yellow).frame(width: 50, height: 50)
}</code></pre>



<h2 class="wp-block-heading">Better Transitions</h2>



<p>With what we&#8217;ve seen so far, we can already start to make nice transitions between two views. The real power, however, comes when we combine <strong>.matchedGeometryEffect()</strong> with custom transitions and animatable modifiers. If you don&#8217;t know what they are, you may learn more about them in these two previous posts:</p>



<ul><li><a aria-label="undefined (opens in a new tab)" href="https://swiftui-lab.com/swiftui-animations-part3/" target="_blank" rel="noreferrer noopener">Advanced SwiftUI Animations – Part 3: AnimatableModifier</a></li><li><a href="https://swiftui-lab.com/advanced-transitions/">Advanced SwiftUI Transitions</a></li></ul>



<p>The idea is simple, but the effects are powerful. The geometry match that we have described here, occurs during the transition when the views are being added and removed. This means that if we add a custom transition, we can make our outgoing view to morph into the shape of the incoming view, and vice-versa. When I say &#8220;morph into the shape&#8221;, I am speaking broadly. It doesn&#8217;t have to be the shape necessarily.</p>



<p>For example, you may have two identical images, and with the same size. However, each may be cropped differently. The transition is a good time to animate the cropping from one image to the other. The result, a smooth transition. We&#8217;ll see that in more detail with the &#8220;Hero Animation&#8221; example. But first, let&#8217;s see how its elemental components fit together.</p>



<p>We are going to borrow some code from the <a aria-label="undefined (opens in a new tab)" href="https://swiftui-lab.com/swiftui-animations-part1/" target="_blank" rel="noreferrer noopener">Advanced Animations Part 1</a> post. We&#8217;ll use the PolygonShape shape, which let us draw a polygon with a specified number of sides. Will fit it into a view that will get the number of sides from a custom Environment Key called <strong>.polygonSides</strong>. When the number of sides is &gt;= 30, it will draw a circle instead (they are almost identical, but the circle looks smoother).</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct Polygon: View {
    @Environment(\.polygonSides) var sides: Double
    let color: Color
    
    var body: some View {
        Group {
            if sides &gt;= 30 {
                Circle()
                    .stroke(color, lineWidth: 10)
            } else {
                PolygonShape(sides: sides)
                    .stroke(color, lineWidth: 10)
            }
        }
    }
    
    struct PolygonShape: Shape {
        var sides: Double
        
        func path(in rect: CGRect) -&gt; Path {
            let h = Double(min(rect.size.width, rect.size.height)) / 2.0
            let c = CGPoint(x: rect.size.width / 2.0, y: rect.size.height / 2.0)
            var path = Path()
            let extra: Int = Double(sides) != Double(Int(sides)) ? 1 : 0
            
            for i in 0..&lt;Int(sides) + extra {
                let angle = (Double(i) * (360.0 / Double(sides))) * Double.pi / 180
                
                let pt = CGPoint(x: c.x + CGFloat(cos(angle) * h), y: c.y + CGFloat(sin(angle) * h))
                
                if i == 0 {
                    path.move(to: pt) // move to first vertex
                } else {
                    path.addLine(to: pt) // draw line to next vertex
                }
            }
            
            path.closeSubpath()
            
            return path
        }
    }
}</code></pre>



<p>We define our custom environment key:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">extension EnvironmentValues {
    var polygonSides: Double {
        get { return self[PolygonSidesKey.self] }
        set { self[PolygonSidesKey.self] = newValue }
    }
}

public struct PolygonSidesKey: EnvironmentKey {
    public static let defaultValue: Double = 4
}</code></pre>



<p>Now we create two custom transitions. One to animate the environment value .<strong>polygonSides</strong> from 3 to 30, and the other from 30 to 3:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">extension AnyTransition {
    static var polygonTriangle: AnyTransition {
        AnyTransition.modifier(
            active: PolygonModifier(sides: 30, opacity: 0),
            identity: PolygonModifier(sides: 3, opacity: 1)
        )
    }

    static var polygonCircle: AnyTransition {
        AnyTransition.modifier(
            active: PolygonModifier(sides: 3, opacity: 0),
            identity: PolygonModifier(sides: 30, opacity: 1)
        )
    }

    struct PolygonModifier: AnimatableModifier {
        var sides, opacity: Double
        
        var animatableData: Double {
            get { sides }
            set { sides = newValue }
        }
        
        func body(content: Content) -&gt; some View {
            return content
                .environment(\.polygonSides, sides)
                .opacity(opacity)
        }
    }
}</code></pre>



<p>And now we put it all together. When we remove one view, and add the other, it transitions from triangle to circle, and vice-versa. It seems to be a single view animating. But there are two, it&#8217;s just that they are identical at all times. One is always green, the other is always blue, but since their opacities progressively change, the color also transitions smoothly.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="574" height="318" src="https://swiftui-lab.com/wp-content/uploads/2020/07/match5-1.gif" alt="5" class="wp-image-2007"/></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ExampleView: View {
    @Namespace var nspace
    @State private var flag: Bool = true
    
    var body: some View {
       
        HStack {
            if flag {
                VStack {
                    Polygon(color: Color.green)
                        .matchedGeometryEffect(id: &quot;geoeffect1&quot;, in: nspace)
                        .frame(width: 200, height: 200)
                }
                .transition(.polygonTriangle)
            }
            
            Spacer()
            
            Button(&quot;Switch&quot;) { withAnimation(.easeInOut(duration: 2.0)) { flag.toggle() } }
            
            Spacer()

            if !flag {
                VStack {
                    Polygon(color: Color.blue)
                        .matchedGeometryEffect(id: &quot;geoeffect1&quot;, in: nspace)
                        .frame(width: 200, height: 200)
                }
                .transition(.polygonCircle)
            }
        }
        .frame(width: 450).padding(40).border(Color.gray, width: 3)
    }
}</code></pre>



<p>What am I hearing? You don&#8217;t believe me? Look what happen if we add a small offset to the first view:</p>



<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img loading="lazy" decoding="async" src="https://swiftui-lab.com/wp-content/uploads/2020/07/match6-1.gif" alt="" class="wp-image-2034" width="564" height="324"/></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">Polygon(color: Color.green)
    .offset(x: 30)
    .matchedGeometryEffect(id: &quot;geoeffect1&quot;, in: nspace)
    .frame(width: 200, height: 200)</code></pre>



<h3 class="wp-block-heading">The Hero Comes Flying In</h3>



<p>With all we cover in this article, you already have the tools to build a hero animation. In the example, I will be using a couple of other iOS 14.0 features. These are <strong>LazyVGrid</strong> and <strong>ScrollViewReader</strong>. I will talk about them in more detail on future articles. However, these are not essential to understand the code of the project.</p>



<p>Since the code is larger than usual, I created an Xcode project. The link to its repository is below:</p>



<p><a href="https://github.com/swiftui-lab/swiftui-hero-animations.git">https://github.com/swiftui-lab/swiftui-hero-animations.git</a></p>



<p>Check the <strong>README.md</strong> file, which contains a guide on how to navigate the code. Note that although I tested the project on an iPad 9.7&#8243; running at full screen, the code is design to easily adapt to any window size. You simply need to set the right values in the HeroConfiguration variable. In fact, the code does that already when the device is rotated. The HeroConfiguration is different for each orientation.</p>



<p>Note that when you use the panel to change the configuration, you affect the layout in the orientation that you are in.</p>



<figure class="wp-block-video aligncenter"><video autoplay controls loop src="https://swiftui-lab.com/wp-content/uploads/2020/07/small-loop-1.mp4"></video></figure>



<h3 class="wp-block-heading">Summary</h3>



<p>In this article we have exposed one of the sides of the .matchedGeometryEffect() modifier. As you can see, it can be very powerful. You just need to get creative.</p>



<p>In the <a href="https://swiftui-lab.com/matchedgeometryeffect-part2/">second part</a>, we cover the other use case described in the introduction. Please feel free to comment below, and follow me on twitter if you would like to be notified when new articles come out. Until next time!</p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/matchedgeometryeffect-part1/">MatchedGeometryEffect &#8211; Part 1 (Hero Animations)</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://swiftui-lab.com/matchedgeometryeffect-part1/feed/</wfw:commentRss>
			<slash:comments>16</slash:comments>
		
		<enclosure url="https://swiftui-lab.com/wp-content/uploads/2020/07/hero-animation-small-1.mp4" length="12935763" type="video/mp4" />
<enclosure url="https://swiftui-lab.com/wp-content/uploads/2020/07/small-loop-1.mp4" length="1238727" type="video/mp4" />

			</item>
		<item>
		<title>Backward Compatibility with SwiftUI</title>
		<link>https://swiftui-lab.com/backward-compatibility/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=backward-compatibility</link>
					<comments>https://swiftui-lab.com/backward-compatibility/#comments</comments>
		
		<dc:creator><![CDATA[javier]]></dc:creator>
		<pubDate>Wed, 01 Jul 2020 13:45:18 +0000</pubDate>
				<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">https://swiftui-lab.com/?p=1890</guid>

					<description><![CDATA[<p>On your mark, get set, go! The time to begin discovering all the new SwiftUI features that the WWDC 2020 brought is here. However, as every year, excitement washes off a few milliseconds later, when you remember that dropping support for older OS versions is not an option for you. Usually, we resort to our ... <a title="Backward Compatibility with SwiftUI" class="read-more" href="https://swiftui-lab.com/backward-compatibility/" aria-label="More on Backward Compatibility with SwiftUI">Read more</a></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/backward-compatibility/">Backward Compatibility with SwiftUI</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>On your mark, get set, go! The time to begin discovering all the new SwiftUI features that the WWDC 2020 brought is here. However, as every year, excitement washes off a few milliseconds later, when you remember that dropping support for older OS versions is not an option for you. </p>



<p>Usually, we resort to our friend <code>#available</code>. For example, suppose you have a long HStack. You may decide to use the new LazyHStack, to take advantage of its performance improvements for long stacks. However, if your app is running on iOS13, you can fallback to using a plain and normal HStack:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">Group {
    Text(&quot;A long vertical view is below!&quot;)
    
    if #available(iOS 14.0, *) {
        LazyHStack {
            View1()
            View2()
        }
    } else {
        // Fallback on earlier versions
        HStack {
            View1()
            View2()
        }
    }
}</code></pre>



<p>This is an easy substitution, but with more complex scenarios, your fallback code will require more extreme measures, such as a UIKit/AppKit view wrapped by a Representable.</p>



<p>This approach looks good for a very small project, but as the number of views starts to grow, you may find it very annoying having to add the #available check every time. And also, code readability will suffer tremendously. For those cases, we can take advantage of the fact that Swift can handle the same type name in different scopes. Let me illustrate with an example:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">// Now, the compiler will no longer complain about LazyHStack not being available on iOS13.
struct ContentView: View {
    var body: some View {
        LazyHStack(spacing: 30) {
            View1()
            View2()
        }
    }
}

struct LazyHStack&lt;Content&gt; : View where Content : View {
    let alignment: VerticalAlignment
    let spacing: CGFloat?
    let content: () -&gt; Content
    
    var body: some View {
        Group {
            if #available(OSX 11.0, iOS 14.0, tvOS 14.0, watchOS 7.0, *) {
                AnyView(SwiftUI.LazyHStack(alignment: alignment, spacing: spacing, content: content))
            } else {
                // Fallback on earlier versions
                HStack(alignment: alignment, spacing: spacing, content: content)
            }
        }
    }

    init(alignment: VerticalAlignment = .center, spacing: CGFloat? = nil, @ViewBuilder content: @escaping () -&gt; Content) {
        self.alignment = alignment
        self.spacing = spacing
        self.content = content
    }
}</code></pre>



<p class="has-black-color has-light-green-cyan-background-color has-text-color has-background"><strong>BUG ALERT</strong> (FIXED!): The AnyView you see in the code is there to prevent a bug in the Framework. The issue has been fixed in Xcode 12, beta 5. I will remove the workaround in a few weeks, in case there is still a reader that has not updated to beta 5 yet. Learn more about the bug <a aria-label="undefined (opens in a new tab)" href="https://swiftui-lab.com/bug-os-check/" target="_blank" rel="noreferrer noopener">here</a>.</p>



<p>By creating our own LazyHStack, which will be available on all OS versions, the compiler no longer complains. This is because now, LazyHStack refers to MyApp.LazyHStack and not SwiftUI.LazyHStack. Then, on our own implementation we check for the version, and there we decide whether to use the old SwiftUI.HStack, or the new SwiftUI.LazyHStack.</p>



<p>To learn more about swift&#8217;s @available attribute, refer to swift.org: <a aria-label="undefined (opens in a new tab)" href="https://docs.swift.org/swift-book/ReferenceManual/Attributes.html#ID583" target="_blank" rel="noreferrer noopener">https://docs.swift.org/swift-book/ReferenceManual/Attributes.html#ID583</a>.</p>



<p>So far, this is somewhat trivial. However, now I would like to shift the focus to a specific problem that the new SwiftUI brings. I&#8217;m talking about how to use the new App and Scene API, together with the &#8220;old ways&#8221; of launching our apps.</p>



<h3 class="wp-block-heading">Embracing Change</h3>



<p>Suppose you have an app already working under older OS versions. Now, after witnessing the new wave of SwiftUI improvements, you finally decide it is time for your app to embrace the new framework. I won&#8217;t go into discussing if SwiftUI is mature enough or not. That is heavily dependent on the type of app you are writing, but for the sake of this article, let&#8217;s pretend SwiftUI is indeed a good fit for your app.</p>



<p><em><strong><strong><em>For this particular example, we will explore the possibility of keeping our old UI for users running previous OS versions, and having a redesigned SwiftUI interface from scratch, so it can benefit users running iOS14.0+/macOS11+</em></strong></strong></em></p>



<p>Starting with Xcode 12, it is now possible to design an app written completely using SwiftUI. In the past (i.e., last year), you still needed to hook up your hierarchy of scenes/windows as usual. No more, it is now possible to write a full app with few lines of code, as below:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">@main
struct MyApp: App {
    var body: some Scene {
        WindowGroup {
            Text(&quot;Hello, world!&quot;)
        }
    }
}</code></pre>



<p>This, although wonderful, presents a problem when we try to keep both (the old and the new UI in the same app). If we try to use &#8220;<code>if #available</code>&#8221; to wrap the @main declaration, we will get a compiler error.</p>



<pre class="wp-block-swiftuilab-snippet scratch-me"><code class="language-swift">if #available(iOS 14.0, *) {
    @main
    struct MyApp: App {
        var body: some Scene {
            WindowGroup {
                Text(&quot;Hello, world!&quot;)
            }
        }
    }
}</code></pre>



<p>Using #available at the top level is not permitted, so the compiler will grace us with the following error:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="337" height="20" src="https://swiftui-lab.com/wp-content/uploads/2020/06/top-level-error.png" alt="top level error" class="wp-image-1924" srcset="https://swiftui-lab.com/wp-content/uploads/2020/06/top-level-error.png 337w, https://swiftui-lab.com/wp-content/uploads/2020/06/top-level-error-300x18.png 300w" sizes="(max-width: 337px) 100vw, 337px" /></figure></div>



<p>Fortunately, there is still a way around it. Let&#8217;s see…</p>



<h3 class="wp-block-heading">Application Entry-Point (@main)</h3>



<p>Swift 5.3 has a new attribute called @main (<a aria-label="undefined (opens in a new tab)" href="https://github.com/apple/swift-evolution/blob/master/proposals/0281-main-attribute.md" target="_blank" rel="noreferrer noopener">SE-0281</a>). Since this is part of the language (i.e., not a library), it will work with older OS versions, as long as you are compiling with Swift 5.3+. The real problem we have here is that the App protocol does not exist in older OS versions. So how can we go around it, considering there can only be one annotated type with @main in your entire app?</p>



<p>Also note that <code>@main</code>&nbsp;and <code>@UIApplicationMain</code>/<code>@NSApplicationMain</code> and top-level code in main.swift are mutually exclusive. You can only use one type of entry-point.</p>



<p>If we look at the documentation, we&#8217;ll see that <code>@main</code> provides the entry-point for your app. And in particular, your app will start by jumping to the main() function of the type that has been prefixed with @main. Looking at the code, we can infer that the App protocol must have a default implementation of the main() function. And indeed it does, check Apple&#8217;s documentation about it <a href="https://developer.apple.com/documentation/swiftui/app/main()" target="_blank" rel="noopener noreferrer">here</a>.</p>



<p>This is all we need to know, in order to create an app that uses the new App protocol for new OS versions, and the old UIApplication/NSApplication type otherwise. With that in mind, we will need to change our code as explained below.</p>



<h3 class="wp-block-heading">But First, Some Considerations</h3>



<ol><li>The code that follows, is only intended as a starting point. Over the years, there have been many ways to start an app (e.g., main storyboard, xib files, scene manifest, manually invoking UIApplicationMain, etc). This means that each case should be approached differently. The code here will just point you in the right direction (I&#8217;m hoping).</li></ol>



<ol start="2"><li>While experimenting with this, I found that sometimes the app was being a little stubborn and wouldn&#8217;t do what I thought it should. I found that removing the app from the simulator and redeploying solved the problem. This may be related to changes in the Info.plist not being updated properly&#8230; but I&#8217;m not sure. Just keep it in mind, should it happen to you.</li></ol>



<ol start="3"><li>And my final word of caution: You won&#8217;t like this one, and I apologize&#8230; but we are dealing with some undocumented behaviors here, so carry on at your own risk! <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f62c.png" alt="😬" class="wp-smiley" style="height: 1em; max-height: 1em;" /> </li></ol>



<h3 class="wp-block-heading">An iOS Example</h3>



<p>In the following example, our old UI is using UIHostingController as the main controller, and so the main scene is not loaded from a storyboard. If in your case it does, it will require more work. I&#8217;ve yet to try that, but I did something similar for a macOS app, which I will include below.</p>



<p>First, don&#8217;t forget to remove the old @UIApplicationMain annotation. In the code below I will comment it out instead, so you can see what I mean.</p>



<p>Make sure that your Application Scene Manifest in the Info.plist does not have a UISceneStoryboardFile setup. Since you are working with a UIHostingController based app, it shouldn&#8217;t&#8230; but maybe your code was updated and it was left there. If a value for the UISceneStoryboardFile key is in the Info.plist file, the app may default to that and ignore all your efforts. So be careful. And also, if you change the Info.plist, remember you may need to remove the app from the simulator/device and redeploy to make sure the change takes effect.</p>



<p>With all these prerequisites out of the way, let&#8217;s start updating our code.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">import SwiftUI

@main
struct MainApp {
    static func main() {
        if #available(iOS 14.0, *) {
            MyNewUI.main()
        } else {
            UIApplicationMain(
                CommandLine.argc,
                CommandLine.unsafeArgv,
                nil,
                NSStringFromClass(AppDelegate.self))
        }
    }
}

@available(iOS 14.0, *)
struct MyNewUI: App {
    var body: some Scene {
        WindowGroup {
            Text(&quot;This is my new UI! Pretty basic, huh?&quot;)
        }
    }
}

//@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate { ... }

class SceneDelegate: UIResponder, UIWindowSceneDelegate {

    var window: UIWindow?

    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {

        let contentView = ContentView()

        if let windowScene = scene as? UIWindowScene {
            let window = UIWindow(windowScene: windowScene)
            window.rootViewController = UIHostingController(rootView: contentView)
            self.window = window
            window.makeKeyAndVisible()
        }
    }

    func sceneDidDisconnect(_ scene: UIScene) { ... }
    func sceneDidBecomeActive(_ scene: UIScene) { ... }
    func sceneWillResignActive(_ scene: UIScene) { ... }
    func sceneWillEnterForeground(_ scene: UIScene) { ... }
    func sceneDidEnterBackground(_ scene: UIScene) { ... }
}

</code></pre>



<p>It is very important that you annotate your App struct with <code>@available(iOS 14.0, *)</code>. This will prevent the compiler from complaining, as App does not exist in older OS versions.</p>
<p>A similar logic applies to macOS, let&#8217;s see another example.</p>



<h3 class="wp-block-heading">A macOS Example (#1)</h3>



<p>In this first macOS example, the old UI is using NSHostingView. The second example will use a storyboard instead.</p>



<p>As with the iOS example, there are some prerequisites:</p>



<ul><li>Remove the <strong>NSMainStoryboardFile</strong> entry from your Info.plist file.</li><li>Remove the <strong>NSPrincipalClass</strong> entry from your Info.plist file.</li><li>Remove the <strong>@NSApplicationMain</strong> annotation.</li></ul>



<p>If you do not remove those entries from the Info.plist file, your logic may be overridden at launch time. So don&#8217;t skip that part.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">import SwiftUI

var appDelegate = AppDelegate()

@main
struct AppUserInterfaceSelector {
    static func main() {
        if #available(OSX 11.0, *) {
            NewUIApp.main()
        } else {
            OldUIApp.main()
        }
    }
}

@available(OSX 11.0, *)
struct NewUIApp: App {
    var body: some Scene {
        WindowGroup() {
            NewContentView()
        }
    }
}

struct OldUIApp {
    static func main() {
        NSApplication.shared.setActivationPolicy(.regular)
        
        let nib = NSNib(nibNamed: NSNib.Name(&quot;MainMenu&quot;), bundle: Bundle.main)
        nib?.instantiate(withOwner: NSApplication.shared, topLevelObjects: nil)
        
        NSApp.delegate = appDelegate
        NSApp.activate(ignoringOtherApps: true)
        NSApp.run()
    }
}

class AppDelegate: NSObject, NSApplicationDelegate {
    var window: NSWindow!

    func applicationDidFinishLaunching(_ aNotification: Notification) {
        // Create the SwiftUI view that provides the window contents.
        let contentView = OldContentView()

        // Create the window and set the content view.
        window = NSWindow(
            contentRect: NSRect(x: 0, y: 0, width: 480, height: 300),
            styleMask: [.titled, .closable, .miniaturizable, .resizable, .fullSizeContentView],
            backing: .buffered, defer: false)
        
        window.title = &quot;Test Application&quot;
        window.isReleasedWhenClosed = false
        window.center()
        window.setFrameAutosaveName(&quot;Main Window&quot;)
        window.contentView = NSHostingView(rootView: contentView)
        window.makeKeyAndOrderFront(nil)
    }

    func applicationWillTerminate(_ aNotification: Notification) { ... }
}</code></pre>



<p>Some things to note from the code above. We have created a global variable for our AppDelegate. This is because the NSApp.delegate is a weak property, and we need to keep that object around. Also note that the application menu is loaded from a xib file.</p>



<h3 class="wp-block-heading">A macOS Example (#2)</h3>



<p>In our second macOS example, the old UI will be using a storyboard, instead of a NSHostingView. So that part is gone from applicationDidFinishLaunching. The rest of the code is almost identical, but we need to add a few lines to the OldUIApp.main() function:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct OldUIApp {
    static func main() {
        NSApplication.shared.setActivationPolicy(.regular)

        // Load MainMenu, from MainMenu.xib
        let nib = NSNib(nibNamed: NSNib.Name(&quot;MainMenu&quot;), bundle: Bundle.main)
        nib?.instantiate(withOwner: NSApplication.shared, topLevelObjects: nil)

        // Load Main storyboard and show main window
        let sb = NSStoryboard(name: NSStoryboard.Name(&quot;Main&quot;), bundle: .main)
        let windowController = sb.instantiateInitialController() as? NSWindowController
        windowController?.window?.makeKeyAndOrderFront(nil)

        NSApp.delegate = appDelegate
        NSApp.activate(ignoringOtherApps: true)
        NSApp.run()
    }
}</code></pre>



<p>This new version of the main() function, loads a storyboard, instantiates the window controller, and presents its window. Note that the menu is still coming from a xib file. I did not find a way to get a reference to the menu from the storyboard. There&#8217;s probably a way, but I haven&#8217;t look. If you know how, please leave a comment below.</p>



<h3 class="wp-block-heading">One Step Further</h3>



<p>In the example above, we determine which UI to run based on the detected OS version. However, nothing prevents you from making that decision based on other facts. For example, a saved value in your UserDefaults, or a pressed key while the app launches, or both. For example:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">@main
struct AppUserInterfaceSelector {
    static func main() {
        if #available(OSX 11.0, *) {
            // Use old interface, if SHIFT key is pressed during app launch, or
            // if UseOldUI is set to true in UserDefaults.
            if NSEvent.modifierFlags.contains(.shift) || UserDefaults.standard.bool(forKey: &quot;UseOldUI&quot;) {
                OldUIApp.main()
            } else {
                NewUIApp.main()
            }
        } else {
            OldUIApp.main()
        }
    }
}</code></pre>



<p>In the macOS example above, if there is a boolean key in the app defaults, or if the SHIFT key is pressed while the app launches, the old UI will be used, and it won&#8217;t matter what OS version the app is running on. This is very useful for testing.</p>



<p>Be careful if you include this type of conditional UI selection, as it could go against Apple Review Guidelines. Remember that the App Store cannot contain beta software, and being able to select a different UI could be construed as such. Especially if the &#8220;new&#8221; design is not the default. In any case, it is completely safe when distributed outside the App Store, or for your own testing.</p>



<h3 class="wp-block-heading">Summary</h3>



<p>Every year we face the challenges of deciding when to adopt the new technologies that Apple brings us during the WWDC. Finding the balance between moving forward, or maintaining compatibility with older OS versions is not an easy task. I&#8217;m hoping the tips in this article will contribute to making your decisions a tiny bit easier.</p>



<p>In the upcoming weeks, I will continue to post new articles about the latest additions in SwiftUI. Please feel free to comment below, and follow me on twitter if you would like to be notified when new articles come out. Until next time!</p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/backward-compatibility/">Backward Compatibility with SwiftUI</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://swiftui-lab.com/backward-compatibility/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>WWDC 2020 Has Come and Gone</title>
		<link>https://swiftui-lab.com/wwdc-2020-is-here/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=wwdc-2020-is-here</link>
					<comments>https://swiftui-lab.com/wwdc-2020-is-here/#comments</comments>
		
		<dc:creator><![CDATA[javier]]></dc:creator>
		<pubDate>Wed, 24 Jun 2020 10:47:56 +0000</pubDate>
				<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">https://swiftui-lab.com/?p=1868</guid>

					<description><![CDATA[<p>WWDC 2020 finally arrived. I bet you are excited with all the new toys we&#8217;ve been given. I sure am! In the upcoming weeks, I know I will be busy updating the blog. Both revising all articles and writing new ones. I will be also updating the Companion for SwiftUI app, to make sure it ... <a title="WWDC 2020 Has Come and Gone" class="read-more" href="https://swiftui-lab.com/wwdc-2020-is-here/" aria-label="More on WWDC 2020 Has Come and Gone">Read more</a></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/wwdc-2020-is-here/">WWDC 2020 Has Come and Gone</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1000" height="574" src="https://swiftui-lab.com/wp-content/uploads/2020/06/lazyviews.jpg" alt="WWDC2020" class="wp-image-1885" srcset="https://swiftui-lab.com/wp-content/uploads/2020/06/lazyviews.jpg 1000w, https://swiftui-lab.com/wp-content/uploads/2020/06/lazyviews-300x172.jpg 300w, https://swiftui-lab.com/wp-content/uploads/2020/06/lazyviews-768x441.jpg 768w" sizes="(max-width: 1000px) 100vw, 1000px" /></figure></div>



<p>WWDC 2020 finally arrived. I bet you are excited with all the new toys we&#8217;ve been given. I sure am!<br><br>In the upcoming weeks, I know I will be busy updating the blog. Both revising all articles and writing new ones. I will be also updating the Companion for SwiftUI app, to make sure it includes all the new additions of this year&#8217;s event.</p>



<p>Please bear with me while I get all this sorted, as I don&#8217;t want to rush and publish too many errors or misconceptions. In the meantime, I encourage you to comment below, and tell me what topics of the new SwiftUI version you find more puzzling or difficult. What subjects you think would be nice for a new article.</p>



<p>In the meantime, here&#8217;s the list of all the SwiftUI related WWDC2020 videos with their links and durations:</p>



<figure class="wp-block-table"><table><thead><tr><th class="has-text-align-center" data-align="center"></th><th>Session</th><th class="has-text-align-center" data-align="center">Duration</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center">1</td><td><a href="https://developer.apple.com/wwdc20/10119" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">Introduction to SwiftUI</a></td><td class="has-text-align-center" data-align="center">54m</td></tr><tr><td class="has-text-align-center" data-align="center">2</td><td><a href="https://developer.apple.com/wwdc20/10041">What&#8217;s new in </a><a aria-label="undefined (opens in a new tab)" href="https://developer.apple.com/wwdc20/10041" target="_blank" rel="noreferrer noopener">SwiftUI</a></td><td class="has-text-align-center" data-align="center">27m</td></tr><tr><td class="has-text-align-center" data-align="center">3</td><td><a href="https://developer.apple.com/wwdc20/10042" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">Build SwiftUI apps for tvOS</a></td><td class="has-text-align-center" data-align="center">14m</td></tr><tr><td class="has-text-align-center" data-align="center">4</td><td><a aria-label="undefined (opens in a new tab)" href="https://developer.apple.com/wwdc20/10048" target="_blank" rel="noreferrer noopener">Build </a><a href="https://developer.apple.com/wwdc20/10048" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">c</a><a aria-label="undefined (opens in a new tab)" href="https://developer.apple.com/wwdc20/10048" target="_blank" rel="noreferrer noopener">omplications in SwiftUI</a></td><td class="has-text-align-center" data-align="center">27m</td></tr><tr><td class="has-text-align-center" data-align="center">5</td><td><a aria-label="undefined (opens in a new tab)" href="https://developer.apple.com/wwdc20/10649" target="_blank" rel="noreferrer noopener">Add custom views and modifiers to the Xcode library</a></td><td class="has-text-align-center" data-align="center">13m</td></tr><tr><td class="has-text-align-center" data-align="center">6</td><td><a aria-label="undefined (opens in a new tab)" href="https://developer.apple.com/wwdc20/10037" target="_blank" rel="noreferrer noopener">App </a><a href="https://developer.apple.com/wwdc20/10037" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">e</a><a aria-label="undefined (opens in a new tab)" href="https://developer.apple.com/wwdc20/10037" target="_blank" rel="noreferrer noopener">ssentials in SwiftUI</a></td><td class="has-text-align-center" data-align="center">15m</td></tr><tr><td class="has-text-align-center" data-align="center">7</td><td><a href="https://developer.apple.com/wwdc20/10185" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">Visually edit SwiftUI views</a></td><td class="has-text-align-center" data-align="center">5m</td></tr><tr><td class="has-text-align-center" data-align="center">8</td><td><a href="https://developer.apple.com/wwdc20/10643" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">Build a SwiftUI view in Swift Playgrounds</a></td><td class="has-text-align-center" data-align="center">14m</td></tr><tr><td class="has-text-align-center" data-align="center">9</td><td><a href="https://developer.apple.com/wwdc20/10039" target="_blank" rel="noreferrer noopener">Build document-based apps in SwiftUI</a></td><td class="has-text-align-center" data-align="center">12m</td></tr><tr><td class="has-text-align-center" data-align="center">10</td><td><a href="https://developer.apple.com/wwdc20/10031" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">Stacks, Grids, and Outlines in SwiftUI</a></td><td class="has-text-align-center" data-align="center">19m</td></tr><tr><td class="has-text-align-center" data-align="center">11</td><td><a href="https://developer.apple.com/wwdc20/10033" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">Build SwiftUI views for widgets</a></td><td class="has-text-align-center" data-align="center">20m</td></tr><tr><td class="has-text-align-center" data-align="center">12</td><td><a href="https://developer.apple.com/wwdc20/10040" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">Data Essentials in SwiftUI</a></td><td class="has-text-align-center" data-align="center">36m</td></tr><tr><td class="has-text-align-center" data-align="center">13</td><td><a href="https://developer.apple.com/wwdc20/10207" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">SF Symbols 2</a></td><td class="has-text-align-center" data-align="center">18m</td></tr><tr><td class="has-text-align-center" data-align="center">14</td><td><a href="https://developer.apple.com/wwdc20/10149" target="_blank" aria-label="undefined (opens in a new tab)" rel="noreferrer noopener">Structure your app for SwiftUI previews</a></td><td class="has-text-align-center" data-align="center">33m</td></tr></tbody></table></figure>



<p></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/wwdc-2020-is-here/">WWDC 2020 Has Come and Gone</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://swiftui-lab.com/wwdc-2020-is-here/feed/</wfw:commentRss>
			<slash:comments>5</slash:comments>
		
		
			</item>
		<item>
		<title>Working with Focus on SwiftUI Views</title>
		<link>https://swiftui-lab.com/working-with-focus-on-swiftui-views/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=working-with-focus-on-swiftui-views</link>
					<comments>https://swiftui-lab.com/working-with-focus-on-swiftui-views/#respond</comments>
		
		<dc:creator><![CDATA[javier]]></dc:creator>
		<pubDate>Thu, 04 Jun 2020 17:24:09 +0000</pubDate>
				<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">https://swiftui-lab.com/?p=1718</guid>

					<description><![CDATA[<p>In this post, we are going to explore what tools SwiftUI offers to handle the focus on custom views. We will also explore the limitations, and what hacks we can use to get around them. SwiftUI on macOS has a single modifier to configure our view focus: focusable(). It receives two optional parameters (more on ... <a title="Working with Focus on SwiftUI Views" class="read-more" href="https://swiftui-lab.com/working-with-focus-on-swiftui-views/" aria-label="More on Working with Focus on SwiftUI Views">Read more</a></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/working-with-focus-on-swiftui-views/">Working with Focus on SwiftUI Views</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>In this post, we are going to explore what tools SwiftUI offers to handle the focus on custom views. We will also explore the limitations, and what hacks we can use to get around them.</p>



<p>SwiftUI on macOS has a single modifier to configure our view focus: <strong><a rel="noreferrer noopener" href="https://developer.apple.com/documentation/swiftui/view/3278564-focusable" target="_blank">focusable()</a></strong>. It receives two optional parameters (more on that later). In its default form, by adding this modifier to a view, you are indicating that the view can receive the focus. In AppKit terms we would say it can become the first responder.</p>



<p>In the following code, the yellow and green shapes can get the focus. In fact, because the yellow shape is the first focusable element of the window, it gets it by default.</p>



<div class="wp-block-image epigrafe"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="404" height="237" src="https://swiftui-lab.com/wp-content/uploads/2020/06/Focus-Example1.gif" alt="Focus Example 1" class="wp-image-1836"/><figcaption>Use TAB and SHIFT+TAB to move the focus</figcaption></figure></div>



<pre class="wp-block-code language-swift"><code>struct ContentView: View {
    var body: some View {
        HStack {
            VStack {
                Circle().fill(Color.yellow)

                HStack {
                    Circle().fill(Color.yellow)

                    Circle().fill(Color.yellow)

                }
            }.focusable()

            Rectangle().fill(Color.red)

            Circle().fill(Color.green)
                .focusable()
            
        }
        .padding(20)
        .frame(width: 300, height: 100)
    }
}</code></pre>



<p>As you can observe, SwiftUI handles the focus ring, and it even provides the proper shape for it.</p>



<h3 class="wp-block-heading">Focusable Parameters</h3>



<p>The <strong>focusable()</strong> modifier has two parameters:</p>



<pre class="wp-block-code language-swift"><code>func focusable(_ isFocusable: Bool = true, onFocusChange: @escaping (Bool) -&gt; Void = { _ in }) -&gt; some View</code></pre>



<p>The first parameter, <strong>isFocusable</strong>, will be true if omitted (as in the example above). If set to false, the view will behave as if the focusable() modifier wasn&#8217;t there. Suppose you have a view that needs to activate and deactivate the possibility of having focus, this is the parameter to do so.</p>



<p>The second parameter let us specify a closure to execute when the view gains or loses focus. It receives a boolean indicating so.</p>



<h3 class="wp-block-heading">Focus on Standard Controls</h3>



<p>It&#8217;s worth mentioning that views for standard controls, such as TextField, Picker, Toggle and the like, do not need focusable() to be called on them. In fact, you should avoid that. For example, If you do the following, you will end up with two focus rings, and you will be required to hit TAB twice, in order to move between the views.</p>



<pre class="wp-block-code language-swift"><code>TextField(&quot;&quot;, text: self.$text).focusable()</code></pre>



<p>TextField is, for all intents and purposes, an NSViewRepresentable of a NSTextField (or something very similar). So when you add focusable() on TextField, you are putting a ring on the NSViewRepresentable, in additional to the one already existing in the wrapped NSTextField.</p>



<p>You probably noticed that although you cannot click to focus on a view, clicking on TextField works just fine. How does TextField do it? Simple, since it&#8217;s backed by NSTextField, there&#8217;s nothing it cannot do.</p>



<h3 class="wp-block-heading">Limitations</h3>



<p>As you can observe, SwiftUI handles the focus ring, and it even provides the proper shape. All is good and simple, but as with everything in SwiftUI at the moment, there are some big limitations:</p>



<ul><li>Setting the focus programmatically, as far as I know, is not possible.</li><li>There is no way of specifying the view order in which the focus moves.</li><li>Focus can only be moved with the TAB and SHIFT-TAB keys. Clicks have no effect.</li><li>The TAB and SHIFT+TAB navigation keys will only work if the system preferences in macOS are as shown below.</li></ul>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="780" height="693" src="https://swiftui-lab.com/wp-content/uploads/2020/02/focus-preferences.png" alt="" class="wp-image-1729" srcset="https://swiftui-lab.com/wp-content/uploads/2020/02/focus-preferences.png 780w, https://swiftui-lab.com/wp-content/uploads/2020/02/focus-preferences-300x267.png 300w, https://swiftui-lab.com/wp-content/uploads/2020/02/focus-preferences-768x682.png 768w" sizes="(max-width: 780px) 100vw, 780px" /></figure></div>



<p>If you have a view that needs clickable focus, you may need to either implement it as an NSView with NSViewRepresentable. Or&#8230; you can use the hack we learnt in the previous post (<a href="https://swiftui-lab.com/a-powerful-combo/">The Power of the Hosting+Representable Combo</a>), as we will explore next.</p>



<h3 class="wp-block-heading">Hacking the Focus</h3>



<p>As always, the customary warning. Proceed with caution with the next bit. This is only a hack. Remember this is a blog with emphasis on experimentation (hence the &#8220;lab&#8221; name). With the following example we are trying to find the limits of what is possible with the tools that we have been given.</p>



<p>By using the representable hosting view, we are going to achieve SwiftUI views that can be clicked to get focus. We will also make it possible to assign a focus index number to each view, so we can programatically move the focus from one view to another, and even remove the focus completely.</p>



<p>The code is a starting point, and there are plenty of ways in which it can be improved.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="600" height="413" src="https://swiftui-lab.com/wp-content/uploads/2020/06/Focus-Example2.gif" alt="Focus Example 2" class="wp-image-1844"/></figure></div>



<p>As you can observe, the focus is bound to an environment value. Clicking on a value changes the environment value, but also changing the environment value will change the focus as well. I think this is a very SwiftUI way of handling the focus. I&#8217;m hoping that sooner rather than later, we will see something like this supported natively.</p>



<pre class="wp-block-code language-swift"><code>struct ContentView: View {
    var body: some View {
        MainView()
    }
}

struct MainView: View {
    @State private var selectedFocusIdx = 2
    
    var body: some View {
        VStack {
            HStack {
                Circle().fill(Color.yellow)
                    .focusableWithClick(focusIndex: 1)
                
                VStack {
                    Circle().fill(Color.orange)
                    
                    HStack {
                        Circle().fill(Color.orange)
                        
                        Circle().fill(Color.orange)
                    }
                }
                .focusableWithClick(focusIndex: 2)
                
                Circle().fill(Color.red)
                    .focusableWithClick(focusIndex: 3)
                
            }.padding(.bottom, 40.0)
            
            HStack {
                Button(&quot;Deselect All&quot;)  { self.selectedFocusIdx = 0 }
                Button(&quot;1&quot;) { self.selectedFocusIdx = 1 }
                Button(&quot;2&quot;) { self.selectedFocusIdx = 2 }
                Button(&quot;3&quot;) { self.selectedFocusIdx = 3 }
            }
            
            Text(&quot;Idx = \(self.selectedFocusIdx)&quot;).font(.headline)

        }
        .environment(\.selectedFocusIndex, $selectedFocusIdx)
        .padding(20)
        .frame(width: 500, height: 300)
    }    
}</code></pre>



<p>And the magic of the &#8220;questionable&#8221; hack, follows:</p>



<pre class="wp-block-code language-swift"><code>extension View {
    func focusableWithClick(focusIndex: Int = 0) -&gt; some View {
        return Focusable(focusIndex: focusIndex) { self }
    }
}

struct SelectedFocusIndexKey: EnvironmentKey {
    public static let defaultValue: Binding&lt;Int&gt; = Binding&lt;Int&gt;(get: { return 0 }, set: { _ in })
}

extension EnvironmentValues {
    var selectedFocusIndex: Binding&lt;Int&gt; {
        get { self&#091;SelectedFocusIndexKey.self] }
        set { self&#091;SelectedFocusIndexKey.self] = newValue }
    }
}

struct Focusable&lt;Content&gt;: View where Content : View {
    @Environment(\.selectedFocusIndex) var selectedIndex
    
    let content: () -&gt; Content
    let focusIndex: Int
    
    init(focusIndex: Int, @ViewBuilder content: @escaping () -&gt; Content) {
        self.focusIndex = focusIndex
        self.content = content
    }
    
    var body: some View {
        let onFocusChange: (Bool) -&gt; Void = { isFocused in
            DispatchQueue.main.async {
                if isFocused {
                    self.selectedIndex.wrappedValue = self.focusIndex
                } else {
                    self.selectedIndex.wrappedValue = 0
                }
            }
        }
        
        let v = self.content().focusable(onFocusChange: onFocusChange)
        
        return MyRepresentable(focusIndex: self.focusIndex, onFocusChange: onFocusChange, content: v)
    }
}

struct MyRepresentable&lt;Content&gt;: NSViewRepresentable where Content: View {
    @Environment(\.selectedFocusIndex) var selectedIndex
    @State private var lastValue = 0
    
    let focusIndex: Int
    let onFocusChange: (Bool) -&gt; Void
    let content: Content
    
    func makeNSView(context: Context) -&gt; NSHostingView&lt;Content&gt; {
        return FocusableNSHostingView(rootView: self.content, focusIndex: self.focusIndex, onFocusChange: onFocusChange)
    }
    
    func updateNSView(_ nsView: NSHostingView&lt;Content&gt;, context: Context) {
        let hostingView = (nsView as! FocusableNSHostingView)
        
        if self.selectedIndex.wrappedValue == hostingView.focusIndex, self.selectedIndex.wrappedValue != self.lastValue {
            DispatchQueue.main.async {
                self.lastValue = self.selectedIndex.wrappedValue
                hostingView.claimFocus()
            }
        } else if self.lastValue != 0, self.selectedIndex.wrappedValue == 0 {
            DispatchQueue.main.async {
                self.lastValue = self.selectedIndex.wrappedValue
                hostingView.clearFocus()
            }
        } else {
            DispatchQueue.main.async {
                self.lastValue = self.selectedIndex.wrappedValue
            }
        }
    }
}

class FocusableNSHostingView&lt;Content&gt;: NSHostingView&lt;Content&gt; where Content : View {
    
    let focusIndex: Int
    let onFocusChange: (Bool) -&gt; Void
    
    init(rootView: Content, focusIndex: Int, onFocusChange: @escaping (Bool) -&gt; Void) {
        self.focusIndex = focusIndex
        self.onFocusChange = onFocusChange
        super.init(rootView: rootView)
    }
    
    required init(rootView: Content) {
        fatalError(&quot;init(rootView:) has not been implemented&quot;)
    }
    
    @objc required dynamic init?(coder aDecoder: NSCoder) {
        fatalError(&quot;init(coder:) has not been implemented&quot;)
    }
    
    override func mouseDown(with event: NSEvent) {
        self.claimFocus()
        
        super.mouseDown(with: event)
    }
    
    func claimFocus() {
        // Here&#039;s the magic!
        // Find the NSView that should receive the focus and make it the first responder.
        
        // By experimentation, the view&#039;s class name is something like this: xxxxxxxxxxxx_FocusRingView
        if let focusRingView = self.subviews.first(where: { NSStringFromClass(type(of: $0)).contains(&quot;FocusRingView&quot;) }) {
            self.window?.makeFirstResponder(focusRingView)
            self.onFocusChange(true)
        }
    }
    
    func clearFocus() {
        self.window?.makeFirstResponder(nil)
    }
}</code></pre>



<h3 class="wp-block-heading">Almost There</h3>



<p>Now, if you tried the code, you may see some ugly warnings in the console, with a message like this:</p>



<p><code>Setting &lt;_TtGC7onHover22FocusableNSHostingViewGV7SwiftUI15ModifiedContentGVS1_10_ShapeViewVS1_6CircleVS1_5Color_VS1_18_FocusableModifier__: 0x100850c00&gt; as the first responder for window , but it is in a different window ((null))! This would eventually crash when the view is freed. The first responder will be set to nil.</code></p>



<p>Although the warning does not seem to have any adverse effect, I don&#8217;t like warnings. Well&#8230;, not true. I do like warnings, because they warn me and prevent future problems. However, I like it better when I can eradicate them.</p>



<p>In this case, the message seems to indicate that the view is not yet assigned to the window, when SwiftUI tries to set the first responder on our Representable. A quick way of getting rid of the message, is by modifying our ContentView:</p>



<pre class="wp-block-code language-swift"><code>struct ContentView: View {
    @State private var flag = false

    var body: some View {
        Group {
            if !flag {
                Color.clear.onAppear { self.flag = true }
            } else {
                MainView()
            }
        }
    }
}
</code></pre>



<h3 class="wp-block-heading">Summary</h3>



<p>In this post we have explored all about how to handle the focus on SwiftUI views on macOS Catalina. The next WWDC is just around the corner, and I&#8217;m hoping the limitations we exposed here, will no longer exist soon.</p>



<p>Please feel free to comment below, and follow me on twitter if you would like to be notified when new articles come out. Until next time!</p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/working-with-focus-on-swiftui-views/">Working with Focus on SwiftUI Views</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://swiftui-lab.com/working-with-focus-on-swiftui-views/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>The Power of the Hosting+Representable Combo</title>
		<link>https://swiftui-lab.com/a-powerful-combo/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=a-powerful-combo</link>
					<comments>https://swiftui-lab.com/a-powerful-combo/#comments</comments>
		
		<dc:creator><![CDATA[javier]]></dc:creator>
		<pubDate>Wed, 04 Mar 2020 14:04:19 +0000</pubDate>
				<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">https://swiftui-lab.com/?p=1736</guid>

					<description><![CDATA[<p>If you are allergic to hacks, you should probably stay away from the code in this article. However, if you continue, know that we will explore the powerful effects of combining Hosting Views with View Representables. Many times I found myself with a SwiftUI view and wishing I could access the AppKit/UIKit stuff behind it. ... <a title="The Power of the Hosting+Representable Combo" class="read-more" href="https://swiftui-lab.com/a-powerful-combo/" aria-label="More on The Power of the Hosting+Representable Combo">Read more</a></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/a-powerful-combo/">The Power of the Hosting+Representable Combo</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>If you are allergic to hacks, you should probably stay away from the code in this article. However, if you continue, know that we will explore the powerful effects of combining Hosting Views with View Representables. Many times I found myself with a SwiftUI view and wishing I could access the AppKit/UIKit stuff behind it. We both know it&#8217;s there, so let&#8217;s see how we can tap on it.</p>



<p>To achieve this, we will be using NSHostingView+NSViewRepresentable in macOS, and UIHostingController+UIViewControllerRepresentable in iOS. The concept is the same in both cases, but I will present a useful example for each platform.</p>



<h2 class="wp-block-heading"><strong>A Simple Idea</strong></h2>



<p>Although our SwiftUI views are not NSView nor UIView objects, they do end up inserted in the AppKit/UIKit view hierarchy in some way. By using representables and hosting views together, we will make that connection visible to us.</p>



<p>I&#8217;ll describe it in macOS terms, but the same applies to iOS.</p>



<p>We know that in SwiftUI, an NSViewRepresentable is used to make an NSView to look like a SwiftUI view. On the other hand, an NSHostingView is used to make a SwiftUI view look like an NSView. In both cases we are wrapping our views.</p>



<p>To get the best of both worlds, we are going to use a combo of both wrappers. We will wrap a SwiftUI view inside an NSHostingView and in turn, we will wrap the resulting hosting view, inside an NSViewRepresentable. Our examples will explore the benefits of this double-wrap. We will start with macOS.</p>



<h2 class="wp-block-heading"><strong>Mouse Tracking Areas on SwiftUI Views (macOS Example)</strong></h2>



<p>If you used the onHover modifier in SwiftUI, you may have notice that the closure gets called once when the mouse enters the view, and once when it exits. That&#8217;s it. But if you want your closure to be called when the mouse moves around and get its position, you are out of luck. You may also want your closure to be called when the mouse enters your view, even when the app is not active. In AppKit, that&#8217;s easily solved with NSTrackingArea, so our goal is to make it possible for our SwiftUI views to use NSTrackingAreas too.</p>



<p>There may be other ways to solve this problem, for example, using NSEvent.addLocalMonitorForEvents(). But we won&#8217;t use that here.</p>



<p>We will hide all the implementation behind a container view named <strong>TrackingAreaView</strong>, which can be used like this:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">TrackinAreaView(onMove: { location in print(&quot;\(location)&quot;) }) {
    Rectangle()
        .fill(Color.red)
}</code></pre>



<p>The <strong>onMove</strong> parameter lets us provide a closure to execute, when the mouse is moved over the view. But for better readability, we will also add this View extension:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">extension View {
    func trackingMouse(onMove: @escaping (NSPoint) -&gt; Void) -&gt; some View {        
        TrackinAreaView(onMove: onMove) { self }
    }
}</code></pre>



<p>and now our code gets simplified like this:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">Rectangle()
    .fill(Color.red)
    .trackingMouse { location in
        print(&quot;\(location)&quot;)
    }</code></pre>



<p>Now that we know what we want to achieve, let&#8217;s get our hands dirty. I&#8217;ll start by showing you the end result and the ContentView code:</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="458" height="369" src="https://swiftui-lab.com/wp-content/uploads/2020/03/tracking1.gif" alt="mouseMove" class="wp-image-1747"/></figure></div>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    @State private var point1: NSPoint = .zero
    @State private var point2: NSPoint = .zero
    
    var body: some View {
        
        HStack {
            VStack {
                Rectangle().fill(Color.green)
                    .trackingMouse { location in
                        self.point1 = location
                    }
                    .clipped()
                
                Text(&quot;\(String(format: &quot;X = %.0f, Y = %.0f&quot;, self.point1.x, self.point1.y))&quot;)
            }
            

            VStack {
                Rectangle().fill(Color.blue)
                    .trackingMouse { location in
                        self.point2 = location
                    }
                    .clipped()

                Text(&quot;\(String(format: &quot;X = %.0f, Y = %.0f&quot;, self.point2.x, self.point2.y))&quot;)
            }
            
        }
        .padding(20)
        .frame(maxWidth: .infinity, maxHeight: .infinity)
    }
}</code></pre>



<p>Now it&#8217;s time to uncover the implementation of TrackingAreaView. The code may be too verbose, but in reality the &#8220;cool stuff&#8221; only happens in &#8220;setupTrackingArea()&#8221; and &#8220;mouseMoved()&#8221;.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">extension View {
    func trackingMouse(onMove: @escaping (NSPoint) -&gt; Void) -&gt; some View {
        TrackinAreaView(onMove: onMove) { self }
    }
}

struct TrackinAreaView&lt;Content&gt;: View where Content : View {
    let onMove: (NSPoint) -&gt; Void
    let content: () -&gt; Content
    
    init(onMove: @escaping (NSPoint) -&gt; Void, @ViewBuilder content: @escaping () -&gt; Content) {
        self.onMove = onMove
        self.content = content
    }
    
    var body: some View {
        TrackingAreaRepresentable(onMove: onMove, content: self.content())
    }
}

struct TrackingAreaRepresentable&lt;Content&gt;: NSViewRepresentable where Content: View {
    let onMove: (NSPoint) -&gt; Void
    let content: Content
    
    func makeNSView(context: Context) -&gt; NSHostingView&lt;Content&gt; {
        return TrackingNSHostingView(onMove: onMove, rootView: self.content)
    }
    
    func updateNSView(_ nsView: NSHostingView&lt;Content&gt;, context: Context) {
    }
}

class TrackingNSHostingView&lt;Content&gt;: NSHostingView&lt;Content&gt; where Content : View {
    let onMove: (NSPoint) -&gt; Void
    
    init(onMove: @escaping (NSPoint) -&gt; Void, rootView: Content) {
        self.onMove = onMove
        
        super.init(rootView: rootView)
        
        setupTrackingArea()
    }
    
    required init(rootView: Content) {
        fatalError(&quot;init(rootView:) has not been implemented&quot;)
    }
    
    @objc required dynamic init?(coder aDecoder: NSCoder) {
        fatalError(&quot;init(coder:) has not been implemented&quot;)
    }

    func setupTrackingArea() {
        let options: NSTrackingArea.Options = [.mouseMoved, .activeAlways, .inVisibleRect]
        self.addTrackingArea(NSTrackingArea.init(rect: .zero, options: options, owner: self, userInfo: nil))
    }
        
    override func mouseMoved(with event: NSEvent) {
        self.onMove(self.convert(event.locationInWindow, from: nil))
    }
}</code></pre>



<p>The <strong>TrackingAreaView</strong> is just a container, that passes its contents to an NSViewRepresentable (<strong>TrackingAreaRepresentable</strong>). And the NSView produced by that NSViewRepresentable is just an NSHostingView (<strong>TrackingNSHostingView</strong>), using the container contents as its rootView.</p>



<p>In its simplest form, that would not have any effect in the output. We are wrapping a SwiftUI view inside an NSView, and then wrapping that NSView back into a SwiftUI view. However, the benefit comes from the fact that once we have an NSView to play with, that&#8217;s when we get the party started. We have successfully hooked ourselves into the point of the AppKit view hierarchy where our original SwiftUI view has been inserted.</p>



<p>In this particular example, we simply added a parameter where we specify a closure to be executed when the NSView mouseMoved() event fires.</p>



<p>I intentionally made the added functionality simple, in order to get my point across. However, it&#8217;s possible to modify our example, so it becomes even more flexible. For example, you could change the implementation to receive more parameters. Let&#8217;s say, area options and an array of areas to track. I&#8217;ll leave this as an exercise, in case you&#8217;re interested in exploring more.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">Rectangle().fill(Color.green)
    .trackingMouse(options: [.mouseEnteredAndExited, .mouseMoved, .activeAlways], rects: [areas]) { loc in
        ...
    }</code></pre>



<h2 class="wp-block-heading"><strong>ScrollView&#8217;s Scroll Value (iOS Example)</strong></h2>



<p>If there is one big feature missing from ScrollView, that is the fact that you cannot programmatically set nor get the scroll position. In the following example, we will deal with that.</p>



<figure class="wp-block-video aligncenter"><video autoplay controls loop src="https://swiftui-lab.com/wp-content/uploads/2020/03/ScrollView.mp4"></video></figure>



<p>The usage is very simple. We will define a @State variable to hold the ScrollView&#8217;s position. If we modify the value, the ScrollView should respond by scrolling. But if the user performs a scroll gesture, the @State variable should update too.</p>



<p>This is very close to what I think should be the &#8220;SwiftUI way&#8221; of handling this issue. If in the next iteration of SwiftUI Apple adds this feature, the binding will most likely be specified as a parameter to the ScrollView, but in our case, we will make a separate view extension called <strong>scrollOffset(offset:)</strong>.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    @State private var scrollOffset: CGFloat = 0
    
    var body: some View {
        VStack {
            Group {
                Text(&quot;Current position: \(self.scrollOffset)&quot;)
                
                HStack(spacing: 30) {
                    Button(&quot;0pt&quot;) { self.scrollOffset = 0 }
                    
                    Button(&quot;100pt&quot;) { self.scrollOffset = 100 }
                    
                    Button(&quot;800pt&quot;) { self.scrollOffset = 800 }
                }
            }.font(.headline)

            ScrollView {
                ForEach(0..&lt;100) { idx in
                    HStack {
                        Text(&quot;Row number \(idx)&quot;)
                        Spacer()
                    }
                }
            }
            .padding(10)
            .scrollOffset(self.$scrollOffset)
        }
    }
}</code></pre>



<p>And here goes the implementation</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">extension View {
    func scrollOffset(_ position: Binding&lt;CGFloat&gt;) -&gt; some View {
        return ScrollViewWrapper(offset: position) { self }
    }
}

struct ScrollViewWrapper&lt;Content&gt;: View where Content : View {
    let offset: Binding&lt;CGFloat&gt;
    let content: () -&gt; Content

    init(offset: Binding&lt;CGFloat&gt;, @ViewBuilder content: @escaping () -&gt; Content) {
        self.offset = offset
        self.content = content
    }

    var body: some View {
        ScrollViewRepresentable(offset: offset, content: self.content())
    }
}

struct ScrollViewRepresentable&lt;Content&gt;: UIViewControllerRepresentable where Content: View {
    typealias UIViewControllerType = ScrollViewUIHostingController&lt;Content&gt;
    
    @Binding var offset: CGFloat
    let content: Content
    
    func makeUIViewController(context: UIViewControllerRepresentableContext&lt;ScrollViewRepresentable&lt;Content&gt;&gt;) -&gt; ScrollViewUIHostingController&lt;Content&gt; {
        return ScrollViewUIHostingController(offset: self.$offset, rootView: self.content)
    }
    
    func updateUIViewController(_ uiViewController: ScrollViewUIHostingController&lt;Content&gt;, context: UIViewControllerRepresentableContext&lt;ScrollViewRepresentable&lt;Content&gt;&gt;) {
        uiViewController.scroll(position: self.offset)
    }
}

class ScrollViewUIHostingController&lt;Content&gt;: UIHostingController&lt;Content&gt; where Content : View {
    var offset: Binding&lt;CGFloat&gt;
    
    var ready = false
    var scrollView: UIScrollView? = nil
    
    init(offset: Binding&lt;CGFloat&gt;, rootView: Content) {
        self.offset = offset
        super.init(rootView: rootView)
    }
    
    @objc required dynamic init?(coder aDecoder: NSCoder) {
        fatalError(&quot;init(coder:) has not been implemented&quot;)
    }
    
        override func viewDidAppear(_ animated: Bool) {
        // observer is added from viewDidAppear, in order to
        // make sure the SwiftUI view is already in place
        if ready { return } // avoid running more than once
        
        ready = true
        
        self.scrollView = findUIScrollView(view: self.view)
        
        self.scrollView?.addObserver(self, forKeyPath: #keyPath(UIScrollView.contentOffset), options: [.old, .new], context: nil)
        
        self.scroll(position: self.offset.wrappedValue, animated: false)
        super.viewDidAppear(animated)
    }
    
    override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {
        if keyPath == #keyPath(UIScrollView.contentOffset) {
            if let sv = self.scrollView {
                DispatchQueue.main.async {                    
                    self.offset.wrappedValue = sv.contentOffset.y
                }
            }
        }
    }
    
    func scroll(position: CGFloat, animated: Bool = true) {
        if let sv = self.scrollView {
            if position != sv.contentOffset.y {
                self.scrollView?.setContentOffset(CGPoint(x: 0, y: position), animated: animated)
            }
        }
    }
    
    func findUIScrollView(view: UIView?) -&gt; UIScrollView? {
        if view?.isKind(of: UIScrollView.self) ?? false {
            return (view as? UIScrollView)
        }
        
        for v in view?.subviews ?? [] {
            if let vc = findUIScrollView(view: v) {
                return vc
            }
        }
        
        return nil
    }
    
    deinit {
        self.scrollView?.removeObserver(self, forKeyPath: #keyPath(UIScrollView.contentOffset))
    }
}</code></pre>



<p>The concept remains the same, but it in this case there&#8217;s a little hack we need to put in place. We know that ScrollView is backed by a UIScrollView subclass, and we need to get hold of that UIScrollView, in order to be able to set and get its contentOffset property. To do so, we start with the UIHostingController&#8217;s top view and begin to descend the hierarchy of views, until we find one that returns true for <strong>isKind(of: UIScrollView.self)</strong>.</p>



<p>When we programmatically change the scroll offset binding, the <strong>updateUIViewController</strong>() function will get automatically called. That&#8217;s our chance to tell <strong>ScrollViewUIHostingController</strong> to scroll the <strong>UIScrollView</strong>.</p>



<p>On the other hand, if the user performs a scroll gesture, the UIScrollView.contentOffset value changes. For that we use KVO to be notified. When that happens, we update the wrappedValue of our binding. You may be tempted to set a delegate on the UIScrollView, but that may interfere with the inner workings of SwiftUI. Instead we use KVO.</p>



<h2 class="wp-block-heading">A Nice Surprise</h2>



<p>While I was testing this technique, I thought that by double-wrapping a view, the environment somehow would get lost in the process. Fortunately, that does not seem to happen.  In the ScrollView example, you can call .environment (or .environmentObject), higher in the hierarchy. Still, the contents of the ScrollView will inherit the environment accordingly. That was a nice surprise.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">VStack {
    ScrollView {
        ForEach(0..&lt;100) { idx in
            RowView(idx)
        }
    }.scrollOffset(self.$scrollOffset)
}.environment(\.colorScheme, .dark)</code></pre>



<h2 class="wp-block-heading">An Unpleasant Surprise</h2>



<p>After I published this article, I found a small problem that you need to be aware of. In the following code, I have created a modifier called wrap(), which does the usual double-wrap described in the previous examples, but nothing more.</p>



<p>In the code below, I added it in two places. Both should have the same effect. However, one of them, will stop the contained view from reacting to state changes (in this case, rotating).</p>



<p>With this in mind, if the view being double-wrapped needs to react to state changes, it is best if you encapsulate it. Then call your modifier from the outside. It is an unfortunate complication, but the workaround seems to work so far.</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct ContentView: View {
    @State private var flag = false
    
    var body: some View {
        VStack {
            MyRectangle(flag: self.$flag)
                .wrap() // This wrap works fine
            
            Button(&quot;Rotate&quot;) { self.flag.toggle() }
        }
    }
    
    struct MyRectangle: View {
        @Binding var flag: Bool
        
        var body: some View {
            Rectangle()
                .frame(width: 80, height: 80)
                .padding(20)
                .rotationEffect(self.flag ? Angle.degrees(45) : .zero)
                // .wrap() // &lt;-- Wrapping the view here, prevents the view from reacting to state changes
        }
    }
}</code></pre>



<h2 class="wp-block-heading">A Word of Caution</h2>



<p>If you decide to use any of these techniques on production code, make sure you thoroughly test it. Special attention should be given to memory management. Both &#8220;Representables&#8221; and &#8220;Hosting Views&#8221; are known to have some bugs that may produce memory leaks now and then. If your views get allocated once, that&#8217;s not a big problem. However, if the views that use this technique get created and destroyed a lot, you should monitor if deallocation is happening as it should. One quick way to test it, is to print a log message in the <strong>deinit</strong> method.</p>



<p>The other thing to have in mind, is the fact that these views you create, may stop working at any time should Apple change their internals. If they do, however, I expect that to happen during the next big update (i.e., WWDC), when the limitations we are trying to overcome will probably get solved (fingers crossed). Should that be the case, there will be plenty of time to update our code accordingly and we will also have fallback code that we can use to maintain compatibility with iOS13 and macOS Catalina.</p>



<h2 class="wp-block-heading">Summary</h2>



<p>We have seen how powerful it could be to use Representables and Hosting Views together. By doing so, we find ourselves hooked into the window&#8217;s view hierarchy, at the point where our SwiftUI view is inserted. This provides us with the chance to bridge into AppKit/UIKit. Of course, this is a hack, but a powerful one&#8230; and as such, it should be used responsibly.</p>



<p>The native focus support in SwiftUI has its own limitations, which we can be overcome using this technique. If you want more examples on how to double-wrap, check <a href="https://swiftui-lab.com/working-with-focus-on-swiftui-views/">Working with Focus on SwiftUI Views</a></p>



<p>Please feel free to comment below, and follow me on twitter if you would like to be notified when new articles come out. Until next time!</p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/a-powerful-combo/">The Power of the Hosting+Representable Combo</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://swiftui-lab.com/a-powerful-combo/feed/</wfw:commentRss>
			<slash:comments>10</slash:comments>
		
		<enclosure url="https://swiftui-lab.com/wp-content/uploads/2020/03/ScrollView.mp4" length="398762" type="video/mp4" />

			</item>
		<item>
		<title>Drag &#038; Drop with SwiftUI</title>
		<link>https://swiftui-lab.com/drag-drop-with-swiftui/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=drag-drop-with-swiftui</link>
					<comments>https://swiftui-lab.com/drag-drop-with-swiftui/#comments</comments>
		
		<dc:creator><![CDATA[javier]]></dc:creator>
		<pubDate>Mon, 17 Feb 2020 15:25:46 +0000</pubDate>
				<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">https://swiftui-lab.com/?p=1670</guid>

					<description><![CDATA[<p>SwiftUI incorporates some methods and protocols to easily perform Drag and Drop operations. Until iOS 13.4, most of these methods were macOS exclusive. Fortunately, that changed with the latest iOS13.4 beta release. Drag and Drop with SwiftUI is very simple. However, if you are completely new to drag and drop on macOS/iOS, the challenge will ... <a title="Drag &#038; Drop with SwiftUI" class="read-more" href="https://swiftui-lab.com/drag-drop-with-swiftui/" aria-label="More on Drag &#038; Drop with SwiftUI">Read more</a></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/drag-drop-with-swiftui/">Drag &#038; Drop with SwiftUI</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>SwiftUI incorporates some methods and protocols to easily perform Drag and Drop operations. Until iOS 13.4, most of these methods were macOS exclusive. Fortunately, that changed with the latest iOS13.4 beta release.</p>



<p>Drag and Drop with SwiftUI is very simple. However, if you are completely new to drag and drop on macOS/iOS, the challenge will be to understand NSItemProvider. This is the class that carries the information of the dragged data, and it is a class that has been around for many years. If the examples in this post are not sufficient, surf away, and you will find that the Internet is full of resources. They may not be SwiftUI related, but the NSItemProvider part is the same.</p>



<p>Along the way we will also discuss some annoying bugs that still affect Drag and Drop with SwiftUI. We will also look into List views and some special considerations.</p>



<h3 class="wp-block-heading">The Drag</h3>



<p>A drag and drop operation, as you can imagine, consists of two parts: the drag, and the drop. For the Drag, SwiftUI has a single method called <strong>onDrag()</strong>. By adding this modifier to a view, you are doing two important things: you are telling SwiftUI that the view is draggable, and you also set the data that will be attached to the drag operation (in the form of NSItemProvider objects).</p>



<pre class="wp-block-code language-swift"><code>func onDrag(_ data: @escaping () -&gt; NSItemProvider) -&gt; some View</code></pre>



<h3 class="wp-block-heading">The Drop</h3>



<p>For the drop part, SwiftUI has a modifier called <strong>onDrop()</strong>. With this method, we tell SwiftUI if a view accepts drops, what types of items can be dropped, plus some other useful information. Depending on what you need, there are three versions of the modifier you can choose:</p>



<pre class="wp-block-code language-swift"><code>
// The simplest form, let you specify a closure to execute when a view is dropped.
func onDrop(of supportedTypes: &#091;String], isTargeted: Binding&lt;Bool&gt;?, perform action: @escaping (&#091;NSItemProvider]) -&gt; Bool) -&gt; some View

// Similar to the first version, but also provides drop location information
func onDrop(of supportedTypes: &#091;String], isTargeted: Binding&lt;Bool&gt;?, perform action: @escaping (&#091;NSItemProvider], CGPoint) -&gt; Bool) -&gt; some View

// The most versatile, will let you provide a DropDelegate to handle all the operation
func onDrop(of supportedTypes: &#091;String], delegate: DropDelegate) -&gt; some View</code></pre>



<p>In this article, we are going to use the most versatile option, the one with DropDelegate. The other two onDrop methods are pretty much straight forward. Very soon I will be releasing some examples in the <strong><a href="https://swiftui-lab.com/companion/">Companion for SwiftUI</a></strong> app, but if you understand the example below, understanding the other two are a simple trivial exercise.</p>



<p>The video below shows the example in action. As you can appreciate, there is a bug with macOS. When dragging a view, its &#8220;preview&#8221; image is corrupt or even completely missing. So far I have been unable to workaround that problem. Note that this problem does not affect iOS, where the dragged image is shown properly.</p>



<figure class="wp-block-video aligncenter"><video autoplay controls loop src="https://swiftui-lab.com/wp-content/uploads/2020/02/macOS-draganddrop.mp4"></video><figcaption>Drag &amp; Drop (macOS)</figcaption></figure>



<figure class="wp-block-video aligncenter"><video autoplay controls loop src="https://swiftui-lab.com/wp-content/uploads/2020/02/iOS-draganddrop.mp4"></video><figcaption>Drag &amp; Drop (iOS)</figcaption></figure>



<p>The code below works on macOS. But with very few minor modifications, the same code will work on iOS. The required modifications are related to the fact that macOS is using NSImage, while iOS will need UIImage.</p>



<p>Also note that there is, however, another bug. This one only affects iOS. Although DropInfo should provide the drop location in local coordinates, at the moment, it is doing it in global coordinates. Since drag and drop support on iOS has just been released (and as beta), it is to be expected&#8230; but if you want to make sure it gets sorted soon, I encourage you to file a bug report! The more, the merrier.</p>



<pre class="wp-block-code language-swift"><code>import SwiftUI

struct ContentView: View {
    let img1url = Bundle.main.url(forResource: &quot;Images/grapes&quot;, withExtension: &quot;png&quot;)
    let img2url = Bundle.main.url(forResource: &quot;Images/banana&quot;, withExtension: &quot;png&quot;)
    let img3url = Bundle.main.url(forResource: &quot;Images/peach&quot;, withExtension: &quot;png&quot;)
    let img4url = Bundle.main.url(forResource: &quot;Images/kiwi&quot;, withExtension: &quot;png&quot;)
    
    var body: some View {
        HStack {
            VStack {
                DragableImage(url: img1url!)
                
                DragableImage(url: img3url!)
            }
            
            VStack {
                DragableImage(url: img2url!)
                
                DragableImage(url: img4url!)
            }
            
            DroppableArea()
        }.padding(40)
    }
    
    struct DragableImage: View {
        let url: URL
        
        var body: some View {
            Image(nsImage: NSImage(byReferencing: url))
                .resizable()
                .frame(width: 150, height: 150)
                .clipShape(Circle())
                .overlay(Circle().stroke(Color.white, lineWidth: 2))
                .padding(2)
                .overlay(Circle().strokeBorder(Color.black.opacity(0.1)))
                .shadow(radius: 3)
                .padding(4)
                .onDrag { return NSItemProvider(object: self.url as NSURL) }
        }
    }
    
    struct DroppableArea: View {
        @State private var imageUrls: &#091;Int: URL] = &#091;:]
        @State private var active = 0
        
        var body: some View {
            let dropDelegate = MyDropDelegate(imageUrls: $imageUrls, active: $active)
            
            return VStack {
                HStack {
                    GridCell(active: self.active == 1, url: imageUrls&#091;1])
                    
                    GridCell(active: self.active == 3, url: imageUrls&#091;3])
                }
                
                HStack {
                    GridCell(active: self.active == 2, url: imageUrls&#091;2])

                    GridCell(active: self.active == 4, url: imageUrls&#091;4])
                }
                
            }
            .background(Rectangle().fill(Color.gray))
            .frame(width: 300, height: 300)
            .onDrop(of: &#091;&quot;public.file-url&quot;], delegate: dropDelegate)
            
        }
    }
    
    struct GridCell: View {
        let active: Bool
        let url: URL?
        
        var body: some View {
            let img = Image(nsImage: url != nil ? NSImage(byReferencing: url!) : NSImage())
                .resizable()
                .frame(width: 150, height: 150)
            
            return Rectangle()
                .fill(self.active ? Color.green : Color.clear)
                .frame(width: 150, height: 150)
                .overlay(img)
        }
    }
    
    struct MyDropDelegate: DropDelegate {
        @Binding var imageUrls: &#091;Int: URL]
        @Binding var active: Int
        
        func validateDrop(info: DropInfo) -&gt; Bool {
            return info.hasItemsConforming(to: &#091;&quot;public.file-url&quot;])
        }
        
        func dropEntered(info: DropInfo) {
            NSSound(named: &quot;Morse&quot;)?.play()
        }
        
        func performDrop(info: DropInfo) -&gt; Bool {
            NSSound(named: &quot;Submarine&quot;)?.play()
            
            let gridPosition = getGridPosition(location: info.location)
            self.active = gridPosition
            
            if let item = info.itemProviders(for: &#091;&quot;public.file-url&quot;]).first {
                item.loadItem(forTypeIdentifier: &quot;public.file-url&quot;, options: nil) { (urlData, error) in
                    DispatchQueue.main.async {
                        if let urlData = urlData as? Data {
                            self.imageUrls&#091;gridPosition] = NSURL(absoluteURLWithDataRepresentation: urlData, relativeTo: nil) as URL
                        }
                    }
                }
                
                return true
                
            } else {
                return false
            }

        }
        
        func dropUpdated(info: DropInfo) -&gt; DropProposal? {
            self.active = getGridPosition(location: info.location)
                        
            return nil
        }
        
        func dropExited(info: DropInfo) {
            self.active = 0
        }
        
        func getGridPosition(location: CGPoint) -&gt; Int {
            if location.x &gt; 150 &amp;&amp; location.y &gt; 150 {
                return 4
            } else if location.x &gt; 150 &amp;&amp; location.y &lt; 150 {
                return 3
            } else if location.x &lt; 150 &amp;&amp; location.y &gt; 150 {
                return 2
            } else if location.x &lt; 150 &amp;&amp; location.y &lt; 150 {
                return 1
            } else {
                return 0
            }
        }
    }
}</code></pre>



<h3 class="wp-block-heading">Making Sense of the Code</h3>



<p>First we mark our views as draggable, by calling <strong>onDrag</strong>. There, we simply sets the data that will be dragged with the view. In the example we are using a URL, but any type can be used. Some can be used directly with NSItemProvider. For other types, you may need to work a little harder. However, NSItemProvider is way out of the scope of this article. Fortunately, there&#8217;s plenty of resources already available&#8230; starting by <a rel="noreferrer noopener" aria-label="Apple's documentation (opens in a new tab)" href="https://developer.apple.com/documentation/foundation/nsitemprovider" target="_blank">Apple&#8217;s documentation</a></p>



<p>On the other side, you need to define how to handle the drop. We will do it by specifying a DropDelegate. This is a protocol that we need to implement. Although the protocol has many methods, only one is required: performDrop. The rest are optional.</p>



<p>In the example above, <strong>MyDropDelegate</strong> uses all methods in the protocol, to demonstrate how they work.</p>



<h3 class="wp-block-heading">Drag and Drop with List Views</h3>



<p class="has-text-color has-background has-vivid-cyan-blue-color has-very-light-gray-background-color">Important: As some readers pointed out, drag and drop on List views seems to work only on iPad, not iPhone.</p>



<p>We will now discuss some special considerations about Drag and Drop on List views. In the following example, we use the <strong>onDrag </strong>method on a List view. As you can see in the video, you can select multiple draggable rows.</p>



<p>You can also observe how views are draggable even outside the app. In this case we are dragging them to the Files app. Note that this behavior is not exclusive to List views.</p>



<figure class="wp-block-video aligncenter"><video autoplay controls loop src="https://swiftui-lab.com/wp-content/uploads/2020/02/dd.mp4"></video></figure>



<pre class="wp-block-code language-swift"><code>import SwiftUI

struct Fruit: Identifiable {
    let id = UUID()
    let name: String
    let image: String
}

struct ContentView: View {
    @State var selection: Set&lt;UUID&gt; = &#091;]
    
    @State private var fruitsTop = &#091;
        Fruit(name: &quot;Apple&quot;, image: &quot;apple&quot;),
        Fruit(name: &quot;Banana&quot;, image: &quot;banana&quot;),
        Fruit(name: &quot;Grapes&quot;, image: &quot;grapes&quot;),
        Fruit(name: &quot;Peach&quot;, image: &quot;peach&quot;),
        Fruit(name: &quot;Kiwi&quot;, image: &quot;kiwi&quot;),
    ]

    @State private var fruitsBottom = &#091;
        Fruit(name: &quot;Peach&quot;, image: &quot;peach&quot;),
        Fruit(name: &quot;Kiwi&quot;, image: &quot;kiwi&quot;),
    ]
    
    var body: some View {

        VStack {
            NavigationView {
                List(selection: $selection) {
                    ForEach(fruitsTop) { fruit in
                        HStack {
                            Image(fruit.image)
                                .resizable()
                                .frame(width: 30, height: 30)

                            Text(fruit.name)
                        }
                        .onDrag {
                            let provider = NSItemProvider(object: UIImage(named: fruit.image) ?? UIImage())
                            provider.suggestedName = fruit.name
                            return provider
                        }
                    }.onInsert(of: &#091;&quot;public.image&quot;]) { self.insertFruit(position: $0, itemProviders: $1, top: true) }
                }
                .navigationBarItems(trailing: EditButton())
                .navigationBarTitle(&quot;Fruits (Top)&quot;)
            }
            
            NavigationView {
                List(selection: $selection) {
                    ForEach(fruitsBottom) { fruit in
                        HStack {
                            Image(fruit.image)
                                .resizable()
                                .frame(width: 30, height: 30)

                            Text(fruit.name)
                        }
                        .onDrag {
                            let provider = NSItemProvider(object: UIImage(named: fruit.image) ?? UIImage())
                            provider.suggestedName = fruit.name
                            return provider
                        }

                    }.onInsert(of: &#091;&quot;public.image&quot;]) { self.insertFruit(position: $0, itemProviders: $1, top: false) }
                }
                .navigationBarItems(trailing: EditButton())
                .navigationBarTitle(&quot;Fruits (Bottom)&quot;)
            }
        }
    }
    
    func insertFruit(position: Int, itemProviders: &#091;NSItemProvider], top: Bool) {
        for item in itemProviders.reversed() {

            item.loadObject(ofClass: UIImage.self) { image, error in
                if let _ = image as? UIImage {

                    DispatchQueue.main.async {
                        let f = Fruit(name: item.suggestedName ?? &quot;Unknown&quot;,
                                      image: item.suggestedName?.lowercased() ?? &quot;unknown&quot;)
                        
                        if top {
                            self.fruitsTop.insert(f, at: position)
                        } else {
                            self.fruitsBottom.insert(f, at: position)
                        }
                    }
                }
            }
        }
    }
}
</code></pre>



<p>As you can observe in the video demonstration, the full row is dragged. We mentioned that <strong>onDrag</strong> only became available on iOS 13.4 beta. However, before that, we already had the <strong>itemProvider</strong> method. This method only worked with List view rows, but it is present since iOS 13.0. These two lines have the same effect:</p>



<pre class="wp-block-code language-swift"><code>      .onDrag { return NSItemProvider(object: UIImage(named: fruit.image) ?? UIImage()) }
.itemProvider { return NSItemProvider(object: UIImage(named: fruit.image) ?? UIImage()) }</code></pre>



<p>At the moment, it is unclear to me what&#8217;s the difference between these two. By experimenting, itemProvider only work with Lists, while onDrag works everywhere. These two methods are available to both macOS and iOS. However, onDrag (as already mentioned), is only available since iOS13.4 beta. Beyond that, I did not find any other differences. If you did, please drop me an email or leave a comment!</p>



<p>Also important to note is the fact that drag and drop for <strong>Lists</strong> on iOS, only seems to work with iPad, not iOS. So technically, it works with iPadOS, not iOS.</p>



<h4 class="wp-block-heading"><strong>Drag and Drop Bug with Lists</strong></h4>



<p>Unfortunately, there are some very annoying bugs. When dragging a row to an empty List, a crash occurs. Also, in some instances, drag and drop into the last position of a List may also generate a crash. Thanks to the readers that pointed that out.</p>



<h3 class="wp-block-heading">Summary</h3>



<p>In this article, we have seen how easy it is to implement drag and drop (aside from those ugly bugs). The main challenge is defining the NSItemProvider. For example, depending on your app needs, an image can be dragged as an Image, a URL, or raw data. Text can be dragged as simple text, rich text, etc. You may even need to drag your own custom type. Usually, most of the time implementing drag and drop, will be the time spent on that task, and not the UI part of the problem.</p>



<p>Here we discussed the SwiftUI methods that are specifically intended to handle drag and drop. In the very unlikely reason these methods do not serve your needs, you can always build your own drag and drop system, using Gestures. Most likely though, that would be an overkill.</p>



<p>Please feel free to comment below, and follow me on twitter if you would like to be notified when new articles come out. Until next time!</p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/drag-drop-with-swiftui/">Drag &#038; Drop with SwiftUI</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://swiftui-lab.com/drag-drop-with-swiftui/feed/</wfw:commentRss>
			<slash:comments>26</slash:comments>
		
		<enclosure url="https://swiftui-lab.com/wp-content/uploads/2020/02/macOS-draganddrop.mp4" length="950069" type="video/mp4" />
<enclosure url="https://swiftui-lab.com/wp-content/uploads/2020/02/iOS-draganddrop.mp4" length="1174171" type="video/mp4" />
<enclosure url="https://swiftui-lab.com/wp-content/uploads/2020/02/dd.mp4" length="740010" type="video/mp4" />

			</item>
		<item>
		<title>The Mystery Behind View Equality</title>
		<link>https://swiftui-lab.com/equatableview/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=equatableview</link>
					<comments>https://swiftui-lab.com/equatableview/#comments</comments>
		
		<dc:creator><![CDATA[javier]]></dc:creator>
		<pubDate>Mon, 16 Dec 2019 14:22:07 +0000</pubDate>
				<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">https://swiftui-lab.com/?p=1613</guid>

					<description><![CDATA[<p>At the time of this writing, if you looked for EquatableView on Google, you would only hear crickets. So I decided to investigate this view myself. After banging my head against the monitor, I finally realized the main reason I wasn&#8217;t getting anywhere, is the fact that there is some implicit behavior going on. In ... <a title="The Mystery Behind View Equality" class="read-more" href="https://swiftui-lab.com/equatableview/" aria-label="More on The Mystery Behind View Equality">Read more</a></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/equatableview/">The Mystery Behind View Equality</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>At the time of this writing, if you looked for <strong>EquatableView</strong> on Google, you would only hear crickets. So I decided to investigate this view myself. After banging my head against the monitor, I finally realized the main reason I wasn&#8217;t getting anywhere, is the fact that there is some implicit behavior going on.</p>



<p>In this short article, we are going to explore several aspects of View equality. We&#8217;ll see what happens when we make a view conform to Equatable, and what is the purpose of EquatableView and the .equatable() modifier. Let&#8217;s dive in.</p>



<h3 class="wp-block-heading">View Body Computation Economy</h3>



<p>You probably already noticed that SwiftUI does a very decent job trying to determine when a view body needs to be computed. It basically monitors the view properties for any change. If a change is detected, a new body is computed.</p>



<p>Most of the time, that is the right decision. However, since you are the master of your views, you probably know best. There may be some scenarios where the view state may change, but the body may not necessarily have to be recomputed. Fortunately, there is a way of preventing unnecessary body computations.</p>



<p>Consider this. Suppose you have a view that receives an integer number as a parameter. If the number is odd, the view shows the text &#8220;ODD&#8221;, if the number is even, it shows the text &#8220;EVEN&#8221;. Pretty simple, right? To spice things up, we&#8217;ll add a nice continuous rotation:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">extension Int {
    var isEven: Bool { return self % 2 == 0 }
    var isOdd: Bool { return self % 2 != 0 }
}

struct ContentView: View {
    @State private var n = 3
    
    var body: some View {
        VStack {
            NumberParity(number: n)
            
            Button(&quot;New Random Number&quot;) {
                self.n = Int.random(in: 1...1000)
            }.padding(.top, 80)
            
            Text(&quot;\(n)&quot;)
        }
    }
}

struct NumberParity: View {
    let number: Int
    @State private var flag = false
    
    var body: some View {
        let animation = Animation.linear(duration: 3.0).repeatForever(autoreverses: false)
        
        return VStack {
            if number.isOdd {
                Text(&quot;ODD&quot;)
            } else {
                Text(&quot;EVEN&quot;)
            }
        }
        .foregroundColor(.white)
        .padding(20)
        .background(RoundedRectangle(cornerRadius: 10).fill(self.number.isOdd ? Color.red : Color.green))
        .rotationEffect(self.flag ? Angle(degrees: 0) : Angle(degrees: 360))
        .onAppear { withAnimation(animation) { self.flag.toggle() } }
    }
}</code></pre>



<p>The example works fine. Every time you push the button, a new random number gets generated and the view reflects the parity of the number appropriately. I think you already know where I&#8217;m going&#8230; if the new number has the same parity as the previous number, wouldn&#8217;t it be nice if we could prevent its body computation. After all, it doesn&#8217;t affect the result. This is where making our view conform to Equatable comes into play:</p>



<h3 class="wp-block-heading">Conforming to Equatable</h3>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct NumberParity: View, Equatable {
    
    let number: Int
    @State private var flag = false
    
    var body: some View {
        let animation = Animation.linear(duration: 3.0).repeatForever(autoreverses: false)

        print(&quot;Body computed for number = \(number)&quot;)
        
        return VStack {
            if number.isOdd {
                Text(&quot;ODD&quot;)
            } else {
                Text(&quot;EVEN&quot;)
            }
        }
        .foregroundColor(.white)
        .padding(20)
        .background(RoundedRectangle(cornerRadius: 10).fill(self.number.isOdd ? Color.red : Color.green))
        .rotationEffect(self.flag ? Angle(degrees: 0) : Angle(degrees: 360))
        .onAppear { withAnimation(animation) { self.flag.toggle() } }
    }
    
    static func == (lhs: NumberParity, rhs: NumberParity) -&gt; Bool {
        return lhs.number.isOdd == rhs.number.isOdd
    }
}</code></pre>



<p>In order to conform to Equatable, we add the <code>Equatable</code> protocol name to the first line and implement the <code>static func == (lhs, rhs)</code> method. To make sure the body is only computed when there is a change in parity, we also added a &#8220;print&#8221; statement to be our witness.<code></code></p>



<p>There, we have optimized our view to compute its body only when strictly necessary. Now SwiftUI will be able to determine when exactly is the body computation needed. Everyone is happy! I could end this article right here&#8230; but I won&#8217;t&#8230; Just bear with me a little longer.</p>



<hr class="wp-block-separator"/>



<p>Now that I look at the results, I really don&#8217;t like that rotation. It is rather tasteless, so let&#8217;s get rid of it:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">struct NumberParity: View, Equatable {
    
    let number: Int
    
    var body: some View {
        print(&quot;Body computed for number = \(number)&quot;)
        
        return VStack {
            if number.isOdd {
                Text(&quot;ODD&quot;)
            } else {
                Text(&quot;EVEN&quot;)
            }
        }
        .foregroundColor(.white)
        .padding(20)
        .background(RoundedRectangle(cornerRadius: 10).fill(self.number.isOdd ? Color.red : Color.green))
    }
    
    static func == (lhs: NumberParity, rhs: NumberParity) -&gt; Bool {
        return lhs.number.isOdd == rhs.number.isOdd
    }
}</code></pre>



<p>If we run the modified version, you&#8217;ll notice that now the view is back to computing EVERY TIME! Even when the number parity does not change. The == method is never called! And why is that? Well, we&#8217;ll address that later&#8230; but in all cases, what changes the behavior, is the type of the properties in the View.</p>



<p>You see, the tasteless animation had an ulterior motive. I just put it there to trick the system into using my version of the == function. However, once I removed the animation (and its State variable), we have uncovered a conflict. So what can we do?</p>



<p>Fortunately, no matter the reason our == method is ignored, the solution is always the same. There is a way out of this mess. Let&#8217;s welcome EquatableView and .equatable()</p>



<h3 class="wp-block-heading">Using EquatableView</h3>



<p>It turns out, forcing SwiftUI to use our implementation of the == function to compare the view, is very easy, simply replace:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">NumberParity(number: n)</code></pre>



<p>with</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">EquatableView(content: NumberParity(number: n))</code></pre>



<p>Run the example again, and you will notice that now our == method is called properly and the body will be computed only when strictly necessary.</p>



<h3 class="wp-block-heading">Using .equatable()</h3>



<p>If we look at the definition of the .equatable() modifier, we&#8217;ll find it is a nice shortcut to using EquatableView directly:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">extension View {
    public func equatable() -&gt; EquatableView&lt;Self&gt; {
        return EquatableView(content: self)
    }
}</code></pre>



<p>The following two lines have the same effect, but the second option is easier to read and a few characters shorter:</p>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">EquatableView(content: NumberParity(number: n))</code></pre>



<pre class="wp-block-swiftuilab-snippet"><code class="language-swift">NumberParity(number: n).equatable()</code></pre>



<p>Of course, using EquatableView (or equatable()) requires a View that conforms to Equatable!</p>



<h3 class="wp-block-heading">When Do I Need EquatableView Then?</h3>



<p>We now know that depending on the type of properties a View has, we may need to use EquatableView, or else, our == method will be ignored. But how do we know when is that necessary?</p>



<p>To play it safe, I would say the answer is: always. That is the only way to make sure no matter what happens under the hood, we are covered. If Apple later decides to change its strategy, the only way to be sure we&#8217;ll get consistent results, is by making sure we use .equatable() on our view. Plus, it makes the code more clear in its intent, which is especially important if someone else (or your future you) comes back to maintain it later.</p>



<p>However, if you are curious what is SwiftUI&#8217;s current strategy to determine if the == is used or not, check these tweets:</p>



<figure class="wp-block-embed aligncenter is-type-rich is-provider-twitter wp-block-embed-twitter"><div class="wp-block-embed__wrapper">
<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">When it does the per-field comparison the same rules are applied recursively to each field (to choose direct comparison or == if defined). (POD = plain data, see Swift’s _isPOD() function.)</p>&mdash; John Harper (@jsh8080) <a href="https://twitter.com/jsh8080/status/1206617804113432576?ref_src=twsrc%5Etfw">December 16, 2019</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div></figure>



<p>These tweets are from John Harper, perhaps you remember him from session 237 at the WWDC. Thanks @jsh8080 for your insight!</p>



<h3 class="wp-block-heading">Summary</h3>



<p>This short article aims at explaining another undocumented bit of the SwiftUI framework. When your views start to get too complex, your application can benefit from putting this into practice. If you found this article useful, you may also like <a href="https://swiftui-lab.com/swiftui-id/">Identifying SwiftUI Views</a></p>



<p>Please feel free to comment below, and follow me on twitter if you would like to be notified when new articles come out. Until next time!</p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/equatableview/">The Mystery Behind View Equality</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://swiftui-lab.com/equatableview/feed/</wfw:commentRss>
			<slash:comments>13</slash:comments>
		
		
			</item>
		<item>
		<title>id(_): Identifying SwiftUI Views</title>
		<link>https://swiftui-lab.com/swiftui-id/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=swiftui-id</link>
					<comments>https://swiftui-lab.com/swiftui-id/#comments</comments>
		
		<dc:creator><![CDATA[javier]]></dc:creator>
		<pubDate>Wed, 04 Dec 2019 14:30:36 +0000</pubDate>
				<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">https://swiftui-lab.com/?p=1474</guid>

					<description><![CDATA[<p>In this article, we will explore how SwiftUI uses the .id() method to identify a view. This is a method that has been the source of a lot of speculation. The question we all ask ourselves is: What is it good for? Well, we&#8217;ll see that the obvious answer is not necessarily the right answer. ... <a title="id(_): Identifying SwiftUI Views" class="read-more" href="https://swiftui-lab.com/swiftui-id/" aria-label="More on id(_): Identifying SwiftUI Views">Read more</a></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/swiftui-id/">id(_): Identifying SwiftUI Views</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>In this article, we will explore how SwiftUI uses the .id() method to identify a view. This is a method that has been the source of a lot of speculation. The question we all ask ourselves is: What is it good for? Well, we&#8217;ll see that the obvious answer is not necessarily the right answer.</p>



<h3 class="wp-block-heading"><strong>What Is It Good For?</strong></h3>



<p>The name suggests the id() method is used to identify a view. Although not exactly false, there&#8217;s plenty to be said about that statement.</p>



<p>I&#8217;ll start by saying it took me a long time to decide to write about this method. Mostly, because until now, I couldn&#8217;t let go of the idea of what I thought the method should do.</p>



<p>The official <a rel="noreferrer noopener" aria-label="Apple documentation (opens in a new tab)" href="https://developer.apple.com/documentation/swiftui/view/3352741-id" target="_blank">Apple documentation</a> has a single sentence to describe the .id() method:</p>



<blockquote class="wp-block-quote"><p>Generates a uniquely identified view that can be inserted or removed.</p></blockquote>



<p>Many of us thought. Ok, that&#8217;s wonderful. By assigning an id to a view, I can identify it and move it around as I please, making it jump from one container to another, or whatever I want. Well. Not so fast. If you try to do that, you&#8217;ll see that the id() modifier doesn&#8217;t seem to do anything. It&#8217;s just a waste of screen space.</p>



<p>So what&#8217;s the big reveal? Well, I&#8217;ll dare to say that the <strong>id of a view, identifies a view, but only partially</strong>. There are other internal considerations made by the framework, to determine if two views are the same. So if that is the case, then for the umpteenth time: what is .id() good for? </p>



<p>What I found, is that although we cannot use the id to determine if a view continues to be the same view as before, we can use it for the opposite. That is, we use id() to tell SwiftUI that a view is NO LONGER the same view it was.</p>



<p>But enough talking, let&#8217;s see some examples in action.</p>



<p><strong><em>2020 Update: Apple slightly modified the documentation to make it less confusing, but it still remains a little vague.</em></strong></p>



<h3 class="wp-block-heading"><strong>Resetting State Values</strong></h3>



<p>In our first example, we are going to use the id() method, to trigger a reset of all the State values of a view. By changing the id value, all the State properties will revert back to their initial values:</p>



<figure class="wp-block-video aligncenter"><video autoplay controls loop src="https://swiftui-lab.com/wp-content/uploads/2019/12/idArticle.mp4"></video></figure>



<pre class="wp-block-code language-swift"><code>struct ContentView: View {
    @State private var theId = 0
    
    var body: some View {
        VStack {
            ExampleView().id(theId)
            
            Button(&quot;Reset&quot;) { self.theId += 1 }
        }
    }
}

struct ExampleView: View {
    @State private var firstname = &quot;&quot;
    @State private var lastname = &quot;&quot;
    @State private var email = &quot;&quot;
    @State private var website = &quot;&quot;

    var body: some View {
        Form {
            TextField(&quot;Enter firstname&quot;, text: self.$firstname)
            TextField(&quot;Enter lastname&quot;, text: self.$lastname)
            TextField(&quot;Enter email address&quot;, text: self.$email)
            TextField(&quot;Enter website address&quot;, text: self.$website)
        }
    }
}
</code></pre>



<p>Technically speaking, we are not really resetting the State values. We are replacing the view with a new one, and because it is new, the State properties all have their initial values.</p>



<p>The fact that the view is completely replaced will become more evident with the following example.</p>



<h3 class="wp-block-heading"><strong>Triggering Transitions</strong></h3>



<p>Now we are going to change the id of a view, to see how it triggers a transition to remove the old view, and another transition to insert the new one:</p>



<figure class="wp-block-video aligncenter"><video autoplay controls loop src="https://swiftui-lab.com/wp-content/uploads/2019/12/idArticle2.mp4"></video></figure>



<pre class="wp-block-code language-swift"><code>struct ContentView: View {
    @State private var theId = 0
    
    var body: some View {
        VStack(spacing: 20) {
            MyCircle()
                .transition(AnyTransition.opacity.combined(with: .slide))
                .id(theId)
            
            Text(&quot;id = \(theId)    &quot;)

            Button(&quot;Increment Id&quot;) {
                withAnimation(.easeIn(duration: 2.0)) {
                    self.theId += 1
                }
            }
        }
    }
    
    struct MyCircle: View {
        private let color: Color = &#091;.red, .green, .blue, .purple, .orange, .pink, .yellow].randomElement()!
        
        var body: some View {
            return Circle()
                .foregroundColor(color)
                .frame(width: 180, height: 180)
        }
    }
}</code></pre>



<h3 class="wp-block-heading"><strong>Improving the List View Performance</strong></h3>



<p>You probably noticed that when Lists start to have a few hundred rows, performance can become an issue if the backing array is modified. This is because, in its quest for being so &#8220;automatic&#8221;, SwiftUI tries to diff the before and after rows, detect the changes, and animate the modified rows into their new locations. This is a wonderful feature, but it can play against us when dealing with large data sets.</p>



<p>Some of those problems can be solved with the .id() method. By assigning an id to the List view, we can make sure we update that id whenever we update the array. This prevents SwiftUI from diffing the before and after, and instead, it creates a brand new List. With only 500 rows, the difference is already very noticeable:</p>



<figure class="wp-block-video aligncenter"><video autoplay controls loop src="https://swiftui-lab.com/wp-content/uploads/2019/12/list-performance.mp4"></video></figure>



<p>Shuffle the array without using .id():</p>



<pre class="wp-block-code language-swift"><code>extension String {
    static func random(length: Int = 20) -&gt; String {
        String((0..&lt;length).map { _ in &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&quot;.randomElement()! })
    }
}

struct ContentView: View {
    @State private var array = (0..&lt;500).map { _ in String.random() }
    
    var body: some View {
        VStack {
            List(array, id: \.self) { item in
                Text(&quot;\(item)&quot;)
            }

            Button(&quot;Shuffle&quot;) {
                self.array.shuffle()
            }
        }
    }
}</code></pre>



<p>Shuffle the array using .id():</p>



<pre class="wp-block-code language-swift"><code>extension String {
    static func random(length: Int = 20) -&gt; String {
        String((0..&lt;length).map { _ in &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&quot;.randomElement()! })
    }
}

struct ContentView: View {
    @State private var theId = 0
    @State private var array = (0..&lt;500).map { _ in String.random() }
    
    var body: some View {
        VStack {
            List(array, id: \.self) { item in
                Text(&quot;\(item)&quot;)
            }.id(theId)

            Button(&quot;Shuffle&quot;) {
                self.array.shuffle()
                self.theId += 1
            }
        }
    }
}</code></pre>



<p>This trick may help us deal with long lists, but there are a couple of downsides, which depending on your actual needs, may become a show stopper, or not. You decide:</p>



<ul><li>Changes to row locations will not be animated.</li><li>The scroll position will reset to the top.</li></ul>



<p>These limitations are understandable, considering what we are doing. Unfortunately, since List does not provide (for the moment) a way to scroll to position, this may be a problem for certain use cases.</p>



<h3 class="wp-block-heading"><strong>Summary</strong></h3>



<p>While .id() may not be all that we would expect, it still provides some useful applications. Using it to solve the performance problems in the List view can be a lifesaver, that is if you can spare the scroll limitation. In a way, it reminds me of the .reloadData() method of the UITableView. Please feel free to comment below, and follow me on twitter, if you would like to be notified when new articles come out. Until next time!</p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/swiftui-id/">id(_): Identifying SwiftUI Views</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://swiftui-lab.com/swiftui-id/feed/</wfw:commentRss>
			<slash:comments>12</slash:comments>
		
		<enclosure url="https://swiftui-lab.com/wp-content/uploads/2019/12/idArticle.mp4" length="106677" type="video/mp4" />
<enclosure url="https://swiftui-lab.com/wp-content/uploads/2019/12/idArticle2.mp4" length="304100" type="video/mp4" />
<enclosure url="https://swiftui-lab.com/wp-content/uploads/2019/12/list-performance.mp4" length="493530" type="video/mp4" />

			</item>
		<item>
		<title>Safely Updating The View State</title>
		<link>https://swiftui-lab.com/state-changes/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=state-changes</link>
					<comments>https://swiftui-lab.com/state-changes/#comments</comments>
		
		<dc:creator><![CDATA[javier]]></dc:creator>
		<pubDate>Thu, 21 Nov 2019 14:35:17 +0000</pubDate>
				<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">https://swiftui-lab.com/?p=1405</guid>

					<description><![CDATA[<p>If you&#8217;ve been using SwiftUI for a while now, you probably hit the problem where you find yourself trying to update the state of a view from inside its body. Usually, Xcode complains during runtime. When it does, you are forced to put your update inside a DispatchQueue closure (not feeling too good about yourself) ... <a title="Safely Updating The View State" class="read-more" href="https://swiftui-lab.com/state-changes/" aria-label="More on Safely Updating The View State">Read more</a></p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/state-changes/">Safely Updating The View State</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>If you&#8217;ve been using SwiftUI for a while now, you probably hit the problem where you find yourself trying to update the state of a view from inside its body. Usually, Xcode complains during runtime. When it does, you are forced to put your update inside a DispatchQueue closure (not feeling too good about yourself) but you carry on anyway. Does this sound familiar? In this article, we&#8217;ll discuss why it sometimes is perfectly fine to apply that technique, but some other times, it&#8217;s a no-no (leading to CPU spikes or app crashes).</p>



<p>We will also discuss a technique (a hack would be a more appropriate word), to avoid crashes when accessing environment objects that have not been set up in the hierarchy.</p>



<p>Gist File: <a href="https://gist.github.com/swiftui-lab/ddbb145fb7397aa8923a4604e91f9b3f" target="_blank" rel="noreferrer noopener" aria-label=" (opens in a new tab)">https://gist.github.com/swiftui-lab/ddbb145fb7397aa8923a4604e91f9b3f</a></p>



<h3 class="wp-block-heading">What Is The View State?</h3>



<p>Definitions may vary slightly, but for the sake of this article, this is my definition:<em><strong> The state of a view, is the set of values of all the @State properties of a view at a given time.</strong></em></p>



<p>With that in mind, what does it mean when Xcode rewards us with the following runtime message:</p>



<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img loading="lazy" decoding="async" src="https://swiftui-lab.com/wp-content/uploads/2019/11/state-error-1024x41.png" alt="Modifying state during view update, this will cause undefined behavior." class="wp-image-1412" width="723" height="29" srcset="https://swiftui-lab.com/wp-content/uploads/2019/11/state-error-1024x41.png 1024w, https://swiftui-lab.com/wp-content/uploads/2019/11/state-error-300x12.png 300w, https://swiftui-lab.com/wp-content/uploads/2019/11/state-error-768x30.png 768w, https://swiftui-lab.com/wp-content/uploads/2019/11/state-error-1536x61.png 1536w, https://swiftui-lab.com/wp-content/uploads/2019/11/state-error-2048x81.png 2048w" sizes="(max-width: 723px) 100vw, 723px" /></figure></div>



<p>This message is telling you that SwiftUI can&#8217;t handle the view state being modified while the body of the view is being computed. What will SwiftUI do in such a case? Well, as the message says: it&#8217;s undefined! Or in other words, it will not do what you might expect. If you haven&#8217;t seen this message before, don&#8217;t worry, there&#8217;s an example a few lines below.</p>


<p>I&#8217;m sure you already figured out that if you update the state inside <code>DispatchQueue.main.async { }</code>, the message disappears and things start to work (for the most part). However, you cannot seem to shake the feeling that it is a bit hacky and there should be a better way.</p>


<p>In some cases, there may be alternatives. If they do exist, you should probably go with them. But in some other scenarios, this may be your only answer and there is nothing wrong with it. That is, as far as you know what you are doing. So let&#8217;s see if we can understand what is actually going on when we apply this technique.</p>



<h3 class="wp-block-heading">Updating the State View</h3>



<p>When SwiftUI is computing the body of a view, the state should remain unchanged. But you may say, wait a minute! I change state values inside the view body all the time. Look at this, I&#8217;m toggling a boolean!</p>



<pre class="wp-block-code language-swift"><code>struct MyView: View {
    @State private var flag = false
    
    var body: some View {
        Button(&quot;Toggle Flag&quot;) {
            self.flag.toggle()
        }
    }
}</code></pre>



<p>But now I say to you&#8230; look at it closer. Are you really? The change to the state value is inside a closure. So although the state change is defined inside the view body, it is not actually executed while the body is computed, but when the button is pressed. So you are completely safe there and Xcode will not complain.</p>



<p>Some other places where you can update the view state without getting the runtime error are: onAppear, onDisappear,  onPreferenceChange, onEnded, etc.</p>



<p>Now look at this short example:</p>



<pre class="wp-block-code language-swift"><code>struct OutOfControlView: View {
    @State private var counter = 0
    
    var body: some View {

        self.counter += 1
        
        return Text(&quot;Computed Times\n\(counter)&quot;).multilineTextAlignment(.center)
    }
}</code></pre>



<p>At first glance, it seems the counter variable is updated once every time the body of the view is computed. But if you try to execute this code, you will get the runtime message: <strong>&#8220;Modifying state during view update, this will cause undefined behavior&#8221;</strong>. So we quickly update the code and change it to:</p>



<pre class="wp-block-code language-swift"><code>DispatchQueue.main.async {
    self.counter += 1
}</code></pre>



<p>Now, if you execute the example, you&#8217;ll see that the message goes away, but instead, the CPU goes haywire and the counter increases non-stop. Let&#8217;s add a fancy CPU gauge to better illustrate. Full code is available in the gist file referenced at the top.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="330" height="316" src="https://swiftui-lab.com/wp-content/uploads/2019/11/cpu.gif" alt="cpu" class="wp-image-1446"/></figure></div>



<pre class="wp-block-code language-swift"><code>struct ContentView: View {
    @State private var showOutOfControlView = false
    
    var body: some View {
        VStack(spacing: 10) {
            CPUWheel().frame(height: 150)

            VStack {
                if showOutOfControlView { OutOfControlView() }
            }.frame(height: 80)

            Button(self.showOutOfControlView ? &quot;Hide&quot;: &quot;Show&quot;) {
                self.showOutOfControlView.toggle()
            }
        }
    }
}

struct OutOfControlView: View {
    @State private var counter = 0
    
    var body: some View {

        DispatchQueue.main.async {
            self.counter += 1
        }
        
        return Text(&quot;Computed Times\n\(counter)&quot;).multilineTextAlignment(.center)
    }
}</code></pre>



<p>So what is exactly going on? When we update the state inside an async closure,  we are saying: Finish computing the view body, and then, update the state. However, since a state change will trigger a view invalidation, the view body will get computed again, a new state change will be scheduled and this story will never end.</p>



<p>Now that we understand what is going on behind the scenes. When is it safe to update the state asynchronously? We&#8217;ll deal with that next.</p>



<h3 class="wp-block-heading">Breaking The Loop</h3>



<p>In the following example, we have a geometry effect that rotates an image. Depending on the animation progress, it updates the state of the view to reflect the cardinal direction the arrow is pointing at. In this case, we are updating the view state through a binding, but the effect is the same. We need to delay the update until the body has been computed. We do so, using the DispatchQueue.main.async trick. If you want to learn more about geometry effect, check my other article: <a href="https://swiftui-lab.com/swiftui-animations-part2/" target="_blank" rel="noreferrer noopener" aria-label="Advanced SwiftUI Animations (opens in a new tab)">Advanced SwiftUI Animations</a>.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="330" height="451" src="https://swiftui-lab.com/wp-content/uploads/2019/11/cardinal-direction.gif" alt="Cardinal Direction" class="wp-image-1448"/></figure></div>



<pre class="wp-block-code language-swift"><code>struct ExampleView2: View {
    @State private var flag = false
    @State private var cardinalDirection = &quot;&quot;
    
    var body: some View {
        return VStack(spacing: 30) {
            CPUWheel().frame(height: 150)
            
            Text(&quot;\(cardinalDirection)&quot;).font(.largeTitle)
            Image(systemName: &quot;location.north&quot;)
                .resizable()
                .frame(width: 100, height: 100)
                .foregroundColor(.red)
                .modifier(RotateNeedle(cardinalDirection: self.$cardinalDirection, angle: self.flag ? 0 : 360))
            
            
            Button(&quot;Animate&quot;) {
                withAnimation(.easeInOut(duration: 3.0)) {
                    self.flag.toggle()
                }
            }
        }
    }
}

struct RotateNeedle: GeometryEffect {
    @Binding var cardinalDirection: String
    
    var angle: Double
    
    var animatableData: Double {
        get { angle }
        set { angle = newValue }
    }
    
    func effectValue(size: CGSize) -&gt; ProjectionTransform {
        DispatchQueue.main.async {
            self.cardinalDirection = self.angleToString(self.angle)
        }
        
        let rotation = CGAffineTransform(rotationAngle: CGFloat(angle * (Double.pi / 180.0)))
        let offset1 = CGAffineTransform(translationX: size.width/2.0, y: size.height/2.0)
        let offset2 = CGAffineTransform(translationX: -size.width/2.0, y: -size.height/2.0)
        return ProjectionTransform(offset2.concatenating(rotation).concatenating(offset1))
    }
    
    func angleToString(_ a: Double) -&gt; String {
        switch a {
        case 315..&lt;405:
            fallthrough
        case 0..&lt;45:
            return &quot;North&quot;
        case 45..&lt;135:
            return &quot;East&quot;
        case 135..&lt;225:
            return &quot;South&quot;
        default:
            return &quot;West&quot;
        }
    }
}</code></pre>



<p>As you can see, the CPU load remains unchanged during the animation. Why is that? To understand it better, we will add a couple of print statements:</p>



<pre class="wp-block-code language-swift"><code>struct ExampleView2: View {
    @State private var flag = false
    @State private var cardinalDirection = &quot;&quot;
    
    var body: some View {
        print(&quot;body called: cardinalDirection = \(cardinalDirection)&quot;)
        
        return VStack(spacing: 30) { ... }
     }
}</code></pre>



<p>and</p>



<pre class="wp-block-code language-swift"><code>DispatchQueue.main.async {
    self.cardinalDirection = self.angleToString(self.angle)
    print(&quot;effectValue called: cardinalDirection = \(self.cardinalDirection)&quot;)
}</code></pre>



<p>If we look at the output during the animation, we will see this:</p>



<pre class="wp-block-code"><code>effectValue called: cardinalDirection = North
body called: cardinalDirection = North
effectValue called: cardinalDirection = North
effectValue called: cardinalDirection = North (repeated 46 times)
effectValue called: cardinalDirection = West
body called: cardinalDirection = West
effectValue called: cardinalDirection = West
effectValue called: cardinalDirection = West (repeated 46 times)
effectValue called: cardinalDirection = South
body called: cardinalDirection = South
effectValue called: cardinalDirection = South
effectValue called: cardinalDirection = South (repeated 46 times)
effectValue called: cardinalDirection = East
body called: cardinalDirection = East
effectValue called: cardinalDirection = East
effectValue called: cardinalDirection = East (repeated 46 times)
effectValue called: cardinalDirection = North
body called: cardinalDirection = North
effectValue called: cardinalDirection = North
effectValue called: cardinalDirection = North (repeated 46 times)
</code></pre>



<p>As you can see, SwiftUI is wise enough to know the body does not need to be re-computed every time, only when the state really changed. That means that unless you set a different value in the state, the view will not get invalidated. In the case above: only when the cardinal direction is different it will request a new body.</p>



<p>That is why the CPU does not go crazy. By assigning the same value it had before, we are breaking the never-ending loop we saw in the previous example.</p>



<h3 class="wp-block-heading">Unexpected Loops</h3>



<p>So far, things are pretty clear. However, there might be some scenarios, where you may be stuck into a never-ending loop without suspecting it. Consider this code:</p>



<pre class="wp-block-code language-swift"><code>struct ContentView: View {
    @State private var width: CGFloat = 0.0
    
    var body: some View {
        Text(&quot;Width = \(width)&quot;)
            .font(.largeTitle)
            .background(WidthGetter(width: self.$width))
    }
    
    struct WidthGetter: View {
        @Binding var width: CGFloat
        
        var body: some View {
            GeometryReader { proxy -&gt; AnyView in
                DispatchQueue.main.async {
                    self.width = proxy.frame(in: .local).width
                }
                return AnyView(Color.clear)
            }
        }
    }
}</code></pre>



<p>It seems the code should just output a text string with the width of the text. By now you will probably realize quickly that this may (or may not happen) as we expect. Depending on the font you chose, the width will never stabilize. For example, with the default font, not all numbers have the same width, potentially leading to a never-ending loop.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="368" height="87" src="https://swiftui-lab.com/wp-content/uploads/2019/11/never-ending-width.gif" alt="" class="wp-image-1436"/></figure></div>



<p>However, if we change the font to a fixed size font:</p>



<pre class="wp-block-code language-swift"><code>.font(.custom(&quot;Menlo&quot;, size: 32))</code></pre>



<p> The view will reach a point where the loop ends. With the Menlo font, all numbers have the same size, so no matter the value, the text view width will remain stable.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="368" height="87" src="https://swiftui-lab.com/wp-content/uploads/2019/11/menlo-width.png" alt="" class="wp-image-1437" srcset="https://swiftui-lab.com/wp-content/uploads/2019/11/menlo-width.png 368w, https://swiftui-lab.com/wp-content/uploads/2019/11/menlo-width-300x71.png 300w" sizes="(max-width: 368px) 100vw, 368px" /></figure></div>



<p>This is a small example that demonstrates how careful you must be when updating the view state using an async closure. Especially delicate are those updates that affect layout. And even if everything seems to work fine, remember that people have the bad habit of rotating their devices! Something working fine when in portrait may go haywire when rotated to landscape and vice-versa.</p>



<h3 class="wp-block-heading">One More Thing</h3>



<p>Since we are dealing with making our apps more stable and robust, I&#8217;d like to mention the crash that occurs when an <strong>EnvironmentObject</strong> is used inside a view, but none has been set higher in the hierarchy. I&#8217;m sure you know what I am talking about, but just in case, here&#8217;s an example that will make the app crash:</p>



<pre class="wp-block-code language-swift"><code>class MyObservable: ObservableObject {
    @Published var someValue = &quot;Here&#039;s a value!&quot;
}

struct ContentView: View {
    var body: some View {
        MyView()
    }
}

struct MyView: View {
    @EnvironmentObject var model: MyObservable

    var body: some View {        
        return Text(model.someValue)
    }
}</code></pre>



<p>The app will terminate with the following error:</p>



<pre class="wp-block-code"><code>Fatal error: No ObservableObject of type MyObservable found.
A View.environmentObject(_:) for MyObservable may be missing as an ancestor of this view.</code></pre>



<p>The reason, as I&#8217;m sure you already know, is that we did not set a value with the .environmentObject(). When the View tries to use it, the crash occurs (not earlier).</p>



<p>As far as I know, there is no method to check for the existence of a value, before we try to reference it. However, it would be nice if there was. We could make the view have some &#8220;default&#8221; look, depending on whether there is a value or not. As things stand, if that is what you need, it may be better to create a custom EnvironmentKey.</p>



<p>Having said all that, I did promise a hack at the introduction of this article, didn&#8217;t I? The hack uses reflection and it is implemented as a View extension. <strong><em>I must say though, that I only use this when prototyping or testing things out. Not in production code. The internal _store property in ObservableObject may change at any time, and your production code would break!</em></strong></p>



<pre class="wp-block-code language-swift"><code>extension EnvironmentObject {
    var safeToUse: Bool {
        return (Mirror(reflecting: self).children.first(where: { $0.label == &quot;_store&quot; })?.value as? ObjectType) != nil
    }
}</code></pre>



<p>What we are doing in the extension, is using reflection to determine if the ObservableObject has an actual object backing it. This is how you would use the extension (don&#8217;t forget the leading underscore, as in _model)</p>



<pre class="wp-block-code language-swift"><code>class MyObservable: ObservableObject {
    @Published var someValue = &quot;Here&#039;s a value!&quot;
}

struct ExampleView3: View {
    var body: some View {
        VStack(spacing: 20) {
            MyView()
            
            MyView()
                .environmentObject(MyObservable())
        }
    }
}

struct MyView: View {
    @EnvironmentObject var model: MyObservable

    var body: some View {

        let txt = _model.safeToUse ? model.someValue : &quot;No Value&quot;
        
        return Text(txt)
    }
}</code></pre>



<h3 class="wp-block-heading">In Summary</h3>



<p>I hope this article helps you write more robust SwiftUI code. The techniques of scheduling the altering of the View state for later may be very helpful, but caution should be exercised always. Feel free to leave your comment below and if you would like to be notified when new articles come out, follow me on twitter! Until next time.</p>
<p>The post <a rel="nofollow" href="https://swiftui-lab.com/state-changes/">Safely Updating The View State</a> appeared first on <a rel="nofollow" href="https://swiftui-lab.com">The SwiftUI Lab</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://swiftui-lab.com/state-changes/feed/</wfw:commentRss>
			<slash:comments>7</slash:comments>
		
		
			</item>
	</channel>
</rss>
